{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n/*\n * cluster_bus_defines.sv\n * Davide Rossi <davide.rossi@unibo.it>\n * Antonio Pullini <pullinia@iis.ee.ethz.ch>\n * Igor Loi <igor.loi@unibo.it>\n * Francesco Conti <fconti@iis.ee.ethz.ch>\n * Pasquale Davide Schiavone <pschiavo@iss.ee.ethz.ch>\n */\n\n// CLUSTER BUS PARAMETRES\n\n`define NB_SLAVE  4\n`define NB_MASTER 3\n\n`define NB_REGION 1\n\n// MSTER PORT TO TCDM\n`define MASTER_0_START_ADDR 32'h1000_0000\n`define MASTER_0_END_ADDR   32'h101F_FFFF\n\n// MASTER PORT TO PERIPHERAL INTERCONNECT\n`define MASTER_1_START_ADDR 32'h1020_0000\n`define MASTER_1_END_ADDR   32'h103F_FFFF\n\n// MASTER PORT TO SOC (SOC PERIPHERALS + L2)\n`define MASTER_2_START_ADDR 32'h1A00_0000\n`define MASTER_2_END_ADDR   32'h1FFF_FFFF\n\n`define TCDM_ASSIGN_MASTER(lhs, rhs)       \\\n    assign lhs.req       = rhs.req;       \\\n    assign lhs.add       = rhs.add;       \\\n    assign lhs.wen       = rhs.wen;       \\\n    assign lhs.wdata     = rhs.wdata;     \\\n    assign lhs.be        = rhs.be;        \\\n                                          \\\n    assign rhs.gnt       = lhs.gnt;       \\\n    assign rhs.r_valid   = lhs.r_valid;   \\\n    assign rhs.r_opc     = lhs.r_opc;     \\\n    assign rhs.r_rdata   = lhs.r_rdata;\n\n`define TCDM_ASSIGN_SLAVE(lhs, rhs)  `TCDM_ASSIGN_MASTER(rhs, lhs)\n"}
{"text": "  \n// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n/*\n * cluster_domain.sv\n * Davide Rossi <davide.rossi@unibo.it>\n * Antonio Pullini <pullinia@iis.ee.ethz.ch>\n * Igor Loi <igor.loi@unibo.it>\n * Francesco Conti <fconti@iis.ee.ethz.ch>\n * Pasquale Davide Schiavone <pschiavo@iss.ee.ethz.ch>\n */\n\n`include \"pulp_soc_defines.sv\"\n`include \"cluster_bus_defines.sv\"\n\n\nmodule cluster_domain\n#(\n    //CLUSTER PARAMETERS\n    parameter CORE_TYPE_CL          = 0, // 0 for RISCY, 1 for IBEX RV32IMC (formerly ZERORISCY), 2 for IBEX RV32EC (formerly MICRORISCY)\n    parameter USE_HWPE_CL           = 1,\n    parameter NB_CORES              = `NB_CORES,\n    parameter NB_HWPE_PORTS         = 9,\n    parameter NB_DMAS               = 4,\n\n    parameter TCDM_SIZE             = 64*1024,                // in Byte, POWER of 2\n    parameter NB_TCDM_BANKS         = 16,                      // POWER of 2\n    parameter TCDM_BANK_SIZE        = TCDM_SIZE/NB_TCDM_BANKS, // eg 4096\n    parameter TCDM_NUM_ROWS         = TCDM_BANK_SIZE/4,        // --> 4 byte, mem are 32 bit wide\n    parameter L2_SIZE               = 512*1024,\n\n    //ICACHE PARAMETERS\n    parameter SET_ASSOCIATIVE       = 4,\n`ifdef MP_ICACHE\n    parameter NB_CACHE_BANKS        = 2,\n`endif\n\n`ifdef SP_ICACHE\n    parameter NB_CACHE_BANKS        = 8,\n`endif\n\n`ifdef PRIVATE_ICACHE\n    parameter NB_CACHE_BANKS        = `NB_CORES,\n`endif\n\n    parameter CACHE_LINE            = 1,\n    parameter CACHE_SIZE            = 4096,\n    parameter ICACHE_DATA_WIDTH     = 128,\n    parameter L0_BUFFER_FEATURE     = \"DISABLED\",\n    parameter MULTICAST_FEATURE     = \"DISABLED\",\n    parameter SHARED_ICACHE         = \"ENABLED\",\n    parameter DIRECT_MAPPED_FEATURE = \"DISABLED\",\n    \n    //CORE PARAMETERS\n    parameter ROM_BOOT_ADDR         = 32'h1A000000,\n    parameter BOOT_ADDR             = 32'h1C000000,\n    parameter INSTR_RDATA_WIDTH     = 32,\n\n    parameter CLUST_FPU               = `CLUST_FPU,\n    parameter CLUST_FP_DIVSQRT        = `CLUST_FP_DIVSQRT,\n    parameter CLUST_SHARED_FP         = `CLUST_SHARED_FP,\n    parameter CLUST_SHARED_FP_DIVSQRT = `CLUST_SHARED_FP_DIVSQRT,\n\n    // AXI PARAMETERS\n    parameter AXI_ADDR_WIDTH        = 32,\n    parameter AXI_DATA_S2C_WIDTH    = 32,\n    parameter AXI_DATA_C2S_WIDTH    = 64,\n    parameter AXI_USER_WIDTH        = 6,\n    parameter AXI_ID_IN_WIDTH       = 4,\n    parameter AXI_ID_OUT_WIDTH      = 6,\n    parameter AXI_STRB_S2C_WIDTH    = AXI_DATA_S2C_WIDTH/8,\n    parameter AXI_STRB_C2S_WIDTH    = AXI_DATA_C2S_WIDTH/8,\n    parameter DC_SLICE_BUFFER_WIDTH = 8,\n    parameter LOG_DEPTH             = 3,\n    // AXI CLUSTER TO SOC PARAMETERS\n    parameter C2S_AW_WIDTH          = 1, \n    parameter C2S_W_WIDTH           = 1,\n    parameter C2S_B_WIDTH           = 1,\n    parameter C2S_AR_WIDTH          = 1,\n    parameter C2S_R_WIDTH           = 1,\n    // AXI SOC TO CLUSTER PARAMETERS\n    parameter S2C_AW_WIDTH          = 1, \n    parameter S2C_W_WIDTH           = 1,\n    parameter S2C_B_WIDTH           = 1,\n    parameter S2C_AR_WIDTH          = 1,\n    parameter S2C_R_WIDTH           = 1,\n    //CLUSTER MAIN PARAMETERS\n    parameter DATA_WIDTH            = 32,\n    parameter ADDR_WIDTH            = 32,\n    parameter BE_WIDTH              = DATA_WIDTH/8,\n\n    //TCDM PARAMETERS\n    parameter TEST_SET_BIT          = 20, // bits used to indicate a test and set opration during a load in TCDM\n    parameter ADDR_MEM_WIDTH        = $clog2(TCDM_BANK_SIZE/4), // Memory datawidth is 4 byte (32bit) --> bits used to address a single bank in SRAM TCDM\n\n    //MCHAN PARAMETERS\n    parameter TCDM_ADD_WIDTH        = ADDR_MEM_WIDTH + $clog2(NB_TCDM_BANKS) + 2, // Total bit used to address the whole TCDM ( 2^17 = 128K, TCDM SIZE = 64Kof SRAM + 8K of SCM, ADDR WIDTH = 17 bits )\n\n    //PERIPH PARAMETERS\n    parameter LOG_CLUSTER           = 5,  // NOT USED RIGTH NOW\n    parameter PE_ROUTING_LSB        = 10, //LSB used as routing BIT in periph interco\n    //parameter PE_ROUTING_MSB        = 13, //MSB used as routing BIT in periph interco\n\n    parameter EVNT_WIDTH            = 8, //size of the event bus\n`ifdef PULP_HSA\n    parameter CLUSTER_ALIAS_BASE    = 12'h1B0\n`else\n    parameter CLUSTER_ALIAS_BASE    = 12'h000\n`endif\n)\n(\n  \n   input logic                                       clk_i,\n   input logic                                       rst_ni,\n   input logic                                       ref_clk_i,\n    \n\n   input logic                                       dma_pe_evt_ack_i,\n   output logic                                      dma_pe_evt_valid_o,\n\n   input logic                                       dma_pe_irq_ack_i,\n   output logic                                      dma_pe_irq_valid_o,\n\n   input logic [NB_CORES-1:0]                        dbg_irq_valid_i,\n   \n   input logic                                       pf_evt_ack_i,\n   output logic                                      pf_evt_valid_o,\n   \n   output logic                                      busy_o,\n\n   input logic [LOG_DEPTH:0]                         async_cluster_events_wptr_i,\n   output logic [LOG_DEPTH:0]                        async_cluster_events_rptr_o,\n   input logic [EVNT_WIDTH-1:0][2**LOG_DEPTH-1:0]    async_cluster_events_data_i,\n \n   // AXI4 SLAVE\n   //***************************************\n   // WRITE ADDRESS CHANNEL\n   input logic [LOG_DEPTH:0]                         async_data_slave_aw_wptr_i,\n   input logic [2**LOG_DEPTH-1:0][S2C_AW_WIDTH-1:0]  async_data_slave_aw_data_i, \n   output logic [LOG_DEPTH:0]                        async_data_slave_aw_rptr_o,\n                                           \n  // READ ADDRESS CHANNEL                  \n   input logic [LOG_DEPTH:0]                         async_data_slave_ar_wptr_i,\n   input logic [2**LOG_DEPTH-1:0][S2C_AR_WIDTH-1:0]  async_data_slave_ar_data_i,\n   output logic [LOG_DEPTH:0]                        async_data_slave_ar_rptr_o,\n                                           \n  // WRITE DATA CHANNEL                    \n   input logic [LOG_DEPTH:0]                         async_data_slave_w_wptr_i,\n   input logic [2**LOG_DEPTH-1:0][S2C_W_WIDTH-1:0]   async_data_slave_w_data_i,\n   output logic [LOG_DEPTH:0]                        async_data_slave_w_rptr_o,\n                                                   \n  // READ DATA CHANNEL                             \n   output logic [LOG_DEPTH:0]                        async_data_slave_r_wptr_o,\n   output logic [2**LOG_DEPTH-1:0][S2C_R_WIDTH-1:0]  async_data_slave_r_data_o,\n   input logic [LOG_DEPTH:0]                         async_data_slave_r_rptr_i,\n                                                   \n  // WRITE RESPONSE CHANNEL                        \n   output logic [LOG_DEPTH:0]                        async_data_slave_b_wptr_o,\n   output logic [2**LOG_DEPTH-1:0][S2C_B_WIDTH-1:0]  async_data_slave_b_data_o,\n   input logic [LOG_DEPTH:0]                         async_data_slave_b_rptr_i,\n  \n  // AXI4 MASTER\n  //***************************************\n  // WRITE ADDRESS CHANNEL\n   output logic [LOG_DEPTH:0]                        async_data_master_aw_wptr_o,\n   output logic [2**LOG_DEPTH-1:0][C2S_AW_WIDTH-1:0] async_data_master_aw_data_o, \n   input logic [LOG_DEPTH:0]                         async_data_master_aw_rptr_i,\n                                           \n  // READ ADDRESS CHANNEL                  \n   output logic [LOG_DEPTH:0]                        async_data_master_ar_wptr_o,\n   output logic [2**LOG_DEPTH-1:0][C2S_AR_WIDTH-1:0] async_data_master_ar_data_o,\n   input logic [LOG_DEPTH:0]                         async_data_master_ar_rptr_i,\n                                           \n  // WRITE DATA CHANNEL                    \n   output logic [LOG_DEPTH:0]                        async_data_master_w_wptr_o,\n   output logic [2**LOG_DEPTH-1:0][C2S_W_WIDTH-1:0]  async_data_master_w_data_o,\n   input logic [LOG_DEPTH:0]                         async_data_master_w_rptr_i,\n                                                   \n  // READ DATA CHANNEL                             \n   input logic [LOG_DEPTH:0]                         async_data_master_r_wptr_i,\n   input logic [2**LOG_DEPTH-1:0][C2S_R_WIDTH-1:0]   async_data_master_r_data_i,\n   output logic [LOG_DEPTH:0]                        async_data_master_r_rptr_o,\n                                                   \n  // WRITE RESPONSE CHANNEL                        \n   input logic [LOG_DEPTH:0]                         async_data_master_b_wptr_i,\n   input logic [2**LOG_DEPTH-1:0][C2S_B_WIDTH-1:0]   async_data_master_b_data_i,\n   output logic [LOG_DEPTH:0]                        async_data_master_b_rptr_o\n                                                     \n                                                     `ifdef PULP_FPGA_EMUL\n                                                     `ifdef TRACE_EXECUTION\n                                                     ,\n   output logic [NB_CORES*64-1:0]                    instr_trace_cycles_o,\n   output logic [NB_CORES*32-1:0]                    instr_trace_instr_o,\n   output logic [NB_CORES*32-1:0]                    instr_trace_pc_o,\n   output logic [NB_CORES-1:0]                       instr_trace_valid_o\n                                                     `endif\n                                                     `endif\n   \n   );\n   \n    pulp_cluster\n`ifndef USE_CLUSTER_NETLIST\n    #(\n        .CORE_TYPE_CL                 ( CORE_TYPE_CL                 ),\n        .NB_CORES                     ( NB_CORES                     ),\n        .NB_HWPE_PORTS                ( NB_HWPE_PORTS                ),\n        .NB_DMAS                      ( NB_DMAS                      ),\n        .TCDM_SIZE                    ( TCDM_SIZE                    ),\n        .NB_TCDM_BANKS                ( NB_TCDM_BANKS                ),\n        .TCDM_BANK_SIZE               ( TCDM_BANK_SIZE               ),\n        .TCDM_NUM_ROWS                ( TCDM_NUM_ROWS                ),\n        .HWPE_PRESENT                 ( USE_HWPE_CL                  ),\n        .SET_ASSOCIATIVE              ( SET_ASSOCIATIVE              ),\n        .NB_CACHE_BANKS               ( NB_CACHE_BANKS               ),\n        .CACHE_LINE                   ( CACHE_LINE                   ),\n        .CACHE_SIZE                   ( CACHE_SIZE                   ),\n        .ICACHE_DATA_WIDTH            ( ICACHE_DATA_WIDTH            ),\n        .L0_BUFFER_FEATURE            ( L0_BUFFER_FEATURE            ),\n        .MULTICAST_FEATURE            ( MULTICAST_FEATURE            ),\n        .SHARED_ICACHE                ( SHARED_ICACHE                ),\n        .DIRECT_MAPPED_FEATURE        ( DIRECT_MAPPED_FEATURE        ),\n        .L2_SIZE                      ( L2_SIZE                      ),\n        .ROM_BOOT_ADDR                ( ROM_BOOT_ADDR                ),\n        .BOOT_ADDR                    ( BOOT_ADDR                    ),\n        .INSTR_RDATA_WIDTH            ( INSTR_RDATA_WIDTH            ),\n        .CLUST_FPU                    ( CLUST_FPU                    ),\n        .CLUST_FP_DIVSQRT             ( CLUST_FP_DIVSQRT             ),\n        .CLUST_SHARED_FP              ( CLUST_SHARED_FP              ),\n        .CLUST_SHARED_FP_DIVSQRT      ( CLUST_SHARED_FP_DIVSQRT      ),\n        .AXI_ADDR_WIDTH               ( AXI_ADDR_WIDTH               ),\n        .AXI_DATA_C2S_WIDTH           ( AXI_DATA_C2S_WIDTH           ),\n        .AXI_DATA_S2C_WIDTH           ( AXI_DATA_S2C_WIDTH           ),\n        .AXI_USER_WIDTH               ( AXI_USER_WIDTH               ),\n        .AXI_ID_IN_WIDTH              ( AXI_ID_IN_WIDTH              ),\n        .AXI_ID_OUT_WIDTH             ( AXI_ID_OUT_WIDTH             ),\n        .AXI_STRB_C2S_WIDTH           ( AXI_STRB_C2S_WIDTH           ),\n        .AXI_STRB_S2C_WIDTH           ( AXI_STRB_S2C_WIDTH           ),\n        .DC_SLICE_BUFFER_WIDTH        ( DC_SLICE_BUFFER_WIDTH        ),\n        .LOG_DEPTH                    ( LOG_DEPTH                    ),\n        .C2S_AW_WIDTH                 ( C2S_AW_WIDTH                 ),\n        .C2S_W_WIDTH                  ( C2S_W_WIDTH                  ),\n        .C2S_B_WIDTH                  ( C2S_B_WIDTH                  ),\n        .C2S_R_WIDTH                  ( C2S_R_WIDTH                  ),\n        .C2S_AR_WIDTH                 ( C2S_AR_WIDTH                 ),\n        .S2C_AW_WIDTH                 ( S2C_AW_WIDTH                 ),\n        .S2C_W_WIDTH                  ( S2C_W_WIDTH                  ),\n        .S2C_B_WIDTH                  ( S2C_B_WIDTH                  ),\n        .S2C_R_WIDTH                  ( S2C_R_WIDTH                  ),\n        .S2C_AR_WIDTH                 ( S2C_AR_WIDTH                 ),\n        .DATA_WIDTH                   ( DATA_WIDTH                   ),\n        .ADDR_WIDTH                   ( ADDR_WIDTH                   ),\n        .BE_WIDTH                     ( BE_WIDTH                     ),\n        .TEST_SET_BIT                 ( TEST_SET_BIT                 ),\n        .ADDR_MEM_WIDTH               ( ADDR_MEM_WIDTH               ),\n        .TCDM_ADD_WIDTH               ( TCDM_ADD_WIDTH               ),\n        .LOG_CLUSTER                  ( LOG_CLUSTER                  ),\n        .PE_ROUTING_LSB               ( PE_ROUTING_LSB               ),\n        .EVNT_WIDTH                   ( EVNT_WIDTH                   ),\n        .CLUSTER_ALIAS_BASE           ( CLUSTER_ALIAS_BASE           )\n    )\n`endif    \n    cluster_i\n    (\n        .clk_i                        ( clk_i                        ),\n        .rst_ni                       ( rst_ni                       ),\n        .ref_clk_i                    ( ref_clk_i                    ),\n\n        .pmu_mem_pwdn_i               ( 1'b0                         ),\n        \n        .base_addr_i                  ( '0                           ),\n        \n        .dma_pe_evt_ack_i             ( dma_pe_evt_ack_i             ),\n        .dma_pe_evt_valid_o           ( dma_pe_evt_valid_o           ),\n        .dma_pe_irq_ack_i             ( dma_pe_irq_ack_i             ),\n        .dma_pe_irq_valid_o           ( dma_pe_irq_valid_o           ),\n        .dbg_irq_valid_i              (  dbg_irq_valid_i             ),\n        .pf_evt_ack_i                 ( pf_evt_ack_i                 ),\n        .pf_evt_valid_o               ( pf_evt_valid_o               ),\n        .en_sa_boot_i                 ( 1'b0                         ),\n        .test_mode_i                  ( 1'b0                         ),\n        .fetch_en_i                   ( 1'b0                         ),\n        .eoc_o                        (                              ),\n        .busy_o                       ( busy_o                       ),\n        .cluster_id_i                 ( 6'b000000                    ),\n\n        .async_cluster_events_wptr_i  ( async_cluster_events_wptr_i  ),\n        .async_cluster_events_rptr_o  ( async_cluster_events_rptr_o  ),\n        .async_cluster_events_data_i  ( async_cluster_events_data_i  ),\n\n        .async_data_master_aw_wptr_o  ( async_data_master_aw_wptr_o  ),\n        .async_data_master_aw_rptr_i  ( async_data_master_aw_rptr_i  ),\n        .async_data_master_aw_data_o  ( async_data_master_aw_data_o  ),\n        .async_data_master_ar_wptr_o  ( async_data_master_ar_wptr_o  ),\n        .async_data_master_ar_rptr_i  ( async_data_master_ar_rptr_i  ),\n        .async_data_master_ar_data_o  ( async_data_master_ar_data_o  ),\n        .async_data_master_w_data_o   ( async_data_master_w_data_o   ),\n        .async_data_master_w_wptr_o   ( async_data_master_w_wptr_o   ),\n        .async_data_master_w_rptr_i   ( async_data_master_w_rptr_i   ),\n        .async_data_master_r_wptr_i   ( async_data_master_r_wptr_i   ),\n        .async_data_master_r_rptr_o   ( async_data_master_r_rptr_o   ),\n        .async_data_master_r_data_i   ( async_data_master_r_data_i   ),\n        .async_data_master_b_wptr_i   ( async_data_master_b_wptr_i   ),\n        .async_data_master_b_rptr_o   ( async_data_master_b_rptr_o   ),\n        .async_data_master_b_data_i   ( async_data_master_b_data_i   ),\n\n        .async_data_slave_aw_wptr_i   ( async_data_slave_aw_wptr_i  ),\n        .async_data_slave_aw_rptr_o   ( async_data_slave_aw_rptr_o  ),\n        .async_data_slave_aw_data_i   ( async_data_slave_aw_data_i  ),\n        .async_data_slave_ar_wptr_i   ( async_data_slave_ar_wptr_i  ),\n        .async_data_slave_ar_rptr_o   ( async_data_slave_ar_rptr_o  ),\n        .async_data_slave_ar_data_i   ( async_data_slave_ar_data_i  ),\n        .async_data_slave_w_data_i    ( async_data_slave_w_data_i   ),\n        .async_data_slave_w_wptr_i    ( async_data_slave_w_wptr_i   ),\n        .async_data_slave_w_rptr_o    ( async_data_slave_w_rptr_o   ),\n        .async_data_slave_r_wptr_o    ( async_data_slave_r_wptr_o   ),\n        .async_data_slave_r_rptr_i    ( async_data_slave_r_rptr_i   ),\n        .async_data_slave_r_data_o    ( async_data_slave_r_data_o   ),\n        .async_data_slave_b_wptr_o    ( async_data_slave_b_wptr_o   ),\n        .async_data_slave_b_rptr_i    ( async_data_slave_b_rptr_i   ),\n        .async_data_slave_b_data_o    ( async_data_slave_b_data_o   )\n   );\n\nendmodule\n"}
{"text": "// Copyright 2016 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n/*\n * debug_bus_defines.sv\n * Davide Rossi <davide.rossi@unibo.it>\n * Antonio Pullini <pullinia@iis.ee.ethz.ch>\n * Igor Loi <igor.loi@unibo.it>\n * Francesco Conti <fconti@iis.ee.ethz.ch>\n * Pasquale Davide Schiavone <pschiavo@iss.ee.ethz.ch>\n */\n\n`ifndef DEBUG_BUS_SV\n`define DEBUG_BUS_SV\n\ninterface DEBUG_BUS\n#(\n    parameter ADDR_WIDTH = 15\n);\n\n  logic                  req;\n  logic                  gnt;\n  logic                  rvalid;\n  logic [ADDR_WIDTH-1:0] addr;\n  logic                  we;\n  logic [31: 0]          wdata;\n  logic [31: 0]          rdata;\n\n\n  // Master Side\n  //***************************************\n  modport Master\n  (\n    output      req,  addr,   we, wdata,\n    input       gnt,  rvalid,     rdata\n  );\n\n  // Slave Side\n  //***************************************\n  modport Slave\n  (\n    input       req,  addr,   we, wdata,\n    output      gnt,  rvalid,     rdata\n  );\n\nendinterface\n\n`endif\n"}
{"text": "//-----------------------------------------------------------------------------\n// Title         : FPGA Bootrom for PULP\n//-----------------------------------------------------------------------------\n// File          : fpga_bootrom.sv\n// Author        : Jie Chen  <owenchj@gmail.com>\n// Created       : 23.10.2019\n//-----------------------------------------------------------------------------\n// Description :\n// Real boot with jtag reaction.\n//-----------------------------------------------------------------------------\n// Copyright (C) 2013-2019 ETH Zurich, University of Bologna\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License. You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n//-----------------------------------------------------------------------------\n\n\nmodule fpga_bootrom\n  #(\n    parameter ADDR_WIDTH=32,\n    parameter DATA_WIDTH=32\n    )\n   (\n    input logic                   CLK,\n    input logic                   RSTN,\n    input logic                   CEN,\n    input logic [ADDR_WIDTH-1:0]  A,\n    output logic [DATA_WIDTH-1:0] Q\n    );\n\n   logic [3:0]                    wea;\n   logic [31:0]                   dina;\n\n   assign wea  = 4'b0000;\n   assign dina = 32'h0000_0000;\n\n   xilinx_rom_bank_2048x32 rom_mem_i (\n                                      .clka  (CLK),\n                                      .rsta  (~RSTN),\n                                      .ena   (~CEN),\n                                      .wea   (wea),\n                                      .addra (A),\n                                      .dina  (dina),\n                                      .douta (Q)\n                                      );\n\nendmodule : fpga_bootrom\n"}
{"text": "//-----------------------------------------------------------------------------\n// Title : FPGA CLK Gen for PULPissimo\n// -----------------------------------------------------------------------------\n// File : fpga_clk_gen.sv Author : Manuel Eggimann <meggimann@iis.ee.ethz.ch>\n// Created : 17.05.2019\n// -----------------------------------------------------------------------------\n// Description : Instantiates Xilinx clocking wizard IP to generate 2 output\n// clocks. Currently, the clock is not dynamicly reconfigurable and all\n// configuration requests are acknowledged without any effect.\n// -----------------------------------------------------------------------------\n// Copyright (C) 2013-2019 ETH Zurich, University of Bologna Copyright and\n// related rights are licensed under the Solderpad Hardware License, Version\n// 0.51 (the \"License\"); you may not use this file except in compliance with the\n// License. You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law or\n// agreed to in writing, software, hardware and materials distributed under this\n// License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS\n// OF ANY KIND, either express or implied. See the License for the specific\n// language governing permissions and limitations under the License.\n// -----------------------------------------------------------------------------\n\n\nmodule fpga_clk_gen (\n                     input logic         ref_clk_i,\n                     input logic         rstn_glob_i,\n                     input logic         test_mode_i,\n                     input logic         shift_enable_i,\n                     output logic        soc_clk_o,\n                     output logic        per_clk_o,\n                     output logic        cluster_clk_o,\n                     output logic        soc_cfg_lock_o,\n                     input logic         soc_cfg_req_i,\n                     output logic        soc_cfg_ack_o,\n                     input logic [1:0]   soc_cfg_add_i,\n                     input logic [31:0]  soc_cfg_data_i,\n                     output logic [31:0] soc_cfg_r_data_o,\n                     input logic         soc_cfg_wrn_i,\n                     output logic        per_cfg_lock_o,\n                     input logic         per_cfg_req_i,\n                     output logic        per_cfg_ack_o,\n                     input logic [1:0]   per_cfg_add_i,\n                     input logic [31:0]  per_cfg_data_i,\n                     output logic [31:0] per_cfg_r_data_o,\n                     input logic         per_cfg_wrn_i,\n                     output logic        cluster_cfg_lock_o,\n                     input logic         cluster_cfg_req_i,\n                     output logic        cluster_cfg_ack_o,\n                     input logic [1:0]   cluster_cfg_add_i,\n                     input logic [31:0]  cluster_cfg_data_i,\n                     output logic [31:0] cluster_cfg_r_data_o,\n                     input logic         cluster_cfg_wrn_i\n                     );\n\n  logic                                  s_locked;\n  logic                                  s_clk;\n\n  xilinx_clk_mngr i_clk_manager\n    (\n     .resetn(rstn_glob_i),\n     .clk_in1(ref_clk_i),\n     .clk_out1(s_clk),\n     .clk_out2(per_clk_o),\n     //.clk_out3(cluster_clk_o),\n     .locked(s_locked)\n     );\n\n  assign soc_clk_o     = s_clk;\n  assign cluster_clk_o = s_clk;\n  \n  assign soc_cfg_lock_o      = s_locked;\n  assign per_cfg_lock_o      = s_locked;\n  assign cluster_cfg_lock_o  = s_locked;\n   \n\n  assign soc_cfg_ack_o     = 1'b1; //Always acknowledge without doing anything for now\n  assign per_cfg_ack_o     = 1'b1;\n  assign cluster_cfg_ack_o = 1'b1;\n   \n\n  assign soc_cfg_r_data_o     = 32'hdeadda7a;\n  assign per_cfg_r_data_o     = 32'hdeadda7a;\n  assign cluster_cfg_r_data_o = 32'hdeadda7a;\n   \n\nendmodule : fpga_clk_gen\n"}
{"text": "//-----------------------------------------------------------------------------\n// Title : FPGA Interleaved RAM Bank for PULPissimo\n// -----------------------------------------------------------------------------\n// File : fpga_interleaved_ram.sv Author : Manuel Eggimann\n// <meggimann@iis.ee.ethz.ch> Created : 20.05.2019\n// -----------------------------------------------------------------------------\n// Description : Instantiated block ram generator IP to replace the SRAM banks\n// in the interleaved region of L2. Since Xilinx LogicoreIP are not customizable\n// via parameters, the bank size selected in l2_ram_multibank must match the one\n// used in the TCL script for IP generation.\n// -----------------------------------------------------------------------------\n// Copyright (C) 2013-2019 ETH Zurich, University of Bologna Copyright and\n// related rights are licensed under the Solderpad Hardware License, Version\n// 0.51 (the \"License\"); you may not use this file except in compliance with the\n// License. You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law or\n// agreed to in writing, software, hardware and materials distributed under this\n// License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS\n// OF ANY KIND, either express or implied. See the License for the specific\n// language governing permissions and limitations under the License.\n// -----------------------------------------------------------------------------\n\nmodule fpga_interleaved_ram\n  #(\n    parameter ADDR_WIDTH=12\n    ) (\n       input logic                  clk_i,\n       input logic                  rst_ni,\n       input logic                  csn_i,\n       input logic                  wen_i,\n       input logic [3:0]            be_i,\n       input logic [ADDR_WIDTH-1:0] addr_i,\n       input logic [31:0]           wdata_i,\n       output logic [31:0]          rdata_o\n   );\n\n  logic [3:0]                       wea;\n\n  always_comb begin\n    if (wen_i == 1'b0) begin\n      wea = be_i;\n    end else begin\n      wea = '0;\n    end\n  end\n\n  xilinx_interleaved_ram i_xilinx_interleaved_ram\n    (\n     .clka(clk_i),\n     .ena(~csn_i),\n     .wea(wea),\n     .addra(addr_i),\n     .dina(wdata_i),\n     .douta(rdata_o)\n     );\n\nendmodule : fpga_interleaved_ram\n"}
{"text": "//-----------------------------------------------------------------------------\n// Title : FPGA Private RAM Bank for PULPissimo\n// -----------------------------------------------------------------------------\n// File : fpga_private_ram.sv Author : Manuel Eggimann\n// <meggimann@iis.ee.ethz.ch> Created : 20.05.2019\n// -----------------------------------------------------------------------------\n// Description : Instantiated block ram generator IP to replace the SRAM banks\n// in the private region of L2. Since Xilinx LogicoreIP are not customizable\n// via parameters, the bank size selected in l2_ram_multibank must match the one\n// used in the TCL script for IP generation.\n// -----------------------------------------------------------------------------\n// Copyright (C) 2013-2019 ETH Zurich, University of Bologna Copyright and\n// related rights are licensed under the Solderpad Hardware License, Version\n// 0.51 (the \"License\"); you may not use this file except in compliance with the\n// License. You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law or\n// agreed to in writing, software, hardware and materials distributed under this\n// License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS\n// OF ANY KIND, either express or implied. See the License for the specific\n// language governing permissions and limitations under the License.\n// -----------------------------------------------------------------------------\n\nmodule fpga_private_ram\n  #(\n    parameter ADDR_WIDTH=12\n    ) (\n       input logic                  clk_i,\n       input logic                  rst_ni,\n       input logic                  csn_i,\n       input logic                  wen_i,\n       input logic [3:0]            be_i,\n       input logic [ADDR_WIDTH-1:0] addr_i,\n       input logic [31:0]           wdata_i,\n       output logic [31:0]          rdata_o\n   );\n\n  logic [3:0]                       wea;\n\n  always_comb begin\n    if (wen_i == 1'b0) begin\n      wea = be_i;\n    end else begin\n      wea = '0;\n    end\n  end\n\n  xilinx_private_ram i_xilinx_private_ram\n    (\n     .clka(clk_i),\n     .ena(~csn_i),\n     .wea(wea),\n     .addra(addr_i),\n     .dina(wdata_i),\n     .douta(rdata_o)\n     );\n\nendmodule : fpga_private_ram\n"}
{"text": "//-----------------------------------------------------------------------------\n// Title         : FPGA slow clk generator for PULPissimo\n//-----------------------------------------------------------------------------\n// File          : fpga_slow_clk_gen.sv\n// Author        : Manuel Eggimann  <meggimann@iis.ee.ethz.ch>\n// Created       : 20.05.2019\n//-----------------------------------------------------------------------------\n// Description : Instantiates Xilinx Clocking Wizard IP to generate the slow_clk\n// signal since for certain boards the available clock sources are to fast to\n// use directly.\n//-----------------------------------------------------------------------------\n// Copyright (C) 2013-2019 ETH Zurich, University of Bologna\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License. You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n//-----------------------------------------------------------------------------\n\n\nmodule fpga_slow_clk_gen\n  #(\n    parameter CLK_DIV_VALUE = 256 //The xilinx_slow_clk_mngr is supposed to\n                                  //generate an 8.3886MHz clock. We need to divide it\n                                  //by 256 to arrive to a 32.768kHz clock\n    )\n  (input logic ref_clk_i,\n   input logic rst_ni,\n   output logic slow_clk_o\n   );\n\n\n\n  localparam COUNTER_WIDTH = $clog2(CLK_DIV_VALUE);\n\n\n  //Create clock divider using BUFGCE cells as the PLL/MMCM cannot generate clocks\n  //slower than 4.69 MHz and we need 32.768kHz\n\n  logic [COUNTER_WIDTH-1:0] clk_counter_d, clk_counter_q;\n  logic                     clock_gate_en;\n\n  logic                     intermmediate_clock;\n\n  xilinx_slow_clk_mngr i_slow_clk_mngr\n    (\n     .resetn(rst_ni),\n     .clk_in1(ref_clk_i),\n     .clk_out1(intermmediate_clock)\n     );\n\n\n\n  always_comb begin\n    if (clk_counter_q == CLK_DIV_VALUE-1) begin\n      clk_counter_d = '0;\n      clock_gate_en = 1'b1;\n    end else begin\n      clk_counter_d = clk_counter_q + 1;\n      clock_gate_en = 1'b0;\n    end\n  end\n\n  always_ff @(posedge intermmediate_clock, negedge rst_ni) begin\n    if (!rst_ni) begin\n      clk_counter_q <= '0;\n    end else begin\n      clk_counter_q <= clk_counter_d;\n    end\n  end\n\n  BUFGCE i_clock_gate\n    (\n      .I(intermmediate_clock),\n      .CE(clock_gate_en),\n      .O(slow_clk_o)\n     );\n\nendmodule : fpga_slow_clk_gen\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n////////////////////////////////////////////////////////////////////////////////\n// FPU SUPPORT                                                                //\n//----------------------------------------------------------------------------//\n// select at most one of the following 3 options                              //\n// choose between None, Private FPUs, Shared FPUs and Shared LNU              //\n////////////////////////////////////////////////////////////////////////////////\n\n//`define PRIVATE_FPU   // private FPU per core\n//`define SHARED_LNU   // implements 1-NB_LNUS shared logarithmic number unit\n//`define SHARED_FPU // implements 1-NB_FPUS shared floating point units\n\n`define NB_LNUS 1 // valid options: 1\n`define NB_FPUS 2 // valid options: 1,2,4 (to be verified)\n\n\n////////////////////////////////////////////////////////////////////////////////\n// The following paramters are not to be modified                             //\n// (unless your name is Michael Gautschi)                                     //\n////////////////////////////////////////////////////////////////////////////////\n`ifdef SHARED_FPU\n `define FP_SUPPORT\n `define APU\n `define FPU\n`endif\n`ifdef SHARED_LNU\n `define FP_SUPPORT\n `define LNU\n `define APU\n// `define LNU_LATENCY_ONE\n `define LNU_LATENCY 3\n `define LNU_FBIT_WIDTH 23\n`endif\n`ifdef PRIVATE_FPU\n `define FP_SUPPORT\n `define FPU\n`endif\n\n////////////////////////////////////////////////////////////////////////////////\n// Shared APU support                                                         //\n// Defines Bitwidths, and Interfaces between arbiter, APU and Core            //\n////////////////////////////////////////////////////////////////////////////////\n\n// FLAGS\n`ifdef APU\n `ifdef LNU\n  `define NUSFLAGS 3\n  `define NDSFLAGS 0\n  `define WOP 3\n `endif\n `ifdef FPU\n  `define NUSFLAGS 9\n  `define NDSFLAGS 2\n  `define WOP 4\n `endif\n`else\n `ifdef FPU\n  `define NUSFLAGS 9\n  `define NDSFLAGS 2\n  `define WOP 4\n `else\n  `define NUSFLAGS -1\n  `define NDSFLAGS -1\n  `define WOP -1\n `endif\n`endif\n\n`define WARG 32\n`define WRESULT 32\n\n\n`ifndef CORE_REGION\n\n `define NCPUS `NB_CORES\n\n `ifdef APU\n  `ifdef FPU\n   `define NAPUS `NB_FPUS\n  `endif\n  `ifdef LNU\n   `define NAPUS `NB_LNUS\n  `endif\n `else\n  `define NAPUS -1\n `endif\n\n `define WREGADDR 5\n `define LQUEUE 1\n\n\n `define WCPUTAG 5\n `define WAPUTAG (`WCPUTAG+$clog2(`NCPUS))\n\n `ifdef APU\n/// Interface an APU (Auxiliary Processing Unit) is expected to implement in\n/// order to be attached to the interconnect and sharing mechanism. See the file\n/// apu_template.sv for an example as how to create a module that implements the\n/// interface.\ninterface marx_apu_if;\n\n\t // Downstream\n\t logic valid_ds_s;\n\t logic ready_ds_s;\n\n\t logic [`WARG-1:0] arga_ds_d;\n\t logic [`WARG-1:0] argb_ds_d;\n\t logic [`WOP-1:0]  op_ds_d;\n\t logic [`NDSFLAGS-1:0] flags_ds_d;\n\t logic [`WAPUTAG-1:0]  tag_ds_d;\n\n\t // Upstream\n\t logic                 req_us_s;\n\t logic                 ack_us_s;\n\n\t logic [`WRESULT-1:0]  result_us_d;\n\t logic [`NUSFLAGS-1:0] flags_us_d;\n\t logic [`WAPUTAG-1:0]  tag_us_d;\n\n\t // The interface from the APU's perspective.\n\t modport apu (\n\t\t            input  valid_ds_s, arga_ds_d, argb_ds_d, op_ds_d, flags_ds_d, tag_ds_d, ack_us_s,\n\t\t            output ready_ds_s, req_us_s, result_us_d, flags_us_d, tag_us_d\n\t              );\n\n\t // The interface from interconnect's perspective.\n\t modport marx (\n\t\t             output valid_ds_s, arga_ds_d, argb_ds_d, op_ds_d, flags_ds_d, tag_ds_d, ack_us_s,\n\t\t             input  ready_ds_s, req_us_s, result_us_d, flags_us_d, tag_us_d\n\t               );\n\nendinterface // marx_apu_if\n\n// Interface between arbiter and fp-interconnect\ninterface marx_arbiter_if #(\n\t\t                        parameter NIN = -1, // number of request inputs\n\t\t                        parameter NOUT = -1, // number of allocatable resources\n\t\t                        parameter NIN2 = $clog2(NIN)\n\t                          );\n\n\t // Allocation request handshake.\n\t logic [NIN-1:0]      req_d;\n\t logic [NIN-1:0]      ack_d;\n\n\t // Index of the resource allocated.\n\t logic                unsigned [NOUT-1:0] [NIN2-1:0] assid_d;\n\n\t // Resource handshake.\n\t logic [NOUT-1:0]     avail_d; // resource is ready to be allocated\n\t logic [NOUT-1:0]     alloc_d; // resource was allocated\n\n\t modport arbiter (\n\t\t                input  req_d, avail_d,\n\t\t                output ack_d, assid_d, alloc_d\n\t                  );\n\n\t modport marx (\n\t\t             output req_d, avail_d,\n\t\t             input  ack_d, assid_d, alloc_d\n\t               );\n\nendinterface // marx_arbiter_if\n\n/// The interface between the Marx interconnect and the cores. The interconnect\n/// shall instantiate the \"marx\" modport.\ninterface cpu_marx_if;\n\n\t // Downstream\n\t logic                req_ds_s;\n\t logic                ack_ds_s;\n\n\t logic [`WARG-1:0]    arga_ds_d;\n\t logic [`WARG-1:0]    argb_ds_d;\n\t logic [`WOP-1:0]     op_ds_d;\n\t logic [`NDSFLAGS-1:0] flags_ds_d;\n\t logic [`WCPUTAG-1:0]  tag_ds_d;\n\n\t // Upstream\n\t logic                 valid_us_s;\n\t logic                 ready_us_s;\n\n\t logic [`WRESULT-1:0]  result_us_d;\n\t logic [`NUSFLAGS-1:0] flags_us_d;\n\t logic [`WCPUTAG-1:0]  tag_us_d;\n\n\t // The interface from the Core's perspective.\n\t modport cpu (\n\t\t            output req_ds_s, arga_ds_d, argb_ds_d, op_ds_d, flags_ds_d, ready_us_s, tag_ds_d,\n\t\t            input  ack_ds_s, valid_us_s, result_us_d, flags_us_d, tag_us_d\n\t              );\n\n\t // The interface from the interconnect's perspective.\n\t modport marx (\n\t\t             input  req_ds_s, arga_ds_d, argb_ds_d, op_ds_d, ready_us_s, tag_ds_d, flags_ds_d,\n\t\t             output ack_ds_s, valid_us_s, result_us_d, flags_us_d, tag_us_d\n\t               );\n\nendinterface\n `endif\n`endif\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n/*\n * instr_bus_defines.sv\n * Davide Rossi <davide.rossi@unibo.it>\n * Antonio Pullini <pullinia@iis.ee.ethz.ch>\n * Igor Loi <igor.loi@unibo.it>\n * Francesco Conti <fconti@iis.ee.ethz.ch>\n * Pasquale Davide Schiavone <pschiavo@iss.ee.ethz.ch>\n */\n\n// INSTRUCTION BUS PARAMETRES\n\n// L2\n`define NB_REGION 2\n\n`define MASTER_0_REGION_0_START_ADDR 32'h1A00_0000\n`define MASTER_0_REGION_0_END_ADDR   32'h1DFF_FFFF\n`define MASTER_0_REGION_1_START_ADDR 32'h1C00_0000\n`define MASTER_0_REGION_1_END_ADDR   32'h1FFF_FFFF\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n\nmodule jtag_tap_top\n(\n    input  logic              tck_i,\n    input  logic              trst_ni,\n    input  logic              tms_i,\n    input  logic              td_i,\n    output logic              td_o,\n\n    input  logic              test_clk_i,\n    input  logic              test_rstn_i,\n\n    input  logic        [7:0] soc_jtag_reg_i,\n    output logic        [7:0] soc_jtag_reg_o,\n    output logic              sel_fll_clk_o,\n\n   // tap\n   output logic               jtag_shift_dr_o,\n   output logic               jtag_update_dr_o,\n   output logic               jtag_capture_dr_o,\n   output logic               axireg_sel_o,\n\n   output logic               dbg_axi_scan_in_o,\n   input  logic               dbg_axi_scan_out_i\n);\n\n    logic                       s_scan_i;\n    logic [8:0]                 s_confreg;\n    logic                       confscan;\n    logic                       confreg_sel;\n    logic                       td_o_int;\n\n    logic [7:0] r_soc_reg0;\n    logic [7:0] r_soc_reg1;\n\n    logic [7:0] s_soc_jtag_reg_sync;\n\n\n\n    // jtag tap controller\n    tap_top tap_top_i\n    (\n        .tms_i             ( tms_i              ),\n        .tck_i             ( tck_i              ),\n        .rst_ni            ( trst_ni            ),\n        .td_i              ( td_i               ),\n        .td_o              ( td_o               ),\n\n        .shift_dr_o        ( jtag_shift_dr_o    ),\n        .update_dr_o       ( jtag_update_dr_o   ),\n        .capture_dr_o      ( jtag_capture_dr_o  ),\n\n        .memory_sel_o      ( axireg_sel_o       ),\n        .fifo_sel_o        (                    ),\n        .confreg_sel_o     ( confreg_sel        ),\n        .clk_byp_sel_o     (),\n        .observ_sel_o      (),\n\n        .scan_in_o         ( s_scan_i           ),\n\n        .memory_out_i      ( dbg_axi_scan_out_i ),\n        .fifo_out_i        ( 1'b0               ),\n        .confreg_out_i     ( confscan           ),\n        .clk_byp_out_i     (),\n        .observ_out_i      ()\n    );\n\n    // pulp configuration register\n    jtagreg\n    #(\n        .JTAGREGSIZE(9),\n        .SYNC(0)\n    )\n    confreg\n    (\n        .clk_i                  ( tck_i               ),\n        .rst_ni                 ( trst_ni             ),\n        .enable_i               ( confreg_sel         ),\n        .capture_dr_i           ( jtag_capture_dr_o   ),\n        .shift_dr_i             ( jtag_shift_dr_o     ),\n        .update_dr_i            ( jtag_update_dr_o    ),\n        .jtagreg_in_i           ( {1'b0, s_soc_jtag_reg_sync} ), //at sys rst enable the fll\n        .mode_i                 ( 1'b1                ),\n        .scan_in_i              ( s_scan_i            ),\n        .jtagreg_out_o          ( s_confreg           ),\n        .scan_out_o             ( confscan            )\n    );\n\n    always_ff @(posedge tck_i or negedge trst_ni) begin\n      if(~trst_ni) begin\n        r_soc_reg0 <= 0;\n        r_soc_reg1 <= 0;\n      end else begin\n        r_soc_reg1 <= soc_jtag_reg_i;\n        r_soc_reg0 <= r_soc_reg1;\n      end\n    end\n\n   assign s_soc_jtag_reg_sync =r_soc_reg0;\n\n   assign dbg_axi_scan_in_o           =  s_scan_i;\n\n   assign soc_jtag_reg_o              =  s_confreg[7:0];\n\n   assign sel_fll_clk_o               =  s_confreg[8];\n\nendmodule\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n`define SPI_STD_TX  2'b00\n`define SPI_STD_RX  2'b01\n`define SPI_QUAD_TX 2'b10\n`define SPI_QUAD_RX 2'b11\n\nmodule pad_control #(\n    parameter int unsigned N_UART = 1,\n    parameter int unsigned N_SPI = 1,\n    parameter int unsigned N_I2C = 2\n) (\n\n        //********************************************************************//\n        //*** PERIPHERALS SIGNALS ********************************************//\n        //********************************************************************//\n\n        // PAD CONTROL REGISTER\n        // input  logic [63:0][1:0] pad_mux_i        ,\n        input  logic [63:0][5:0] pad_cfg_i        ,\n        output logic [72:0][5:0] pad_cfg_o        , //39+2+32\n\n        input  logic             sdio_clk_i       ,\n        input  logic             sdio_cmd_i       ,\n        output logic             sdio_cmd_o       ,\n        input  logic             sdio_cmd_oen_i   ,\n        input  logic [3:0]       sdio_data_i      ,\n        output logic [3:0]       sdio_data_o      ,\n        input  logic [3:0]       sdio_data_oen_i  ,\n\n        // GPIOS\n        input  logic [31:0]      gpio_out_i       ,\n        output logic [31:0]      gpio_in_o        ,\n        input  logic [31:0]      gpio_dir_i       ,\n        input  logic [31:0][5:0] gpio_cfg_i       ,\n\n        // UART\n        input  logic             uart_tx_i        ,\n        output logic             uart_rx_o        ,\n\n        // I2C\n        input  logic [N_I2C-1:0] i2c_scl_out_i    ,\n        output logic [N_I2C-1:0] i2c_scl_in_o     ,\n        input  logic [N_I2C-1:0] i2c_scl_oe_i     ,\n        input  logic [N_I2C-1:0] i2c_sda_out_i    ,\n        output logic [N_I2C-1:0] i2c_sda_in_o     ,\n        input  logic [N_I2C-1:0] i2c_sda_oe_i     ,\n\n        // I2S\n        output logic             i2s_slave_sd0_o  ,\n        output logic             i2s_slave_sd1_o  ,\n        output logic             i2s_slave_ws_o   ,\n        input  logic             i2s_slave_ws_i   ,\n        input  logic             i2s_slave_ws_oe  ,\n        output logic             i2s_slave_sck_o  ,\n        input  logic             i2s_slave_sck_i  ,\n        input  logic             i2s_slave_sck_oe ,\n\n        // SPI MASTER\n        input  logic [N_SPI-1:0]      spi_clk_i   ,\n        input  logic [N_SPI-1:0][3:0] spi_csn_i   ,\n        input  logic [N_SPI-1:0][3:0] spi_oen_i   ,\n        input  logic [N_SPI-1:0][3:0] spi_sdo_i   ,\n        output logic [N_SPI-1:0][3:0] spi_sdi_o   ,\n\n        // CAMERA INTERFACE\n        output logic             cam_pclk_o       ,\n        output logic [7:0]       cam_data_o       ,\n        output logic             cam_hsync_o      ,\n        output logic             cam_vsync_o      ,\n\n        // TIMER\n        input  logic [3:0]       timer0_i         ,\n        input  logic [3:0]       timer1_i         ,\n        input  logic [3:0]       timer2_i         ,\n        input  logic [3:0]       timer3_i         ,\n\n        // HYPERBUS\n        input  logic  [1:0]       hyper_cs_ni        ,\n        input  logic              hyper_ck_i         ,\n        input  logic              hyper_ck_ni        ,\n        input  logic  [1:0]       hyper_rwds_i       ,\n        output logic              hyper_rwds_o       ,\n        input  logic  [1:0]       hyper_rwds_oe_i    ,\n        output logic  [15:0]      hyper_dq_o         ,\n        input  logic  [15:0]      hyper_dq_i         ,\n        input  logic  [1:0]       hyper_dq_oe_o      ,\n        input  logic              hyper_reset_no     , \n\n\n        //********************************************************************//\n        //*** PAD FRAME SIGNALS **********************************************//\n        //********************************************************************//\n\n        // PADS OUTPUTS\n        output logic             out_spim_sdio0_o ,\n        output logic             out_spim_sdio1_o ,\n        output logic             out_spim_sdio2_o ,\n        output logic             out_spim_sdio3_o ,\n        output logic             out_spim_csn0_o  ,\n        output logic             out_spim_csn1_o  ,\n        output logic             out_spim_sck_o   ,\n        output logic             out_sdio_clk_o   ,\n        output logic             out_sdio_cmd_o   ,\n        output logic             out_sdio_data0_o ,\n        output logic             out_sdio_data1_o ,\n        output logic             out_sdio_data2_o ,\n        output logic             out_sdio_data3_o ,\n        output logic             out_uart_rx_o    ,\n        output logic             out_uart_tx_o    ,\n        output logic             out_cam_pclk_o   ,\n        output logic             out_cam_hsync_o  ,\n        output logic             out_cam_data0_o  ,\n        output logic             out_cam_data1_o  ,\n        output logic             out_cam_data2_o  ,\n        output logic             out_cam_data3_o  ,\n        output logic             out_cam_data4_o  ,\n        output logic             out_cam_data5_o  ,\n        output logic             out_cam_data6_o  ,\n        output logic             out_cam_data7_o  ,\n        output logic             out_cam_vsync_o  ,\n        output logic             out_i2c0_sda_o   ,\n        output logic             out_i2c0_scl_o   ,\n        output logic             out_i2s0_sck_o   ,\n        output logic             out_i2s0_ws_o    ,\n        output logic             out_i2s0_sdi_o   ,\n        output logic             out_i2s1_sdi_o   ,\n        \n        output logic[31:0]       out_gpios_o      ,\n        output logic             out_i2c1_sda_o   ,\n        output logic             out_i2c1_scl_o   ,\n\n        output logic             out_hyper_cs0n_o     ,\n        output logic             out_hyper_cs1n_o     ,\n        output logic             out_hyper_ck_o       ,\n        output logic             out_hyper_ckn_o      ,\n        output logic             out_hyper_rwds0_o    ,\n        output logic             out_hyper_rwds1_o    ,\n        output logic  [7:0]      out_hyper_dq0_o      ,\n        output logic  [7:0]      out_hyper_dq1_o      ,\n        output logic             out_hyper_resetn_o   ,\n\n        // PAD INPUTS\n        input logic              in_spim_sdio0_i  ,\n        input logic              in_spim_sdio1_i  ,\n        input logic              in_spim_sdio2_i  ,\n        input logic              in_spim_sdio3_i  ,\n        input logic              in_spim_csn0_i   ,\n        input logic              in_spim_csn1_i   ,\n        input logic              in_spim_sck_i    ,\n        input logic              in_sdio_clk_i    ,\n        input logic              in_sdio_cmd_i    ,\n        input logic              in_sdio_data0_i  ,\n        input logic              in_sdio_data1_i  ,\n        input logic              in_sdio_data2_i  ,\n        input logic              in_sdio_data3_i  ,\n        input logic              in_uart_rx_i     ,\n        input logic              in_uart_tx_i     ,\n        input logic              in_cam_pclk_i    ,\n        input logic              in_cam_hsync_i   ,\n        input logic              in_cam_data0_i   ,\n        input logic              in_cam_data1_i   ,\n        input logic              in_cam_data2_i   ,\n        input logic              in_cam_data3_i   ,\n        input logic              in_cam_data4_i   ,\n        input logic              in_cam_data5_i   ,\n        input logic              in_cam_data6_i   ,\n        input logic              in_cam_data7_i   ,\n        input logic              in_cam_vsync_i   ,\n        input logic              in_i2c0_sda_i    ,\n        input logic              in_i2c0_scl_i    ,\n        input logic              in_i2s0_sck_i    ,\n        input logic              in_i2s0_ws_i     ,\n        input logic              in_i2s0_sdi_i    ,\n        input logic              in_i2s1_sdi_i    ,\n        \n        input logic[31:0]        in_gpios_i       ,\n        input logic              in_i2c1_sda_i    ,\n        input logic              in_i2c1_scl_i    ,\n\n        input logic              in_hyper_cs0n_i     ,\n        input logic              in_hyper_cs1n_i     ,\n        input logic              in_hyper_ck_i       ,\n        input logic              in_hyper_ckn_i      ,\n        input logic              in_hyper_rwds0_i    ,\n        input logic              in_hyper_rwds1_i    ,\n        input logic  [7:0]       in_hyper_dq0_i      ,\n        input logic  [7:0]       in_hyper_dq1_i      ,\n        input logic              in_hyper_resetn_i   ,\n\n        // OUTPUT ENABLE\n        output logic             oe_spim_sdio0_o  ,\n        output logic             oe_spim_sdio1_o  ,\n        output logic             oe_spim_sdio2_o  ,\n        output logic             oe_spim_sdio3_o  ,\n        output logic             oe_spim_csn0_o   ,\n        output logic             oe_spim_csn1_o   ,\n        output logic             oe_spim_sck_o    ,\n        output logic             oe_sdio_clk_o    ,\n        output logic             oe_sdio_cmd_o    ,\n        output logic             oe_sdio_data0_o  ,\n        output logic             oe_sdio_data1_o  ,\n        output logic             oe_sdio_data2_o  ,\n        output logic             oe_sdio_data3_o  ,\n        output logic             oe_uart_rx_o     ,\n        output logic             oe_uart_tx_o     ,\n        output logic             oe_cam_pclk_o    ,\n        output logic             oe_cam_hsync_o   ,\n        output logic             oe_cam_data0_o   ,\n        output logic             oe_cam_data1_o   ,\n        output logic             oe_cam_data2_o   ,\n        output logic             oe_cam_data3_o   ,\n        output logic             oe_cam_data4_o   ,\n        output logic             oe_cam_data5_o   ,\n        output logic             oe_cam_data6_o   ,\n        output logic             oe_cam_data7_o   ,\n        output logic             oe_cam_vsync_o   ,\n        output logic             oe_i2c0_sda_o    ,\n        output logic             oe_i2c0_scl_o    ,\n        output logic             oe_i2s0_sck_o    ,\n        output logic             oe_i2s0_ws_o     ,\n        output logic             oe_i2s0_sdi_o    ,\n        output logic             oe_i2s1_sdi_o    ,\n        \n        output logic[31:0]       oe_gpios_o       ,\n        output logic             oe_i2c1_sda_o    ,\n        output logic             oe_i2c1_scl_o    ,\n\n        output logic             oe_hyper_cs0n_o      ,\n        output logic             oe_hyper_cs1n_o      ,\n        output logic             oe_hyper_ck_o        ,\n        output logic             oe_hyper_ckn_o       ,\n        output logic             oe_hyper_rwds0_o     ,\n        output logic             oe_hyper_rwds1_o     ,\n        output logic             oe_hyper_dq0_o       ,\n        output logic             oe_hyper_dq1_o       ,\n        output logic             oe_hyper_resetn_o    \n\n    );\n\n   logic s_alt0,s_alt1,s_alt2,s_alt3;\n\n   // check invariants\n   if (N_SPI  <  1 || N_SPI  >  2) $error(\"The current verion of Pad control supports only 1 or 2 SPI peripherals\");\n   if (N_I2C  != 2) $error(\"The current version of Pad control only supports exactly 2 I2C peripherals\");\n   if (N_UART != 1) $error(\"The current version of Pad control only supports exactly 1 UART peripherals\");\n\n   // DEFINE DEFAULT FOR NOT USED ALTERNATIVES\n   assign s_alt0 = 1'b0;\n   assign s_alt1 = 1'b0;\n   assign s_alt2 = 1'b0;\n   assign s_alt3 = 1'b0;\n\n   /////////////////////////////////////////////////////////////////////////////////////////////\n   // OUTPUT ENABLE \n   /////////////////////////////////////////////////////////////////////////////////////////////\n   assign oe_spim_sdio0_o  = ~spi_oen_i[0][0]    ;\n   assign oe_spim_sdio1_o  = ~spi_oen_i[0][1]    ;\n   assign oe_spim_sdio2_o  = ~spi_oen_i[0][2]    ;\n   assign oe_spim_sdio3_o  = ~spi_oen_i[0][3]    ;\n   assign oe_spim_csn0_o   = 1'b1                ;\n   assign oe_spim_csn1_o   = 1'b1                ;\n   assign oe_spim_sck_o    = 1'b1                ;\n   assign oe_uart_rx_o     = 1'b0                ;\n   assign oe_uart_tx_o     = 1'b1                ;\n   assign oe_cam_pclk_o    = 1'b0                ;\n   assign oe_cam_hsync_o   = 1'b0                ;\n   assign oe_cam_data0_o   = 1'b0                ;\n   assign oe_cam_data1_o   = 1'b0                ;\n   assign oe_cam_data2_o   = 1'b0                ;\n   assign oe_cam_data3_o   = 1'b0                ;\n   assign oe_cam_data4_o   = 1'b0                ;\n   assign oe_cam_data5_o   = 1'b0                ;\n   assign oe_cam_data6_o   = 1'b0                ;\n   assign oe_cam_data7_o   = 1'b0                ;\n   assign oe_cam_vsync_o   = 1'b0                ;\n   assign oe_sdio_clk_o    = 1'b1                ;\n   assign oe_sdio_cmd_o    = ~sdio_cmd_oen_i     ;\n   assign oe_sdio_data0_o  = ~sdio_data_oen_i[0] ;\n   assign oe_sdio_data1_o  = ~sdio_data_oen_i[1] ;\n   assign oe_sdio_data2_o  = ~sdio_data_oen_i[2] ;\n   assign oe_sdio_data3_o  = ~sdio_data_oen_i[3] ;\n   assign oe_i2c0_sda_o    = i2c_sda_oe_i[0]     ;\n   assign oe_i2c0_scl_o    = i2c_scl_oe_i[0]     ;\n   assign oe_i2s0_sck_o    = i2s_slave_sck_oe    ;\n   assign oe_i2s0_ws_o     = i2s_slave_ws_oe     ;\n   assign oe_i2s0_sdi_o    = 1'b0                ;\n   assign oe_i2s1_sdi_o    = 1'b0                ;\n   \n   assign oe_gpios_o[31:0] = gpio_dir_i[31:0]    ;\n   assign oe_i2c1_sda_o    = i2c_sda_oe_i[1]     ;\n   assign oe_i2c1_scl_o    = i2c_scl_oe_i[1]     ;\n\n   assign oe_hyper_cs0n_o   = 1'b1               ;\n   assign oe_hyper_cs1n_o   = 1'b1               ;\n   assign oe_hyper_ck_o     = 1'b1               ;\n   assign oe_hyper_ckn_o    = 1'b1               ;\n   assign oe_hyper_rwds0_o  = hyper_rwds_oe_i[0] ;\n   assign oe_hyper_rwds1_o  = hyper_rwds_oe_i[1] ;\n   assign oe_hyper_dq0_o    = hyper_dq_oe_o[0]   ;\n   assign oe_hyper_dq1_o    = hyper_dq_oe_o[1]   ;\n   assign oe_hyper_resetn_o = 1'b1               ;\n\n   ////////////////////////////////////////////////////////////////\n   // DATA OUTPUT\n   ////////////////////////////////////////////////////////////////\n   assign out_spim_sdio0_o = spi_sdo_i[0][0]    ;\n   assign out_spim_sdio1_o = spi_sdo_i[0][1]    ;\n   assign out_spim_sdio2_o = spi_sdo_i[0][2]    ;\n   assign out_spim_sdio3_o = spi_sdo_i[0][3]    ;\n   assign out_spim_csn0_o  = spi_csn_i[0][0]    ;\n   assign out_spim_csn1_o  = spi_csn_i[0][1]    ;\n   assign out_spim_sck_o   = spi_clk_i[0]       ;\n   assign out_uart_rx_o    = 1'b0               ;\n   assign out_uart_tx_o    = uart_tx_i          ;\n   assign out_cam_pclk_o   = 1'b0               ;\n   assign out_cam_hsync_o  = 1'b0               ;\n   assign out_cam_data0_o  = 1'b0               ;\n   assign out_cam_data1_o  = 1'b0               ;\n   assign out_cam_data2_o  = 1'b0               ;\n   assign out_cam_data3_o  = 1'b0               ;\n   assign out_cam_data4_o  = 1'b0               ;\n   assign out_cam_data5_o  = 1'b0               ;\n   assign out_cam_data6_o  = 1'b0               ;\n   assign out_cam_data7_o  = 1'b0               ;\n   assign out_cam_vsync_o  = 1'b0               ;\n   assign out_sdio_clk_o   = sdio_clk_i         ;\n   assign out_sdio_cmd_o   = sdio_cmd_i         ;\n   assign out_sdio_data0_o = sdio_data_i[0]     ;\n   assign out_sdio_data1_o = sdio_data_i[1]     ;\n   assign out_sdio_data2_o = sdio_data_i[2]     ;\n   assign out_sdio_data3_o = sdio_data_i[3]     ;\n   assign out_i2c0_sda_o   = i2c_sda_out_i[0]   ;\n   assign out_i2c0_scl_o   = i2c_scl_out_i[0]   ;\n   assign out_i2s0_sck_o   = i2s_slave_sck_i    ;\n   assign out_i2s0_ws_o    = i2s_slave_ws_i     ;\n   assign out_i2s0_sdi_o   = 1'b0               ;\n   assign out_i2s1_sdi_o   = 1'b0               ;\n   \n   assign out_gpios_o[31:0]= gpio_out_i[31:0]   ;\n   assign out_i2c1_sda_o   = i2c_sda_out_i[1]   ;\n   assign out_i2c1_scl_o   = i2c_scl_out_i[1]   ;\n\n   assign out_hyper_cs0n_o   = hyper_cs_ni[0]    ;\n   assign out_hyper_cs1n_o   = hyper_cs_ni[1]    ;\n   assign out_hyper_ck_o     = hyper_ck_i        ;\n   assign out_hyper_ckn_o    = hyper_ck_ni       ;\n   assign out_hyper_rwds0_o  = hyper_rwds_i[0]   ;\n   assign out_hyper_rwds1_o  = hyper_rwds_i[1]   ;\n   assign out_hyper_dq0_o    = hyper_dq_i[7:0]   ;\n   assign out_hyper_dq1_o    = hyper_dq_i[15:8]  ;\n   assign out_hyper_resetn_o = hyper_reset_no    ; \n\n   ////////////////////////////////////////////////////////////////\n   // DATA INPUT\n   ////////////////////////////////////////////////////////////////\n\n   // SPI\n   assign sdio_cmd_o      = in_sdio_cmd_i    ;\n   assign sdio_data_o[0]  = in_sdio_data0_i  ;\n   assign sdio_data_o[1]  = in_sdio_data1_i  ;\n   assign sdio_data_o[2]  = in_sdio_data2_i  ;\n   assign sdio_data_o[3]  = in_sdio_data3_i  ;\n\n   // CAMERA\n   assign cam_pclk_o      = in_cam_pclk_i    ;\n   assign cam_hsync_o     = in_cam_hsync_i   ;\n   assign cam_data_o[0]   = in_cam_data0_i   ;\n   assign cam_data_o[1]   = in_cam_data1_i   ;\n   assign cam_data_o[2]   = in_cam_data2_i   ;\n   assign cam_data_o[3]   = in_cam_data3_i   ;\n   assign cam_data_o[4]   = in_cam_data4_i   ;\n   assign cam_data_o[5]   = in_cam_data5_i   ;\n   assign cam_data_o[6]   = in_cam_data6_i   ;\n   assign cam_data_o[7]   = in_cam_data7_i   ;\n   assign cam_vsync_o     = in_cam_vsync_i   ;\n\n   // I2C1\n   assign i2c_sda_in_o[1] = in_i2c1_sda_i;\n   assign i2c_scl_in_o[1] = in_i2c1_scl_i;\n\n   assign i2s_slave_sd1_o = in_i2s1_sdi_i    ;\n\n   // UART\n   assign uart_rx_o       = in_uart_rx_i     ;\n\n   // SPI\n   assign spi_sdi_o[0][0] = in_spim_sdio0_i  ;\n   assign spi_sdi_o[0][1] = in_spim_sdio1_i  ;\n   assign spi_sdi_o[0][2] = in_spim_sdio2_i  ;\n   assign spi_sdi_o[0][3] = in_spim_sdio3_i  ;\n\n   \n   // I2C0\n   assign i2c_sda_in_o[0] = in_i2c0_sda_i    ;\n   assign i2c_scl_in_o[0] = in_i2c0_scl_i    ;\n   assign i2s_slave_sck_o = in_i2s0_sck_i    ;\n   assign i2s_slave_ws_o  = in_i2s0_ws_i     ;\n   assign i2s_slave_sd0_o = in_i2s0_sdi_i    ;\n\n   // GPIO\n   assign gpio_in_o[31:0] = in_gpios_i[31:0] ;\n\n   // HYPER\n   assign hyper_dq_o[7:0]  = in_hyper_dq0_i   ;\n   assign hyper_dq_o[15:8] = in_hyper_dq1_i   ;\n   assign hyper_rwds_o     = in_hyper_rwds0_i ;\n\n   // PAD CFG mux between default and GPIO\n   assign pad_cfg_o[40:0]  = pad_cfg_i[40:0]  ;\n   for(genvar i=0; i<32; i++)  begin\n        assign pad_cfg_o[i+41] = { 2'b00 , gpio_cfg_i[i][3:0] } ;\n   end\n\nendmodule\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n\nmodule pad_frame\n    (\n\n        input logic [72:0][5:0] pad_cfg_i        ,\n\n        // REF CLOCK\n        output logic            ref_clk_o        ,\n\n        // RESET SIGNALS\n        output logic            rstn_o           ,\n\n        // JTAG SIGNALS\n        output logic            jtag_tck_o       ,\n        output logic            jtag_tdi_o       ,\n        input  logic            jtag_tdo_i       ,\n        output logic            jtag_tms_o       ,\n        output logic            jtag_trst_o      ,\n\n        input logic             oe_sdio_clk_i   ,\n        input logic             oe_sdio_cmd_i    ,\n        input logic             oe_sdio_data0_i   ,\n        input logic             oe_sdio_data1_i   ,\n        input logic             oe_sdio_data2_i   ,\n        input logic             oe_sdio_data3_i   ,\n        input logic             oe_spim_sdio0_i  ,\n        input logic             oe_spim_sdio1_i  ,\n        input logic             oe_spim_sdio2_i  ,\n        input logic             oe_spim_sdio3_i  ,\n        input logic             oe_spim_csn0_i   ,\n        input logic             oe_spim_csn1_i   ,\n        input logic             oe_spim_sck_i    ,\n        input logic             oe_i2s0_sck_i    ,\n        input logic             oe_i2s0_ws_i     ,\n        input logic             oe_i2s0_sdi_i    ,\n        input logic             oe_i2s1_sdi_i    ,\n        input logic             oe_cam_pclk_i    ,\n        input logic             oe_cam_hsync_i   ,\n        input logic             oe_cam_data0_i   ,\n        input logic             oe_cam_data1_i   ,\n        input logic             oe_cam_data2_i   ,\n        input logic             oe_cam_data3_i   ,\n        input logic             oe_cam_data4_i   ,\n        input logic             oe_cam_data5_i   ,\n        input logic             oe_cam_data6_i   ,\n        input logic             oe_cam_data7_i   ,\n        input logic             oe_cam_vsync_i   ,\n        input logic             oe_i2c0_sda_i    ,\n        input logic             oe_i2c0_scl_i    ,\n        input logic             oe_uart_rx_i     ,\n        input logic             oe_uart_tx_i     ,\n        \n        input logic[31:0]       oe_gpios_i       ,\n        input logic             oe_i2c1_sda_i    ,\n        input logic             oe_i2c1_scl_i    ,     \n\n        input logic             oe_hyper_cs0n_i      ,\n        input logic             oe_hyper_cs1n_i      ,\n        input logic             oe_hyper_ck_i        ,\n        input logic             oe_hyper_ckn_i       ,\n        input logic             oe_hyper_rwds0_i     ,\n        input logic             oe_hyper_rwds1_i     ,\n        input logic             oe_hyper_dq0_i       ,\n        input logic             oe_hyper_dq1_i       ,\n        input logic             oe_hyper_resetn_i    ,\n  \n        // INPUTS SIGNALS TO THE PADS\n        input logic             out_sdio_clk_i  ,\n        input logic             out_sdio_cmd_i   ,\n        input logic             out_sdio_data0_i  ,\n        input logic             out_sdio_data1_i  ,\n        input logic             out_sdio_data2_i  ,\n        input logic             out_sdio_data3_i  ,\n        input logic             out_spim_sdio0_i ,\n        input logic             out_spim_sdio1_i ,\n        input logic             out_spim_sdio2_i ,\n        input logic             out_spim_sdio3_i ,\n        input logic             out_spim_csn0_i  ,\n        input logic             out_spim_csn1_i  ,\n        input logic             out_spim_sck_i   ,\n        input logic             out_i2s0_sck_i   ,\n        input logic             out_i2s0_ws_i    ,\n        input logic             out_i2s0_sdi_i   ,\n        input logic             out_i2s1_sdi_i   ,\n        input logic             out_cam_pclk_i   ,\n        input logic             out_cam_hsync_i  ,\n        input logic             out_cam_data0_i  ,\n        input logic             out_cam_data1_i  ,\n        input logic             out_cam_data2_i  ,\n        input logic             out_cam_data3_i  ,\n        input logic             out_cam_data4_i  ,\n        input logic             out_cam_data5_i  ,\n        input logic             out_cam_data6_i  ,\n        input logic             out_cam_data7_i  ,\n        input logic             out_cam_vsync_i  ,\n        input logic             out_i2c0_sda_i   ,\n        input logic             out_i2c0_scl_i   ,\n        input logic             out_uart_rx_i    ,\n        input logic             out_uart_tx_i    ,\n        \n        input logic[31:0]       out_gpios_i      ,\n        input logic             out_i2c1_sda_i   ,\n        input logic             out_i2c1_scl_i   ,\n        \n        input logic             out_hyper_cs0n_i     ,\n        input logic             out_hyper_cs1n_i     ,\n        input logic             out_hyper_ck_i       ,\n        input logic             out_hyper_ckn_i      ,\n        input logic             out_hyper_rwds0_i    ,\n        input logic             out_hyper_rwds1_i    ,\n        input logic  [7:0]      out_hyper_dq0_i      ,\n        input logic  [7:0]      out_hyper_dq1_i      ,\n        input logic             out_hyper_resetn_i   ,\n\n        // OUTPUT SIGNALS FROM THE PADS\n        output logic            in_sdio_clk_o   ,\n        output logic            in_sdio_cmd_o    ,\n        output logic            in_sdio_data0_o   ,\n        output logic            in_sdio_data1_o   ,\n        output logic            in_sdio_data2_o   ,\n        output logic            in_sdio_data3_o   ,\n        output logic            in_spim_sdio0_o  ,\n        output logic            in_spim_sdio1_o  ,\n        output logic            in_spim_sdio2_o  ,\n        output logic            in_spim_sdio3_o  ,\n        output logic            in_spim_csn0_o   ,\n        output logic            in_spim_csn1_o   ,\n        output logic            in_spim_sck_o    ,\n        output logic            in_i2s0_sck_o    ,\n        output logic            in_i2s0_ws_o     ,\n        output logic            in_i2s0_sdi_o    ,\n        output logic            in_i2s1_sdi_o    ,\n        output logic            in_cam_pclk_o    ,\n        output logic            in_cam_hsync_o   ,\n        output logic            in_cam_data0_o   ,\n        output logic            in_cam_data1_o   ,\n        output logic            in_cam_data2_o   ,\n        output logic            in_cam_data3_o   ,\n        output logic            in_cam_data4_o   ,\n        output logic            in_cam_data5_o   ,\n        output logic            in_cam_data6_o   ,\n        output logic            in_cam_data7_o   ,\n        output logic            in_cam_vsync_o   ,\n        output logic            in_i2c0_sda_o    ,\n        output logic            in_i2c0_scl_o    ,\n        output logic            in_uart_rx_o     ,\n        output logic            in_uart_tx_o     ,\n        \n        output logic[31:0]      in_gpios_o       ,\n        output logic            in_i2c1_sda_o    ,\n        output logic            in_i2c1_scl_o    , \n\n        output logic            in_hyper_cs0n_o     ,\n        output logic            in_hyper_cs1n_o     ,\n        output logic            in_hyper_ck_o       ,\n        output logic            in_hyper_ckn_o      ,\n        output logic            in_hyper_rwds0_o    ,\n        output logic            in_hyper_rwds1_o    ,\n        output logic  [7:0]     in_hyper_dq0_o      ,\n        output logic  [7:0]     in_hyper_dq1_o      ,\n        output logic            in_hyper_resetn_o   ,\n\n        output logic [1:0]      bootsel_o        ,\n\n        // EXT CHIP TP PADS\n        inout wire              pad_sdio_clk     ,\n        inout wire              pad_sdio_cmd     ,\n        inout wire              pad_sdio_data0   ,\n        inout wire              pad_sdio_data1   ,\n        inout wire              pad_sdio_data2   ,\n        inout wire              pad_sdio_data3   ,\n        inout wire              pad_spim_sdio0   ,\n        inout wire              pad_spim_sdio1   ,\n        inout wire              pad_spim_sdio2   ,\n        inout wire              pad_spim_sdio3   ,\n        inout wire              pad_spim_csn0    ,\n        inout wire              pad_spim_csn1    ,\n        inout wire              pad_spim_sck     ,\n        inout wire              pad_i2s0_sck     ,\n        inout wire              pad_i2s0_ws      ,\n        inout wire              pad_i2s0_sdi     ,\n        inout wire              pad_i2s1_sdi     ,\n        inout wire              pad_cam_pclk     ,\n        inout wire              pad_cam_hsync    ,\n        inout wire              pad_cam_data0    ,\n        inout wire              pad_cam_data1    ,\n        inout wire              pad_cam_data2    ,\n        inout wire              pad_cam_data3    ,\n        inout wire              pad_cam_data4    ,\n        inout wire              pad_cam_data5    ,\n        inout wire              pad_cam_data6    ,\n        inout wire              pad_cam_data7    ,\n        inout wire              pad_cam_vsync    ,\n        inout wire              pad_i2c0_sda     ,\n        inout wire              pad_i2c0_scl     ,\n        inout wire              pad_uart_rx      ,\n        inout wire              pad_uart_tx      ,\n        \n        inout wire [31:0]       pad_gpios        ,\n        inout wire              pad_i2c1_sda     ,\n        inout wire              pad_i2c1_scl     ,\n\n\n        inout wire [7:0]        pad_hyper_dq0    ,\n        inout wire [7:0]        pad_hyper_dq1    ,\n        inout wire              pad_hyper_ck     ,\n        inout wire              pad_hyper_ckn    ,\n        inout wire              pad_hyper_csn0   ,\n        inout wire              pad_hyper_csn1   ,\n        inout wire              pad_hyper_rwds0  ,\n        inout wire              pad_hyper_rwds1  ,\n        inout wire              pad_hyper_reset  ,\n\n\n        inout wire              pad_reset_n      ,\n        inout wire              pad_bootsel0     ,\n        inout wire              pad_bootsel1     ,\n        inout wire              pad_jtag_tck     ,\n        inout wire              pad_jtag_tdi     ,\n        inout wire              pad_jtag_tdo     ,\n        inout wire              pad_jtag_tms     ,\n        inout wire              pad_jtag_trst    ,\n        inout wire              pad_xtal_in\n\n\n    );\n\n    pad_functional_pd padinst_sdio_data0 (.OEN(~oe_sdio_data0_i ), .I(out_sdio_data0_i ), .O(in_sdio_data0_o ), .PAD(pad_sdio_data0 ), .PEN(~pad_cfg_i[22][0]) );\n    pad_functional_pd padinst_sdio_data1 (.OEN(~oe_sdio_data1_i ), .I(out_sdio_data1_i ), .O(in_sdio_data1_o ), .PAD(pad_sdio_data1 ), .PEN(~pad_cfg_i[23][0]) );\n    pad_functional_pd padinst_sdio_data2 (.OEN(~oe_sdio_data2_i ), .I(out_sdio_data2_i ), .O(in_sdio_data2_o ), .PAD(pad_sdio_data2 ), .PEN(~pad_cfg_i[24][0]) );\n    pad_functional_pd padinst_sdio_data3 (.OEN(~oe_sdio_data3_i ), .I(out_sdio_data3_i ), .O(in_sdio_data3_o ), .PAD(pad_sdio_data3 ), .PEN(~pad_cfg_i[25][0]) );\n    pad_functional_pd padinst_sdio_clk   (.OEN(~oe_sdio_clk_i  ), .I(out_sdio_clk_i  ), .O(in_sdio_clk_o  ), .PAD(pad_sdio_clk  ), .PEN(~pad_cfg_i[20][0]) );\n    pad_functional_pd padinst_sdio_cmd   (.OEN(~oe_sdio_cmd_i  ), .I(out_sdio_cmd_i  ), .O(in_sdio_cmd_o  ), .PAD(pad_sdio_cmd  ), .PEN(~pad_cfg_i[21][0]) );\n    pad_functional_pd padinst_spim_sck   (.OEN(~oe_spim_sck_i  ), .I(out_spim_sck_i  ), .O(in_spim_sck_o  ), .PAD(pad_spim_sck  ), .PEN(~pad_cfg_i[6][0] ) );\n    pad_functional_pd padinst_spim_sdio0 (.OEN(~oe_spim_sdio0_i), .I(out_spim_sdio0_i), .O(in_spim_sdio0_o), .PAD(pad_spim_sdio0), .PEN(~pad_cfg_i[0][0] ) );\n    pad_functional_pd padinst_spim_sdio1 (.OEN(~oe_spim_sdio1_i), .I(out_spim_sdio1_i), .O(in_spim_sdio1_o), .PAD(pad_spim_sdio1), .PEN(~pad_cfg_i[1][0] ) );\n    pad_functional_pd padinst_spim_sdio2 (.OEN(~oe_spim_sdio2_i), .I(out_spim_sdio2_i), .O(in_spim_sdio2_o), .PAD(pad_spim_sdio2), .PEN(~pad_cfg_i[2][0] ) );\n    pad_functional_pd padinst_spim_sdio3 (.OEN(~oe_spim_sdio3_i), .I(out_spim_sdio3_i), .O(in_spim_sdio3_o), .PAD(pad_spim_sdio3), .PEN(~pad_cfg_i[3][0] ) );\n    pad_functional_pd padinst_spim_csn1  (.OEN(~oe_spim_csn1_i ), .I(out_spim_csn1_i ), .O(in_spim_csn1_o ), .PAD(pad_spim_csn1 ), .PEN(~pad_cfg_i[5][0] ) );\n    pad_functional_pd padinst_spim_csn0  (.OEN(~oe_spim_csn0_i ), .I(out_spim_csn0_i ), .O(in_spim_csn0_o ), .PAD(pad_spim_csn0 ), .PEN(~pad_cfg_i[4][0] ) );\n\n    pad_functional_pd padinst_i2s1_sdi   (.OEN(~oe_i2s1_sdi_i  ), .I(out_i2s1_sdi_i  ), .O(in_i2s1_sdi_o  ), .PAD(pad_i2s1_sdi  ), .PEN(~pad_cfg_i[38][0]) );\n    pad_functional_pd padinst_i2s0_ws    (.OEN(~oe_i2s0_ws_i   ), .I(out_i2s0_ws_i   ), .O(in_i2s0_ws_o   ), .PAD(pad_i2s0_ws   ), .PEN(~pad_cfg_i[36][0]) );\n    pad_functional_pd padinst_i2s0_sdi   (.OEN(~oe_i2s0_sdi_i  ), .I(out_i2s0_sdi_i  ), .O(in_i2s0_sdi_o  ), .PAD(pad_i2s0_sdi  ), .PEN(~pad_cfg_i[37][0]) );\n    pad_functional_pd padinst_i2s0_sck   (.OEN(~oe_i2s0_sck_i  ), .I(out_i2s0_sck_i  ), .O(in_i2s0_sck_o  ), .PAD(pad_i2s0_sck  ), .PEN(~pad_cfg_i[35][0]) );\n\n\n    pad_functional_pd padinst_cam_pclk   (.OEN(~oe_cam_pclk_i  ), .I(out_cam_pclk_i  ), .O(in_cam_pclk_o  ), .PAD(pad_cam_pclk  ), .PEN(~pad_cfg_i[9][0] ) );\n    pad_functional_pd padinst_cam_hsync  (.OEN(~oe_cam_hsync_i ), .I(out_cam_hsync_i ), .O(in_cam_hsync_o ), .PAD(pad_cam_hsync ), .PEN(~pad_cfg_i[10][0]) );\n    pad_functional_pd padinst_cam_data0  (.OEN(~oe_cam_data0_i ), .I(out_cam_data0_i ), .O(in_cam_data0_o ), .PAD(pad_cam_data0 ), .PEN(~pad_cfg_i[11][0]) );\n    pad_functional_pd padinst_cam_data1  (.OEN(~oe_cam_data1_i ), .I(out_cam_data1_i ), .O(in_cam_data1_o ), .PAD(pad_cam_data1 ), .PEN(~pad_cfg_i[12][0]) );\n    pad_functional_pd padinst_cam_data2  (.OEN(~oe_cam_data2_i ), .I(out_cam_data2_i ), .O(in_cam_data2_o ), .PAD(pad_cam_data2 ), .PEN(~pad_cfg_i[13][0]) );\n    pad_functional_pd padinst_cam_data3  (.OEN(~oe_cam_data3_i ), .I(out_cam_data3_i ), .O(in_cam_data3_o ), .PAD(pad_cam_data3 ), .PEN(~pad_cfg_i[14][0]) );\n    pad_functional_pd padinst_cam_data4  (.OEN(~oe_cam_data4_i ), .I(out_cam_data4_i ), .O(in_cam_data4_o ), .PAD(pad_cam_data4 ), .PEN(~pad_cfg_i[15][0]) );\n    pad_functional_pd padinst_cam_data5  (.OEN(~oe_cam_data5_i ), .I(out_cam_data5_i ), .O(in_cam_data5_o ), .PAD(pad_cam_data5 ), .PEN(~pad_cfg_i[16][0]) );\n    pad_functional_pd padinst_cam_data6  (.OEN(~oe_cam_data6_i ), .I(out_cam_data6_i ), .O(in_cam_data6_o ), .PAD(pad_cam_data6 ), .PEN(~pad_cfg_i[17][0]) );\n    pad_functional_pd padinst_cam_data7  (.OEN(~oe_cam_data7_i ), .I(out_cam_data7_i ), .O(in_cam_data7_o ), .PAD(pad_cam_data7 ), .PEN(~pad_cfg_i[18][0]) );\n    pad_functional_pd padinst_cam_vsync  (.OEN(~oe_cam_vsync_i ), .I(out_cam_vsync_i ), .O(in_cam_vsync_o ), .PAD(pad_cam_vsync ), .PEN(~pad_cfg_i[19][0]) );\n\n    pad_functional_pu padinst_uart_rx    (.OEN(~oe_uart_rx_i   ), .I(out_uart_rx_i   ), .O(in_uart_rx_o   ), .PAD(pad_uart_rx   ), .PEN(~pad_cfg_i[33][0]) );\n    pad_functional_pu padinst_uart_tx    (.OEN(~oe_uart_tx_i   ), .I(out_uart_tx_i   ), .O(in_uart_tx_o   ), .PAD(pad_uart_tx   ), .PEN(~pad_cfg_i[34][0]) );\n    pad_functional_pu padinst_i2c0_sda   (.OEN(~oe_i2c0_sda_i  ), .I(out_i2c0_sda_i  ), .O(in_i2c0_sda_o  ), .PAD(pad_i2c0_sda  ), .PEN(~pad_cfg_i[7][0] ) );\n    pad_functional_pu padinst_i2c0_scl   (.OEN(~oe_i2c0_scl_i  ), .I(out_i2c0_scl_i  ), .O(in_i2c0_scl_o  ), .PAD(pad_i2c0_scl  ), .PEN(~pad_cfg_i[8][0] ) );\n    \n\n    pad_functional_pu padinst_hyper_csno0  (.OEN(~oe_hyper_cs0n_i   ), .I( out_hyper_cs0n_i   ), .O( in_hyper_cs0n_o   ), .PAD( pad_hyper_csn0    ), .PEN(1'b1 ) );\n    pad_functional_pu padinst_hyper_csno1  (.OEN(~oe_hyper_cs1n_i   ), .I( out_hyper_cs1n_i   ), .O( in_hyper_cs1n_o   ), .PAD( pad_hyper_csn1    ), .PEN(1'b1 ) );\n    pad_functional_pu padinst_hyper_ck     (.OEN(~oe_hyper_ck_i     ), .I( out_hyper_ck_i     ), .O( in_hyper_ck_o     ), .PAD( pad_hyper_ck      ), .PEN(1'b1 ) );\n    pad_functional_pu padinst_hyper_ckno   (.OEN(~oe_hyper_ckn_i    ), .I( out_hyper_ckn_i    ), .O( in_hyper_ckn_o    ), .PAD( pad_hyper_ckn     ), .PEN(1'b1 ) );\n    pad_functional_pu padinst_hyper_rwds0  (.OEN(~oe_hyper_rwds0_i  ), .I( out_hyper_rwds0_i  ), .O( in_hyper_rwds0_o  ), .PAD( pad_hyper_rwds0   ), .PEN(1'b1 ) );\n    pad_functional_pu padinst_hyper_rwds1  (.OEN(~oe_hyper_rwds1_i  ), .I( out_hyper_rwds1_i  ), .O( in_hyper_rwds1_o  ), .PAD( pad_hyper_rwds1   ), .PEN(1'b1 ) );\n    pad_functional_pu padinst_hyper_resetn (.OEN(~oe_hyper_resetn_i ), .I( out_hyper_resetn_i ), .O( in_hyper_resetn_o ), .PAD( pad_hyper_reset   ), .PEN(1'b1 ) );\n\n    genvar j;\n    generate\n       for (j=0; j<8; j++) begin\n                pad_functional_pu padinst_hyper_dqio0  (.OEN(~oe_hyper_dq0_i   ), .I( out_hyper_dq0_i[j]   ), .O( in_hyper_dq0_o[j]  ), .PAD( pad_hyper_dq0[j]   ), .PEN(1'b1 ) );\n\t\t`ifndef PULP_FPGA_EMUL\n                pad_functional_pu padinst_hyper_dqio1  (.OEN(~oe_hyper_dq1_i   ), .I( out_hyper_dq1_i[j]   ), .O( in_hyper_dq1_o[j]  ), .PAD( pad_hyper_dq1[j]   ), .PEN(1'b1 ) );\n                `endif\n        end\n    endgenerate\n \n    `ifndef PULP_FPGA_EMUL\n    genvar i;\n    generate\n        for (i=0; i < 32; i++) begin\n            pad_functional_pu padinst_gpio   (.OEN(~oe_gpios_i[i]  ), .I(out_gpios_i[i]  ), .O(in_gpios_o[i]  ), .PAD(pad_gpios[i]  ), .PEN(~pad_cfg_i[41+i][0] ) );\n        end\n    endgenerate\n\n    pad_functional_pu padinst_i2c1_sda   (.OEN(~oe_i2c1_sda_i  ), .I(out_i2c1_sda_i  ), .O(in_i2c1_sda_o  ), .PAD(pad_i2c1_sda  ), .PEN(~pad_cfg_i[26][0] ) );\n    pad_functional_pu padinst_i2c1_scl   (.OEN(~oe_i2c1_scl_i  ), .I(out_i2c1_scl_i  ), .O(in_i2c1_scl_o  ), .PAD(pad_i2c1_scl  ), .PEN(~pad_cfg_i[27][0] ) );\n\n\n    pad_functional_pu padinst_bootsel0    (.OEN(1'b1            ), .I(                ), .O(bootsel_o[0]      ), .PAD(pad_bootsel0   ), .PEN(1'b1             ) );\n    pad_functional_pu padinst_bootsel1    (.OEN(1'b1            ), .I(                ), .O(bootsel_o[1]      ), .PAD(pad_bootsel1   ), .PEN(1'b1             ) );\n    `endif\n\n\n`ifndef PULP_FPGA_EMUL\n  pad_functional_pu padinst_ref_clk    (.OEN(1'b1            ), .I(                ), .O(ref_clk_o      ), .PAD(pad_xtal_in   ), .PEN(1'b1             ) );\n  pad_functional_pu padinst_reset_n    (.OEN(1'b1            ), .I(                ), .O(rstn_o         ), .PAD(pad_reset_n   ), .PEN(1'b1             ) );\n  pad_functional_pu padinst_jtag_tck   (.OEN(1'b1            ), .I(                ), .O(jtag_tck_o     ), .PAD(pad_jtag_tck  ), .PEN(1'b1             ) );\n  pad_functional_pu padinst_jtag_tms   (.OEN(1'b1            ), .I(                ), .O(jtag_tms_o     ), .PAD(pad_jtag_tms  ), .PEN(1'b1             ) );\n  pad_functional_pu padinst_jtag_tdi   (.OEN(1'b1            ), .I(                ), .O(jtag_tdi_o     ), .PAD(pad_jtag_tdi  ), .PEN(1'b1             ) );\n  pad_functional_pu padinst_jtag_trstn (.OEN(1'b1            ), .I(                ), .O(jtag_trst_o    ), .PAD(pad_jtag_trst ), .PEN(1'b1             ) );\n  pad_functional_pd padinst_jtag_tdo   (.OEN(1'b0            ), .I(jtag_tdo_i      ), .O(               ), .PAD(pad_jtag_tdo  ), .PEN(1'b1             ) );\n\n`else\n  assign ref_clk_o = pad_xtal_in;\n  assign rstn_o = pad_reset_n;\n\n  //JTAG signals\n  assign pad_jtag_tdo = jtag_tdo_i;\n  assign jtag_trst_o = pad_jtag_trst;\n  assign jtag_tms_o = pad_jtag_tms;\n  assign jtag_tck_o = pad_jtag_tck;\n  assign jtag_tdi_o = pad_jtag_tdi;\n`"}
{"text": "endif\n\nendmodule // pad_frame\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n\nmodule pad_functional_pd\n(\n   input  logic             OEN,\n   input  logic             I,\n   output logic             O,\n   input  logic             PEN,\n   inout  logic             PAD\n);\n  \n  (* PULLDOWN = \"YES\" *)\n  IOBUF iobuf_i (\n    .T ( OEN ),\n    .I ( I    ),\n    .O ( O    ),\n    .IO( PAD  )\n  );\n\nendmodule\n\nmodule pad_functional_pu\n(\n   input  logic             OEN,\n   input  logic             I,\n   output logic             O,\n   input  logic             PEN,\n   inout  logic             PAD\n);\n\n  (* PULLUP = \"YES\" *)\n  IOBUF iobuf_i (\n    .T ( OEN ),\n    .I ( I    ),\n    .O ( O    ),\n    .IO( PAD  )\n  );\n\nendmodule\n"}
{"text": "/*\n * periph_bus_defines.sv\n *\n * Copyright (C) 2013-2018 ETH Zurich, University of Bologna.\n *\n * Copyright and related rights are licensed under the Solderpad Hardware\n * License, Version 0.51 (the \"License\"); you may not use this file except in\n * compliance with the License.  You may obtain a copy of the License at\n * http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n * or agreed to in writing, software, hardware and materials distributed under\n * this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n */\n\n// SOC PERIPHERALS APB BUS PARAMETRES\n`define NB_MASTER  11\n\n// MASTER PORT TO FLL\n`define FLL_START_ADDR           32'h1A10_0000\n`define FLL_END_ADDR             32'h1A10_0FFF\n\n// MASTER PORT TO GPIO\n`define GPIO_START_ADDR          32'h1A10_1000\n`define GPIO_END_ADDR            32'h1A10_1FFF\n\n// MASTER PORT TO SPI MASTER\n`define UDMA_START_ADDR          32'h1A10_2000\n`define UDMA_END_ADDR            32'h1A10_3FFF\n\n// MASTER PORT TO SOC CONTROL\n`define SOC_CTRL_START_ADDR      32'h1A10_4000\n`define SOC_CTRL_END_ADDR        32'h1A10_4FFF\n\n// MASTER PORT TO ADV TIMER\n`define ADV_TIMER_START_ADDR     32'h1A10_5000\n`define ADV_TIMER_END_ADDR       32'h1A10_5FFF\n\n// MASTER PORT TO SOC EVENT GEN\n`define SOC_EVENT_GEN_START_ADDR 32'h1A10_6000\n`define SOC_EVENT_GEN_END_ADDR   32'h1A10_6FFF\n\n`define EU_START_ADDR            32'h1A10_9000\n`define EU_END_ADDR              32'h1A10_AFFF\n\n`define TIMER_START_ADDR         32'h1A10_B000\n`define TIMER_END_ADDR           32'h1A10_BFFF\n\n`define HWPE_START_ADDR          32'h1A10_C000\n`define HWPE_END_ADDR            32'h1A10_CFFF\n\n`define STDOUT_START_ADDR        32'h1A10_F000\n`define STDOUT_END_ADDR          32'h1A10_FFFF\n\n`define DEBUG_START_ADDR         32'h1A11_0000\n`define DEBUG_END_ADDR           32'h1A11_FFFF\n\n`define DUMMY_START_ADDR         32'h1A12_0000\n`define DUMMY_END_ADDR           32'h1A12_0008\n\n\n`define APB_ASSIGN_SLAVE(lhs, rhs)     \\\n    assign lhs.paddr    = rhs.paddr;   \\\n    assign lhs.pwdata   = rhs.pwdata;  \\\n    assign lhs.pwrite   = rhs.pwrite;  \\\n    assign lhs.psel     = rhs.psel;    \\\n    assign lhs.penable  = rhs.penable; \\\n    assign rhs.prdata   = lhs.prdata;  \\\n    assign rhs.pready   = lhs.pready;  \\\n    assign rhs.pslverr  = lhs.pslverr\n\n`define APB_ASSIGN_MASTER(lhs, rhs) `APB_ASSIGN_SLAVE(rhs, lhs)\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n`include \"pulp_soc_defines.sv\"\n`include \"soc_bus_defines.sv\"\n\nmodule pulp\n#(\n  parameter CORE_TYPE_FC = 0, // 0 for RISCY, 1 for IBEX RV32IMC (formerly ZERORISCY), 2 for IBEX RV32EC (formerly MICRORISCY)\n  parameter CORE_TYPE_CL = 0, // 0 for RISCY, 1 for IBEX RV32IMC (formerly ZERORISCY), 2 for IBEX RV32EC (formerly MICRORISCY)\n  parameter USE_FPU      = 1,\n  parameter USE_HWPE     = 1,\n  parameter USE_HWPE_CL  = 1\n)\n(\n\n   inout  wire        pad_spim_sdio0,\n   inout  wire        pad_spim_sdio1,\n   inout  wire        pad_spim_sdio2,\n   inout  wire        pad_spim_sdio3,\n   inout  wire        pad_spim_csn0,\n   inout  wire        pad_spim_csn1,\n   inout  wire        pad_spim_sck,\n\n   inout  wire        pad_uart_rx,\n   inout  wire        pad_uart_tx,\n\n   inout  wire        pad_cam_pclk,\n   inout  wire        pad_cam_hsync,\n   inout  wire        pad_cam_data0,\n   inout  wire        pad_cam_data1,\n   inout  wire        pad_cam_data2,\n   inout  wire        pad_cam_data3,\n   inout  wire        pad_cam_data4,\n   inout  wire        pad_cam_data5,\n   inout  wire        pad_cam_data6,\n   inout  wire        pad_cam_data7,\n   inout  wire        pad_cam_vsync,\n\n   inout  wire        pad_sdio_clk,\n   inout  wire        pad_sdio_cmd,\n   inout  wire        pad_sdio_data0,\n   inout  wire        pad_sdio_data1,\n   inout  wire        pad_sdio_data2,\n   inout  wire        pad_sdio_data3,\n\n   inout  wire        pad_i2c0_sda,\n   inout  wire        pad_i2c0_scl,\n\n   inout  wire        pad_i2s0_sck,\n   inout  wire        pad_i2s0_ws,\n   inout  wire        pad_i2s0_sdi,\n   inout  wire        pad_i2s1_sdi,\n\n   \n   inout  wire [31:0] pad_gpios,\n   inout  wire        pad_i2c1_sda,\n   inout  wire        pad_i2c1_scl,     \n\n   inout wire [7:0]   pad_hyper_dq0    ,\n   inout wire [7:0]   pad_hyper_dq1    ,\n   inout wire         pad_hyper_ck     ,\n   inout wire         pad_hyper_ckn    ,\n   inout wire         pad_hyper_csn0   ,\n   inout wire         pad_hyper_csn1   ,\n   inout wire         pad_hyper_rwds0  ,\n   inout wire         pad_hyper_rwds1  ,\n   inout wire         pad_hyper_reset  ,\n\n   inout  wire        pad_reset_n,\n   inout  wire        pad_bootsel0,\n   inout  wire        pad_bootsel1,\n\n   inout  wire        pad_jtag_tck,\n   inout  wire        pad_jtag_tdi,\n   inout  wire        pad_jtag_tdo,\n   inout  wire        pad_jtag_tms,\n   inout  wire        pad_jtag_trst,\n\n   inout  wire        pad_xtal_in\n  );\n\n  localparam AXI_ADDR_WIDTH             = 32;\n  localparam AXI_CLUSTER_SOC_DATA_WIDTH = 64;\n  localparam AXI_SOC_CLUSTER_DATA_WIDTH = 32;\n  localparam AXI_SOC_CLUSTER_ID_WIDTH   = pkg_soc_interconnect::AXI_ID_OUT_WIDTH; // Backrouting through the AXI-XBAR in pulp_soc requries some extra ID bits. Check axi_xbar docu for details\n  localparam AXI_CLUSTER_SOC_ID_WIDTH   = AXI_SOC_CLUSTER_ID_WIDTH + $clog2(`NB_SLAVE);\n\n  localparam AXI_USER_WIDTH             = 6;\n  localparam AXI_CLUSTER_SOC_STRB_WIDTH = AXI_CLUSTER_SOC_DATA_WIDTH/8;\n  localparam AXI_SOC_CLUSTER_STRB_WIDTH = AXI_SOC_CLUSTER_DATA_WIDTH/8;\n\n  localparam AXI_CLUSTER_SOC_AW_WIDTH   = AXI_CLUSTER_SOC_ID_WIDTH+AXI_ADDR_WIDTH+AXI_USER_WIDTH+$bits(axi_pkg::len_t)+$bits(axi_pkg::size_t)+$bits(axi_pkg::burst_t)+$bits(axi_pkg::cache_t)+$bits(axi_pkg::prot_t)+$bits(axi_pkg::qos_t)+$bits(axi_pkg::region_t)+$bits(axi_pkg::atop_t)+1;  \n  localparam AXI_CLUSTER_SOC_W_WIDTH    = AXI_USER_WIDTH+AXI_CLUSTER_SOC_STRB_WIDTH+AXI_CLUSTER_SOC_DATA_WIDTH+1;   \n  localparam AXI_CLUSTER_SOC_R_WIDTH    = AXI_CLUSTER_SOC_ID_WIDTH+AXI_CLUSTER_SOC_DATA_WIDTH+AXI_USER_WIDTH+$bits(axi_pkg::resp_t)+1;\n  localparam AXI_CLUSTER_SOC_B_WIDTH    = AXI_USER_WIDTH+AXI_CLUSTER_SOC_ID_WIDTH+$bits(axi_pkg::resp_t);   \n  localparam AXI_CLUSTER_SOC_AR_WIDTH   = AXI_CLUSTER_SOC_ID_WIDTH+AXI_ADDR_WIDTH+AXI_USER_WIDTH+$bits(axi_pkg::len_t)+$bits(axi_pkg::size_t)+$bits(axi_pkg::burst_t)+$bits(axi_pkg::cache_t)+$bits(axi_pkg::prot_t)+$bits(axi_pkg::qos_t)+$bits(axi_pkg::region_t)+1;\n\n  localparam AXI_SOC_CLUSTER_AW_WIDTH   = AXI_SOC_CLUSTER_ID_WIDTH+AXI_ADDR_WIDTH+AXI_USER_WIDTH+$bits(axi_pkg::len_t)+$bits(axi_pkg::size_t)+$bits(axi_pkg::burst_t)+$bits(axi_pkg::cache_t)+$bits(axi_pkg::prot_t)+$bits(axi_pkg::qos_t)+$bits(axi_pkg::region_t)+$bits(axi_pkg::atop_t)+1;  \n  localparam AXI_SOC_CLUSTER_W_WIDTH    = AXI_USER_WIDTH+AXI_SOC_CLUSTER_STRB_WIDTH+AXI_SOC_CLUSTER_DATA_WIDTH+1;   \n  localparam AXI_SOC_CLUSTER_R_WIDTH    = AXI_SOC_CLUSTER_ID_WIDTH+AXI_SOC_CLUSTER_DATA_WIDTH+AXI_USER_WIDTH+$bits(axi_pkg::resp_t)+1;\n  localparam AXI_SOC_CLUSTER_B_WIDTH    = AXI_USER_WIDTH+AXI_SOC_CLUSTER_ID_WIDTH+$bits(axi_pkg::resp_t);   \n  localparam AXI_SOC_CLUSTER_AR_WIDTH   = AXI_SOC_CLUSTER_ID_WIDTH+AXI_ADDR_WIDTH+AXI_USER_WIDTH+$bits(axi_pkg::len_t)+$bits(axi_pkg::size_t)+$bits(axi_pkg::burst_t)+$bits(axi_pkg::cache_t)+$bits(axi_pkg::prot_t)+$bits(axi_pkg::qos_t)+$bits(axi_pkg::region_t)+1;\n\n  localparam BUFFER_WIDTH               = 8;\n  localparam EVENT_WIDTH                = 8;\n  localparam LOG_DEPTH                  = 3;\n   \n  localparam CVP_ADDR_WIDTH             = 32;\n  localparam CVP_DATA_WIDTH             = 32;\n\n  //***********************************************************\n  //********** PAD FRAME TO PAD CONTROL SIGNALS ***************\n  //***********************************************************\n\n  logic [72:0][5:0] s_pad_cfg ;\n\n  logic s_out_spim_sdio0 ;\n  logic s_out_spim_sdio1 ;\n  logic s_out_spim_sdio2 ;\n  logic s_out_spim_sdio3 ;\n  logic s_out_spim_csn0  ;\n  logic s_out_spim_csn1  ;\n  logic s_out_spim_sck   ;\n  logic s_out_uart_rx    ;\n  logic s_out_uart_tx    ;\n  logic s_out_cam_pclk   ;\n  logic s_out_cam_hsync  ;\n  logic s_out_cam_data0  ;\n  logic s_out_cam_data1  ;\n  logic s_out_cam_data2  ;\n  logic s_out_cam_data3  ;\n  logic s_out_cam_data4  ;\n  logic s_out_cam_data5  ;\n  logic s_out_cam_data6  ;\n  logic s_out_cam_data7  ;\n  logic s_out_cam_vsync  ;\n  logic s_out_sdio_clk   ;\n  logic s_out_sdio_cmd   ;\n  logic s_out_sdio_data0 ;\n  logic s_out_sdio_data1 ;\n  logic s_out_sdio_data2 ;\n  logic s_out_sdio_data3 ;\n  logic s_out_i2c0_sda   ;\n  logic s_out_i2c0_scl   ;\n  logic s_out_i2s0_sck   ;\n  logic s_out_i2s0_ws    ;\n  logic s_out_i2s0_sdi   ;\n  logic s_out_i2s1_sdi   ;\n  \n  logic[31:0] s_out_gpios;\n  logic s_out_i2c1_sda   ;\n  logic s_out_i2c1_scl   ;\n\n  logic      s_out_hyper_csn0  ;\n  logic      s_out_hyper_csn1  ;\n  logic      s_out_hyper_ck    ;\n  logic      s_out_hyper_ckn   ;\n  logic      s_out_hyper_rwds0 ;\n  logic      s_out_hyper_rwds1 ;\n  logic[7:0] s_out_hyper_dq0   ;\n  logic[7:0] s_out_hyper_dq1   ;\n  logic      s_out_hyper_reset ;\n\n\n  logic s_in_spim_sdio0  ;\n  logic s_in_spim_sdio1  ;\n  logic s_in_spim_sdio2  ;\n  logic s_in_spim_sdio3  ;\n  logic s_in_spim_csn0   ;\n  logic s_in_spim_csn1   ;\n  logic s_in_spim_sck    ;\n  logic s_in_uart_rx     ;\n  logic s_in_uart_tx     ;\n  logic s_in_cam_pclk    ;\n  logic s_in_cam_hsync   ;\n  logic s_in_cam_data0   ;\n  logic s_in_cam_data1   ;\n  logic s_in_cam_data2   ;\n  logic s_in_cam_data3   ;\n  logic s_in_cam_data4   ;\n  logic s_in_cam_data5   ;\n  logic s_in_cam_data6   ;\n  logic s_in_cam_data7   ;\n  logic s_in_cam_vsync   ;\n  logic s_in_sdio_clk    ;\n  logic s_in_sdio_cmd    ;\n  logic s_in_sdio_data0  ;\n  logic s_in_sdio_data1  ;\n  logic s_in_sdio_data2  ;\n  logic s_in_sdio_data3  ;\n  logic s_in_i2c0_sda    ;\n  logic s_in_i2c0_scl    ;\n  logic s_in_i2s0_sck    ;\n  logic s_in_i2s0_ws     ;\n  logic s_in_i2s0_sdi    ;\n  logic s_in_i2s1_sdi    ;\n  \n  logic[31:0] s_in_gpios ;\n  logic s_in_i2c1_sda    ;\n  logic s_in_i2c1_scl    ;\n\n\n  logic      s_in_hyper_csn0  ;\n  logic      s_in_hyper_csn1  ;\n  logic      s_in_hyper_ck    ;\n  logic      s_in_hyper_ckn   ;\n  logic      s_in_hyper_rwds0 ;\n  logic      s_in_hyper_rwds1 ;\n  logic[7:0] s_in_hyper_dq0   ;\n  logic[7:0] s_in_hyper_dq1   ;\n  logic      s_in_hyper_reset ;\n\n  logic s_oe_spim_sdio0  ;\n  logic s_oe_spim_sdio1  ;\n  logic s_oe_spim_sdio2  ;\n  logic s_oe_spim_sdio3  ;\n  logic s_oe_spim_csn0   ;\n  logic s_oe_spim_csn1   ;\n  logic s_oe_spim_sck    ;\n  logic s_oe_uart_rx     ;\n  logic s_oe_uart_tx     ;\n  logic s_oe_cam_pclk    ;\n  logic s_oe_cam_hsync   ;\n  logic s_oe_cam_data0   ;\n  logic s_oe_cam_data1   ;\n  logic s_oe_cam_data2   ;\n  logic s_oe_cam_data3   ;\n  logic s_oe_cam_data4   ;\n  logic s_oe_cam_data5   ;\n  logic s_oe_cam_data6   ;\n  logic s_oe_cam_data7   ;\n  logic s_oe_cam_vsync   ;\n  logic s_oe_sdio_clk    ;\n  logic s_oe_sdio_cmd    ;\n  logic s_oe_sdio_data0  ;\n  logic s_oe_sdio_data1  ;\n  logic s_oe_sdio_data2  ;\n  logic s_oe_sdio_data3  ;\n  logic s_oe_i2c0_sda    ;\n  logic s_oe_i2c0_scl    ;\n  logic s_oe_i2s0_sck    ;\n  logic s_oe_i2s0_ws     ;\n  logic s_oe_i2s0_sdi    ;\n  logic s_oe_i2s1_sdi    ;\n  \n  logic[31:0] s_oe_gpios ;\n  logic s_oe_i2c1_sda    ;\n  logic s_oe_i2c1_scl    ;\n\n  logic s_oe_hyper_csn0  ;\n  logic s_oe_hyper_csn1  ;\n  logic s_oe_hyper_ck    ;\n  logic s_oe_hyper_ckn   ;\n  logic s_oe_hyper_rwds0 ;\n  logic s_oe_hyper_rwds1 ;\n  logic s_oe_hyper_dq0   ;\n  logic s_oe_hyper_dq1   ;\n  logic s_oe_hyper_reset ;\n\n  //***********************************************************\n  //********** OTHER PAD FRAME SIGNALS ************************\n  //***********************************************************\n\n  logic s_ref_clk        ;\n  logic s_rstn           ;\n\n  logic s_jtag_tck       ;\n  logic s_jtag_tdi       ;\n  logic s_jtag_tdo       ;\n  logic s_jtag_tms       ;\n  logic s_jtag_trst      ;\n\n  //***********************************************************\n  //********** SOC TO SAFE DOMAINS SIGNALS ********************\n  //***********************************************************\n\n  logic                        s_test_clk;\n  logic                        s_slow_clk;\n  logic                        s_sel_fll_clk;\n\n  logic [11:0]                 s_pm_cfg_data;\n  logic                        s_pm_cfg_req;\n  logic                        s_pm_cfg_ack;\n\n\n  logic                        s_soc_tck;\n  logic                        s_soc_trstn;\n  logic                        s_soc_tms;\n  logic                        s_soc_tdi;\n\n  logic                        s_test_mode;\n  logic                        s_dft_cg_enable;\n  logic                        s_mode_select;\n\n  logic [31:0]                 s_gpio_out;\n  logic [31:0]                 s_gpio_in;\n  logic [31:0]                 s_gpio_dir;\n  logic [191:0]                s_gpio_cfg;\n\n  logic                        s_rf_tx_clk;\n  logic                        s_rf_tx_oeb;\n  logic                        s_rf_tx_enb;\n  logic                        s_rf_tx_mode;\n  logic                        s_rf_tx_vsel;\n  logic                        s_rf_tx_data;\n  logic                        s_rf_rx_clk;\n  logic                        s_rf_rx_enb;\n  logic                        s_rf_rx_data;\n\n  logic                        s_uart_tx;\n  logic                        s_uart_rx;\n\n  logic                        s_i2c0_scl_out;\n  logic                        s_i2c0_scl_in;\n  logic                        s_i2c0_scl_oe;\n  logic                        s_i2c0_sda_out;\n  logic                        s_i2c0_sda_in;\n  logic                        s_i2c0_sda_oe;\n  logic                        s_i2c1_scl_out;\n  logic                        s_i2c1_scl_in;\n  logic                        s_i2c1_scl_oe;\n  logic                        s_i2c1_sda_out;\n  logic                        s_i2c1_sda_in;\n  logic                        s_i2c1_sda_oe;\n  logic                        s_i2s_sd0_in;\n  logic                        s_i2s_sd1_in;\n  logic                        s_i2s_sck_in;\n  logic                        s_i2s_ws_in;\n  logic                        s_i2s_sck0_out;\n  logic                        s_i2s_ws0_out;\n  logic [1:0]                  s_i2s_mode0_out;\n  logic                        s_i2s_sck1_out;\n  logic                        s_i2s_ws1_out;\n  logic [1:0]                  s_i2s_mode1_out;\n  logic                        s_i2s_slave_sck_oe;\n  logic                        s_i2s_slave_ws_oe;\n  logic                        s_spi_master0_csn0;\n  logic                        s_spi_master0_csn1;\n  logic                        s_spi_master0_sck;\n  logic                        s_spi_master0_sdi0;\n  logic                        s_spi_master0_sdi1;\n  logic                        s_spi_master0_sdi2;\n  logic                        s_spi_master0_sdi3;\n  logic                        s_spi_master0_sdo0;\n  logic                        s_spi_master0_sdo1;\n  logic                        s_spi_master0_sdo2;\n  logic                        s_spi_master0_sdo3;\n  logic                        s_spi_master0_oen0;\n  logic                        s_spi_master0_oen1;\n  logic                        s_spi_master0_oen2;\n  logic                        s_spi_master0_oen3;\n\n  logic                        s_spi_master1_csn0;\n  logic                        s_spi_master1_csn1;\n  logic                        s_spi_master1_sck;\n  logic                        s_spi_master1_sdi;\n  logic                        s_spi_master1_sdo;\n  logic [1:0]                  s_spi_master1_mode;\n\n  logic                        s_sdio_clk;\n  logic                        s_sdio_cmdi;\n  logic                        s_sdio_cmdo;\n  logic                        s_sdio_cmd_oen ;\n  logic [3:0]                  s_sdio_datai;\n  logic [3:0]                  s_sdio_datao;\n  logic [3:0]                  s_sdio_data_oen;\n\n\n  logic                        s_cam_pclk;\n  logic [7:0]                  s_cam_data;\n  logic                        s_cam_hsync;\n  logic                        s_cam_vsync;\n  logic [3:0]                  s_timer0;\n  logic [3:0]                  s_timer1;\n  logic [3:0]                  s_timer2;\n  logic [3:0]                  s_timer3;\n\n  logic [1:0]                  s_hyper_cs_n;\n  logic                        s_hyper_ck;\n  logic                        s_hyper_ck_n;\n  logic [1:0]                  s_hyper_rwds_o;\n  logic                        s_hyper_rwds_i;\n  logic [1:0]                  s_hyper_rwds_oe;\n  logic [15:0]                 s_hyper_dq_i;\n  logic [15:0]                 s_hyper_dq_o;\n  logic [1:0]                  s_hyper_dq_oe;\n  logic                        s_hyper_reset_n;\n\n  logic                        s_jtag_shift_dr;\n  logic                        s_jtag_update_dr;\n  logic                        s_jtag_capture_dr;\n\n  logic                        s_axireg_sel;\n  logic                        s_axireg_tdi;\n  logic                        s_axireg_tdo;\n\n  logic [7:0]                  s_soc_jtag_regi;\n  logic [7:0]                  s_soc_jtag_rego;\n\n  logic  [`NB_CORES-1:0]             s_dbg_irq_valid;\n\n  logic                        s_rstn_por;\n  \n\n  logic                        s_dma_pe_irq_ack;\n  logic                        s_dma_pe_irq_valid;\n\n  logic [127:0]                s_pad_mux_soc;\n  logic [383:0]                s_pad_cfg_soc;\n\n  // due to the pad frame these numbers are fixed. Adjust the padframe\n  // accordingly if you change these.\n  localparam int unsigned N_UART = 1;\n  localparam int unsigned N_SPI = 1;\n  localparam int unsigned N_I2C = 2;\n\n  logic [N_SPI-1:0]            s_spi_clk;\n  logic [N_SPI-1:0][3:0]       s_spi_csn;\n  logic [N_SPI-1:0][3:0]       s_spi_oen;\n  logic [N_SPI-1:0][3:0]       s_spi_sdo;\n  logic [N_SPI-1:0][3:0]       s_spi_sdi;\n\n  logic [N_I2C-1:0]            s_i2c_scl_in;\n  logic [N_I2C-1:0]            s_i2c_scl_out;\n  logic [N_I2C-1:0]            s_i2c_scl_oe;\n  logic [N_I2C-1:0]            s_i2c_sda_in;\n  logic [N_I2C-1:0]            s_i2c_sda_out;\n  logic [N_I2C-1:0]            s_i2c_sda_oe;\n\n  //***********************************************************\n  //********** SOC TO CLUSTER DOMAINS SIGNALS *****************\n  //***********************************************************\n\n\n  logic                        s_cluster_clk;\n  logic                        s_cluster_rstn;\n  logic                        s_cluster_busy;\n  logic                        s_cluster_irq;\n  logic                        s_cluster_rtc;\n  logic                        s_cluster_fetch_enable;\n  logic [63:0]                 s_cluster_boot_addr; \n  logic                        s_cluster_test_en;\n  logic                        s_cluster_pow;\n  logic                        s_cluster_byp;\n\n  logic                        s_dma_pe_evt_ack;\n  logic                        s_dma_pe_evt_valid;\n  logic                        s_dma_pe_int_ack;\n  logic                        s_dma_pe_int_valid;\n  logic                        s_pf_evt_ack;\n  logic                        s_pf_evt_valid;\n\n  logic [LOG_DEPTH:0]                                  s_event_wptr;\n  logic [LOG_DEPTH:0]                                  s_event_rptr;\n  logic [2**LOG_DEPTH-1:0][EVENT_WIDTH-1:0]            s_event_dataasync;\n\n  // SOC TO CLUSTER AXI BUS\n  logic [LOG_DEPTH:0]                                    s_cluster_soc_bus_aw_wptr;\n  logic [LOG_DEPTH:0]                                    s_cluster_soc_bus_aw_rptr;\n  logic [2**LOG_DEPTH-1:0][AXI_CLUSTER_SOC_AW_WIDTH-1:0] s_cluster_soc_bus_aw_data;\n          \n  logic [LOG_DEPTH:0]                                    s_cluster_soc_bus_ar_wptr;\n  logic [LOG_DEPTH:0]                                    s_cluster_soc_bus_ar_rptr;\n  logic [2**LOG_DEPTH-1:0][AXI_CLUSTER_SOC_AR_WIDTH-1:0] s_cluster_soc_bus_ar_data;\n\n  logic [LOG_DEPTH:0]                                    s_cluster_soc_bus_w_wptr;\n  logic [LOG_DEPTH:0]                                    s_cluster_soc_bus_w_rptr;\n  logic [2**LOG_DEPTH-1:0][AXI_CLUSTER_SOC_W_WIDTH-1:0]  s_cluster_soc_bus_w_data;\n\n  logic [LOG_DEPTH:0]                                    s_cluster_soc_bus_r_wptr;\n  logic [LOG_DEPTH:0]                                    s_cluster_soc_bus_r_rptr;\n  logic [2**LOG_DEPTH-1:0][AXI_CLUSTER_SOC_R_WIDTH-1:0]  s_cluster_soc_bus_r_data;\n  \n  logic [LOG_DEPTH:0]                                    s_cluster_soc_bus_b_wptr;\n  logic [LOG_DEPTH:0]                                    s_cluster_soc_bus_b_rptr;\n  logic [2**LOG_DEPTH-1:0][AXI_CLUSTER_SOC_B_WIDTH-1:0]  s_cluster_soc_bus_b_data;\n  \n  // SOC TO CLUSTER AXI BUS\n  logic [LOG_DEPTH:0]                                    s_soc_cluster_bus_aw_wptr;\n  logic [LOG_DEPTH:0]                                    s_soc_cluster_bus_aw_rptr;\n  logic [2**LOG_DEPTH-1:0][AXI_SOC_CLUSTER_AW_WIDTH-1:0] s_soc_cluster_bus_aw_data;\n          \n  logic [LOG_DEPTH:0]                                    s_soc_cluster_bus_ar_wptr;\n  logic [LOG_DEPTH:0]                                    s_soc_cluster_bus_ar_rptr;\n  logic [2**LOG_DEPTH-1:0][AXI_SOC_CLUSTER_AR_WIDTH-1:0] s_soc_cluster_bus_ar_data;\n\n  logic [LOG_DEPTH:0]                                    s_soc_cluster_bus_w_wptr;\n  logic [LOG_DEPTH:0]                                    s_soc_cluster_bus_w_rptr;\n  logic [2**LOG_DEPTH-1:0][AXI_SOC_CLUSTER_W_WIDTH-1:0]  s_soc_cluster_bus_w_data;\n\n  logic [LOG_DEPTH:0]                                    s_soc_cluster_bus_r_wptr;\n  logic [LOG_DEPTH:0]                                    s_soc_cluster_bus_r_rptr;\n  logic [2**LOG_DEPTH-1:0][AXI_SOC_CLUSTER_R_WIDTH-1:0]  s_soc_cluster_bus_r_data;\n  \n  logic [LOG_DEPTH:0]                                    s_soc_cluster_bus_b_wptr;\n  logic [LOG_DEPTH:0]                                    s_soc_cluster_bus_b_rptr;\n  logic [2**LOG_DEPTH-1:0][AXI_SOC_CLUSTER_B_WIDTH-1:0]  s_soc_cluster_bus_b_data;\n  \n\n  logic[1:0]                        s_bootsel;\n\n  //A"}
{"text": "PB_BUS        apb_debug();  //not used\n  //XBAR_TCDM_BUS  lint_debug(); //not used\n\n  //***********************************************************\n  //********** PAD FRAME **************************************\n  //***********************************************************\n\n  pad_frame pad_frame_i\n  (\n        .pad_cfg_i             ( s_pad_cfg              ),\n        .ref_clk_o             ( s_ref_clk              ),\n        .rstn_o                ( s_rstn                 ),\n        .jtag_tdo_i            ( s_jtag_tdo             ),\n        .jtag_tck_o            ( s_jtag_tck             ),\n        .jtag_tdi_o            ( s_jtag_tdi             ),\n        .jtag_tms_o            ( s_jtag_tms             ),\n        .jtag_trst_o           ( s_jtag_trst            ),\n\n        .oe_spim_sdio0_i       ( s_oe_spim_sdio0        ),\n        .oe_spim_sdio1_i       ( s_oe_spim_sdio1        ),\n        .oe_spim_sdio2_i       ( s_oe_spim_sdio2        ),\n        .oe_spim_sdio3_i       ( s_oe_spim_sdio3        ),\n        .oe_spim_csn0_i        ( s_oe_spim_csn0         ),\n        .oe_spim_csn1_i        ( s_oe_spim_csn1         ),\n        .oe_spim_sck_i         ( s_oe_spim_sck          ),\n        .oe_sdio_clk_i         ( s_oe_sdio_clk          ),\n        .oe_sdio_cmd_i         ( s_oe_sdio_cmd          ),\n        .oe_sdio_data0_i       ( s_oe_sdio_data0        ),\n        .oe_sdio_data1_i       ( s_oe_sdio_data1        ),\n        .oe_sdio_data2_i       ( s_oe_sdio_data2        ),\n        .oe_sdio_data3_i       ( s_oe_sdio_data3        ),\n        .oe_i2s0_sck_i         ( s_oe_i2s0_sck          ),\n        .oe_i2s0_ws_i          ( s_oe_i2s0_ws           ),\n        .oe_i2s0_sdi_i         ( s_oe_i2s0_sdi          ),\n        .oe_i2s1_sdi_i         ( s_oe_i2s1_sdi          ),\n        .oe_cam_pclk_i         ( s_oe_cam_pclk          ),\n        .oe_cam_hsync_i        ( s_oe_cam_hsync         ),\n        .oe_cam_data0_i        ( s_oe_cam_data0         ),\n        .oe_cam_data1_i        ( s_oe_cam_data1         ),\n        .oe_cam_data2_i        ( s_oe_cam_data2         ),\n        .oe_cam_data3_i        ( s_oe_cam_data3         ),\n        .oe_cam_data4_i        ( s_oe_cam_data4         ),\n        .oe_cam_data5_i        ( s_oe_cam_data5         ),\n        .oe_cam_data6_i        ( s_oe_cam_data6         ),\n        .oe_cam_data7_i        ( s_oe_cam_data7         ),\n        .oe_cam_vsync_i        ( s_oe_cam_vsync         ),\n        .oe_i2c0_sda_i         ( s_oe_i2c0_sda          ),\n        .oe_i2c0_scl_i         ( s_oe_i2c0_scl          ),\n        .oe_uart_rx_i          ( s_oe_uart_rx           ),\n        .oe_uart_tx_i          ( s_oe_uart_tx           ),\n        \n        .oe_gpios_i            ( s_oe_gpios             ),\n        .oe_i2c1_sda_i         ( s_oe_i2c1_sda          ),\n        .oe_i2c1_scl_i         ( s_oe_i2c1_scl          ),\n\n        .oe_hyper_cs0n_i       ( s_oe_hyper_csn0        ),\n        .oe_hyper_cs1n_i       ( s_oe_hyper_csn1        ),\n        .oe_hyper_ck_i         ( s_oe_hyper_ck          ),\n        .oe_hyper_ckn_i        ( s_oe_hyper_ckn         ),\n        .oe_hyper_rwds0_i      ( s_oe_hyper_rwds0       ),\n        .oe_hyper_rwds1_i      ( s_oe_hyper_rwds1       ),\n        .oe_hyper_dq0_i        ( s_oe_hyper_dq0         ),\n        .oe_hyper_dq1_i        ( s_oe_hyper_dq1         ),\n        .oe_hyper_resetn_i     ( s_oe_hyper_reset       ),\n \n        .out_spim_sdio0_i      ( s_out_spim_sdio0       ),\n        .out_spim_sdio1_i      ( s_out_spim_sdio1       ),\n        .out_spim_sdio2_i      ( s_out_spim_sdio2       ),\n        .out_spim_sdio3_i      ( s_out_spim_sdio3       ),\n        .out_spim_csn0_i       ( s_out_spim_csn0        ),\n        .out_spim_csn1_i       ( s_out_spim_csn1        ),\n        .out_spim_sck_i        ( s_out_spim_sck         ),\n        .out_sdio_clk_i        ( s_out_sdio_clk         ),\n        .out_sdio_cmd_i        ( s_out_sdio_cmd         ),\n        .out_sdio_data0_i      ( s_out_sdio_data0       ),\n        .out_sdio_data1_i      ( s_out_sdio_data1       ),\n        .out_sdio_data2_i      ( s_out_sdio_data2       ),\n        .out_sdio_data3_i      ( s_out_sdio_data3       ),\n        .out_i2s0_sck_i        ( s_out_i2s0_sck         ),\n        .out_i2s0_ws_i         ( s_out_i2s0_ws          ),\n        .out_i2s0_sdi_i        ( s_out_i2s0_sdi         ),\n        .out_i2s1_sdi_i        ( s_out_i2s1_sdi         ),\n        .out_cam_pclk_i        ( s_out_cam_pclk         ),\n        .out_cam_hsync_i       ( s_out_cam_hsync        ),\n        .out_cam_data0_i       ( s_out_cam_data0        ),\n        .out_cam_data1_i       ( s_out_cam_data1        ),\n        .out_cam_data2_i       ( s_out_cam_data2        ),\n        .out_cam_data3_i       ( s_out_cam_data3        ),\n        .out_cam_data4_i       ( s_out_cam_data4        ),\n        .out_cam_data5_i       ( s_out_cam_data5        ),\n        .out_cam_data6_i       ( s_out_cam_data6        ),\n        .out_cam_data7_i       ( s_out_cam_data7        ),\n        .out_cam_vsync_i       ( s_out_cam_vsync        ),\n        .out_i2c0_sda_i        ( s_out_i2c0_sda         ),\n        .out_i2c0_scl_i        ( s_out_i2c0_scl         ),\n        .out_uart_rx_i         ( s_out_uart_rx          ),\n        .out_uart_tx_i         ( s_out_uart_tx          ),\n        \n        .out_gpios_i           ( s_out_gpios            ),\n        .out_i2c1_sda_i        ( s_out_i2c1_sda         ),\n        .out_i2c1_scl_i        ( s_out_i2c1_scl         ),\n\n        .out_hyper_cs0n_i      ( s_out_hyper_csn0       ),\n        .out_hyper_cs1n_i      ( s_out_hyper_csn1       ),\n        .out_hyper_ck_i        ( s_out_hyper_ck         ),\n        .out_hyper_ckn_i       ( s_out_hyper_ckn        ),\n        .out_hyper_rwds0_i     ( s_out_hyper_rwds0      ),\n        .out_hyper_rwds1_i     ( s_out_hyper_rwds1      ),\n        .out_hyper_dq0_i       ( s_out_hyper_dq0        ),\n        .out_hyper_dq1_i       ( s_out_hyper_dq1        ),\n        .out_hyper_resetn_i    ( s_out_hyper_reset      ),\n\n\n        .in_spim_sdio0_o       ( s_in_spim_sdio0        ),\n        .in_spim_sdio1_o       ( s_in_spim_sdio1        ),\n        .in_spim_sdio2_o       ( s_in_spim_sdio2        ),\n        .in_spim_sdio3_o       ( s_in_spim_sdio3        ),\n        .in_spim_csn0_o        ( s_in_spim_csn0         ),\n        .in_spim_csn1_o        ( s_in_spim_csn1         ),\n        .in_spim_sck_o         ( s_in_spim_sck          ),\n        .in_sdio_clk_o         ( s_in_sdio_clk          ),\n        .in_sdio_cmd_o         ( s_in_sdio_cmd          ),\n        .in_sdio_data0_o       ( s_in_sdio_data0        ),\n        .in_sdio_data1_o       ( s_in_sdio_data1        ),\n        .in_sdio_data2_o       ( s_in_sdio_data2        ),\n        .in_sdio_data3_o       ( s_in_sdio_data3        ),\n        .in_i2s0_sck_o         ( s_in_i2s0_sck          ),\n        .in_i2s0_ws_o          ( s_in_i2s0_ws           ),\n        .in_i2s0_sdi_o         ( s_in_i2s0_sdi          ),\n        .in_i2s1_sdi_o         ( s_in_i2s1_sdi          ),\n        .in_cam_pclk_o         ( s_in_cam_pclk          ),\n        .in_cam_hsync_o        ( s_in_cam_hsync         ),\n        .in_cam_data0_o        ( s_in_cam_data0         ),\n        .in_cam_data1_o        ( s_in_cam_data1         ),\n        .in_cam_data2_o        ( s_in_cam_data2         ),\n        .in_cam_data3_o        ( s_in_cam_data3         ),\n        .in_cam_data4_o        ( s_in_cam_data4         ),\n        .in_cam_data5_o        ( s_in_cam_data5         ),\n        .in_cam_data6_o        ( s_in_cam_data6         ),\n        .in_cam_data7_o        ( s_in_cam_data7         ),\n        .in_cam_vsync_o        ( s_in_cam_vsync         ),\n        .in_i2c0_sda_o         ( s_in_i2c0_sda          ),\n        .in_i2c0_scl_o         ( s_in_i2c0_scl          ),\n        .in_uart_rx_o          ( s_in_uart_rx           ),\n        .in_uart_tx_o          ( s_in_uart_tx           ),\n        \n        .in_gpios_o            ( s_in_gpios             ),\n        .in_i2c1_sda_o         ( s_in_i2c1_sda          ),\n        .in_i2c1_scl_o         ( s_in_i2c1_scl          ),\n\n        .in_hyper_cs0n_o       ( s_in_hyper_csn0        ),\n        .in_hyper_cs1n_o       ( s_in_hyper_csn1        ),\n        .in_hyper_ck_o         ( s_in_hyper_ck          ),\n        .in_hyper_ckn_o        ( s_in_hyper_ckn         ),\n        .in_hyper_rwds0_o      ( s_in_hyper_rwds0       ),\n        .in_hyper_rwds1_o      ( s_in_hyper_rwds1       ),\n        .in_hyper_dq0_o        ( s_in_hyper_dq0         ),\n        .in_hyper_dq1_o        ( s_in_hyper_dq1         ),\n        .in_hyper_resetn_o     ( s_in_hyper_reset       ),\n\n \n\n        .bootsel_o             ( s_bootsel              ),\n\n        //EXT CHIP to PAD\n        .pad_spim_sdio0        ( pad_spim_sdio0         ),\n        .pad_spim_sdio1        ( pad_spim_sdio1         ),\n        .pad_spim_sdio2        ( pad_spim_sdio2         ),\n        .pad_spim_sdio3        ( pad_spim_sdio3         ),\n        .pad_spim_csn0         ( pad_spim_csn0          ),\n        .pad_spim_csn1         ( pad_spim_csn1          ),\n        .pad_spim_sck          ( pad_spim_sck           ),\n        .pad_sdio_clk          ( pad_sdio_clk           ),\n        .pad_sdio_cmd          ( pad_sdio_cmd           ),\n        .pad_sdio_data0        ( pad_sdio_data0         ),\n        .pad_sdio_data1        ( pad_sdio_data1         ),\n        .pad_sdio_data2        ( pad_sdio_data2         ),\n        .pad_sdio_data3        ( pad_sdio_data3         ),\n        .pad_i2s0_sck          ( pad_i2s0_sck           ),\n        .pad_i2s0_ws           ( pad_i2s0_ws            ),\n        .pad_i2s0_sdi          ( pad_i2s0_sdi           ),\n        .pad_i2s1_sdi          ( pad_i2s1_sdi           ),\n        .pad_cam_pclk          ( pad_cam_pclk           ),\n        .pad_cam_hsync         ( pad_cam_hsync          ),\n        .pad_cam_data0         ( pad_cam_data0          ),\n        .pad_cam_data1         ( pad_cam_data1          ),\n        .pad_cam_data2         ( pad_cam_data2          ),\n        .pad_cam_data3         ( pad_cam_data3          ),\n        .pad_cam_data4         ( pad_cam_data4          ),\n        .pad_cam_data5         ( pad_cam_data5          ),\n        .pad_cam_data6         ( pad_cam_data6          ),\n        .pad_cam_data7         ( pad_cam_data7          ),\n        .pad_cam_vsync         ( pad_cam_vsync          ),\n        .pad_i2c0_sda          ( pad_i2c0_sda           ),\n        .pad_i2c0_scl          ( pad_i2c0_scl           ),\n        .pad_uart_rx           ( pad_uart_rx            ),\n        .pad_uart_tx           ( pad_uart_tx            ),\n        \n        .pad_gpios             ( pad_gpios              ),\n        .pad_i2c1_sda          ( pad_i2c1_sda           ),\n        .pad_i2c1_scl          ( pad_i2c1_scl           ),\n\n        .pad_hyper_dq0         ( pad_hyper_dq0          ),\n        .pad_hyper_dq1         ( pad_hyper_dq1          ),\n        .pad_hyper_ck          ( pad_hyper_ck           ),\n        .pad_hyper_ckn         ( pad_hyper_ckn          ),\n        .pad_hyper_csn0        ( pad_hyper_csn0         ),\n        .pad_hyper_csn1        ( pad_hyper_csn1         ),\n        .pad_hyper_rwds0       ( pad_hyper_rwds0        ),\n        .pad_hyper_rwds1       ( pad_hyper_rwds1        ),\n        .pad_hyper_reset       ( pad_hyper_reset        ),\n\n        .pad_bootsel0          ( pad_bootsel0           ),\n        .pad_bootsel1          ( pad_bootsel1           ),\n        .pad_reset_n           ( pad_reset_n            ),\n        .pad_jtag_tck          ( pad_jtag_tck           ),\n        .pad_jtag_tdi          ( pad_jtag_tdi           ),\n        .pad_jtag_tdo          ( pad_jtag_tdo           ),\n        .pad_jtag_tms          ( pad_jtag_tms           ),\n        .pad_jtag_trst         ( pad_jtag_trst          ),\n        .pad_xtal_in           ( pad_xtal_in            )\n\n   );\n\n  //***********************************************************\n  //********** SAFE DOMAIN ************************************\n  //***********************************************************\n   safe_domain safe_domain_i (\n\n        .ref_clk_i                  ( s_ref_clk                   ),\n        .slow_clk_o                 ( s_slow_clk                  ),\n        .rst_ni                     ( s_rstn                     ),\n\n        .rst_no                     ( s_rstn_por                  ),\n\n        .test_clk_o                 ( s_test_clk                  ),\n        .test_mode_o                ( s_test_mode                 ),\n        .mode_select_o              ( s_mode_select               ),\n        .dft_cg_enable_o            ( s_dft_cg_enable             ),\n\n        .pad_cfg_o                  ( s_pad_cfg                   ),\n\n        .pad_cfg_i                  ( s_pad_cfg_soc               ),\n        .pad_mux_i                  ( s_pad_mux_soc               ),\n\n        .gpio_out_i                 ( s_gpio_out                  ),\n        .gpio_in_o                  ( s_gpio_in                   ),\n        .gpio_dir_i                 ( s_gpio_dir                  ),\n        .gpio_cfg_i                 ( s_gpio_cfg                  ),\n\n        .uart_tx_i                  ( s_uart_tx                   ),\n        .uart_rx_o                  ( s_uart_rx                   ),\n\n        .i2c_scl_out_i              ( s_i2c_scl_out               ),\n        .i2c_scl_in_o               ( s_i2c_scl_in                ),\n        .i2c_scl_oe_i               ( s_i2c_scl_oe                ),\n        .i2c_sda_out_i              ( s_i2c_sda_out               ),\n        .i2c_sda_in_o               ( s_i2c_sda_in                ),\n        .i2c_sda_oe_i               ( s_i2c_sda_oe                ),\n\n        .i2s_slave_sd0_o            ( s_i2s_sd0_in                ),\n        .i2s_slave_sd1_o            ( s_i2s_sd1_in                ),\n        .i2s_slave_ws_o             ( s_i2s_ws_in                 ),\n        .i2s_slave_ws_i             ( s_i2s_ws0_out               ),\n        .i2s_slave_ws_oe            ( s_i2s_slave_ws_oe           ),\n        .i2s_slave_sck_o            ( s_i2s_sck_in                ),\n        .i2s_slave_sck_i            ( s_i2s_sck0_out              ),\n        .i2s_slave_sck_oe           ( s_i2s_slave_sck_oe          ),\n\n        .spi_clk_i                  ( s_spi_clk                   ),\n        .spi_csn_i                  ( s_spi_csn                   ),\n        .spi_oen_i                  ( s_spi_oen                   ),\n        .spi_sdo_i                  ( s_spi_sdo                   ),\n        .spi_sdi_o                  ( s_spi_sdi                   ),\n\n        .sdio_clk_i                 ( s_sdio_clk                  ),\n        .sdio_cmd_i                 ( s_sdio_cmdo                 ),\n        .sdio_cmd_o                 ( s_sdio_cmdi                 ),\n        .sdio_cmd_oen_i             ( s_sdio_cmd_oen              ),\n        .sdio_data_i                ( s_sdio_datao                ),\n        .sdio_data_o                ( s_sdio_datai                ),\n        .sdio_data_oen_i            ( s_sdio_data_oen             ),\n\n        .cam_pclk_o                 ( s_cam_pclk                  ),\n        .cam_data_o                 ( s_cam_data                  ),\n        .cam_hsync_o                ( s_cam_hsync                 ),\n        .cam_vsync_o                ( s_cam_vsync                 ),\n\n        .timer0_i                   ( s_timer0                    ),\n        .timer1_i                   ( s_timer1                    ),\n        .timer2_i                   ( s_timer2                    ),\n        .timer3_i                   ( s_timer3                    ),\n\n\n        .hyper_cs_ni                  ( s_hyper_cs_n                     ),\n        .hyper_ck_i                   ( s_hyper_ck                       ),\n        .hyper_ck_ni                  ( s_hyper_ck_n                     ),\n        .hyper_rwds_i                 ( s_hyper_rwds_o                   ),\n        .hyper_rwds_o                 ( s_hyper_rwds_i                   ),\n        .hyper_rwds_oe_i              ( s_hyper_rwds_oe                  ),\n        .hyper_dq_o                   ( s_hyper_dq_i                     ),\n        .hyper_dq_i                   ( s_hyper_dq_o                     ),\n        .hyper_dq_oe_o                ( s_hyper_dq_oe                    ),\n        .hyper_reset_no               ( s_hyper_reset_n                  ),\n\n\n        .out_spim_sdio0_o           ( s_out_spim_sdio0            ),\n        .out_spim_sdio1_o           ( s_out_spim_sdio1            ),\n        .out_spim_sdio2_o           ( s_out_spim_sdio2            ),\n        .out_spim_sdio3_o           ( s_out_spim_sdio3            ),\n        .out_spim_csn0_o            ( s_out_spim_csn0             ),\n        .out_spim_csn1_o            ( s_out_spim_csn1             ),\n        .out_spim_sck_o             ( s_out_spim_sck              ),\n\n        .out_sdio_clk_o             ( s_out_sdio_clk              ),\n        .out_sdio_cmd_o             ( s_out_sdio_cmd              ),\n        .out_sdio_data0_o           ( s_out_sdio_data0            ),\n        .out_sdio_data1_o           ( s_out_sdio_data1            ),\n        .out_sdio_data2_o           ( s_out_sdio_data2            ),\n        .out_sdio_data3_o           ( s_out_sdio_data3            ),\n\n        .out_uart_rx_o              ( s_out_uart_rx               ),\n        .out_uart_tx_o              ( s_out_uart_tx               ),\n\n        .out_cam_pclk_o             ( s_out_cam_pclk              ),\n        .out_cam_hsync_o            ( s_out_cam_hsync             ),\n        .out_cam_data0_o            ( s_out_cam_data0             ),\n        .out_cam_data1_o            ( s_out_cam_data1             ),\n        .out_cam_data2_o            ( s_out_cam_data2             ),\n        .out_cam_data3_o            ( s_out_cam_data3             ),\n        .out_cam_data4_o            ( s_out_cam_data4             ),\n        .out_cam_data5_o            ( s_out_cam_data5             ),\n        .out_cam_data6_o            ( s_out_cam_data6             ),\n        .out_cam_data7_o            ( s_out_cam_data7             ),\n        .out_cam_vsync_o            ( s_out_cam_vsync             ),\n\n        .out_i2c0_sda_o             ( s_out_i2c0_sda              ),\n        .out_i2c0_scl_o             ( s_out_i2c0_scl              ),\n        .out_i2s0_sck_o             ( s_out_i2s0_sck              ),\n        .out_i2s0_ws_o              ( s_out_i2s0_ws               ),\n        .out_i2s0_sdi_o             ( s_out_i2s0_sdi              ),\n        .out_i2s1_sdi_o             ( s_out_i2s1_sdi              ),\n        \n        .out_gpios_o                ( s_out_gpios                 ),\n        .out_i2c1_sda_o             ( s_out_i2c1_sda              ),\n        .out_i2c1_scl_o             ( s_out_i2c1_scl              ),\n\n        .out_hyper_cs0n_o           ( s_out_hyper_csn0            ),\n        .out_hyper_cs1n_o           ( s_out_hyper_csn1            ),\n        .out_hyper_ck_o             ( s_out_hyper_ck              ),\n        .out_hyper_ckn_o            ( s_out_hyper_ckn             ),\n        .out_hyper_rwds0_o          ( s_out_hyper_rwds0           ),\n        .out_hyper_rwds1_o          ( s_out_hyper_rwds1           ),\n        .out_hyper_dq0_o            ( s_out_hyper_dq0             ),\n        .out_hyper_dq1_o            ( s_out_hyper_dq1             ),\n        .out_hyper_resetn_o         ( s_out_hyper_reset           ),\n\n        .in_spim_sdio0_i            ( s_in_spim_sdio0             ),\n        .in_spim_sdio1_i            ( s_in_spim_sdio1             ),\n        .in_spim_sdio2_i            ( s_in_spim_sdio2             ),\n        .in_spim_sdio3_i            ( s_in_spim_sdio3             ),\n        .in_spim_csn0_i             ( s_in_spim_csn0              ),\n        .in_spim_csn1_i             ( s_in_spim_csn1              ),\n        .in_spim_sck_i              ( s_in_spim_sck               ),\n\n        .in_sdio_clk_i              ( s_in_sdio_clk               ),\n        .in_sdio_cmd_i              ( s_in_"}
{"text": "sdio_cmd               ),\n        .in_sdio_data0_i            ( s_in_sdio_data0             ),\n        .in_sdio_data1_i            ( s_in_sdio_data1             ),\n        .in_sdio_data2_i            ( s_in_sdio_data2             ),\n        .in_sdio_data3_i            ( s_in_sdio_data3             ),\n\n        .in_uart_rx_i               ( s_in_uart_rx                ),\n        .in_uart_tx_i               ( s_in_uart_tx                ),\n        .in_cam_pclk_i              ( s_in_cam_pclk               ),\n        .in_cam_hsync_i             ( s_in_cam_hsync              ),\n        .in_cam_data0_i             ( s_in_cam_data0              ),\n        .in_cam_data1_i             ( s_in_cam_data1              ),\n        .in_cam_data2_i             ( s_in_cam_data2              ),\n        .in_cam_data3_i             ( s_in_cam_data3              ),\n        .in_cam_data4_i             ( s_in_cam_data4              ),\n        .in_cam_data5_i             ( s_in_cam_data5              ),\n        .in_cam_data6_i             ( s_in_cam_data6              ),\n        .in_cam_data7_i             ( s_in_cam_data7              ),\n        .in_cam_vsync_i             ( s_in_cam_vsync              ),\n\n        .in_i2c0_sda_i              ( s_in_i2c0_sda               ),\n        .in_i2c0_scl_i              ( s_in_i2c0_scl               ),\n        .in_i2s0_sck_i              ( s_in_i2s0_sck               ),\n        .in_i2s0_ws_i               ( s_in_i2s0_ws                ),\n        .in_i2s0_sdi_i              ( s_in_i2s0_sdi               ),\n        .in_i2s1_sdi_i              ( s_in_i2s1_sdi               ),\n        \n        .in_gpios_i                 ( s_in_gpios                  ),\n        .in_i2c1_sda_i              ( s_in_i2c1_sda               ),\n        .in_i2c1_scl_i              ( s_in_i2c1_scl               ),\n\n\n        .in_hyper_cs0n_i            ( s_in_hyper_csn0            ),\n        .in_hyper_cs1n_i            ( s_in_hyper_csn1            ),\n        .in_hyper_ck_i              ( s_in_hyper_ck              ),\n        .in_hyper_ckn_i             ( s_in_hyper_ckn             ),\n        .in_hyper_rwds0_i           ( s_in_hyper_rwds0           ),\n        .in_hyper_rwds1_i           ( s_in_hyper_rwds1           ),\n        .in_hyper_dq0_i             ( s_in_hyper_dq0             ),\n        .in_hyper_dq1_i             ( s_in_hyper_dq1             ),\n        .in_hyper_resetn_i          ( s_in_hyper_reset           ),\n\n        .oe_spim_sdio0_o            ( s_oe_spim_sdio0             ),\n        .oe_spim_sdio1_o            ( s_oe_spim_sdio1             ),\n        .oe_spim_sdio2_o            ( s_oe_spim_sdio2             ),\n        .oe_spim_sdio3_o            ( s_oe_spim_sdio3             ),\n        .oe_spim_csn0_o             ( s_oe_spim_csn0              ),\n        .oe_spim_csn1_o             ( s_oe_spim_csn1              ),\n        .oe_spim_sck_o              ( s_oe_spim_sck               ),\n\n        .oe_sdio_clk_o              ( s_oe_sdio_clk               ),\n        .oe_sdio_cmd_o              ( s_oe_sdio_cmd               ),\n        .oe_sdio_data0_o            ( s_oe_sdio_data0             ),\n        .oe_sdio_data1_o            ( s_oe_sdio_data1             ),\n        .oe_sdio_data2_o            ( s_oe_sdio_data2             ),\n        .oe_sdio_data3_o            ( s_oe_sdio_data3             ),\n\n        .oe_uart_rx_o               ( s_oe_uart_rx                ),\n        .oe_uart_tx_o               ( s_oe_uart_tx                ),\n        .oe_cam_pclk_o              ( s_oe_cam_pclk               ),\n        .oe_cam_hsync_o             ( s_oe_cam_hsync              ),\n        .oe_cam_data0_o             ( s_oe_cam_data0              ),\n        .oe_cam_data1_o             ( s_oe_cam_data1              ),\n        .oe_cam_data2_o             ( s_oe_cam_data2              ),\n        .oe_cam_data3_o             ( s_oe_cam_data3              ),\n        .oe_cam_data4_o             ( s_oe_cam_data4              ),\n        .oe_cam_data5_o             ( s_oe_cam_data5              ),\n        .oe_cam_data6_o             ( s_oe_cam_data6              ),\n        .oe_cam_data7_o             ( s_oe_cam_data7              ),\n        .oe_cam_vsync_o             ( s_oe_cam_vsync              ),\n\n        .oe_i2c0_sda_o              ( s_oe_i2c0_sda               ),\n        .oe_i2c0_scl_o              ( s_oe_i2c0_scl               ),\n        .oe_i2s0_sck_o              ( s_oe_i2s0_sck               ),\n        .oe_i2s0_ws_o               ( s_oe_i2s0_ws                ),\n        .oe_i2s0_sdi_o              ( s_oe_i2s0_sdi               ),\n        .oe_i2s1_sdi_o              ( s_oe_i2s1_sdi               ),\n        \n        .oe_gpios_o                 ( s_oe_gpios                  ),\n        .oe_i2c1_sda_o              ( s_oe_i2c1_sda               ),\n        .oe_i2c1_scl_o              ( s_oe_i2c1_scl               ),\n     \n        .oe_hyper_cs0n_o            ( s_oe_hyper_csn0             ),\n        .oe_hyper_cs1n_o            ( s_oe_hyper_csn1             ),\n        .oe_hyper_ck_o              ( s_oe_hyper_ck               ),\n        .oe_hyper_ckn_o             ( s_oe_hyper_ckn              ),\n        .oe_hyper_rwds0_o           ( s_oe_hyper_rwds0            ),\n        .oe_hyper_rwds1_o           ( s_oe_hyper_rwds1            ),\n        .oe_hyper_dq0_o             ( s_oe_hyper_dq0              ),\n        .oe_hyper_dq1_o             ( s_oe_hyper_dq1              ),\n        .oe_hyper_resetn_o          ( s_oe_hyper_reset            ),\n\n        .*\n   );\n\n   // SOC DOMAIN\n   soc_domain #(\n      .CORE_TYPE          ( CORE_TYPE_FC               ),\n      .USE_FPU            ( USE_FPU                    ),\n      .USE_HWPE           ( USE_HWPE                   ),\n      .AXI_ADDR_WIDTH     ( AXI_ADDR_WIDTH             ),\n      .AXI_DATA_IN_WIDTH  ( AXI_CLUSTER_SOC_DATA_WIDTH ),\n      .AXI_DATA_OUT_WIDTH ( AXI_SOC_CLUSTER_DATA_WIDTH ),\n      .AXI_ID_IN_WIDTH    ( AXI_CLUSTER_SOC_ID_WIDTH   ),\n      .AXI_ID_OUT_WIDTH   ( AXI_SOC_CLUSTER_ID_WIDTH   ),\n      .AXI_USER_WIDTH     ( AXI_USER_WIDTH             ),\n      .AXI_STRB_IN_WIDTH  ( AXI_CLUSTER_SOC_STRB_WIDTH ),\n      .AXI_STRB_OUT_WIDTH ( AXI_SOC_CLUSTER_STRB_WIDTH ),\n      .BUFFER_WIDTH       ( BUFFER_WIDTH               ),\n      .C2S_AW_WIDTH       ( AXI_CLUSTER_SOC_AW_WIDTH   ),\n      .C2S_W_WIDTH        ( AXI_CLUSTER_SOC_W_WIDTH    ),\n      .C2S_B_WIDTH        ( AXI_CLUSTER_SOC_B_WIDTH    ),\n      .C2S_AR_WIDTH       ( AXI_CLUSTER_SOC_AR_WIDTH   ),\n      .C2S_R_WIDTH        ( AXI_CLUSTER_SOC_R_WIDTH    ),\n      .S2C_AW_WIDTH       ( AXI_SOC_CLUSTER_AW_WIDTH   ),\n      .S2C_W_WIDTH        ( AXI_SOC_CLUSTER_W_WIDTH    ),\n      .S2C_B_WIDTH        ( AXI_SOC_CLUSTER_B_WIDTH    ),\n      .S2C_AR_WIDTH       ( AXI_SOC_CLUSTER_AR_WIDTH   ),\n      .S2C_R_WIDTH        ( AXI_SOC_CLUSTER_R_WIDTH    ),\n      .EVNT_WIDTH         ( EVENT_WIDTH                ),\n      .NB_CL_CORES        ( `NB_CORES                  ),\n      .N_UART             ( N_UART                     ),\n      .N_SPI              ( N_SPI                      ),\n      .N_I2C              ( N_I2C                      )\n   ) soc_domain_i (\n\n        .ref_clk_i                    ( s_ref_clk                        ),\n        .slow_clk_i                   ( s_slow_clk                       ),\n        .test_clk_i                   ( s_test_clk                       ),\n\n        .rstn_glob_i                  ( s_rstn_por                       ),\n\n        .mode_select_i                ( s_mode_select                    ),\n        .dft_cg_enable_i              ( s_dft_cg_enable                  ),\n        .dft_test_mode_i              ( s_test_mode                      ),\n\n        .bootsel_i                    ( s_bootsel                        ),\n\n        // we immediately start booting in the default setup\n        .fc_fetch_en_valid_i          ( 1'b1                             ),\n        .fc_fetch_en_i                ( 1'b1                             ),\n\n        .jtag_tck_i                   ( s_jtag_tck                       ),\n        .jtag_trst_ni                 ( s_jtag_trst                      ),\n        .jtag_tms_i                   ( s_jtag_tms                       ),\n        .jtag_tdi_i                   ( s_jtag_tdi                       ),\n        .jtag_tdo_o                   ( s_jtag_tdo                       ),\n\n        .pad_cfg_o                    ( s_pad_cfg_soc                    ),\n        .pad_mux_o                    ( s_pad_mux_soc                    ),\n\n        .gpio_in_i                    ( s_gpio_in                        ),\n        .gpio_out_o                   ( s_gpio_out                       ),\n        .gpio_dir_o                   ( s_gpio_dir                       ),\n        .gpio_cfg_o                   ( s_gpio_cfg                       ),\n\n        .uart_tx_o                    ( s_uart_tx                        ),\n        .uart_rx_i                    ( s_uart_rx                        ),\n\n        .cam_clk_i                    ( s_cam_pclk                       ),\n        .cam_data_i                   ( s_cam_data                       ),\n        .cam_hsync_i                  ( s_cam_hsync                      ),\n        .cam_vsync_i                  ( s_cam_vsync                      ),\n\n        .timer_ch0_o                  ( s_timer0                         ),\n        .timer_ch1_o                  ( s_timer1                         ),\n        .timer_ch2_o                  ( s_timer2                         ),\n        .timer_ch3_o                  ( s_timer3                         ),\n\n        .i2c_scl_i                    ( s_i2c_scl_in                     ),\n        .i2c_scl_o                    ( s_i2c_scl_out                    ),\n        .i2c_scl_oe_o                 ( s_i2c_scl_oe                     ),\n        .i2c_sda_i                    ( s_i2c_sda_in                     ),\n        .i2c_sda_o                    ( s_i2c_sda_out                    ),\n        .i2c_sda_oe_o                 ( s_i2c_sda_oe                     ),\n\n        .i2s_slave_sd0_i              ( s_i2s_sd0_in                     ),\n        .i2s_slave_sd1_i              ( s_i2s_sd1_in                     ),\n        .i2s_slave_ws_i               ( s_i2s_ws_in                      ),\n        .i2s_slave_ws_o               ( s_i2s_ws0_out                    ),\n        .i2s_slave_ws_oe              ( s_i2s_slave_ws_oe                ),\n        .i2s_slave_sck_i              ( s_i2s_sck_in                     ),\n        .i2s_slave_sck_o              ( s_i2s_sck0_out                   ),\n        .i2s_slave_sck_oe             ( s_i2s_slave_sck_oe               ),\n\n        .spi_clk_o                    ( s_spi_clk                        ),\n        .spi_csn_o                    ( s_spi_csn                        ),\n        .spi_oen_o                    ( s_spi_oen                        ),\n        .spi_sdo_o                    ( s_spi_sdo                        ),\n        .spi_sdi_i                    ( s_spi_sdi                        ),\n\n        .sdio_clk_o                   ( s_sdio_clk                       ),\n        .sdio_cmd_o                   ( s_sdio_cmdo                      ),\n        .sdio_cmd_i                   ( s_sdio_cmdi                      ),\n        .sdio_cmd_oen_o               ( s_sdio_cmd_oen                   ),\n        .sdio_data_o                  ( s_sdio_datao                     ),\n        .sdio_data_i                  ( s_sdio_datai                     ),\n        .sdio_data_oen_o              ( s_sdio_data_oen                  ),\n\n        .hyper_cs_no                  ( s_hyper_cs_n                     ),\n        .hyper_ck_o                   ( s_hyper_ck                       ),\n        .hyper_ck_no                  ( s_hyper_ck_n                     ),\n        .hyper_rwds_o                 ( s_hyper_rwds_o                   ),\n        .hyper_rwds_i                 ( s_hyper_rwds_i                   ),\n        .hyper_rwds_oe_o              ( s_hyper_rwds_oe                  ),\n        .hyper_dq_i                   ( s_hyper_dq_i                     ),\n        .hyper_dq_o                   ( s_hyper_dq_o                     ),\n        .hyper_dq_oe_o                ( s_hyper_dq_oe                    ),\n        .hyper_reset_no               ( s_hyper_reset_n                  ),\n\n        .cluster_busy_i               ( s_cluster_busy                   ),\n\n        .async_cluster_events_wptr_o  ( s_event_wptr                     ),\n        .async_cluster_events_rptr_i  ( s_event_rptr                     ),\n        .async_cluster_events_data_o  ( s_event_dataasync                ),\n\n        .cluster_irq_o                ( s_cluster_irq                    ),\n\n        .dbg_irq_valid_o              ( s_dbg_irq_valid                  ),\n\n        .dma_pe_evt_ack_o             ( s_dma_pe_evt_ack                 ),\n        .dma_pe_evt_valid_i           ( s_dma_pe_evt_valid               ),\n        .dma_pe_irq_ack_o             ( s_dma_pe_irq_ack                 ),\n        .dma_pe_irq_valid_i           ( '0 ), // s_dma_pe_irq_valid               ),\n        .pf_evt_ack_o                 ( s_pf_evt_ack                     ),\n        .pf_evt_valid_i               ( '0 ), // s_pf_evt_valid                   ),\n\n        .cluster_pow_o                ( s_cluster_pow                    ),\n        .cluster_byp_o                ( s_cluster_byp                    ),\n\n        .async_data_slave_aw_wptr_i   ( s_cluster_soc_bus_aw_wptr        ),\n        .async_data_slave_aw_rptr_o   ( s_cluster_soc_bus_aw_rptr        ),\n        .async_data_slave_aw_data_i   ( s_cluster_soc_bus_aw_data        ),\n                   \n        .async_data_slave_ar_wptr_i   ( s_cluster_soc_bus_ar_wptr        ),\n        .async_data_slave_ar_rptr_o   ( s_cluster_soc_bus_ar_rptr        ),\n        .async_data_slave_ar_data_i   ( s_cluster_soc_bus_ar_data        ),\n\n        .async_data_slave_w_wptr_i    ( s_cluster_soc_bus_w_wptr         ),\n        .async_data_slave_w_data_i    ( s_cluster_soc_bus_w_data         ),\n        .async_data_slave_w_rptr_o    ( s_cluster_soc_bus_w_rptr         ),\n\n        .async_data_slave_r_wptr_o    ( s_cluster_soc_bus_r_wptr         ),\n        .async_data_slave_r_rptr_i    ( s_cluster_soc_bus_r_rptr         ),\n        .async_data_slave_r_data_o    ( s_cluster_soc_bus_r_data         ),\n\n        .async_data_slave_b_wptr_o    ( s_cluster_soc_bus_b_wptr         ),\n        .async_data_slave_b_rptr_i    ( s_cluster_soc_bus_b_rptr         ),\n        .async_data_slave_b_data_o    ( s_cluster_soc_bus_b_data         ),\n\n        .async_data_master_aw_wptr_o  ( s_soc_cluster_bus_aw_wptr        ),\n        .async_data_master_aw_rptr_i  ( s_soc_cluster_bus_aw_rptr        ),\n        .async_data_master_aw_data_o  ( s_soc_cluster_bus_aw_data        ),\n                                     \n        .async_data_master_ar_wptr_o  ( s_soc_cluster_bus_ar_wptr        ),\n        .async_data_master_ar_rptr_i  ( s_soc_cluster_bus_ar_rptr        ),\n        .async_data_master_ar_data_o  ( s_soc_cluster_bus_ar_data        ),\n                                     \n        .async_data_master_w_wptr_o   ( s_soc_cluster_bus_w_wptr         ),\n        .async_data_master_w_data_o   ( s_soc_cluster_bus_w_data         ),\n        .async_data_master_w_rptr_i   ( s_soc_cluster_bus_w_rptr         ),\n                                     \n        .async_data_master_r_wptr_i   ( s_soc_cluster_bus_r_wptr         ),\n        .async_data_master_r_rptr_o   ( s_soc_cluster_bus_r_rptr         ),\n        .async_data_master_r_data_i   ( s_soc_cluster_bus_r_data         ),\n                                     \n        .async_data_master_b_wptr_i   ( s_soc_cluster_bus_b_wptr         ),\n        .async_data_master_b_rptr_o   ( s_soc_cluster_bus_b_rptr         ),\n        .async_data_master_b_data_i   ( s_soc_cluster_bus_b_data         ),\n                   \n        .cluster_clk_o                ( s_cluster_clk                    ),\n        .cluster_rstn_o               ( s_cluster_rstn                   ),\n\n        .cluster_rtc_o                ( s_cluster_rtc                    ),\n        .cluster_fetch_enable_o       ( s_cluster_fetch_enable           ),\n        .cluster_boot_addr_o          ( s_cluster_boot_addr              ),\n        .cluster_test_en_o            ( s_cluster_test_en                ),\n        .*\n    );\n\ncluster_domain#(\n  //CLUSTER PARAMETERS\n        .CORE_TYPE_CL        ( CORE_TYPE_CL ),\n        .USE_HWPE_CL         ( USE_HWPE_CL ),\n        .NB_CORES            (`NB_CORES),\n        .NB_HWPE_PORTS       (4),\n        .NB_DMAS             (4),\n        .TCDM_SIZE           (64*1024),\n        .NB_TCDM_BANKS       (16),\n        .L2_SIZE             (512*1024),\n  // ICACHE PARAMETERS\n        .SET_ASSOCIATIVE     (4),\n        .CACHE_LINE          (1),\n        .CACHE_SIZE          (4096),\n        .ICACHE_DATA_WIDTH   (128),\n        .L0_BUFFER_FEATURE   (\"DISABLED\"),\n        .MULTICAST_FEATURE   (\"DISABLED\"),\n        .SHARED_ICACHE       (\"ENABLED\"),\n        .DIRECT_MAPPED_FEATURE(\"DISABLED\"),\n  // CORE PARAMETERS\n        .ROM_BOOT_ADDR       (32'h1A000000),\n        .BOOT_ADDR           (32'h1C000000),\n        .INSTR_RDATA_WIDTH   (32),\n        .CLUST_FPU           (`CLUST_FPU),\n        .CLUST_FP_DIVSQRT    (`CLUST_FP_DIVSQRT),\n        .CLUST_SHARED_FP     (`CLUST_SHARED_FP),\n        .CLUST_SHARED_FP_DIVSQRT(`CLUST_SHARED_FP_DIVSQRT),\n\n  // AXI ADDR WIDTH\n        .AXI_ADDR_WIDTH      (AXI_ADDR_WIDTH),\n        .AXI_DATA_S2C_WIDTH  (AXI_SOC_CLUSTER_DATA_WIDTH),\n        .AXI_DATA_C2S_WIDTH  (AXI_CLUSTER_SOC_DATA_WIDTH),\n        .AXI_USER_WIDTH      (AXI_USER_WIDTH),\n        .AXI_ID_IN_WIDTH     (AXI_SOC_CLUSTER_ID_WIDTH),\n        .AXI_ID_OUT_WIDTH    (AXI_CLUSTER_SOC_ID_WIDTH),\n        .DC_SLICE_BUFFER_WIDTH(BUFFER_WIDTH),\n        .LOG_DEPTH           (LOG_DEPTH),\n  // AXI CLUSTER TO SOC CDC\n        .C2S_AW_WIDTH        (AXI_CLUSTER_SOC_AW_WIDTH),\n        .C2S_W_WIDTH         (AXI_CLUSTER_SOC_W_WIDTH),\n        .C2S_B_WIDTH         (AXI_CLUSTER_SOC_B_WIDTH),\n        .C2S_AR_WIDTH        (AXI_CLUSTER_SOC_AR_WIDTH),\n        .C2S_R_WIDTH         (AXI_CLUSTER_SOC_R_WIDTH),\n // AXI SOC TO CLUSTER\n        .S2C_AW_WIDTH        (AXI_SOC_CLUSTER_AW_WIDTH),\n        .S2C_W_WIDTH         (AXI_SOC_CLUSTER_W_WIDTH),\n        .S2C_B_WIDTH         (AXI_SOC_CLUSTER_B_WIDTH),\n        .S2C_AR_WIDTH        (AXI_SOC_CLUSTER_AR_WIDTH),\n        .S2C_R_WIDTH         (AXI_SOC_CLUSTER_R_WIDTH), \n  // CLUSTER MAIN PARAMETERS\n        .DATA_WIDTH          (32),\n        .ADDR_WIDTH          (32),\n  // TCDM PARAMETERS\n        .TEST_SET_BIT        (20), // bits used to indicate a test and set opration during a load in TCDM\n  // PERIPH PARAMETERS\n        .LOG_CLUSTER         (5), // NOT USED RIGHT NOW\n        .PE_ROUTING_LSB      (10), //LSB used as routing BIT in periph interco\n        .EVNT_WIDTH          (8)\n        )  cluster_domain_i\n    (\n        .clk_i                        ( s_cluster_clk                    ),\n        .rst_ni                       ( s_cluster_rstn                   ),\n        .ref_clk_i                    ( s_ref_clk                        ),\n\n        .async_cluster_events_wptr_i  ( s_event_wptr                     ),\n        .async_cluster_events_rptr_o  ( s_event_rptr                     ),\n        .async_cluster_events_data_i  ( s_event_dataasync                ),\n\n        .dma_pe_evt_ack_i             ( s_dma_pe_evt_ack                 ),\n        .dma_pe_evt_valid_o           ( s_dma_pe_evt_valid               ),\n        .dma_pe_irq_ack_i             ( s_dma_pe_irq_ack                 ),\n        .dma_pe_irq_valid_o           ( s_dma_pe_irq_valid               ),\n\n        .dbg_irq_valid_i              ( s_dbg_irq_valid                  ), //s_dbg_irq_valid\n\n\n        .pf_evt_ack_i                 ( s_pf_evt_ack                     ),\n        .pf_evt_valid_o               ( s_pf_evt_valid                   ),\n        \n        .busy_o                       ( s_cluster_busy                   ),\n\n        .a"}
{"text": "sync_data_master_aw_wptr_o  ( s_cluster_soc_bus_aw_wptr        ),\n        .async_data_master_aw_rptr_i  ( s_cluster_soc_bus_aw_rptr        ),\n        .async_data_master_aw_data_o  ( s_cluster_soc_bus_aw_data        ),\n        \n        .async_data_master_ar_wptr_o  ( s_cluster_soc_bus_ar_wptr        ),\n        .async_data_master_ar_rptr_i  ( s_cluster_soc_bus_ar_rptr        ),\n        .async_data_master_ar_data_o  ( s_cluster_soc_bus_ar_data        ),\n        \n        .async_data_master_w_wptr_o   ( s_cluster_soc_bus_w_wptr         ),\n        .async_data_master_w_rptr_i   ( s_cluster_soc_bus_w_rptr         ),\n        .async_data_master_w_data_o   ( s_cluster_soc_bus_w_data         ),\n                                                                       \n        .async_data_master_r_wptr_i   ( s_cluster_soc_bus_r_wptr         ),\n        .async_data_master_r_rptr_o   ( s_cluster_soc_bus_r_rptr         ),\n        .async_data_master_r_data_i   ( s_cluster_soc_bus_r_data         ),\n                                                                       \n        .async_data_master_b_wptr_i   ( s_cluster_soc_bus_b_wptr         ),\n        .async_data_master_b_rptr_o   ( s_cluster_soc_bus_b_rptr         ),\n        .async_data_master_b_data_i   ( s_cluster_soc_bus_b_data         ),\n\n\n        .async_data_slave_aw_wptr_i  ( s_soc_cluster_bus_aw_wptr        ),\n        .async_data_slave_aw_rptr_o  ( s_soc_cluster_bus_aw_rptr        ),\n        .async_data_slave_aw_data_i  ( s_soc_cluster_bus_aw_data        ),\n        \n        .async_data_slave_ar_wptr_i  ( s_soc_cluster_bus_ar_wptr        ),\n        .async_data_slave_ar_rptr_o  ( s_soc_cluster_bus_ar_rptr        ),\n        .async_data_slave_ar_data_i  ( s_soc_cluster_bus_ar_data        ),\n        \n        .async_data_slave_w_wptr_i   ( s_soc_cluster_bus_w_wptr         ),\n        .async_data_slave_w_rptr_o   ( s_soc_cluster_bus_w_rptr         ),\n        .async_data_slave_w_data_i   ( s_soc_cluster_bus_w_data         ),\n                                                                       \n        .async_data_slave_r_wptr_o   ( s_soc_cluster_bus_r_wptr         ),\n        .async_data_slave_r_rptr_i   ( s_soc_cluster_bus_r_rptr         ),\n        .async_data_slave_r_data_o   ( s_soc_cluster_bus_r_data         ),\n                                                                       \n        .async_data_slave_b_wptr_o   ( s_soc_cluster_bus_b_wptr         ),\n        .async_data_slave_b_rptr_i   ( s_soc_cluster_bus_b_rptr         ),\n        .async_data_slave_b_data_o   ( s_soc_cluster_bus_b_data         )\n    );\nendmodule\n\n"}
{"text": "//-----------------------------------------------------------------------------\n// Title         : PULPissimo Verilog Wrapper\n//-----------------------------------------------------------------------------\n// File          : xilinx_pulpissimo.v\n// Author        : Manuel Eggimann  <meggimann@iis.ee.ethz.ch>\n// Created       : 21.05.2019\n//-----------------------------------------------------------------------------\n// Description :\n// Verilog Wrapper of PULPissimo to use the module within Xilinx IP integrator.\n//-----------------------------------------------------------------------------\n// Copyright (C) 2013-2019 ETH Zurich, University of Bologna\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License. You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n//-----------------------------------------------------------------------------\n\nmodule pulpemu\n  (\n   input wire  ref_clk_p,\n   input wire  ref_clk_n,\n\n   inout wire  pad_uart_rx,\n   inout wire  pad_uart_tx,\n  \n   inout       FMC_sdio_data0,\n   inout       FMC_sdio_data1,\n   inout       FMC_sdio_data2,\n   inout       FMC_sdio_data3,\n   inout       FMC_sdio_cmd,\n   inout       FMC_sdio_sck,\n  \n\n   inout       FMC_qspi_sdio0,\n   inout       FMC_qspi_sdio1,\n   inout       FMC_qspi_sdio2,\n   inout       FMC_qspi_sdio3,\n   inout       FMC_qspi_csn0,\n   inout       FMC_qspi_csn1,\n   inout       FMC_qspi_sck,\n\n   inout       FMC_i2c0_sda,\n   inout       FMC_i2c0_scl,\n\n   inout       FMC_i2s0_sck,\n   inout       FMC_i2s0_ws,\n   inout       FMC_i2s0_sdi,\n   inout       FMC_i2s1_sdi,\n  \n  \n   inout       FMC_cam_pclk,\n   inout       FMC_cam_hsync,\n   inout       FMC_cam_data0,\n   inout       FMC_cam_data1,\n   inout       FMC_cam_data2,\n   inout       FMC_cam_data3,\n   inout       FMC_cam_data4,\n   inout       FMC_cam_data5,\n   inout       FMC_cam_data6,\n   inout       FMC_cam_data7,\n   inout       FMC_cam_vsync,\n\n       \n   inout       FMC_hyper_dqio0 ,\n   inout       FMC_hyper_dqio1 ,\n   inout       FMC_hyper_dqio2 ,\n   inout       FMC_hyper_dqio3 ,\n   inout       FMC_hyper_dqio4 ,\n   inout       FMC_hyper_dqio5 ,\n   inout       FMC_hyper_dqio6 ,\n   inout       FMC_hyper_dqio7 ,\n   inout       FMC_hyper_ck    ,\n   inout       FMC_hyper_ckn   ,\n   inout       FMC_hyper_csn0  ,\n   inout       FMC_hyper_csn1  ,\n   inout       FMC_hyper_rwds0 ,\n   inout       FMC_hyper_reset ,\n\n   input wire  pad_reset,\n\n   input wire  pad_jtag_trst,\n   input wire  pad_jtag_tck,\n   input wire  pad_jtag_tdi,\n   output wire pad_jtag_tdo,\n   input wire  pad_jtag_tms\n );\n\n   localparam CORE_TYPE = 0; // 0 for RISCY, 1 for ZERORISCY, 2 for MICRORISCY\n   localparam USE_FPU   = 1;\n   localparam USE_HWPE = 1;\n\n   wire        ref_clk;\n\n   logic       reset_n;\n\n   assign reset_n = ~pad_reset & pad_jtag_trst;\n\n   wire [7:0] s_pad_hyper_dq0;\n\n   assign s_pad_hyper_dq0[0] = FMC_hyper_dqio0;\n   assign s_pad_hyper_dq0[1] = FMC_hyper_dqio1;\n   assign s_pad_hyper_dq0[2] = FMC_hyper_dqio2;\n   assign s_pad_hyper_dq0[3] = FMC_hyper_dqio3;\n   assign s_pad_hyper_dq0[4] = FMC_hyper_dqio4;\n   assign s_pad_hyper_dq0[5] = FMC_hyper_dqio5;\n   assign s_pad_hyper_dq0[6] = FMC_hyper_dqio6;\n   assign s_pad_hyper_dq0[7] = FMC_hyper_dqio7;\n\n   //Differential to single ended clock conversion\n   IBUFGDS\n     #(\n       .IOSTANDARD(\"LVDS\"),\n       .DIFF_TERM(\"FALSE\"),\n       .IBUF_LOW_PWR(\"FALSE\"))\n   i_sysclk_iobuf\n     (\n      .I(ref_clk_p),\n      .IB(ref_clk_n),\n      .O(ref_clk)\n      );\n\n   pulp\n     #(.CORE_TYPE_FC(CORE_TYPE),\n       .CORE_TYPE_CL(CORE_TYPE),\n       .USE_FPU(USE_FPU),\n       .USE_HWPE(USE_HWPE),\n       .USE_HWPE_CL(USE_HWPE)\n       ) i_pulp\n       (\n\n        .pad_spim_sdio0(FMC_qspi_sdio0),\n        .pad_spim_sdio1(FMC_qspi_sdio1),\n        .pad_spim_sdio2(FMC_qspi_sdio2),\n        .pad_spim_sdio3(FMC_qspi_sdio3),\n        .pad_spim_csn0(FMC_qspi_csn0),\n        .pad_spim_csn1(FMC_qspi_csn1),\n        .pad_spim_sck(FMC_qspi_sck),\n        \n        .pad_uart_rx(pad_uart_rx),   //keep\n        .pad_uart_tx(pad_uart_tx),   //keep\n        \n        .pad_cam_pclk(FMC_cam_pclk),\n        .pad_cam_hsync(FMC_cam_hsync),\n        .pad_cam_data0(FMC_cam_data0),\n        .pad_cam_data1(FMC_cam_data1),\n        .pad_cam_data2(FMC_cam_data2),\n        .pad_cam_data3(FMC_cam_data3),\n        .pad_cam_data4(FMC_cam_data4),\n        .pad_cam_data5(FMC_cam_data5),\n        .pad_cam_data6(FMC_cam_data6),\n        .pad_cam_data7(FMC_cam_data7),\n        .pad_cam_vsync(FMC_cam_vsync),\n        \n        \n        .pad_sdio_clk(FMC_sdio_sck),\n        .pad_sdio_cmd(FMC_sdio_cmd),\n        .pad_sdio_data0(FMC_sdio_data0),\n        .pad_sdio_data1(FMC_sdio_data1),\n        .pad_sdio_data2(FMC_sdio_data2),\n        .pad_sdio_data3(FMC_sdio_data3),\n        \n        .pad_i2c0_sda(FMC_i2c0_sda),\n        .pad_i2c0_scl(FMC_i2c0_scl),\n        .pad_i2s0_sck(FMC_i2s0_sck),\n        .pad_i2s0_ws(FMC_i2s0_ws),\n        .pad_i2s0_sdi(FMC_i2s0_sdi),\n        .pad_i2s1_sdi(FMC_i2s1_sdi),\n        \n        .pad_reset_n(reset_n),\n        \n        .pad_hyper_dq0(s_pad_hyper_dq0),\n        .pad_hyper_ck(FMC_hyper_ck)       ,\n        .pad_hyper_ckn(FMC_hyper_ckn)     ,\n        .pad_hyper_csn0(FMC_hyper_csn0)   ,\n        .pad_hyper_csn1(FMC_hyper_csn1)   ,\n        .pad_hyper_rwds0(FMC_hyper_rwds0) ,\n        .pad_hyper_reset(FMC_hyper_reset) ,\n\n\n\n\n        .pad_jtag_tck(pad_jtag_tck), //keep\n        .pad_jtag_tdi(pad_jtag_tdi), //keep\n        .pad_jtag_tdo(pad_jtag_tdo), //keep\n        .pad_jtag_tms(pad_jtag_tms), //keep\n        .pad_jtag_trst(1'b1),        //keep\n        \n        .pad_xtal_in(ref_clk),       //keep\n        .pad_bootsel0(),             //keep\n        .pad_bootsel1()               //keep\n);\n\nendmodule\n"}
{"text": "\nmodule pulpemu_ref_clk_div\n  #(\n    parameter DIVISOR = 256\n    )\n   (\n    input logic  clk_i,\n    input logic  rstn_i,\n    output logic ref_clk_o\n    );\n\n   logic [($clog2(DIVISOR) - 1):0]   counter;\n\n   always_ff @(posedge clk_i, negedge rstn_i)\n     begin\n        if(!rstn_i)\n          begin\n             counter <= '0;\n          end\n        else\n          begin\n             if(counter >= (DIVISOR-1))\n               counter <= '0;\n             else\n               counter <= counter + 1;\n          end // else: !if(!rstn_i)\n     end\n\n   // The frequency of the output clk_out\n   //  = The frequency of the input clk_in divided by DIVISOR\n   // For example: clk_i = 8.388608 Mhz, if you want to get 32768 Hz signal to be reference clock\n   // You will modify the DIVISOR parameter value to 256\n   // Then the frequency of the output clk_out = 8.388608 Mhz/ 256 = 32768 Hz\n\n   assign ref_clk_o = (counter < DIVISOR / 2 ) ? 1'b0 : 1'b1;\n\nendmodule\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License. You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\nmodule pulp_clock_gating\n  (\n   input  logic clk_i,\n   input  logic en_i,\n   input  logic test_en_i,\n   output logic clk_o\n   );\n\n   assign clk_o = clk_i;\n   \nendmodule\n"}
{"text": "/*\n * pulp_soc_defines.sv\n *\n * Copyright (C) 2013-2018 ETH Zurich, University of Bologna.\n *\n * Copyright and related rights are licensed under the Solderpad Hardware\n * License, Version 0.51 (the \"License\"); you may not use this file except in\n * compliance with the License.  You may obtain a copy of the License at\n * http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n * or agreed to in writing, software, hardware and materials distributed under\n * this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n */\n\n`ifndef PULP_SOC_DEFINES_SV\n`define PULP_SOC_DEFINES_SV\n\n// define if the 0x0000_0000 to 0x0040_0000 is the alias of the current cluster address space (eg cluster 0 is from  0x1000_0000 to 0x1040_0000)\n`define CLUSTER_ALIAS\n// the same for fabric controller\n`define FC_ALIAS\n\n// To use new icache use this define\n//`define MP_ICACHE\n//`define SP_ICACHE\n`define PRIVATE_ICACHE\n`define HIERARCHY_ICACHE_32BIT\n\n// To use The L2 Multibank Feature, please decomment this define\n`define USE_L2_MULTIBANK\n`define NB_L2_CHANNELS 4\n\n// JTAG\n`define DMI_JTAG_IDCODE 32'h249511C3\n\n// Hardware Accelerator selection\n`define HWCRYPT\n\n// Uncomment if the SCM is not present (it will still be in the memory map)\n//`define NO_SCM\n\n//`define APU_CLUSTER\n`define SHARED_FPU_CLUSTER\n\n// uncomment if you want to place the DEMUX peripherals (EU, MCHAN) rigth before the Test and set region.\n// This will steal 16KB from the 1MB TCDM reegion.\n// EU is mapped           from 0x10100000 - 0x400\n// MCHAN regs are mapped  from 0x10100000 - 0x800\n// remember to change the defines in the pulp.h as well to be coherent with this approach\n//`define DEM_PER_BEFORE_TCDM_TS\n\n\n\n// uncomment if FPGA emulator\n// `define PULP_FPGA_EMUL 1\n// uncomment if using Vivado for ulpcluster synthesis\n`define VIVADO\n\n\n// Enables memory mapped register and counters to extract statistic on instruction cache\n`define FEATURE_ICACHE_STAT\n\n\n\n\n`ifdef PULP_FPGA_EMUL\n  // `undef  FEATURE_ICACHE_STAT\n  `define SCM_BASED_ICACHE\n`endif\n\n\n//PARAMETRES\n`define FC_FPU 1\n`define FC_FP_DIVSQRT 1\n`define CLUST_FPU 1\n`define CLUST_FP_DIVSQRT 1\n// set to 2 when APU is connected\n`define CLUST_SHARED_FP 2\n// set to 2 to have divsqrt in one unit\n`define CLUST_SHARED_FP_DIVSQRT 2\n\n\n\n// PE selection (only for non-FPGA - otherwise selected via PULP_CORE env variable)\n// -> define RISCV for RISC-V processor\n//`define RISCV\n\n//PARAMETRES\n`define NB_CLUSTERS   1\n`define NB_CORES      8\n`define NB_DMAS       4\n`define NB_MPERIPHS   1\n`define NB_SPERIPHS   10\n//`define REMAP_ADDRESS\n\n`define GPIO_NUM     64 \n\n\n// DEFINES\n`define MPER_EXT_ID   0\n\n\n\n`define RVT 0\n`define LVT 1\n\n`ifndef PULP_FPGA_EMUL\n  `define LEVEL_SHIFTER\n`endif\n\n// Comment to use bheavioral memories, uncomment to use stdcell latches. If uncommented, simulations slowdown occuor\n`ifdef SYNTHESIS\n `define SCM_IMPLEMENTED\n `define SCM_BASED_ICACHE\n`endif\n//////////////////////\n// MMU DEFINES\n//\n// switch for including implementation of MMUs\n//`define MMU_IMPLEMENTED\n// number of logical TCDM banks (regarding interleaving)\n`define MMU_TCDM_BANKS 8\n// switch to enable local copy registers of\n// the control signals in every MMU\n//`define MMU_LOCAL_COPY_REGS\n//\n//////////////////////\n\n// Width of byte enable for a given data width\n`define EVAL_BE_WIDTH(DATAWIDTH) (DATAWIDTH/8)\n\n// LOG2()\n`define LOG2(VALUE) ((VALUE) < ( 1 ) ? 0 : (VALUE) < ( 2 ) ? 1 : (VALUE) < ( 4 ) ? 2 : (VALUE)< (8) ? 3:(VALUE) < ( 16 )  ? 4 : (VALUE) < ( 32 )  ? 5 : (VALUE) < ( 64 )  ? 6 : (VALUE) < ( 128 ) ? 7 : (VALUE) < ( 256 ) ? 8 : (VALUE) < ( 512 ) ? 9 : 10)\n\n/* Interfaces have been moved to pulp_interfaces.sv. Sorry :) */\n\n`endif\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n\nmodule\trtc_clock(\n\tinput  logic        clk_i,\n\tinput  logic        rstn_i,\n\n\tinput  logic        clock_update_i,\n\toutput logic [21:0] clock_o,\n\tinput  logic [21:0] clock_i,\n\n\tinput  logic  [9:0] init_sec_cnt_i,\n\n\tinput  logic        timer_update_i,\n\tinput  logic        timer_enable_i,\n\tinput  logic        timer_retrig_i,\n\tinput  logic [16:0] timer_target_i,\n\toutput logic [16:0] timer_value_o,\n\n\tinput  logic        alarm_enable_i,\n\tinput  logic        alarm_update_i,\n\tinput  logic [21:0] alarm_clock_i,\n\toutput logic [21:0] alarm_clock_o,\n\n\toutput logic        event_o,\n\n\toutput logic        update_day_o\n);\n\n\tlogic [7:0] r_seconds;\n\tlogic [7:0] r_minutes;\n\tlogic [6:0] r_hours;\n\n\tlogic [7:0] s_seconds;\n\tlogic [7:0] s_minutes;\n\tlogic [6:0] s_hours;\n\n\tlogic [7:0] r_alarm_seconds;\n\tlogic [7:0] r_alarm_minutes;\n\tlogic [6:0] r_alarm_hours;\n\tlogic       r_alarm_enable;\n\n\tlogic [7:0] s_alarm_seconds;\n\tlogic [7:0] s_alarm_minutes;\n\tlogic [5:0] s_alarm_hours;\n\n\tlogic [14:0] r_sec_counter;\n\n\tlogic s_update_seconds;\n\tlogic s_update_minutes;\n\tlogic s_update_hours;\n\tlogic s_alarm_match;\n\tlogic r_alarm_match;\n\tlogic s_alarm_event;\n\tlogic s_timer_event;\n\n\tlogic [16:0] r_timer;\n\tlogic [16:0] r_timer_target;\n\tlogic        r_timer_en;\n\tlogic        r_timer_retrig;\n\n\n\tassign s_seconds = clock_i[7:0];\n\tassign s_minutes = clock_i[15:8];\n\tassign s_hours   = clock_i[21:16];\n\n\tassign s_alarm_seconds = alarm_clock_i[7:0];\n\tassign s_alarm_minutes = alarm_clock_i[15:8];\n\tassign s_alarm_hours   = alarm_clock_i[21:16];\n\n\tassign s_alarm_match = (r_seconds == s_alarm_seconds) & (r_minutes == s_alarm_minutes) & (r_hours == s_alarm_hours);//alarm condition(high for 1 sec)\n\tassign s_alarm_event = r_alarm_enable & s_alarm_match & ~r_alarm_match; //edge detect on alarm event\n\n\tassign s_timer_match = r_timer == r_timer_target;\n\tassign s_timer_event = r_timer_en & s_timer_match;\n\n\tassign s_update_seconds = r_sec_counter == 15'h7FFF;\n\tassign s_update_minutes = s_update_seconds & (r_seconds == 8'h59);\n\tassign s_update_hours   = s_update_minutes & (r_minutes == 8'h59);\n\n\tassign event_o        = s_alarm_event | s_timer_event;\n\tassign update_day_o   = s_update_hours & (r_hours == 6'h23);\n\tassign clock_o        = {r_hours,r_minutes,r_seconds};\n\tassign alarm_clock_o = {r_alarm_hours,r_alarm_minutes,r_alarm_seconds};\n\n\tassign timer_value_o = r_timer;\n\n    always @ (posedge clk_i or negedge rstn_i)\n    begin\n        if(~rstn_i)\n        begin\n            r_alarm_seconds <= 'h0;\n            r_alarm_minutes <= 'h0;\n            r_alarm_hours   <= 'h0;\n            r_alarm_enable  <= 'h0;\n        end\n        else\n        begin\n        \tif (alarm_update_i)\n        \tbegin\n        \t\tr_alarm_enable  <= alarm_enable_i;\n            \tr_alarm_seconds <= s_alarm_seconds;\n            \tr_alarm_minutes <= s_alarm_minutes;\n            \tr_alarm_hours   <= s_alarm_hours  ;\n        \tend\n        \telse if(s_alarm_event) //disable alarm when alarm event is generated(sw must retrigger)\n        \t\tr_alarm_enable <= 'h0;\n        end\n    end\n\n    always @ (posedge clk_i or negedge rstn_i)\n    begin\n        if(~rstn_i)\n            r_alarm_match <= 'h0;\n        else\n       \t\tr_alarm_match <= s_alarm_match;\n    end\n\n    always @ (posedge clk_i or negedge rstn_i)\n    begin\n        if(~rstn_i)\n        begin\n            r_timer_en     <= 'h0;\n            r_timer_target <= 'h0;\n            r_timer        <= 'h0;\n            r_timer_retrig <= 'h0;\n        end\n        else\n        begin\n        \tif (timer_update_i)\n        \tbegin\n        \t\tr_timer_en     <= timer_enable_i;\n            \tr_timer_target <= timer_target_i;\n            \tr_timer_retrig <= timer_retrig_i;\n            \tr_timer        <= 'h0;\n        \tend\n        \telse if(r_timer_en)\n        \tbegin\n        \t\tif(s_timer_match)\n        \t\tbegin\n        \t\t\tif(!r_timer_retrig)\n        \t\t\t\tr_timer_en <= 0;\n        \t\t\tr_timer    <= 'h0;\n        \t\tend\n        \t\telse\n        \t\t\tr_timer <= r_timer + 1;\n        \tend\n        end\n    end\n\n    always @ (posedge clk_i or negedge rstn_i)\n    begin\n        if(~rstn_i)\n            r_sec_counter <= 'h0;\n        else\n        begin\n        \tif (clock_update_i)\n        \t\tr_sec_counter <= {init_sec_cnt_i,5'h0};\n        \telse\n            \tr_sec_counter <= r_sec_counter + 1;\n        end\n    end\n\n\talways @(posedge clk_i or negedge rstn_i)\n\tbegin\n\t\tif(~rstn_i)\n\t\tbegin\n\t\t\tr_seconds <= 0;\n\t\t\tr_minutes <= 0;\n\t\t\tr_hours   <= 0;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tif (clock_update_i)\n\t\t\tbegin\n\t\t\t\tr_seconds <= s_seconds;\n\t\t\t\tr_minutes <= s_minutes;\n\t\t\t\tr_hours   <= s_hours;\n\t\t\tend\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tif (s_update_seconds)\n\t\t\t\tbegin // advance the seconds\n\t\t\t\t\tif (r_seconds[3:0] >= 4'h9)\n\t\t\t\t\t\tr_seconds[3:0] <= 4'h0;\n\t\t\t\t\telse\n\t\t\t\t\t\tr_seconds[3:0] <= r_seconds[3:0] + 4'h1;\n\t\t\t\t\tif (r_seconds >= 8'h59)\n\t\t\t\t\t\tr_seconds[7:4] <= 4'h0;\n\t\t\t\t\telse if (r_seconds[3:0] >= 4'h9)\n\t\t\t\t\t\tr_seconds[7:4] <= r_seconds[7:4] + 4'h1;\n\t\t\t\tend\n\n\t\t\t\tif (s_update_minutes)\n\t\t\t\tbegin // advance the minutes\n\t\t\t\t\tif (r_minutes[3:0] >= 4'h9)\n\t\t\t\t\t\tr_minutes[3:0] <= 4'h0;\n\t\t\t\t\telse\n\t\t\t\t\t\tr_minutes[3:0] <= r_minutes[3:0] + 4'h1;\n\t\t\t\t\tif (r_minutes >= 8'h59)\n\t\t\t\t\t\tr_minutes[7:4] <= 4'h0;\n\t\t\t\t\telse if (r_minutes[3:0] >= 4'h9)\n\t\t\t\t\t\tr_minutes[7:4] <= r_minutes[7:4] + 4'h1;\n\t\t\t\tend\n\n\t\t\t\tif (s_update_hours)\n\t\t\t\tbegin // advance the hours\n\t\t\t\t\tif (r_hours >= 6'h23)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tr_hours <= 6'h00;\n\t\t\t\t\tend else if (r_hours[3:0] >= 4'h9)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tr_hours[3:0] <= 4'h0;\n\t\t\t\t\t\tr_hours[5:4] <= r_hours[5:4] + 2'h1;\n\t\t\t\t\tend else begin\n\t\t\t\t\t\tr_hours[3:0] <= r_hours[3:0] + 4'h1;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\n\nendmodule\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n\nmodule rtc_date(\n\tinput  logic clk_i,\n\tinput  logic rstn_i,\n\n\tinput  logic        date_update_i,\n\tinput  logic [31:0] date_i,\n\toutput logic [31:0] date_o,\n\n\tinput logic new_day_i\n);\n\tlogic\t[5:0]\ts_day;\n\tlogic\t[4:0]\ts_month;\n\tlogic\t[13:0]\ts_year;\n\tlogic   [5:0]   r_day;\n\tlogic   [4:0]   r_month;\n\tlogic   [13:0]  r_year;\n\n\tlogic s_end_of_month;\n\tlogic s_end_of_year;\n\tlogic s_year_century;\n\tlogic s_year_400;\n\tlogic s_year_leap;\n\tlogic s_year_div_4;\n\n\tassign s_day  = date_i[5:0];\n\tassign s_month  = date_i[12:8];\n\tassign s_year = date_i[29:16];\n\n\tassign date_o = {2'b00,r_year,3'b000,r_month,2'b00,r_day};\n\n\tassign s_end_of_year = s_end_of_month & (r_month == 5'h12);\n\n\talways_comb\n\tbegin\n\t\tcase(r_month)\n\t\t5'h01: s_end_of_month = (r_day == 6'h31); // Jan\n\t\t5'h02: s_end_of_month = (r_day == 6'h29) || ((~s_year_leap)&&(r_day == 6'h28));\n\t\t5'h03: s_end_of_month = (r_day == 6'h31); // March\n\t\t5'h04: s_end_of_month = (r_day == 6'h30); // April\n\t\t5'h05: s_end_of_month = (r_day == 6'h31); // May\n\t\t5'h06: s_end_of_month = (r_day == 6'h30); // June\n\t\t5'h07: s_end_of_month = (r_day == 6'h31); // July\n\t\t5'h08: s_end_of_month = (r_day == 6'h31); // August\n\t\t5'h09: s_end_of_month = (r_day == 6'h30); // Sept\n\t\t5'h10: s_end_of_month = (r_day == 6'h31); // October\n\t\t5'h11: s_end_of_month = (r_day == 6'h30); // November\n\t\t5'h12: s_end_of_month = (r_day == 6'h31); // December\n\t\tdefault: s_end_of_month = 1'b0;\n\t\tendcase\n\tend\n\n\tassign s_year_div_4   = ((~r_year[0])&&(r_year[4]==r_year[1]));\n\tassign s_year_century = (r_year[7:0] == 8'h00);\n\tassign s_year_400     = ((~r_year[8])&&((r_year[12]==r_year[9])));\n\tassign s_year_leap    = (s_year_div_4) && ( (~s_year_century) || ((s_year_century)&&(s_year_400)) );\n\n\n\t// Adjust the day of month\n\talways_ff @(posedge clk_i or negedge rstn_i) begin : proc_r_day\n\t\tif(~rstn_i) begin\n\t\t\tr_day <= 6'h1;\n\t\tend else begin\n\t\tif (date_update_i)\n\t\t\tr_day <= s_day;\n\t\telse if ((new_day_i)&&(s_end_of_month))\n\t\t\tr_day <= 6'h01;\n\t\telse if ((new_day_i)&&(r_day[3:0] != 4'h9))\n\t\t\tr_day[3:0] <= r_day[3:0] + 4'h1;\n\t\telse if (new_day_i)\n\t\tbegin\n\t\t\tr_day[3:0] <= 4'h0;\n\t\t\tr_day[5:4] <= r_day[5:4] + 2'h1;\n\t\tend\n\n\t\tend\n\tend\n\n\talways_ff @(posedge clk_i or negedge rstn_i) begin : proc_r_month\n\t\tif(~rstn_i) begin\n\t\t\tr_month <= 5'h01;\n\t\tend else begin\n\t\t\tif (date_update_i)\n\t\t\t\tr_month <= s_month;\n\t\t\telse if ((new_day_i)&&(s_end_of_year))\n\t\t\t\tr_month <= 5'h01;\n\t\t\telse if ((new_day_i)&&(s_end_of_month)&&(r_month[3:0] != 4'h9))\n\t\t\t\tr_month[3:0] <= r_month[3:0] + 4'h1;\n\t\t\telse if ((new_day_i)&&(s_end_of_month))\n\t\t\tbegin\n\t\t\t\tr_month[3:0] <= 4'h0;\n\t\t\t\tr_month[4] <= 1;\n\t\t\tend\n\t\tend\n\tend // proc_r_month\n\n\talways_ff @(posedge clk_i or negedge rstn_i) begin : proc_r_year\n\t \tif(~rstn_i) begin\n\t \t\tr_year <= 14'h2000;\n\t \tend else begin\n\t \t\tif (date_update_i)\n\t \t\t\tr_year <= s_year;\n\t \t\telse if ((new_day_i)&&(s_end_of_year))\n\t\t\tbegin\n\t\t\t\tif (r_year[3:0] != 4'h9)\n\t\t\t\t\tr_year[3:0] <= r_year[3:0] + 4'h1;\n\t\t\t\telse begin\n\t\t\t\t\tr_year[3:0] <= 4'h0;\n\t\t\t\t\tif (r_year[7:4] != 4'h9)\n\t\t\t\t\t\tr_year[7:4] <= r_year[7:4] + 4'h1;\n\t\t\t\t\telse begin\n\t\t\t\t\t\tr_year[7:4] <= 4'h0;\n\t\t\t\t\t\tif (r_year[11:8] != 4'h9)\n\t\t\t\t\t\t\tr_year[11:8] <= r_year[11:8]+4'h1;\n\t\t\t\t\t\telse begin\n\t\t\t\t\t\t\tr_year[11:8] <= 4'h0;\n\t\t\t\t\t\t\tr_year[13:12] <= r_year[13:12]+2'h1;\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t \tend\n\tend\n\nendmodule\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n`include \"pulp_soc_defines.sv\"\n\nmodule safe_domain\n    #(\n        parameter FLL_DATA_WIDTH = 32,\n        parameter FLL_ADDR_WIDTH = 32,\n        parameter int unsigned N_UART = 1,\n        parameter int unsigned N_SPI = 1,\n        parameter int unsigned N_I2C = 2\n    )\n    (\n        input  logic             ref_clk_i            ,\n        output logic             slow_clk_o           ,\n        input  logic             rst_ni               ,\n        output logic             rst_no               ,\n\n        output logic             test_clk_o           ,\n        output logic             test_mode_o          ,\n        output logic             mode_select_o        ,\n        output logic             dft_cg_enable_o      ,\n\n        //**********************************************************\n        //*** PERIPHERALS SIGNALS **********************************\n        //**********************************************************\n\n        // PAD CONTROL REGISTER\n        input  logic [127:0]     pad_mux_i            ,\n        input  logic [383:0]     pad_cfg_i            ,\n\n        output logic [72:0][5:0] pad_cfg_o            ,\n\n        // GPIOS\n        input  logic [31:0]      gpio_out_i           ,\n        output logic [31:0]      gpio_in_o            ,\n        input  logic [31:0]      gpio_dir_i           ,\n        input  logic [191:0]     gpio_cfg_i           ,\n\n        // UART\n        input  logic             uart_tx_i            ,\n        output logic             uart_rx_o            ,\n\n        // I2C\n        input  logic [N_I2C-1:0] i2c_scl_out_i,\n        output logic [N_I2C-1:0] i2c_scl_in_o,\n        input  logic [N_I2C-1:0] i2c_scl_oe_i,\n        input  logic [N_I2C-1:0] i2c_sda_out_i,\n        output logic [N_I2C-1:0] i2c_sda_in_o,\n        input  logic [N_I2C-1:0] i2c_sda_oe_i,\n\n        // I2S\n        output logic             i2s_slave_sd0_o      ,\n        output logic             i2s_slave_sd1_o      ,\n        output logic             i2s_slave_ws_o       ,\n        input  logic             i2s_slave_ws_i       ,\n        input  logic             i2s_slave_ws_oe      ,\n        output logic             i2s_slave_sck_o      ,\n        input  logic             i2s_slave_sck_i      ,\n        input  logic             i2s_slave_sck_oe     ,\n\n        // SPI MASTER\n        input  logic [N_SPI-1:0]      spi_clk_i,\n        input  logic [N_SPI-1:0][3:0] spi_csn_i,\n        input  logic [N_SPI-1:0][3:0] spi_oen_i,\n        input  logic [N_SPI-1:0][3:0] spi_sdo_i,\n        output logic [N_SPI-1:0][3:0] spi_sdi_o,\n\n        // SDIO\n        input  logic             sdio_clk_i,\n        input  logic             sdio_cmd_i,\n        output logic             sdio_cmd_o,\n        input  logic             sdio_cmd_oen_i,\n        input  logic [3:0]       sdio_data_i,\n        output logic [3:0]       sdio_data_o,\n        input  logic [3:0]       sdio_data_oen_i,\n\n        // CAMERA INTERFACE\n        output logic             cam_pclk_o           ,\n        output logic [7:0]       cam_data_o           ,\n        output logic             cam_hsync_o          ,\n        output logic             cam_vsync_o          ,\n\n        // TIMER\n        input  logic [3:0]       timer0_i             ,\n        input  logic [3:0]       timer1_i             ,\n        input  logic [3:0]       timer2_i             ,\n        input  logic [3:0]       timer3_i             ,\n\n\n        // HYPERBUS\n        input  logic  [1:0]       hyper_cs_ni        ,\n        input  logic              hyper_ck_i         ,\n        input  logic              hyper_ck_ni        ,\n        input  logic  [1:0]       hyper_rwds_i       ,\n        output logic              hyper_rwds_o       ,\n        input  logic  [1:0]       hyper_rwds_oe_i    ,\n        output logic  [15:0]      hyper_dq_o         ,\n        input  logic  [15:0]      hyper_dq_i         ,\n        input  logic  [1:0]       hyper_dq_oe_o      ,\n        input  logic              hyper_reset_no     ,  \n\n        //**********************************************************\n        //*** PAD FRAME SIGNALS ************************************\n        //**********************************************************\n\n        // PADS OUTPUTS\n        output logic             out_spim_sdio0_o     ,\n        output logic             out_spim_sdio1_o     ,\n        output logic             out_spim_sdio2_o     ,\n        output logic             out_spim_sdio3_o     ,\n        output logic             out_spim_csn0_o      ,\n        output logic             out_spim_csn1_o      ,\n        output logic             out_spim_sck_o       ,\n        output logic             out_sdio_clk_o       ,\n        output logic             out_sdio_cmd_o       ,\n        output logic             out_sdio_data0_o     ,\n        output logic             out_sdio_data1_o     ,\n        output logic             out_sdio_data2_o     ,\n        output logic             out_sdio_data3_o     ,\n        output logic             out_uart_rx_o        ,\n        output logic             out_uart_tx_o        ,\n        output logic             out_cam_pclk_o       ,\n        output logic             out_cam_hsync_o      ,\n        output logic             out_cam_data0_o      ,\n        output logic             out_cam_data1_o      ,\n        output logic             out_cam_data2_o      ,\n        output logic             out_cam_data3_o      ,\n        output logic             out_cam_data4_o      ,\n        output logic             out_cam_data5_o      ,\n        output logic             out_cam_data6_o      ,\n        output logic             out_cam_data7_o      ,\n        output logic             out_cam_vsync_o      ,\n        output logic             out_i2c0_sda_o       ,\n        output logic             out_i2c0_scl_o       ,\n        output logic             out_i2s0_sck_o       ,\n        output logic             out_i2s0_ws_o        ,\n        output logic             out_i2s0_sdi_o       ,\n        output logic             out_i2s1_sdi_o       ,\n        \n        output logic[31:0]       out_gpios_o          ,\n        output logic             out_i2c1_sda_o       ,\n        output logic             out_i2c1_scl_o       ,\n\n        output logic             out_hyper_cs0n_o     ,\n        output logic             out_hyper_cs1n_o     ,\n        output logic             out_hyper_ck_o       ,\n        output logic             out_hyper_ckn_o      ,\n        output logic             out_hyper_rwds0_o    ,\n        output logic             out_hyper_rwds1_o    ,\n        output logic  [7:0]      out_hyper_dq0_o      ,\n        output logic  [7:0]      out_hyper_dq1_o      ,\n        output logic             out_hyper_resetn_o   ,\n\n        // PAD INPUTS\n        input logic              in_spim_sdio0_i      ,\n        input logic              in_spim_sdio1_i      ,\n        input logic              in_spim_sdio2_i      ,\n        input logic              in_spim_sdio3_i      ,\n        input logic              in_spim_csn0_i       ,\n        input logic              in_spim_csn1_i       ,\n        input logic              in_spim_sck_i        ,\n        input logic              in_sdio_clk_i        ,\n        input logic              in_sdio_cmd_i        ,\n        input logic              in_sdio_data0_i      ,\n        input logic              in_sdio_data1_i      ,\n        input logic              in_sdio_data2_i      ,\n        input logic              in_sdio_data3_i      ,\n        input logic              in_uart_rx_i         ,\n        input logic              in_uart_tx_i         ,\n        input logic              in_cam_pclk_i        ,\n        input logic              in_cam_hsync_i       ,\n        input logic              in_cam_data0_i       ,\n        input logic              in_cam_data1_i       ,\n        input logic              in_cam_data2_i       ,\n        input logic              in_cam_data3_i       ,\n        input logic              in_cam_data4_i       ,\n        input logic              in_cam_data5_i       ,\n        input logic              in_cam_data6_i       ,\n        input logic              in_cam_data7_i       ,\n        input logic              in_cam_vsync_i       ,\n        input logic              in_i2c0_sda_i        ,\n        input logic              in_i2c0_scl_i        ,\n        input logic              in_i2s0_sck_i        ,\n        input logic              in_i2s0_ws_i         ,\n        input logic              in_i2s0_sdi_i        ,\n        input logic              in_i2s1_sdi_i        ,\n        \n        input logic [31:0]       in_gpios_i           ,\n        input logic              in_i2c1_sda_i        ,\n        input logic              in_i2c1_scl_i        ,\n\n\n        input logic              in_hyper_cs0n_i     ,\n        input logic              in_hyper_cs1n_i     ,\n        input logic              in_hyper_ck_i       ,\n        input logic              in_hyper_ckn_i      ,\n        input logic              in_hyper_rwds0_i    ,\n        input logic              in_hyper_rwds1_i    ,\n        input logic  [7:0]       in_hyper_dq0_i      ,\n        input logic  [7:0]       in_hyper_dq1_i      ,\n        input logic              in_hyper_resetn_i   ,\n\n        // OUTPUT ENABLE\n        output logic             oe_spim_sdio0_o      ,\n        output logic             oe_spim_sdio1_o      ,\n        output logic             oe_spim_sdio2_o      ,\n        output logic             oe_spim_sdio3_o      ,\n        output logic             oe_spim_csn0_o       ,\n        output logic             oe_spim_csn1_o       ,\n        output logic             oe_spim_sck_o        ,\n        output logic             oe_sdio_clk_o        ,\n        output logic             oe_sdio_cmd_o        ,\n        output logic             oe_sdio_data0_o      ,\n        output logic             oe_sdio_data1_o      ,\n        output logic             oe_sdio_data2_o      ,\n        output logic             oe_sdio_data3_o      ,\n        output logic             oe_uart_rx_o         ,\n        output logic             oe_uart_tx_o         ,\n        output logic             oe_cam_pclk_o        ,\n        output logic             oe_cam_hsync_o       ,\n        output logic             oe_cam_data0_o       ,\n        output logic             oe_cam_data1_o       ,\n        output logic             oe_cam_data2_o       ,\n        output logic             oe_cam_data3_o       ,\n        output logic             oe_cam_data4_o       ,\n        output logic             oe_cam_data5_o       ,\n        output logic             oe_cam_data6_o       ,\n        output logic             oe_cam_data7_o       ,\n        output logic             oe_cam_vsync_o       ,\n        output logic             oe_i2c0_sda_o        ,\n        output logic             oe_i2c0_scl_o        ,\n        output logic             oe_i2s0_sck_o        ,\n        output logic             oe_i2s0_ws_o         ,\n        output logic             oe_i2s0_sdi_o        ,\n        output logic             oe_i2s1_sdi_o        ,\n         \n        output logic [31:0]      oe_gpios_o           ,\n        output logic             oe_i2c1_sda_o        ,\n        output logic             oe_i2c1_scl_o        ,\n\n\n        output logic             oe_hyper_cs0n_o      ,\n        output logic             oe_hyper_cs1n_o      ,\n        output logic             oe_hyper_ck_o        ,\n        output logic             oe_hyper_ckn_o       ,\n        output logic             oe_hyper_rwds0_o     ,\n        output logic             oe_hyper_rwds1_o     ,\n        output logic             oe_hyper_dq0_o       ,\n        output logic             oe_hyper_dq1_o       ,\n        output logic             oe_hyper_resetn_o    \n\n    );\n\n    logic        s_test_clk;\n\n    logic        s_rtc_int;\n    logic        s_gpio_wake;\n    logic        s_rstn_sync;\n    logic        s_rstn;\n\n\n    //**********************************************************\n    //*** GPIO CONFIGURATIONS **********************************\n    //**********************************************************\n\n   logic [31:0][5:0] s_gpio_cfg;\n\n   genvar i,j;\n\n    pad_control pad_control_i\n    (\n\n        //********************************************************************//\n        //*** PERIPHERALS SIGNALS ********************************************//\n        //********************************************************************//\n        //.pad_mux_i             ( pad_mux_i             ),\n        .pad_cfg_i             ( pad_cfg_i             ),\n        .pad_cfg_o             ( pad_cfg_o             ),\n\n        .gpio_out_i            ( gpio_out_i            ),\n        .gpio_in_o             ( gpio_in_o             ),\n        .gpio_dir_i            ( gpio_dir_i            ),\n        .gpio_cfg_i            ( s_gpio_cfg            ),\n\n        .uart_tx_i             ( uart_tx_i             ),\n        .uart_rx_o             ( uart_rx_o             ),\n\n        .i2c_scl_out_i         ( i2c_scl_out_i         ),\n        .i2c_scl_in_o          ( i2c_scl_in_o          ),\n        .i2c_scl_oe_i          ( i2c_scl_oe_i          ),\n        .i2c_sda_out_i         ( i2c_sda_out_i         ),\n        .i2c_sda_in_o          ( i2c_sda_in_o          ),\n        .i2c_sda_oe_i          ( i2c_sda_oe_i          ),\n\n        .i2s_slave_sd0_o       ( i2s_slave_sd0_o       ),\n        .i2s_slave_sd1_o       ( i2s_slave_sd1_o       ),\n        .i2s_slave_ws_o        ( i2s_slave_ws_o        ),\n        .i2s_slave_ws_i        ( i2s_slave_ws_i        ),\n        .i2s_slave_ws_oe       ( i2s_slave_ws_oe       ),\n        .i2s_slave_sck_o       ( i2s_slave_sck_o       ),\n        .i2s_slave_sck_i       ( i2s_slave_sck_i       ),\n        .i2s_slave_sck_oe      ( i2s_slave_sck_oe      ),\n\n        .spi_clk_i             ( spi_clk_i             ),\n        .spi_csn_i             ( spi_csn_i             ),\n        .spi_oen_i             ( spi_oen_i             ),\n        .spi_sdo_i             ( spi_sdo_i             ),\n        .spi_sdi_o             ( spi_sdi_o             ),\n\n        .sdio_clk_i            ( sdio_clk_i            ),\n        .sdio_cmd_i            ( sdio_cmd_i            ),\n        .sdio_cmd_o            ( sdio_cmd_o            ),\n        .sdio_cmd_oen_i        ( sdio_cmd_oen_i        ),\n        .sdio_data_i           ( sdio_data_i           ),\n        .sdio_data_o           ( sdio_data_o           ),\n        .sdio_data_oen_i       ( sdio_data_oen_i       ),\n\n        .cam_pclk_o            ( cam_pclk_o            ),\n        .cam_data_o            ( cam_data_o            ),\n        .cam_hsync_o           ( cam_hsync_o           ),\n        .cam_vsync_o           ( cam_vsync_o           ),\n\n        .timer0_i              ( timer0_i              ),\n        .timer1_i              ( timer1_i              ),\n        .timer2_i              ( timer2_i              ),\n        .timer3_i              ( timer3_i              ),\n\n        .hyper_cs_ni           ( hyper_cs_ni           ),\n        .hyper_ck_i            ( hyper_ck_i            ),\n        .hyper_ck_ni           ( hyper_ck_ni           ),\n        .hyper_rwds_i          ( hyper_rwds_i          ),\n        .hyper_rwds_o          ( hyper_rwds_o          ),\n        .hyper_rwds_oe_i       ( hyper_rwds_oe_i       ),\n        .hyper_dq_o            ( hyper_dq_o            ),\n        .hyper_dq_i            ( hyper_dq_i            ),\n        .hyper_dq_oe_o         ( hyper_dq_oe_o         ),\n        .hyper_reset_no        ( hyper_reset_no        ),\n\n        .out_spim_sdio0_o      ( out_spim_sdio0_o      ),\n        .out_spim_sdio1_o      ( out_spim_sdio1_o      ),\n        .out_spim_sdio2_o      ( out_spim_sdio2_o      ),\n        .out_spim_sdio3_o      ( out_spim_sdio3_o      ),\n        .out_spim_csn0_o       ( out_spim_csn0_o       ),\n        .out_spim_csn1_o       ( out_spim_csn1_o       ),\n        .out_spim_sck_o        ( out_spim_sck_o        ),\n        .out_sdio_clk_o        ( out_sdio_clk_o        ),\n        .out_sdio_cmd_o        ( out_sdio_cmd_o        ),\n        .out_sdio_data0_o      ( out_sdio_data0_o      ),\n        .out_sdio_data1_o      ( out_sdio_data1_o      ),\n        .out_sdio_data2_o      ( out_sdio_data2_o      ),\n        .out_sdio_data3_o      ( out_sdio_data3_o      ),\n        .out_uart_rx_o         ( out_uart_rx_o         ),\n        .out_uart_tx_o         ( out_uart_tx_o         ),\n        .out_cam_pclk_o        ( out_cam_pclk_o        ),\n        .out_cam_hsync_o       ( out_cam_hsync_o       ),\n        .out_cam_data0_o       ( out_cam_data0_o       ),\n        .out_cam_data1_o       ( out_cam_data1_o       ),\n        .out_cam_data2_o       ( out_cam_data2_o       ),\n        .out_cam_data3_o       ( out_cam_data3_o       ),\n        .out_cam_data4_o       ( out_cam_data4_o       ),\n        .out_cam_data5_o       ( out_cam_data5_o       ),\n        .out_cam_data6_o       ( out_cam_data6_o       ),\n        .out_cam_data7_o       ( out_cam_data7_o       ),\n        .out_cam_vsync_o       ( out_cam_vsync_o       ),\n        .out_i2c0_sda_o        ( out_i2c0_sda_o        ),\n        .out_i2c0_scl_o        ( out_i2c0_scl_o        ),\n        .out_i2s0_sck_o        ( out_i2s0_sck_o        ),\n        .out_i2s0_ws_o         ( out_i2s0_ws_o         ),\n        .out_i2s0_sdi_o        ( out_i2s0_sdi_o        ),\n        .out_i2s1_sdi_o        ( out_i2s1_sdi_o        ),\n        \n        .out_gpios_o           ( out_gpios_o           ), \n        .out_i2c1_sda_o        ( out_i2c1_sda_o        ),\n        .out_i2c1_scl_o        ( out_i2c1_scl_o        ),\n\n        .out_hyper_cs0n_o      ( out_hyper_cs0n_o      ),\n        .out_hyper_cs1n_o      ( out_hyper_cs1n_o      ),\n        .out_hyper_ck_o        ( out_hyper_ck_o        ),\n        .out_hyper_ckn_o       ( out_hyper_ckn_o       ),\n        .out_hyper_rwds0_o     ( out_hyper_rwds0_o     ),\n        .out_hyper_rwds1_o     ( out_hyper_rwds1_o     ),\n        .out_hyper_dq0_o       ( out_hyper_dq0_o       ),\n        .out_hyper_dq1_o       ( out_hyper_dq1_o       ),\n        .out_hyper_resetn_o    ( out_hyper_resetn_o    ),\n\n        .in_spim_sdio0_i       ( in_spim_sdio0_i       ),\n        .in_spim_sdio1_i       ( in_spim_sdio1_i       ),\n        .in_spim_sdio2_i       ( in_spim_sdio2_i       ),\n        .in_spim_sdio3_i       ( in_spim_sdio3_i       ),\n        .in_spim_csn0_i        ( in_spim_csn0_i        ),\n        .in_spim_csn1_i        ( in_spim_csn1_i        ),\n        .in_spim_sck_i         ( in_spim_sck_i         ),\n        .in_sdio_clk_i         ( in_sdio_clk_i         ),\n        .in_sdio_cmd_i         ( in_sdio_cmd_i         ),\n        .in_sdio_data0_i       ( in_sdio_data0_i       ),\n        .in_sdio_data1_i       ( in_sdio_data1_i       ),\n        .in_sdio_data2_i       ( in_sdio_data2_i       ),\n        .in_sdio_data3_i       ( in_sdio_data3_i       ),\n        .in_uart_rx_i          ( in_uart_rx_i          ),\n        .in_uart_tx_i          ( in_uart_tx_i          ),\n        .in_cam_pclk_i         ( in_cam_pclk_i         ),\n        .in_cam_hsync_i        ( in_cam_hsync_i        ),\n        .in_cam_data0_i        ( in_cam_data0_i        ),\n        .in_cam_data1_i        ( in_cam_data1_i        ),\n        .in_cam_data2_i        ( in_cam_data2_i        ),\n        .in_cam_data3_i        ( in_cam_data3_i        ),\n        .in_cam_data4_i        ( in_cam_data4_i        ),\n        .in_cam_data5_i        ( in_cam_data5_i        ),\n        .in_cam_data6_i "}
{"text": "       ( in_cam_data6_i        ),\n        .in_cam_data7_i        ( in_cam_data7_i        ),\n        .in_cam_vsync_i        ( in_cam_vsync_i        ),\n        .in_i2c0_sda_i         ( in_i2c0_sda_i         ),\n        .in_i2c0_scl_i         ( in_i2c0_scl_i         ),\n        .in_i2s0_sck_i         ( in_i2s0_sck_i         ),\n        .in_i2s0_ws_i          ( in_i2s0_ws_i          ),\n        .in_i2s0_sdi_i         ( in_i2s0_sdi_i         ),\n        .in_i2s1_sdi_i         ( in_i2s1_sdi_i         ),\n        \n        .in_gpios_i            ( in_gpios_i            ),\n        .in_i2c1_sda_i         ( in_i2c1_sda_i         ),\n        .in_i2c1_scl_i         ( in_i2c1_scl_i         ),\n\n        .in_hyper_cs0n_i       ( in_hyper_cs0n_i       ),\n        .in_hyper_cs1n_i       ( in_hyper_cs1n_i       ),\n        .in_hyper_ck_i         ( in_hyper_ck_i         ),\n        .in_hyper_ckn_i        ( in_hyper_ckn_i        ),\n        .in_hyper_rwds0_i      ( in_hyper_rwds0_i      ),\n        .in_hyper_rwds1_i      ( in_hyper_rwds1_i      ),\n        .in_hyper_dq0_i        ( in_hyper_dq0_i        ),\n        .in_hyper_dq1_i        ( in_hyper_dq1_i        ),\n        .in_hyper_resetn_i     ( in_hyper_resetn_i     ),\n\n\n        .oe_spim_sdio0_o       ( oe_spim_sdio0_o       ),\n        .oe_spim_sdio1_o       ( oe_spim_sdio1_o       ),\n        .oe_spim_sdio2_o       ( oe_spim_sdio2_o       ),\n        .oe_spim_sdio3_o       ( oe_spim_sdio3_o       ),\n        .oe_spim_csn0_o        ( oe_spim_csn0_o        ),\n        .oe_spim_csn1_o        ( oe_spim_csn1_o        ),\n        .oe_spim_sck_o         ( oe_spim_sck_o         ),\n        .oe_sdio_clk_o         ( oe_sdio_clk_o         ),\n        .oe_sdio_cmd_o         ( oe_sdio_cmd_o         ),\n        .oe_sdio_data0_o       ( oe_sdio_data0_o       ),\n        .oe_sdio_data1_o       ( oe_sdio_data1_o       ),\n        .oe_sdio_data2_o       ( oe_sdio_data2_o       ),\n        .oe_sdio_data3_o       ( oe_sdio_data3_o       ),\n        .oe_uart_rx_o          ( oe_uart_rx_o          ),\n        .oe_uart_tx_o          ( oe_uart_tx_o          ),\n        .oe_cam_pclk_o         ( oe_cam_pclk_o         ),\n        .oe_cam_hsync_o        ( oe_cam_hsync_o        ),\n        .oe_cam_data0_o        ( oe_cam_data0_o        ),\n        .oe_cam_data1_o        ( oe_cam_data1_o        ),\n        .oe_cam_data2_o        ( oe_cam_data2_o        ),\n        .oe_cam_data3_o        ( oe_cam_data3_o        ),\n        .oe_cam_data4_o        ( oe_cam_data4_o        ),\n        .oe_cam_data5_o        ( oe_cam_data5_o        ),\n        .oe_cam_data6_o        ( oe_cam_data6_o        ),\n        .oe_cam_data7_o        ( oe_cam_data7_o        ),\n        .oe_cam_vsync_o        ( oe_cam_vsync_o        ),\n        .oe_i2c0_sda_o         ( oe_i2c0_sda_o         ),\n        .oe_i2c0_scl_o         ( oe_i2c0_scl_o         ),\n        .oe_i2s0_sck_o         ( oe_i2s0_sck_o         ),\n        .oe_i2s0_ws_o          ( oe_i2s0_ws_o          ),\n        .oe_i2s0_sdi_o         ( oe_i2s0_sdi_o         ),\n        .oe_i2s1_sdi_o         ( oe_i2s1_sdi_o         ),\n        \n        .oe_gpios_o            ( oe_gpios_o            ),\n        .oe_i2c1_scl_o         ( oe_i2c1_scl_o         ),\n        .oe_i2c1_sda_o         ( oe_i2c1_sda_o         ),\n\n\n        .oe_hyper_cs0n_o       ( oe_hyper_cs0n_o       ),\n        .oe_hyper_cs1n_o       ( oe_hyper_cs1n_o       ),\n        .oe_hyper_ck_o         ( oe_hyper_ck_o         ),\n        .oe_hyper_ckn_o        ( oe_hyper_ckn_o        ),\n        .oe_hyper_rwds0_o      ( oe_hyper_rwds0_o      ),\n        .oe_hyper_rwds1_o      ( oe_hyper_rwds1_o      ),\n        .oe_hyper_dq0_o        ( oe_hyper_dq0_o        ),\n        .oe_hyper_dq1_o        ( oe_hyper_dq1_o        ),\n        .oe_hyper_resetn_o     ( oe_hyper_resetn_o     ),\n        \n        .*\n    );\n\n\n`ifndef PULP_FPGA_EMUL\n    rstgen i_rstgen\n    (\n        .clk_i       ( ref_clk_i   ),\n        .rst_ni      ( s_rstn      ),\n        .test_mode_i ( test_mode_o ),\n        .rst_no      ( s_rstn_sync ),  //to be used by logic clocked with ref clock in AO domain\n        .init_no     (             )  //not used\n    );\n\n  assign slow_clk_o = ref_clk_i;\n\n`else\n  assign s_rstn_sync = s_rstn;\n  //Don't use the supplied clock directly for the FPGA target. On some boards\n  //the reference clock is a very fast (e.g. 200MHz) clock that cannot be used\n  //directly as the \"slow_clk\". Therefore we slow it down if a FPGA/board\n  //dependent module fpga_slow_clk_gen. Dividing the fast reference clock\n  //internally instead of doing so in the toplevel prevents unecessary clock\n  //division just to generate a faster clock once again in the SoC and\n  //Peripheral clock PLLs in soc_domain.sv. Instead all PLL use directly the\n  //board reference clock as input.\n\n  fpga_slow_clk_gen i_slow_clk_gen\n    (\n     .rst_ni(s_rstn_sync),\n     .ref_clk_i(ref_clk_i),\n     .slow_clk_o(slow_clk_o)\n     );\n`endif\n\n\n    assign s_rstn          = rst_ni;\n    assign rst_no          = s_rstn;\n\n    assign test_clk_o      = 1'b0;\n    assign dft_cg_enable_o = 1'b0;\n    assign test_mode_o     = 1'b0;\n    assign mode_select_o   = 1'b0;\n\n    //********************************************************\n    //*** PAD AND GPIO CONFIGURATION SIGNALS PACK ************\n    //********************************************************\n\n    generate\n       for (i=0; i<32; i++)\n\t begin : GEN_GPIO_CFG_I\n\t    for (j=0; j<6; j++)\n\t      begin : GEN_GPIO_CFG_J\n\t\t assign s_gpio_cfg[i][j] = gpio_cfg_i[j+6*i];\n\t      end\n\t end\n    endgenerate\n\nendmodule // safe_domain\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n\n// NOTE: Safe regs will be mapped starting from BASEADDR+0x100.\n//       Have a look in apb_soc_ctrl for details (7th address bit is used\n//       to dispatch reg access req between safe_domain_reg_if and\n//       apb_soc_ctrl)\n\n// PMU REGISTERS\n`define REG_RAR         6'b000000 //BASEADDR+0x100\n`define REG_SLEEP_CTRL  6'b000001 //BASEADDR+0x104\n`define REG_NOTUSED     6'b000010 //BASEADDR+0x108\n`define REG_PGCFG       6'b000011 //BASEADDR+0x10C\n\n// PAD MUXING\n\n`define REG_SLEEPPADCFG0 6'b010100 //BASEADDR+0x150 sets the pad sleep mode for pins  0 (bits [1:0]) to 15 (bits [31:30]) BITS 0 = OUTPUT ENABLE, BITS 1 = OUTPUT DATA\n`define REG_SLEEPPADCFG1 6'b010101 //BASEADDR+0x154 sets the pad sleep mode for pins 16 (bits [1:0]) to 31 (bits [31:30]) BITS 0 = OUTPUT ENABLE, BITS 1 = OUTPUT DATA\n`define REG_SLEEPPADCFG2 6'b010110 //BASEADDR+0x158 sets the pad sleep mode for pins 32 (bits [1:0]) to 47 (bits [31:30]) BITS 0 = OUTPUT ENABLE, BITS 1 = OUTPUT DATA\n`define REG_SLEEPPADCFG3 6'b010111 //BASEADDR+0x15C sets the pad sleep mode for pins 48 (bits [1:0]) to 63 (bits [31:30]) BITS 0 = OUTPUT ENABLE, BITS 1 = OUTPUT DATA\n`define REG_PADSLEEP     6'b011000 //BASEADDR+0x160 sets the pad sleep mode on (1= on, 0= off)\n\n`define REG_RTC_CLOCK   6'b110100 //BASEADDR+0x1D0\n`define REG_RTC_ALARM   6'b110101 //BASEADDR+0x1D4\n`define REG_RTC_TIMER   6'b110110 //BASEADDR+0x1D8\n`define REG_RTC_DATE    6'b110111 //BASEADDR+0x1DC\n\n\nmodule safe_domain_reg_if\n  (\n   input  logic             clk_i,\n   input  logic             rstn_i,\n\n   output logic      [11:0] cfg_mem_ret_o,\n   output logic       [1:0] cfg_fll_ret_o,\n\n   output logic       [4:0] cfg_rar_nv_volt_o,\n   output logic       [4:0] cfg_rar_mv_volt_o,\n   output logic       [4:0] cfg_rar_lv_volt_o,\n   output logic       [4:0] cfg_rar_rv_volt_o,\n\n   output logic       [1:0] cfg_wakeup_o,\n\n   input  logic      [31:0] wake_gpio_i,\n   output logic             wake_event_o,\n\n   output logic             boot_l2_o,\n\n   output logic             rtc_event_o,\n\n   output logic             pad_sleep_mode_o,\n   output logic [63:0][1:0] pad_sleep_cfg_o,\n\n   input  logic             reg_if_req_i,\n   input  logic             reg_if_wrn_i,\n   input  logic       [5:0] reg_if_add_i,\n   input  logic      [31:0] reg_if_wdata_i,\n   output logic             reg_if_ack_o,\n   output logic      [31:0] reg_if_rdata_o,\n\n   output logic      [31:0] pmu_sleep_control_o\n   );\n\n   logic  [4:0] r_rar_nv_volt;\n   logic  [4:0] r_rar_mv_volt;\n   logic  [4:0] r_rar_lv_volt;\n   logic  [4:0] r_rar_rv_volt;\n\n   logic  [4:0] r_extwake_sel;\n   logic \t      r_extwake_en;\n   logic  [1:0] r_extwake_type;\n   logic \t      r_extevent;\n   logic  [2:0] r_extevent_sync;\n   logic  [2:0] r_reboot;\n\n   logic        s_extwake_rise;\n   logic        s_extwake_fall;\n   logic        s_extwake_in;\n\n   logic  [1:0] r_wakeup;\n   logic        r_cluster_wake;\n\n   logic [13:0] r_cfg_ret;\n\n   logic    \t\ts_rise;\n   logic \t\t    s_fall;\n\n   logic [63:0] r_sleep_pad_cfg0;\n   logic [63:0] r_sleep_pad_cfg1;\n   logic        r_pad_sleep;\n\n   logic \t\t    s_req_sync;\n\n   logic        r_boot_l2;\n\n   logic [31:0] s_pmu_sleep_control;\n\n   logic [21:0] s_rtc_clock;\n   logic [21:0] s_rtc_alarm;\n   logic [31:0] s_rtc_date;\n   logic [16:0] s_rtc_timer;\n\n\n   pulp_sync_wedge i_sync\n     (\n      .clk_i(clk_i),\n      .rstn_i(rstn_i),\n      .en_i(1'b1),\n      .serial_i(reg_if_req_i),\n      .r_edge_o(s_rise),\n      .f_edge_o(s_fall),\n      .serial_o(s_req_sync)\n      );\n\n   assign cfg_rar_nv_volt_o           = r_rar_nv_volt;\n   assign cfg_rar_mv_volt_o           = r_rar_mv_volt;\n   assign cfg_rar_lv_volt_o           = r_rar_lv_volt;\n   assign cfg_rar_rv_volt_o           = r_rar_rv_volt;\n\n   assign cfg_mem_ret_o               = r_cfg_ret[11:0];\n   assign cfg_fll_ret_o               = r_cfg_ret[13:12];\n\n   assign wake_event_o                = r_extevent;\n   assign cfg_wakeup_o                = r_wakeup;\n\n   assign boot_l2_o                   = r_boot_l2;\n\n   always_ff @(posedge clk_i, negedge rstn_i)\n     begin\n\tif(!rstn_i)\n\t     reg_if_ack_o  <= 1'b0;\n\telse if (s_rise)\n\t  \treg_if_ack_o <= 1'b1;\n\telse if (s_fall)\n\t\treg_if_ack_o <= 1'b0;\n   end\n\n   assign s_extwake_in   = wake_gpio_i[r_extwake_sel];\n   assign s_extwake_rise =  r_extevent_sync[1] & ~r_extevent_sync[0];\n   assign s_extwake_fall = ~r_extevent_sync[1] &  r_extevent_sync[0];\n\n   assign s_rtc_date_select  = reg_if_add_i == `REG_RTC_DATE;\n   assign s_rtc_clock_select = reg_if_add_i == `REG_RTC_CLOCK;\n   assign s_rtc_timer_select = reg_if_add_i == `REG_RTC_TIMER;\n   assign s_rtc_alarm_select = reg_if_add_i == `REG_RTC_ALARM;\n\n   assign s_rtc_date_update  = s_rtc_date_select & (s_rise & ~reg_if_wrn_i);\n   assign s_rtc_alarm_update = s_rtc_alarm_select & (s_rise & ~reg_if_wrn_i);\n   assign s_rtc_clock_update = s_rtc_clock_select & (s_rise & ~reg_if_wrn_i);\n   assign s_rtc_timer_update = s_rtc_timer_select & (s_rise & ~reg_if_wrn_i);\n\n\trtc_clock i_rtc_clock (\n\t\t.clk_i           ( clk_i                 ),\n\t\t.rstn_i          ( rstn_i                ),\n\t\t.clock_update_i  ( s_rtc_clock_update    ),\n\t\t.clock_o         ( s_rtc_clock           ),\n\t\t.clock_i         ( reg_if_wdata_i[21:0]  ),\n    .init_sec_cnt_i  ( reg_if_wdata_i[31:22] ),\n\t\t.timer_update_i  ( s_rtc_timer_update    ),\n\t\t.timer_enable_i  ( reg_if_wdata_i[31]    ),\n    .timer_retrig_i  ( reg_if_wdata_i[30]    ),\n\t\t.timer_target_i  ( reg_if_wdata_i[16:0]  ),\n\t\t.timer_value_o   ( s_rtc_timer           ),\n\t\t.alarm_enable_i  ( reg_if_wdata_i[31]    ),\n\t\t.alarm_update_i  ( s_rtc_alarm_update    ),\n\t\t.alarm_clock_i   ( reg_if_wdata_i[21:0]  ),\n\t\t.alarm_clock_o   ( s_rtc_alarm           ),\n\t\t.event_o         ( rtc_event_o           ),\n\t\t.update_day_o    ( s_rtc_update_day      )\n\t);\n\n\trtc_date i_rtc_date (\n\t\t.clk_i          ( clk_i                ),\n\t\t.rstn_i         ( rstn_i               ),\n\t\t.date_update_i  ( s_rtc_date_update    ),\n\t\t.date_i         ( reg_if_wdata_i[31:0] ),\n\t\t.date_o         ( s_rtc_date           ),\n\t\t.new_day_i      ( s_rtc_update_day     )\n\t);\n\n   always_ff @(posedge clk_i, negedge rstn_i)\n     begin\n\tif(!rstn_i)\n\t  begin\n\t     r_cfg_ret              <= 13'h0;\n\t     r_rar_nv_volt          <= 5'h0D; //1.2V\n\t     r_rar_mv_volt          <= 5'h09; //1.0V\n\t     r_rar_lv_volt          <= 5'h09; //1.0V\n\t     r_rar_rv_volt          <= 5'h05; //0.8V\n       r_sleep_pad_cfg0       <= '0;\n       r_sleep_pad_cfg1       <= '0;\n       r_pad_sleep            <= '0;\n\t     r_extwake_sel          <= '0;\n\t     r_extwake_en           <= '0;\n\t     r_extwake_type         <= '0;\n\t     r_extevent             <= 0;\n\t     r_extevent_sync        <= 0;\n\t     r_wakeup               <= 0;\n\t     r_cluster_wake         <= 1'b0;\n\t     r_boot_l2              <= 0;\n\t     r_reboot               <= 2'b00;\n\t  end\n\telse if (s_rise & ~reg_if_wrn_i)\n\t  begin\n\t     case(reg_if_add_i)\n\t       `REG_RAR:\n\t  \t begin\n\t\t    r_rar_nv_volt <= reg_if_wdata_i[4:0];\n\t\t    r_rar_mv_volt <= reg_if_wdata_i[12:8];\n\t\t    r_rar_lv_volt <= reg_if_wdata_i[20:16];\n\t\t    r_rar_rv_volt <= reg_if_wdata_i[28:24];\n\t  \t end\n\t       `REG_SLEEP_CTRL:\n\t  \t begin\n        r_cfg_ret[13:12] <= reg_if_wdata_i[1:0];\n        r_cfg_ret[11]    <= reg_if_wdata_i[2];\n\t\t    r_extwake_sel    <= reg_if_wdata_i[10:6];\n\t\t    r_extwake_type   <= reg_if_wdata_i[12:11];\n\t\t    r_extwake_en     <= reg_if_wdata_i[13];\n\t\t    r_wakeup         <= reg_if_wdata_i[15:14];\n\t\t    r_boot_l2        <= reg_if_wdata_i[16];\n\t\t    // pmu extint readonly [17]\n\t\t    r_reboot         <= reg_if_wdata_i[19:18];\n\t\t    r_cluster_wake   <= reg_if_wdata_i[20];\n        r_cfg_ret[10:0] <= reg_if_wdata_i[31:21];\n\t  \t end\n\n           `REG_SLEEPPADCFG0:\n         for (int i=0;i<16;i++)\n           begin\n              r_sleep_pad_cfg0[i] <= reg_if_wdata_i[i*2];\n              r_sleep_pad_cfg1[i] <= reg_if_wdata_i[i*2+1];\n           end\n           `REG_SLEEPPADCFG1:\n         for (int i=0;i<16;i++)\n           begin\n              r_sleep_pad_cfg0[16+i] <= reg_if_wdata_i[i*2];\n              r_sleep_pad_cfg1[16+i] <= reg_if_wdata_i[i*2+1];\n           end\n           `REG_SLEEPPADCFG2:\n         for (int i=0;i<16;i++)\n           begin\n              r_sleep_pad_cfg0[32+i] <= reg_if_wdata_i[i*2];\n              r_sleep_pad_cfg1[32+i] <= reg_if_wdata_i[i*2+1];\n           end\n           `REG_SLEEPPADCFG3:\n         for (int i=0;i<16;i++)\n           begin\n              r_sleep_pad_cfg0[48+i] <= reg_if_wdata_i[i*2];\n              r_sleep_pad_cfg1[48+i] <= reg_if_wdata_i[i*2+1];\n           end\n\n           `REG_PADSLEEP:\n         begin\n            r_pad_sleep          <= reg_if_wdata_i[0];\n         end\n\n\t     endcase\n\t  end\n\t  else if (s_rise & reg_if_wrn_i)\n\t  begin\n\t     case(reg_if_add_i)\n\t       `REG_SLEEP_CTRL:\n\t  \t begin\n\t  \t \tif (r_extevent)\n\t  \t \t\tr_extevent <= 1'b0;\n\t  \t end\n\t  \t endcase // reg_if_add_i\n\t  end\n\t  else\n\t  begin\n\t  \tif (r_extwake_en)\n\t  \tbegin\n\t  \t\tr_extevent_sync <= {s_extwake_in,r_extevent_sync[2:1]};\n\t  \t\tcase(r_extwake_type)\n\t  \t\t\t2'b00:\n\t  \t\t\t\tif(s_extwake_rise)      r_extevent <= 1'b1;\n\t  \t\t\t2'b01:\n\t  \t\t\t\tif(s_extwake_fall)      r_extevent <= 1'b1;\n\t  \t\t\t2'b10:\n\t  \t\t\t\tif(r_extevent_sync[0])  r_extevent <= 1'b1;\n\t  \t\t\t2'b11:\n\t  \t\t\t\tif(!r_extevent_sync[0]) r_extevent <= 1'b1;\n\t  \t\tendcase // r_extwake_sel\n\t  \tend\n\t  end\n     end\n\n   always_comb begin\n      case(reg_if_add_i)\n        `REG_RAR:\n          reg_if_rdata_o = {3'h0,r_rar_rv_volt,3'h0,r_rar_lv_volt,3'h0,r_rar_mv_volt,3'h0,r_rar_nv_volt};\n        `REG_SLEEP_CTRL:\n          reg_if_rdata_o = s_pmu_sleep_control;\n        `REG_SLEEPPADCFG0:\n                for (int i=0;i<16;i++)\n                  begin\n                     reg_if_rdata_o[i*2]   = r_sleep_pad_cfg0[i];\n                     reg_if_rdata_o[i*2+1] = r_sleep_pad_cfg1[i];\n                  end\n        `REG_SLEEPPADCFG1:\n                for (int i=0;i<16;i++)\n                  begin\n                     reg_if_rdata_o[i*2]   = r_sleep_pad_cfg0[16+i];\n                     reg_if_rdata_o[i*2+1] = r_sleep_pad_cfg1[16+i];\n                  end\n        `REG_SLEEPPADCFG2:\n                for (int i=0;i<16;i++)\n                  begin\n                     reg_if_rdata_o[i*2]   = r_sleep_pad_cfg0[32+i];\n                     reg_if_rdata_o[i*2+1] = r_sleep_pad_cfg1[32+i];\n                  end\n        `REG_SLEEPPADCFG3:\n                for (int i=0;i<16;i++)\n                  begin\n                     reg_if_rdata_o[i*2]   = r_sleep_pad_cfg0[48+i];\n                     reg_if_rdata_o[i*2+1] = r_sleep_pad_cfg1[48+i];\n                  end\n        `REG_PADSLEEP:\n          reg_if_rdata_o = {31'h0,r_pad_sleep};\n\t\t`REG_RTC_DATE:\n\t\t  reg_if_rdata_o = s_rtc_date;\n\t\t`REG_RTC_CLOCK:\n\t\t  reg_if_rdata_o = s_rtc_clock;\n\t\t`REG_RTC_TIMER:\n\t\t  reg_if_rdata_o = s_rtc_timer;\n\t\t`REG_RTC_ALARM:\n\t\t  reg_if_rdata_o = s_rtc_alarm;\n\t\tdefault:\n\t\t  reg_if_rdata_o = 'h0;\n\t  endcase\n   end\n\n   always_comb begin\n      for (int i=0;i<64;i++)\n        begin\n           pad_sleep_cfg_o[i][0]  = r_sleep_pad_cfg0[i];\n           pad_sleep_cfg_o[i][1]  = r_sleep_pad_cfg1[i];\n        end\n   end\n\n   assign pad_sleep_mode_o = r_pad_sleep;\n\n   assign s_pmu_sleep_control = {r_cfg_ret[10:0],r_cluster_wake,r_reboot,r_extevent,r_boot_l2,r_wakeup,r_extwake_en,r_extwake_type,r_extwake_sel,3'h0,r_cfg_ret[11],r_cfg_ret[13:12]};\n\n   assign pmu_sleep_control_o = s_pmu_sleep_control;\n\nendmodule // safe_domain_reg_if\n"}
{"text": "/*\n * soc_bus_defines.sv\n *\n * Copyright (C) 2013-2018 ETH Zurich, University of Bologna.\n *\n * Copyright and related rights are licensed under the Solderpad Hardware\n * License, Version 0.51 (the \"License\"); you may not use this file except in\n * compliance with the License.  You may obtain a copy of the License at\n * http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n * or agreed to in writing, software, hardware and materials distributed under\n * this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n */\n\n// SOC BUS PARAMETRES\n`include \"pulp_soc_defines.sv\"\n\n`define NB_SLAVE  4\n`define NB_MASTER 4\n`define NB_REGION 4\n\n// MASTER PORT TO CLUSTER(3MB)\n`define CLUSTER_DATA_START_ADDR  32'h1000_0000\n`define CLUSTER_DATA_END_ADDR    32'h103F_FFFF\n\n// MASTER PORT TO L2\n`define SOC_L2_START_ADDR        32'h1C00_0000\n`define SOC_L2_END_ADDR          32'h1FFF_FFFF\n\n// MASTER PORT TO L2\n`define SOC_L2_PRI_CH0_START_ADDR     32'h1C00_0000\n`define SOC_L2_PRI_CH0_END_ADDR       32'h1C00_8000\n\n`define SOC_L2_PRI_CH1_START_ADDR     32'h1C00_8000\n`define SOC_L2_PRI_CH1_END_ADDR       32'h1C01_0000\n\n`define SOC_L2_PRI_CH0_SCM_START_ADDR 32'h1C00_6000\n`define SOC_L2_PRI_CH0_SCM_END_ADDR   32'h1C00_8000\n\n`define ALIAS_SOC_L2_PRI_CH0_SCM_START_ADDR 32'h0000_6000\n`define ALIAS_SOC_L2_PRI_CH0_SCM_END_ADDR   32'h0000_8000\n\n\n// MASTER PORT TO SOC APB\n\n// REGION TO SOC APB PERIPHERALS\n`define SOC_APB_START_ADDR       32'h1A10_0000\n`define SOC_APB_END_ADDR         32'h1A10_FFFF\n\n// REGION TO FABRIC CONTROLLER PERIPHERAL INTERCONNECT PERIPHERALS\n`define FC_PERIPH_APB_START_ADDR 32'h1B20_0000\n`define FC_PERIPH_APB_END_ADDR   32'h1B20_3FFF\n\n// REGION TO FABRIC CONTROLLER APB PERIPHERALS\n`define FC_APB_START_ADDR        32'h1B30_0000\n`define FC_APB_END_ADDR          32'h1B3F_FFFF\n\n`define AXI_ASSIGN_SLAVE(lhs, rhs)        \\\n    assign lhs.aw_id     = rhs.aw_id;     \\\n    assign lhs.aw_addr   = rhs.aw_addr;   \\\n    assign lhs.aw_len    = rhs.aw_len;    \\\n    assign lhs.aw_size   = rhs.aw_size;   \\\n    assign lhs.aw_burst  = rhs.aw_burst;  \\\n    assign lhs.aw_lock   = rhs.aw_lock;   \\\n    assign lhs.aw_cache  = rhs.aw_cache;  \\\n    assign lhs.aw_prot   = rhs.aw_prot;   \\\n    assign lhs.aw_region = rhs.aw_region; \\\n    assign lhs.aw_user   = rhs.aw_user;   \\\n    assign lhs.aw_qos    = rhs.aw_qos;    \\\n    assign lhs.aw_valid  = rhs.aw_valid;  \\\n    assign rhs.aw_ready  = lhs.aw_ready;  \\\n                                          \\\n    assign lhs.ar_id     = rhs.ar_id;     \\\n    assign lhs.ar_addr   = rhs.ar_addr;   \\\n    assign lhs.ar_len    = rhs.ar_len;    \\\n    assign lhs.ar_size   = rhs.ar_size;   \\\n    assign lhs.ar_burst  = rhs.ar_burst;  \\\n    assign lhs.ar_lock   = rhs.ar_lock;   \\\n    assign lhs.ar_cache  = rhs.ar_cache;  \\\n    assign lhs.ar_prot   = rhs.ar_prot;   \\\n    assign lhs.ar_region = rhs.ar_region; \\\n    assign lhs.ar_user   = rhs.ar_user;   \\\n    assign lhs.ar_qos    = rhs.ar_qos;    \\\n    assign lhs.ar_valid  = rhs.ar_valid;  \\\n    assign rhs.ar_ready  = lhs.ar_ready;  \\\n                                          \\\n    assign lhs.w_data    = rhs.w_data;    \\\n    assign lhs.w_strb    = rhs.w_strb;    \\\n    assign lhs.w_last    = rhs.w_last;    \\\n    assign lhs.w_user    = rhs.w_user;    \\\n    assign lhs.w_valid   = rhs.w_valid;   \\\n    assign rhs.w_ready   = lhs.w_ready;   \\\n                                          \\\n    assign rhs.b_id      = lhs.b_id;      \\\n    assign rhs.b_resp    = lhs.b_resp;    \\\n    assign rhs.b_user    = lhs.b_user;    \\\n    assign rhs.b_valid   = lhs.b_valid;   \\\n    assign lhs.b_ready   = rhs.b_ready;   \\\n                                          \\\n    assign rhs.r_id      = lhs.r_id;      \\\n    assign rhs.r_data    = lhs.r_data;    \\\n    assign rhs.r_resp    = lhs.r_resp;    \\\n    assign rhs.r_last    = lhs.r_last;    \\\n    assign rhs.r_user    = lhs.r_user;    \\\n    assign rhs.r_valid   = lhs.r_valid;   \\\n    assign lhs.r_ready   = rhs.r_ready;\n\n`define AXI_ASSIGN_MASTER(lhs, rhs) `AXI_ASSIGN_SLAVE(rhs, lhs)\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n`include \"pulp_soc_defines.sv\"\n\nmodule soc_domain #(\n    parameter CORE_TYPE            = 0,\n    parameter USE_FPU              = 1,\n    parameter USE_HWPE             = 1,\n    parameter NB_CL_CORES          = 8,\n    parameter AXI_ADDR_WIDTH       = 32,\n    parameter AXI_DATA_IN_WIDTH    = 64,\n    parameter AXI_DATA_OUT_WIDTH   = 32,\n    parameter AXI_ID_IN_WIDTH      = 4,\n    parameter AXI_ID_INT_WIDTH     = 8,\n    parameter AXI_ID_OUT_WIDTH     = 6,\n    parameter AXI_USER_WIDTH       = 6,\n    parameter AXI_STRB_IN_WIDTH    = AXI_DATA_IN_WIDTH/8,\n    parameter AXI_STRB_OUT_WIDTH   = AXI_DATA_OUT_WIDTH/8,\n    parameter C2S_AW_WIDTH         = 1, \n    parameter C2S_W_WIDTH          = 1,\n    parameter C2S_B_WIDTH          = 1,\n    parameter C2S_AR_WIDTH         = 1,\n    parameter C2S_R_WIDTH          = 1,\n    parameter S2C_AW_WIDTH         = 1, \n    parameter S2C_W_WIDTH          = 1,\n    parameter S2C_B_WIDTH          = 1,\n    parameter S2C_AR_WIDTH         = 1,\n    parameter S2C_R_WIDTH          = 1,\n    parameter LOG_DEPTH            = 3,\n\n    parameter BUFFER_WIDTH         = 8,\n    parameter EVNT_WIDTH           = 8,\n\n    parameter int unsigned N_UART  = 1,\n    parameter int unsigned N_SPI   = 1,\n    parameter int unsigned N_I2C   = 2\n)(\n\n    input logic                                       ref_clk_i,\n    input logic                                       slow_clk_i,\n    input logic                                       test_clk_i,\n\n    input logic                                       rstn_glob_i,\n\n    input logic                                       dft_test_mode_i,\n    input logic                                       dft_cg_enable_i,\n\n    input logic                                       mode_select_i,\n\n    input logic [1:0]                                 bootsel_i,\n\n    input logic                                       fc_fetch_en_valid_i,\n    input logic                                       fc_fetch_en_i,\n\n    input logic                                       jtag_tck_i,\n    input logic                                       jtag_trst_ni,\n    input logic                                       jtag_tms_i,\n    input logic                                       jtag_tdi_i,\n    output logic                                      jtag_tdo_o,\n\n    output logic [`NB_CORES-1:0]                      dbg_irq_valid_o,\n\n    input logic [31:0]                                gpio_in_i,\n    output logic [31:0]                               gpio_out_o,\n    output logic [31:0]                               gpio_dir_o,\n    output logic [191:0]                              gpio_cfg_o,\n\n    output logic [127:0]                              pad_mux_o,\n    output logic [383:0]                              pad_cfg_o,\n\n    output logic                                      uart_tx_o,\n    input logic                                       uart_rx_i,\n\n    input logic                                       cam_clk_i,\n    input logic [7:0]                                 cam_data_i,\n    input logic                                       cam_hsync_i,\n    input logic                                       cam_vsync_i,\n\n    output logic [3:0]                                timer_ch0_o,\n    output logic [3:0]                                timer_ch1_o,\n    output logic [3:0]                                timer_ch2_o,\n    output logic [3:0]                                timer_ch3_o,\n\n    input logic [N_I2C-1:0]                           i2c_scl_i,\n    output logic [N_I2C-1:0]                          i2c_scl_o,\n    output logic [N_I2C-1:0]                          i2c_scl_oe_o,\n    input logic [N_I2C-1:0]                           i2c_sda_i,\n    output logic [N_I2C-1:0]                          i2c_sda_o,\n    output logic [N_I2C-1:0]                          i2c_sda_oe_o,\n\n    input logic                                       i2s_slave_sd0_i,\n    input logic                                       i2s_slave_sd1_i,\n    input logic                                       i2s_slave_ws_i,\n    output logic                                      i2s_slave_ws_o,\n    output logic                                      i2s_slave_ws_oe,\n    input logic                                       i2s_slave_sck_i,\n    output logic                                      i2s_slave_sck_o,\n    output logic                                      i2s_slave_sck_oe,\n\n    output logic [N_SPI-1:0]                          spi_clk_o,\n    output logic [N_SPI-1:0][3:0]                     spi_csn_o,\n    output logic [N_SPI-1:0][3:0]                     spi_oen_o,\n    output logic [N_SPI-1:0][3:0]                     spi_sdo_o,\n    input logic [N_SPI-1:0][3:0]                      spi_sdi_i,\n\n    output logic                                      sdio_clk_o,\n    output logic                                      sdio_cmd_o,\n    input logic                                       sdio_cmd_i,\n    output logic                                      sdio_cmd_oen_o,\n    output logic [3:0]                                sdio_data_o,\n    input logic [3:0]                                 sdio_data_i,\n    output logic [3:0]                                sdio_data_oen_o,\n\n    output logic [1:0]                                hyper_cs_no,\n    output logic                                      hyper_ck_o,\n    output logic                                      hyper_ck_no,\n    output logic [1:0]                                hyper_rwds_o,\n    input logic                                       hyper_rwds_i,\n    output logic [1:0]                                hyper_rwds_oe_o,\n    input logic [15:0]                                hyper_dq_i,\n    output logic [15:0]                               hyper_dq_o,\n    output logic [1:0]                                hyper_dq_oe_o,\n    output logic                                      hyper_reset_no,\n\n\n\n    // CLUSTER\n    output logic                                      cluster_clk_o,\n    output logic                                      cluster_rstn_o,\n    input logic                                       cluster_busy_i,\n    output logic                                      cluster_irq_o,\n\n    output logic                                      cluster_rtc_o,\n    output logic                                      cluster_fetch_enable_o,\n    output logic [63:0]                               cluster_boot_addr_o,\n    output logic                                      cluster_test_en_o,\n    output logic                                      cluster_pow_o,\n    output logic                                      cluster_byp_o,\n\n    output logic                                      dma_pe_evt_ack_o,\n    input logic                                       dma_pe_evt_valid_i,\n\n    output logic                                      dma_pe_irq_ack_o,\n    input logic                                       dma_pe_irq_valid_i,\n\n    output logic                                      pf_evt_ack_o,\n    input logic                                       pf_evt_valid_i,\n\n    // EVENT BUS\n    output logic [LOG_DEPTH:0]                        async_cluster_events_wptr_o,\n    output logic [EVNT_WIDTH-1:0][2**LOG_DEPTH-1:0]   async_cluster_events_data_o,\n    input logic [LOG_DEPTH:0]                         async_cluster_events_rptr_i,\n  \n    // AXI4 SLAVE\n    input logic [LOG_DEPTH:0]                         async_data_slave_aw_wptr_i,\n    input logic [2**LOG_DEPTH-1:0][C2S_AW_WIDTH-1:0]  async_data_slave_aw_data_i, \n    output logic [LOG_DEPTH:0]                        async_data_slave_aw_rptr_o,\n                                             \n    // READ ADDRESS CHANNEL                  \n    input logic [LOG_DEPTH:0]                         async_data_slave_ar_wptr_i,\n    input logic [2**LOG_DEPTH-1:0][C2S_AR_WIDTH-1:0]  async_data_slave_ar_data_i,\n    output logic [LOG_DEPTH:0]                        async_data_slave_ar_rptr_o,\n                                             \n    // WRITE DATA CHANNEL                    \n    input logic [LOG_DEPTH:0]                         async_data_slave_w_wptr_i,\n    input logic [2**LOG_DEPTH-1:0][C2S_W_WIDTH-1:0]   async_data_slave_w_data_i,\n    output logic [LOG_DEPTH:0]                        async_data_slave_w_rptr_o,\n                                                     \n    // READ DATA CHANNEL                             \n    output logic [LOG_DEPTH:0]                        async_data_slave_r_wptr_o,\n    output logic [2**LOG_DEPTH-1:0][C2S_R_WIDTH-1:0]  async_data_slave_r_data_o,\n    input logic [LOG_DEPTH:0]                         async_data_slave_r_rptr_i,\n                                                     \n    // WRITE RESPONSE CHANNEL                        \n    output logic [LOG_DEPTH:0]                        async_data_slave_b_wptr_o,\n    output logic [2**LOG_DEPTH-1:0][C2S_B_WIDTH-1:0]  async_data_slave_b_data_o,\n    input logic [LOG_DEPTH:0]                         async_data_slave_b_rptr_i,\n\n    // AXI4 MASTER\n    output logic [LOG_DEPTH:0]                        async_data_master_aw_wptr_o,\n    output logic [2**LOG_DEPTH-1:0][S2C_AW_WIDTH-1:0] async_data_master_aw_data_o, \n    input logic [LOG_DEPTH:0]                         async_data_master_aw_rptr_i,\n                                             \n    // READ ADDRESS CHANNEL                  \n    output logic [LOG_DEPTH:0]                        async_data_master_ar_wptr_o,\n    output logic [2**LOG_DEPTH-1:0][S2C_AR_WIDTH-1:0] async_data_master_ar_data_o,\n    input logic [LOG_DEPTH:0]                         async_data_master_ar_rptr_i,\n                                             \n    // WRITE DATA CHANNEL                    \n    output logic [LOG_DEPTH:0]                        async_data_master_w_wptr_o,\n    output logic [2**LOG_DEPTH-1:0][S2C_W_WIDTH-1:0]  async_data_master_w_data_o,\n    input logic [LOG_DEPTH:0]                         async_data_master_w_rptr_i,\n                                                     \n    // READ DATA CHANNEL                             \n    input logic [LOG_DEPTH:0]                         async_data_master_r_wptr_i,\n    input logic [2**LOG_DEPTH-1:0][S2C_R_WIDTH-1:0]   async_data_master_r_data_i,\n    output logic [LOG_DEPTH:0]                        async_data_master_r_rptr_o,\n                                                     \n    // WRITE RESPONSE CHANNEL                        \n    input logic [LOG_DEPTH:0]                         async_data_master_b_wptr_i,\n    input logic [2**LOG_DEPTH-1:0][S2C_B_WIDTH-1:0]   async_data_master_b_data_i,\n    output logic [LOG_DEPTH:0]                        async_data_master_b_rptr_o    );\n\n    pulp_soc #(\n        .CORE_TYPE               ( CORE_TYPE          ),\n        .USE_FPU                 ( USE_FPU            ),\n        .USE_HWPE                ( USE_HWPE           ),\n        .NB_CORES                ( NB_CL_CORES        ),\n        .AXI_ADDR_WIDTH          ( AXI_ADDR_WIDTH     ),\n        .AXI_DATA_IN_WIDTH       ( AXI_DATA_IN_WIDTH  ),\n        .AXI_DATA_OUT_WIDTH      ( AXI_DATA_OUT_WIDTH ),\n        .AXI_ID_IN_WIDTH         ( AXI_ID_IN_WIDTH    ),\n        .AXI_USER_WIDTH          ( AXI_USER_WIDTH     ),\n        .EVNT_WIDTH              ( EVNT_WIDTH         ),\n        .NGPIO                   ( 32                 ),\n        .NPAD                    ( 64                 ),\n        .NBIT_PADCFG             ( 6                  ),\n        .NBIT_PADMUX             ( 2                  ),\n        .N_UART                  ( N_UART             ),\n        .N_SPI                   ( N_SPI              ),\n        .N_I2C                   ( N_I2C              )\n   ) pulp_soc_i (\n\n        .boot_l2_i                    ( 1'b0                         ),\n        .cluster_dbg_irq_valid_o      ( dbg_irq_valid_o     ),    //dbg_irq_valid_o\n        .*\n    );\n\nendmodule\n"}
{"text": "//-----------------------------------------------------------------------------\n// Title         : SoC Memory Region Definitions\n//-----------------------------------------------------------------------------\n// File          : soc_mem_map.svh\n// Author        : Manuel Eggimann  <meggimann@iis.ee.ethz.ch>\n// Created       : 30.10.2020\n//-----------------------------------------------------------------------------\n// Description :\n// This file contains start and end address definitions for the soc_interconnect.\n//-----------------------------------------------------------------------------\n// Copyright (C) 2013-2020 ETH Zurich, University of Bologna\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License. You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n//-----------------------------------------------------------------------------\n\n`define SOC_MEM_MAP_TCDM_START_ADDR          32'h1C01_0000\n`define SOC_MEM_MAP_TCDM_END_ADDR            32'h1C09_0000\n`define SOC_MEM_MAP_TCDM_ALIAS_START_ADDR    32'h0000_0000\n`define SOC_MEM_MAP_TCDM_ALIAS_END_ADDR      32'h0010_0000\n\n`define SOC_MEM_MAP_PRIVATE_BANK0_START_ADDR 32'h1C00_0000\n`define SOC_MEM_MAP_PRIVATE_BANK0_END_ADDR   32'h1C00_8000\n\n`define SOC_MEM_MAP_PRIVATE_BANK1_START_ADDR 32'h1C00_8000\n`define SOC_MEM_MAP_PRIVATE_BANK1_END_ADDR   32'h1C01_0000\n\n`define SOC_MEM_MAP_BOOT_ROM_START_ADDR      32'h1A00_0000\n`define SOC_MEM_MAP_BOOT_ROM_END_ADDR        32'h1A04_0000\n\n`define SOC_MEM_MAP_AXI_PLUG_START_ADDR      32'h1000_0000\n`define SOC_MEM_MAP_AXI_PLUG_END_ADDR        32'h1040_0000\n\n`define SOC_MEM_MAP_PERIPHERALS_START_ADDR   32'h1A10_0000\n`define SOC_MEM_MAP_PERIPHERALS_END_ADDR     32'h1A40_0000\n"}
