{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n\n`define E203_CFG_DEBUG_HAS_JTAG\n`define E203_CFG_IRQ_NEED_SYNC\n\n//`define E203_CFG_ADDR_SIZE_IS_16\n//`define E203_CFG_ADDR_SIZE_IS_24\n`define E203_CFG_ADDR_SIZE_IS_32\n\n`ifdef E203_CFG_ADDR_SIZE_IS_16\n   `define E203_CFG_ADDR_SIZE   16\n`endif\n`ifdef E203_CFG_ADDR_SIZE_IS_32\n   `define E203_CFG_ADDR_SIZE   32\n`endif\n`ifdef E203_CFG_ADDR_SIZE_IS_24\n   `define E203_CFG_ADDR_SIZE   24\n`endif\n\n//`define E203_CFG_SUPPORT_MSCRATCH\n`define E203_CFG_SUPPORT_MCYCLE_MINSTRET\n\n`define E203_CFG_REGNUM_IS_32\n/////////////////////////////////////////////////////////////////\n`define E203_CFG_HAS_ITCM\n    // 64KB have address 16bits wide\n    //   The depth is 64*1024*8/64=8192\n`define E203_CFG_ITCM_ADDR_WIDTH  16\n\n//    // 1024KB have address 20bits wide\n//    //   The depth is 1024*1024*8/64=131072\n//`define E203_CFG_ITCM_ADDR_WIDTH  20\n\n//    // 2048KB have address 21bits wide\n//    //   The depth is 2*1024*1024*8/64=262144\n//`define E203_CFG_ITCM_ADDR_WIDTH  21\n\n\n/////////////////////////////////////////////////////////////////\n`define E203_CFG_HAS_DTCM\n    // 16KB have address 14 wide\n    //   The depth is 16*1024*8/32=4096\n\n    // 256KB have address 18 wide\n    //   The depth is 256*1024*8/32=65536\n\n//    // 1MB have address 20bits wide\n//    //   The depth is 1024*1024*8/32=262144\n\n/////////////////////////////////////////////////////////////////\n//`define E203_CFG_REGFILE_LATCH_BASED\n//\n\n\n\n\n//\n`define E203_CFG_ITCM_ADDR_BASE   `E203_CFG_ADDR_SIZE'h8000_0000 \n`define E203_CFG_DTCM_ADDR_BASE   `E203_CFG_ADDR_SIZE'h9000_0000 \n\n //   * PPI       : 0x1000 0000 -- 0x1FFF FFFF\n`define E203_CFG_PPI_ADDR_BASE  `E203_CFG_ADDR_SIZE'h1000_0000\n    `define E203_CFG_PPI_BASE_REGION  `E203_CFG_ADDR_SIZE-1:`E203_CFG_ADDR_SIZE-4\n\n  //  * CLINT     : 0x0200 0000 -- 0x0200 FFFF\n  //  * PLIC      : 0x0C00 0000 -- 0x0CFF FFFF\n`define E203_CFG_CLINT_ADDR_BASE  `E203_CFG_ADDR_SIZE'h0200_0000\n    `define E203_CFG_CLINT_BASE_REGION  `E203_CFG_ADDR_SIZE-1:`E203_CFG_ADDR_SIZE-16\n`define E203_CFG_PLIC_ADDR_BASE  `E203_CFG_ADDR_SIZE'h0C00_0000\n    `define E203_CFG_PLIC_BASE_REGION  `E203_CFG_ADDR_SIZE-1:`E203_CFG_ADDR_SIZE-8\n\n`define E203_CFG_FIO_ADDR_BASE  `E203_CFG_ADDR_SIZE'hf000_0000 \n    `define E203_CFG_FIO_BASE_REGION  `E203_CFG_ADDR_SIZE-1:`E203_CFG_ADDR_SIZE-4\n\n\n\n\n\n`define E203_CFG_HAS_ECC\n`define E203_CFG_HAS_EAI\n`define E203_CFG_SUPPORT_SHARE_MULDIV\n`define E203_CFG_SUPPORT_AMO\n`define E203_CFG_DTCM_ADDR_WIDTH 16\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The BIU module control the ICB request to external memory system\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_biu(\n\n  output                         biu_active,\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface from LSU \n  input                          lsu2biu_icb_cmd_valid,\n  output                         lsu2biu_icb_cmd_ready,\n  input  [`E203_ADDR_SIZE-1:0]   lsu2biu_icb_cmd_addr, \n  input                          lsu2biu_icb_cmd_read, \n  input  [`E203_XLEN-1:0]        lsu2biu_icb_cmd_wdata,\n  input  [`E203_XLEN/8-1:0]      lsu2biu_icb_cmd_wmask,\n  input  [1:0]                   lsu2biu_icb_cmd_burst,\n  input  [1:0]                   lsu2biu_icb_cmd_beat,\n  input                          lsu2biu_icb_cmd_lock,\n  input                          lsu2biu_icb_cmd_excl,\n  input  [1:0]                   lsu2biu_icb_cmd_size,\n  \n  output                         lsu2biu_icb_rsp_valid,\n  input                          lsu2biu_icb_rsp_ready,\n  output                         lsu2biu_icb_rsp_err  ,\n  output                         lsu2biu_icb_rsp_excl_ok,\n  output [`E203_XLEN-1:0]        lsu2biu_icb_rsp_rdata,\n\n  `ifdef E203_HAS_MEM_ITF //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // the icb interface from ifetch \n  //\n  //    * bus cmd channel\n  input                          ifu2biu_icb_cmd_valid,\n  output                         ifu2biu_icb_cmd_ready,\n  input  [`E203_ADDR_SIZE-1:0]   ifu2biu_icb_cmd_addr, \n  input                          ifu2biu_icb_cmd_read, \n  input  [`E203_XLEN-1:0]        ifu2biu_icb_cmd_wdata,\n  input  [`E203_XLEN/8-1:0]      ifu2biu_icb_cmd_wmask,\n  input  [1:0]                   ifu2biu_icb_cmd_burst,\n  input  [1:0]                   ifu2biu_icb_cmd_beat,\n  input                          ifu2biu_icb_cmd_lock,\n  input                          ifu2biu_icb_cmd_excl,\n  input  [1:0]                   ifu2biu_icb_cmd_size,\n  //\n  //    * bus rsp channel\n  output                         ifu2biu_icb_rsp_valid,\n  input                          ifu2biu_icb_rsp_ready,\n  output                         ifu2biu_icb_rsp_err  ,\n  output                         ifu2biu_icb_rsp_excl_ok,\n  output [`E203_XLEN-1:0]        ifu2biu_icb_rsp_rdata,\n\n  //output                         ifu2biu_replay,\n  `endif//}\n\n\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface to Private Peripheral Interface\n  //\n  input [`E203_ADDR_SIZE-1:0]    ppi_region_indic,\n  input                          ppi_icb_enable,\n  //    * Bus cmd channel\n  output                         ppi_icb_cmd_valid,\n  input                          ppi_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   ppi_icb_cmd_addr, \n  output                         ppi_icb_cmd_read, \n  output [`E203_XLEN-1:0]        ppi_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      ppi_icb_cmd_wmask,\n  output [1:0]                   ppi_icb_cmd_burst,\n  output [1:0]                   ppi_icb_cmd_beat,\n  output                         ppi_icb_cmd_lock,\n  output                         ppi_icb_cmd_excl,\n  output [1:0]                   ppi_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          ppi_icb_rsp_valid,\n  output                         ppi_icb_rsp_ready,\n  input                          ppi_icb_rsp_err  ,\n  input                          ppi_icb_rsp_excl_ok,\n  input  [`E203_XLEN-1:0]        ppi_icb_rsp_rdata,\n\n    //\n  input [`E203_ADDR_SIZE-1:0]    clint_region_indic,\n  input                          clint_icb_enable,\n  //    * Bus cmd channel\n  output                         clint_icb_cmd_valid,\n  input                          clint_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   clint_icb_cmd_addr, \n  output                         clint_icb_cmd_read, \n  output [`E203_XLEN-1:0]        clint_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      clint_icb_cmd_wmask,\n  output [1:0]                   clint_icb_cmd_burst,\n  output [1:0]                   clint_icb_cmd_beat,\n  output                         clint_icb_cmd_lock,\n  output                         clint_icb_cmd_excl,\n  output [1:0]                   clint_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          clint_icb_rsp_valid,\n  output                         clint_icb_rsp_ready,\n  input                          clint_icb_rsp_err  ,\n  input                          clint_icb_rsp_excl_ok,\n  input  [`E203_XLEN-1:0]        clint_icb_rsp_rdata,\n\n      //\n  input [`E203_ADDR_SIZE-1:0]    plic_region_indic,\n  input                          plic_icb_enable,\n  //    * Bus cmd channel\n  output                         plic_icb_cmd_valid,\n  input                          plic_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   plic_icb_cmd_addr, \n  output                         plic_icb_cmd_read, \n  output [`E203_XLEN-1:0]        plic_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      plic_icb_cmd_wmask,\n  output [1:0]                   plic_icb_cmd_burst,\n  output [1:0]                   plic_icb_cmd_beat,\n  output                         plic_icb_cmd_lock,\n  output                         plic_icb_cmd_excl,\n  output [1:0]                   plic_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          plic_icb_rsp_valid,\n  output                         plic_icb_rsp_ready,\n  input                          plic_icb_rsp_err  ,\n  input                          plic_icb_rsp_excl_ok,\n  input  [`E203_XLEN-1:0]        plic_icb_rsp_rdata,\n\n\n  `ifdef E203_HAS_FIO //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface to Fast I/O\n  input [`E203_ADDR_SIZE-1:0]    fio_region_indic,\n  input                          fio_icb_enable,\n  //\n  //    * Bus cmd channel\n  output                         fio_icb_cmd_valid,\n  input                          fio_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   fio_icb_cmd_addr, \n  output                         fio_icb_cmd_read, \n  output [`E203_XLEN-1:0]        fio_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      fio_icb_cmd_wmask,\n  output [1:0]                   fio_icb_cmd_burst,\n  output [1:0]                   fio_icb_cmd_beat,\n  output                         fio_icb_cmd_lock,\n  output                         fio_icb_cmd_excl,\n  output [1:0]                   fio_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          fio_icb_rsp_valid,\n  output                         fio_icb_rsp_ready,\n  input                          fio_icb_rsp_err  ,\n  input                          fio_icb_rsp_excl_ok,\n  input  [`E203_XLEN-1:0]        fio_icb_rsp_rdata,\n  `endif//}\n\n  `ifdef E203_HAS_MEM_ITF //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface from Ifetch \n  //\n  input                          mem_icb_enable,\n  //    * Bus cmd channel\n  output                         mem_icb_cmd_valid,\n  input                          mem_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   mem_icb_cmd_addr, \n  output                         mem_icb_cmd_read, \n  output [`E203_XLEN-1:0]        mem_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      mem_icb_cmd_wmask,\n  output [1:0]                   mem_icb_cmd_burst,\n  output [1:0]                   mem_icb_cmd_beat,\n  output                         mem_icb_cmd_lock,\n  output                         mem_icb_cmd_excl,\n  output [1:0]                   mem_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          mem_icb_rsp_valid,\n  output                         mem_icb_rsp_ready,\n  input                          mem_icb_rsp_err  ,\n  input                          mem_icb_rsp_excl_ok,\n  input  [`E203_XLEN-1:0]        mem_icb_rsp_rdata,\n  `endif//}\n\n  input  clk,\n  input  rst_n\n  );\n\n\n  `ifdef E203_HAS_MEM_ITF //{\n      localparam BIU_ARBT_I_NUM = 2;\n      localparam BIU_ARBT_I_PTR_W = 1;\n  `else//}{\n      localparam BIU_ARBT_I_NUM = 1;\n      localparam BIU_ARBT_I_PTR_W = 1;\n  `endif//}\n\n  \n  // The SPLT_NUM is the sum of following components\n  //   * ppi, clint, plic, SystemITF, Fast-IO, IFU-err \n      localparam BIU_SPLT_I_NUM_0 = 4;\n\n  `ifdef E203_HAS_MEM_ITF //{\n      localparam BIU_SPLT_I_NUM_1 = (BIU_SPLT_I_NUM_0 + 1);\n  `else//}{\n      localparam BIU_SPLT_I_NUM_1 = BIU_SPLT_I_NUM_0;\n  `endif//}\n\n  `ifdef E203_HAS_FIO //{\n      localparam BIU_SPLT_I_NUM_2 = (BIU_SPLT_I_NUM_1 + 1);\n  `else//}{\n      localparam BIU_SPLT_I_NUM_2 = BIU_SPLT_I_NUM_1;\n  `endif//}\n\n      localparam BIU_SPLT_I_NUM   = BIU_SPLT_I_NUM_2;\n\n  wire                         ifuerr_icb_cmd_valid;\n  wire                         ifuerr_icb_cmd_ready;\n  wire [`E203_ADDR_SIZE-1:0]   ifuerr_icb_cmd_addr; \n  wire                         ifuerr_icb_cmd_read; \n  wire [2-1:0]                 ifuerr_icb_cmd_burst;\n  wire [2-1:0]                 ifuerr_icb_cmd_beat;\n  wire [`E203_XLEN-1:0]        ifuerr_icb_cmd_wdata;\n  wire [`E203_XLEN/8-1:0]      ifuerr_icb_cmd_wmask;\n  wire                         ifuerr_icb_cmd_lock;\n  wire                         ifuerr_icb_cmd_excl;\n  wire [1:0]                   ifuerr_icb_cmd_size;\n  \n  wire                         ifuerr_icb_rsp_valid;\n  wire                         ifuerr_icb_rsp_ready;\n  wire                         ifuerr_icb_rsp_err  ;\n  wire                         ifuerr_icb_rsp_excl_ok;\n  wire [`E203_XLEN-1:0]        ifuerr_icb_rsp_rdata;\n\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [`E203_ADDR_SIZE-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [`E203_XLEN-1:0] arbt_icb_cmd_wdata;\n  wire [`E203_XLEN/8-1:0] arbt_icb_cmd_wmask;\n  wire [1:0] arbt_icb_cmd_burst;\n  wire [1:0] arbt_icb_cmd_beat;\n  wire arbt_icb_cmd_lock;\n  wire arbt_icb_cmd_excl;\n  wire [1:0] arbt_icb_cmd_size;\n  wire arbt_icb_cmd_usr;\n\n\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire arbt_icb_rsp_excl_ok;\n  wire [`E203_XLEN-1:0] arbt_icb_rsp_rdata;\n\n  wire [BIU_ARBT_I_NUM*1-1:0] arbt_bus_icb_cmd_valid;\n  wire [BIU_ARBT_I_NUM*1-1:0] arbt_bus_icb_cmd_ready;\n  wire [BIU_ARBT_I_NUM*`E203_ADDR_SIZE-1:0] arbt_bus_icb_cmd_addr;\n  wire [BIU_ARBT_I_NUM*1-1:0] arbt_bus_icb_cmd_read;\n  wire [BIU_ARBT_I_NUM*`E203_XLEN-1:0] arbt_bus_icb_cmd_wdata;\n  wire [BIU_ARBT_I_NUM*`E203_XLEN/8-1:0] arbt_bus_icb_cmd_wmask;\n  wire [BIU_ARBT_I_NUM*2-1:0] arbt_bus_icb_cmd_burst;\n  wire [BIU_ARBT_I_NUM*2-1:0] arbt_bus_icb_cmd_beat;\n  wire [BIU_ARBT_I_NUM*1-1:0] arbt_bus_icb_cmd_lock;\n  wire [BIU_ARBT_I_NUM*1-1:0] arbt_bus_icb_cmd_excl;\n  wire [BIU_ARBT_I_NUM*2-1:0] arbt_bus_icb_cmd_size;\n  wire [BIU_ARBT_I_NUM*1-1:0] arbt_bus_icb_cmd_usr;\n\n  wire [BIU_ARBT_I_NUM*1-1:0] arbt_bus_icb_rsp_valid;\n  wire [BIU_ARBT_I_NUM*1-1:0] arbt_bus_icb_rsp_ready;\n  wire [BIU_ARBT_I_NUM*1-1:0] arbt_bus_icb_rsp_err;\n  wire [BIU_ARBT_I_NUM*1-1:0] arbt_bus_icb_rsp_excl_ok;\n  wire [BIU_ARBT_I_NUM*`E203_XLEN-1:0] arbt_bus_icb_rsp_rdata;\n\n  //CMD Channel\n  assign arbt_bus_icb_cmd_valid =\n      // The  LSU take higher priority\n                           {\n                           `ifdef E203_HAS_MEM_ITF //{\n                             ifu2biu_icb_cmd_valid,\n                           `endif//}\n                             lsu2biu_icb_cmd_valid\n                           } ;\n\n  assign arbt_bus_icb_cmd_addr =\n                           {\n                           `ifdef E203_HAS_MEM_ITF //{\n                             ifu2biu_icb_cmd_addr,\n                           `endif//}\n                             lsu2biu_icb_cmd_addr\n                           } ;\n\n  assign arbt_bus_icb_cmd_read =\n                           {\n                           `ifdef E203_HAS_MEM_ITF //{\n                             ifu2biu_icb_cmd_read,\n                           `endif//}\n                             lsu2biu_icb_cmd_read\n                           } ;\n\n  assign arbt_bus_icb_cmd_wdata =\n                           {\n                           `ifdef E203_HAS_MEM_ITF //{\n                             ifu2biu_icb_cmd_wdata,\n                           `endif//}\n                             lsu2biu_icb_cmd_wdata\n                           } ;\n\n  assign arbt_bus_icb_cmd_wmask =\n                           {\n                           `ifdef E203_HAS_MEM_ITF //{\n                             ifu2biu_icb_cmd_wmask,\n                           `endif//}\n                             lsu2biu_icb_cmd_wmask\n                           } ;\n                         \n  assign arbt_bus_icb_cmd_burst =\n                           {\n                           `ifdef E203_HAS_MEM_ITF //{\n                             ifu2biu_icb_cmd_burst,\n                           `endif//}\n                             lsu2biu_icb_cmd_burst\n                           } ;\n                         \n  assign arbt_bus_icb_cmd_beat =\n                           {\n                           `ifdef E203_HAS_MEM_ITF //{\n                             ifu2biu_icb_cmd_beat,\n                           `endif//}\n                             lsu2biu_icb_cmd_beat\n                           } ;\n                         \n  assign arbt_bus_icb_cmd_lock =\n                           {\n                           `ifdef E203_HAS_MEM_ITF //{\n                             ifu2biu_icb_cmd_lock,\n                           `endif//}\n                             lsu2biu_icb_cmd_lock\n                           } ;\n\n  assign arbt_bus_icb_cmd_excl =\n                           {\n                           `ifdef E203_HAS_MEM_ITF //{\n                             ifu2biu_icb_cmd_excl,\n                           `endif//}\n                             lsu2biu_icb_cmd_excl\n                           } ;\n                           \n  assign arbt_bus_icb_cmd_size =\n                           {\n                           `ifdef E203_HAS_MEM_ITF //{\n                             ifu2biu_icb_cmd_size,\n                           `endif//}\n                             lsu2biu_icb_cmd_size\n                           } ;\n\n wire ifu2biu_icb_cmd_ifu = 1'b1;\n wire lsu2biu_icb_cmd_ifu = 1'b0;\n assign arbt_bus_icb_cmd_usr =\n                           {\n                           `ifdef E203_HAS_MEM_ITF //{\n                             ifu2biu_icb_cmd_ifu,\n                           `endif//}\n                             lsu2biu_icb_cmd_ifu\n                           } ;\n\n  assign                   {\n                           `ifdef E203_HAS_MEM_ITF //{\n                             ifu2biu_icb_cmd_ready,\n                           `endif//}\n                             lsu2biu_icb_cmd_ready\n                           } = arbt_bus_icb_cmd_ready;\n\n  //RSP Channel\n  assign                   {\n                           `ifdef E203_HAS_MEM_ITF //{\n                             ifu2biu_icb_rsp_valid,\n                           `endif//}\n                             lsu2biu_icb_rsp_valid\n                           } = arbt_bus_icb_rsp_valid;\n\n  assign                   {\n                           `ifdef E203_HAS_MEM_ITF //{\n                             ifu2biu_icb_rsp_err,\n                           `endif//}\n                             lsu2biu_icb_rsp_err\n                           } = arbt_bus_icb_rsp_err;\n\n  assign                   {\n                           `ifdef E203_HAS_MEM_ITF //{\n                             ifu2biu_icb_rsp_excl_ok,\n                           `endif//}\n                             lsu2biu_icb_rsp_excl_ok\n                           } = arbt_bus_icb_rsp_excl_ok;\n                           \n  assign                   {\n                           `ifdef E203_HAS_MEM_ITF //{\n                             ifu2biu_icb_rsp_rdata,\n                           `endif//}\n                             lsu2biu_icb_rsp_rdata\n                           } = arbt_bus_icb_rsp_rdata;\n\n  assign arbt_bus_icb_rsp_ready = {\n                           `ifdef E203_HAS_MEM_ITF //{\n                             ifu2biu_icb_rsp_ready,\n                           `endif//}\n                             lsu2biu_icb_rsp_ready\n                           };\n\n  sirv_gnrl_icb_arbt # (\n  .ARBT_SCHEME (0),// Priority based\n  .ALLOW_0CYCL_RSP (0),// Dont allow the 0 cycle response because in BIU we always have CMD_DP larger than 0\n                       //   when the response come back from the external bus, it is at least 1 cycle later\n  .FIFO_OUTS_NUM   (`E203_BIU_OUTS_NUM),\n  .FIFO_CUT_READY  (`E203_BIU_CMD_CUT_READY),\n  .ARBT_NUM   (BIU_ARBT_I_NUM),\n  .ARBT_PTR_W (BIU_ARBT_I_PTR_W),\n  .USR_W      (1),\n  .AW         (`E203_ADDR_SIZE),\n  .DW         (`E203_XLEN) \n  ) u_biu_icb_arbt(\n  .o_icb_cmd_valid        (arbt_icb_cmd_valid )     ,\n  .o_icb_cmd_ready        (arbt_icb_cmd_ready )     ,\n  .o_icb_cmd_read         (arbt_icb_cmd_read )      ,\n  .o_icb_cmd_addr         (arbt_icb_cmd_addr )      ,\n  .o_icb_cmd_wdata        (arbt_icb_cmd_wdata )     ,\n  .o_icb_cmd_wmask        (arbt_icb_cmd_wmask)      ,\n  .o_icb_cmd_burst        (arbt_icb_cmd_burst)     ,\n  .o_icb_cmd_beat         (arbt_icb_cmd_beat )     ,\n  .o_icb_cmd_excl         (arbt_icb_cmd_excl )     ,\n  .o_icb_cmd_lock         (arbt_icb_cmd_lock )     ,\n  .o_icb_cmd_size         (arbt_icb_cmd_size )     ,\n  .o_icb_cmd_usr          (arbt_icb_cmd_usr  )     ,\n                                \n  .o_icb_rsp_valid        (arbt_icb_rsp_valid )     ,\n  .o_icb_rsp_ready        (arbt_icb_rsp_ready )     ,\n  .o_icb_rsp_err          (arbt_icb_rsp_err)        ,\n  .o_icb_rsp_excl_ok      (arbt_icb_rsp_excl_ok)    ,\n  .o_icb_rsp_rdata        (arbt_icb_rsp_rdata )     ,\n  .o_icb_rsp_usr          (1'b0   )     ,\n                               \n  .i_bus_icb_cmd_ready    (arbt_bus_icb_cmd_ready ) ,\n  .i_bus_icb_cmd_valid    (arbt_bus_icb_cmd_valid ) ,\n  .i_bus_icb_cmd_read     (arbt_bus_icb_cmd_read )  ,\n  .i_bus_icb_cmd_addr     (arbt_bus_icb_cmd_addr )  ,\n  .i_bus_icb_cmd_wdata    (arbt_bus_icb_cmd_wdata ) ,\n  .i_bus_icb_cmd_wmask    (arbt_bus_icb_cmd_wmask)  ,\n  .i_bus_icb_cmd_burst    (arbt_bus_icb_cmd_burst),\n  .i_bus_icb_cmd_beat     (arbt_bus_icb_cmd_beat ),\n  .i_bus_icb_cmd_excl     (arbt_bus_icb_cmd_excl ),\n  .i_bus_icb_cmd_lock     (arbt_bus_icb_cmd_lock ),\n  .i_bus_icb_cmd_size     (arbt_bus_icb_cmd_size ),\n  .i_bus_icb_cmd_usr      (arbt_bus_icb_cmd_usr ),\n                                \n  .i_bus_icb_rsp_valid    ("}
{"text": "arbt_bus_icb_rsp_valid ) ,\n  .i_bus_icb_rsp_ready    (arbt_bus_icb_rsp_ready ) ,\n  .i_bus_icb_rsp_err      (arbt_bus_icb_rsp_err)    ,\n  .i_bus_icb_rsp_excl_ok  (arbt_bus_icb_rsp_excl_ok),\n  .i_bus_icb_rsp_rdata    (arbt_bus_icb_rsp_rdata ) ,\n  .i_bus_icb_rsp_usr      () ,\n                             \n  .clk                    (clk  )                     ,\n  .rst_n                  (rst_n)\n  );\n\n  //// To breakup the dead-lock cases, when incoming load/store request to the BIU but not granted \n  ////  This kind of potential deadlock case only happened at the low end core, where the ifetch response\n  ////  provided to IFU, but IFU cannot accept it because it is waiting the IR stage to be cleared, and IR\n  ////  stage is waiting the LSU to be cleared, and LSU is waiting this BIU to be cleared.\n  //// At any mid of high end core (or with multiple oustandings), we definitely will update IFU\n  ////  to make sure it always can accept any oustanding transactions traded with area cost.\n  //// So back to this very low end core, to save areas, we prefetch without knowing if IR can accept\n  ////  the response or not, and also in very low end core it is just 1 oustanding (multiple oustanding \n  ////  belong to mid or high end core), so to cut off this deadlocks, we just let the BIU to trigger\n  ////  and replay indication if LSU cannot get granted, if IFU just overkilly forced to be replayed, it\n  ////  just lost performance, but we dont care, because in low end core, ifetch to system mem is not\n  ////  guranteed by performance. If IFU really suppose to be replayed, then good luck to break this deadlock.\n  //wire ifu_replay_r;\n  //// The IFU replay will be set when:\n  ////    * Accessed by non-IFU access\n  ////    * Or non-IFU access is to access ITCM, but not granted\n  //wire ifu_replay_set = (arbt_icb_cmd_valid & arbt_icb_cmd_ready & lsu2biu_icb_cmd_valid)\n  //               | (lsu2biu_icb_cmd_valid & (~lsu2biu_icb_cmd_ready));\n  //// The IFU replay will be cleared after accessed by a IFU access\n  //wire ifu_replay_clr = (arbt_icb_cmd_valid & arbt_icb_cmd_ready & ifu2biu_icb_cmd_valid);\n  //wire ifu_replay_ena = ifu_replay_set | ifu_replay_clr;\n  //wire ifu_replay_nxt = ifu_replay_set | (~ifu_replay_clr);\n  //sirv_gnrl_dfflr #(1)ifu_replay_dffl(ifu_replay_ena, ifu_replay_nxt, ifu_replay_r, clk, rst_n);\n  //assign ifu2biu_replay = ifu_replay_r;\n\n  wire buf_icb_cmd_valid;\n  wire buf_icb_cmd_ready;\n  wire [`E203_ADDR_SIZE-1:0] buf_icb_cmd_addr;\n  wire buf_icb_cmd_read;\n  wire [`E203_XLEN-1:0] buf_icb_cmd_wdata;\n  wire [`E203_XLEN/8-1:0] buf_icb_cmd_wmask;\n  wire [1:0] buf_icb_cmd_burst;\n  wire [1:0] buf_icb_cmd_beat;\n  wire buf_icb_cmd_lock;\n  wire buf_icb_cmd_excl;\n  wire [1:0] buf_icb_cmd_size;\n  wire buf_icb_cmd_usr;\n\n  wire buf_icb_cmd_ifu = buf_icb_cmd_usr;\n\n  wire buf_icb_rsp_valid;\n  wire buf_icb_rsp_ready;\n  wire buf_icb_rsp_err;\n  wire buf_icb_rsp_excl_ok;\n  wire [`E203_XLEN-1:0] buf_icb_rsp_rdata;\n\n  wire icb_buffer_active;\n\n  sirv_gnrl_icb_buffer # (\n    .OUTS_CNT_W   (`E203_BIU_OUTS_CNT_W),\n    .AW    (`E203_ADDR_SIZE),\n    .DW    (`E203_XLEN), \n    .CMD_DP(`E203_BIU_CMD_DP),\n    .RSP_DP(`E203_BIU_RSP_DP),\n    .CMD_CUT_READY (`E203_BIU_CMD_CUT_READY),\n    .RSP_CUT_READY (`E203_BIU_RSP_CUT_READY),\n    .USR_W (1)\n  )u_sirv_gnrl_icb_buffer(\n    .icb_buffer_active      (icb_buffer_active),\n    .i_icb_cmd_valid        (arbt_icb_cmd_valid),\n    .i_icb_cmd_ready        (arbt_icb_cmd_ready),\n    .i_icb_cmd_read         (arbt_icb_cmd_read ),\n    .i_icb_cmd_addr         (arbt_icb_cmd_addr ),\n    .i_icb_cmd_wdata        (arbt_icb_cmd_wdata),\n    .i_icb_cmd_wmask        (arbt_icb_cmd_wmask),\n    .i_icb_cmd_lock         (arbt_icb_cmd_lock ),\n    .i_icb_cmd_excl         (arbt_icb_cmd_excl ),\n    .i_icb_cmd_size         (arbt_icb_cmd_size ),\n    .i_icb_cmd_burst        (arbt_icb_cmd_burst),\n    .i_icb_cmd_beat         (arbt_icb_cmd_beat ),\n    .i_icb_cmd_usr          (arbt_icb_cmd_usr  ),\n                     \n    .i_icb_rsp_valid        (arbt_icb_rsp_valid),\n    .i_icb_rsp_ready        (arbt_icb_rsp_ready),\n    .i_icb_rsp_err          (arbt_icb_rsp_err  ),\n    .i_icb_rsp_excl_ok      (arbt_icb_rsp_excl_ok),\n    .i_icb_rsp_rdata        (arbt_icb_rsp_rdata),\n    .i_icb_rsp_usr          (),\n    \n    .o_icb_cmd_valid        (buf_icb_cmd_valid),\n    .o_icb_cmd_ready        (buf_icb_cmd_ready),\n    .o_icb_cmd_read         (buf_icb_cmd_read ),\n    .o_icb_cmd_addr         (buf_icb_cmd_addr ),\n    .o_icb_cmd_wdata        (buf_icb_cmd_wdata),\n    .o_icb_cmd_wmask        (buf_icb_cmd_wmask),\n    .o_icb_cmd_lock         (buf_icb_cmd_lock ),\n    .o_icb_cmd_excl         (buf_icb_cmd_excl ),\n    .o_icb_cmd_size         (buf_icb_cmd_size ),\n    .o_icb_cmd_burst        (buf_icb_cmd_burst),\n    .o_icb_cmd_beat         (buf_icb_cmd_beat ),\n    .o_icb_cmd_usr          (buf_icb_cmd_usr),\n                         \n    .o_icb_rsp_valid        (buf_icb_rsp_valid),\n    .o_icb_rsp_ready        (buf_icb_rsp_ready),\n    .o_icb_rsp_err          (buf_icb_rsp_err  ),\n    .o_icb_rsp_excl_ok      (buf_icb_rsp_excl_ok),\n    .o_icb_rsp_rdata        (buf_icb_rsp_rdata),\n    .o_icb_rsp_usr          (1'b0  ),\n\n    .clk                    (clk  ),\n    .rst_n                  (rst_n)\n  );\n\n  wire [BIU_SPLT_I_NUM*1-1:0] splt_bus_icb_cmd_valid;\n  wire [BIU_SPLT_I_NUM*1-1:0] splt_bus_icb_cmd_ready;\n  wire [BIU_SPLT_I_NUM*`E203_ADDR_SIZE-1:0] splt_bus_icb_cmd_addr;\n  wire [BIU_SPLT_I_NUM*1-1:0] splt_bus_icb_cmd_read;\n  wire [BIU_SPLT_I_NUM*`E203_XLEN-1:0] splt_bus_icb_cmd_wdata;\n  wire [BIU_SPLT_I_NUM*`E203_XLEN/8-1:0] splt_bus_icb_cmd_wmask;\n  wire [BIU_SPLT_I_NUM*2-1:0] splt_bus_icb_cmd_burst;\n  wire [BIU_SPLT_I_NUM*2-1:0] splt_bus_icb_cmd_beat;\n  wire [BIU_SPLT_I_NUM*1-1:0] splt_bus_icb_cmd_lock;\n  wire [BIU_SPLT_I_NUM*1-1:0] splt_bus_icb_cmd_excl;\n  wire [BIU_SPLT_I_NUM*2-1:0] splt_bus_icb_cmd_size;\n\n  wire [BIU_SPLT_I_NUM*1-1:0] splt_bus_icb_rsp_valid;\n  wire [BIU_SPLT_I_NUM*1-1:0] splt_bus_icb_rsp_ready;\n  wire [BIU_SPLT_I_NUM*1-1:0] splt_bus_icb_rsp_err;\n  wire [BIU_SPLT_I_NUM*1-1:0] splt_bus_icb_rsp_excl_ok;\n  wire [BIU_SPLT_I_NUM*`E203_XLEN-1:0] splt_bus_icb_rsp_rdata;\n\n  //CMD Channel\n  assign {\n                             ifuerr_icb_cmd_valid\n                           , ppi_icb_cmd_valid\n                           , clint_icb_cmd_valid\n                           , plic_icb_cmd_valid\n                           `ifdef E203_HAS_FIO //{\n                           , fio_icb_cmd_valid\n                           `endif//}\n                           `ifdef E203_HAS_MEM_ITF //{\n                           , mem_icb_cmd_valid\n                           `endif//}\n                           } = splt_bus_icb_cmd_valid;\n\n  assign {\n                             ifuerr_icb_cmd_addr\n                           , ppi_icb_cmd_addr\n                           , clint_icb_cmd_addr\n                           , plic_icb_cmd_addr\n                           `ifdef E203_HAS_FIO //{\n                           , fio_icb_cmd_addr\n                           `endif//}\n                           `ifdef E203_HAS_MEM_ITF //{\n                           , mem_icb_cmd_addr\n                           `endif//}\n                           } = splt_bus_icb_cmd_addr;\n\n  assign {\n                             ifuerr_icb_cmd_read\n                           , ppi_icb_cmd_read\n                           , clint_icb_cmd_read\n                           , plic_icb_cmd_read\n                           `ifdef E203_HAS_FIO //{\n                           , fio_icb_cmd_read\n                           `endif//}\n                           `ifdef E203_HAS_MEM_ITF //{\n                           , mem_icb_cmd_read\n                           `endif//}\n                           } = splt_bus_icb_cmd_read;\n\n  assign {\n                             ifuerr_icb_cmd_wdata\n                           , ppi_icb_cmd_wdata\n                           , clint_icb_cmd_wdata\n                           , plic_icb_cmd_wdata\n                           `ifdef E203_HAS_FIO //{\n                           , fio_icb_cmd_wdata\n                           `endif//}\n                           `ifdef E203_HAS_MEM_ITF //{\n                           , mem_icb_cmd_wdata\n                           `endif//}\n                           } = splt_bus_icb_cmd_wdata;\n\n  assign {\n                             ifuerr_icb_cmd_wmask\n                           , ppi_icb_cmd_wmask\n                           , clint_icb_cmd_wmask\n                           , plic_icb_cmd_wmask\n                           `ifdef E203_HAS_FIO //{\n                           , fio_icb_cmd_wmask\n                           `endif//}\n                           `ifdef E203_HAS_MEM_ITF //{\n                           , mem_icb_cmd_wmask\n                           `endif//}\n                           } = splt_bus_icb_cmd_wmask;\n                         \n  assign {\n                             ifuerr_icb_cmd_burst\n                           , ppi_icb_cmd_burst\n                           , clint_icb_cmd_burst\n                           , plic_icb_cmd_burst\n                           `ifdef E203_HAS_FIO //{\n                           , fio_icb_cmd_burst\n                           `endif//}\n                           `ifdef E203_HAS_MEM_ITF //{\n                           , mem_icb_cmd_burst\n                           `endif//}\n                           } = splt_bus_icb_cmd_burst;\n                         \n  assign {\n                             ifuerr_icb_cmd_beat\n                           , ppi_icb_cmd_beat\n                           , clint_icb_cmd_beat\n                           , plic_icb_cmd_beat\n                           `ifdef E203_HAS_FIO //{\n                           , fio_icb_cmd_beat\n                           `endif//}\n                           `ifdef E203_HAS_MEM_ITF //{\n                           , mem_icb_cmd_beat\n                           `endif//}\n                           } = splt_bus_icb_cmd_beat;\n                         \n  assign {\n                             ifuerr_icb_cmd_lock\n                           , ppi_icb_cmd_lock\n                           , clint_icb_cmd_lock\n                           , plic_icb_cmd_lock\n                           `ifdef E203_HAS_FIO //{\n                           , fio_icb_cmd_lock\n                           `endif//}\n                           `ifdef E203_HAS_MEM_ITF //{\n                           , mem_icb_cmd_lock\n                           `endif//}\n                           } = splt_bus_icb_cmd_lock;\n\n  assign {\n                             ifuerr_icb_cmd_excl\n                           , ppi_icb_cmd_excl\n                           , clint_icb_cmd_excl\n                           , plic_icb_cmd_excl\n                           `ifdef E203_HAS_FIO //{\n                           , fio_icb_cmd_excl\n                           `endif//}\n                           `ifdef E203_HAS_MEM_ITF //{\n                           , mem_icb_cmd_excl\n                           `endif//}\n                           } = splt_bus_icb_cmd_excl;\n                           \n  assign {\n                             ifuerr_icb_cmd_size\n                           , ppi_icb_cmd_size\n                           , clint_icb_cmd_size\n                           , plic_icb_cmd_size\n                           `ifdef E203_HAS_FIO //{\n                           , fio_icb_cmd_size\n                           `endif//}\n                           `ifdef E203_HAS_MEM_ITF //{\n                           , mem_icb_cmd_size\n                           `endif//}\n                           } = splt_bus_icb_cmd_size;\n\n  assign splt_bus_icb_cmd_ready = {\n                             ifuerr_icb_cmd_ready\n                           , ppi_icb_cmd_ready\n                           , clint_icb_cmd_ready\n                           , plic_icb_cmd_ready\n                           `ifdef E203_HAS_FIO //{\n                           , fio_icb_cmd_ready\n                           `endif//}\n                           `ifdef E203_HAS_MEM_ITF //{\n                           , mem_icb_cmd_ready\n                           `endif//}\n                           };\n\n  //RSP Channel\n  assign splt_bus_icb_rsp_valid = {\n                             ifuerr_icb_rsp_valid\n                           , ppi_icb_rsp_valid\n                           , clint_icb_rsp_valid\n                           , plic_icb_rsp_valid\n                           `ifdef E203_HAS_FIO //{\n                           , fio_icb_rsp_valid\n                           `endif//}\n                           `ifdef E203_HAS_MEM_ITF //{\n                           , mem_icb_rsp_valid\n                           `endif//}\n                           };\n\n  assign splt_bus_icb_rsp_err = {\n                             ifuerr_icb_rsp_err\n                           , ppi_icb_rsp_err\n                           , clint_icb_rsp_err\n                           , plic_icb_rsp_err\n                           `ifdef E203_HAS_FIO //{\n                           , fio_icb_rsp_err\n                           `endif//}\n                           `ifdef E203_HAS_MEM_ITF //{\n                           , mem_icb_rsp_err\n                           `endif//}\n                           };\n\n  assign splt_bus_icb_rsp_excl_ok = {\n                             ifuerr_icb_rsp_excl_ok\n                           , ppi_icb_rsp_excl_ok\n                           , clint_icb_rsp_excl_ok\n                           , plic_icb_rsp_excl_ok\n                           `ifdef E203_HAS_FIO //{\n                           , fio_icb_rsp_excl_ok\n                           `endif//}\n                           `ifdef E203_HAS_MEM_ITF //{\n                           , mem_icb_rsp_excl_ok\n                           `endif//}\n                           };\n\n  assign splt_bus_icb_rsp_rdata = {\n                             ifuerr_icb_rsp_rdata\n                           , ppi_icb_rsp_rdata\n                           , clint_icb_rsp_rdata\n                           , plic_icb_rsp_rdata\n                           `ifdef E203_HAS_FIO //{\n                           , fio_icb_rsp_rdata\n                           `endif//}\n                           `ifdef E203_HAS_MEM_ITF //{\n                           , mem_icb_rsp_rdata\n                           `endif//}\n                           };\n\n  assign {\n                             ifuerr_icb_rsp_ready\n                           , ppi_icb_rsp_ready\n                           , clint_icb_rsp_ready\n                           , plic_icb_rsp_ready\n                           `ifdef E203_HAS_FIO //{\n                           , fio_icb_rsp_ready\n                           `endif//}\n                           `ifdef E203_HAS_MEM_ITF //{\n                           , mem_icb_rsp_ready\n                           `endif//}\n                           } = splt_bus_icb_rsp_ready;\n\n  wire buf_icb_cmd_ppi = ppi_icb_enable & (buf_icb_cmd_addr[`E203_PPI_BASE_REGION] ==  ppi_region_indic[`E203_PPI_BASE_REGION]);\n  wire buf_icb_sel_ppi = buf_icb_cmd_ppi & (~buf_icb_cmd_ifu);\n\n  wire buf_icb_cmd_clint = clint_icb_enable & (buf_icb_cmd_addr[`E203_CLINT_BASE_REGION] ==  clint_region_indic[`E203_CLINT_BASE_REGION]);\n  wire buf_icb_sel_clint = buf_icb_cmd_clint & (~buf_icb_cmd_ifu);\n\n  wire buf_icb_cmd_plic = plic_icb_enable & (buf_icb_cmd_addr[`E203_PLIC_BASE_REGION] ==  plic_region_indic[`E203_PLIC_BASE_REGION]);\n  wire buf_icb_sel_plic = buf_icb_cmd_plic & (~buf_icb_cmd_ifu);\n\n  `ifdef E203_HAS_FIO //{\n  wire buf_icb_cmd_fio = fio_icb_enable & (buf_icb_cmd_addr[`E203_FIO_BASE_REGION] ==  fio_region_indic[`E203_FIO_BASE_REGION]);\n  wire buf_icb_sel_fio = buf_icb_cmd_fio & (~buf_icb_cmd_ifu);\n  `endif//}\n\n  wire buf_icb_sel_ifuerr =(\n                            buf_icb_cmd_ppi \n                          | buf_icb_cmd_clint \n                          | buf_icb_cmd_plic\n                           `ifdef E203_HAS_FIO //{\n                          | buf_icb_cmd_fio\n                           `endif//}\n                           ) & buf_icb_cmd_ifu;\n\n  `ifdef E203_HAS_MEM_ITF //{\n  wire buf_icb_sel_mem = mem_icb_enable \n                             & (~buf_icb_sel_ifuerr)\n                             & (~buf_icb_sel_ppi)\n                             & (~buf_icb_sel_clint)\n                             & (~buf_icb_sel_plic)\n                          `ifdef E203_HAS_FIO //{\n                             & (~buf_icb_sel_fio)\n                          `endif//}\n                             ;\n  `endif//}\n\n  wire [BIU_SPLT_I_NUM-1:0] buf_icb_splt_indic = \n      {\n                             buf_icb_sel_ifuerr\n                           , buf_icb_sel_ppi\n                           , buf_icb_sel_clint\n                           , buf_icb_sel_plic\n                           `ifdef E203_HAS_FIO //{\n                           , buf_icb_sel_fio\n                           `endif//}\n                           `ifdef E203_HAS_MEM_ITF //{\n                           , buf_icb_sel_mem\n                           `endif//}\n      };\n\n  sirv_gnrl_icb_splt # (\n  .ALLOW_DIFF (0),// Dont allow different branches oustanding\n  .ALLOW_0CYCL_RSP (1),// Allow the 0 cycle response because in BIU the splt\n                       //  is after the buffer, and will directly talk to the external\n                       //  bus, where maybe the ROM is 0 cycle responsed.\n  .FIFO_OUTS_NUM   (`E203_BIU_OUTS_NUM),\n  .FIFO_CUT_READY  (`E203_BIU_CMD_CUT_READY),\n  .SPLT_NUM   (BIU_SPLT_I_NUM),\n  .SPLT_PTR_W (BIU_SPLT_I_NUM),\n  .SPLT_PTR_1HOT (1),\n  .USR_W      (1),\n  .AW         (`E203_ADDR_SIZE),\n  .DW         (`E203_XLEN) \n  ) u_biu_icb_splt(\n  .i_icb_splt_indic       (buf_icb_splt_indic),        \n\n  .i_icb_cmd_valid        (buf_icb_cmd_valid )     ,\n  .i_icb_cmd_ready        (buf_icb_cmd_ready )     ,\n  .i_icb_cmd_read         (buf_icb_cmd_read )      ,\n  .i_icb_cmd_addr         (buf_icb_cmd_addr )      ,\n  .i_icb_cmd_wdata        (buf_icb_cmd_wdata )     ,\n  .i_icb_cmd_wmask        (buf_icb_cmd_wmask)      ,\n  .i_icb_cmd_burst        (buf_icb_cmd_burst)     ,\n  .i_icb_cmd_beat         (buf_icb_cmd_beat )     ,\n  .i_icb_cmd_excl         (buf_icb_cmd_excl )     ,\n  .i_icb_cmd_lock         (buf_icb_cmd_lock )     ,\n  .i_icb_cmd_size         (buf_icb_cmd_size )     ,\n  .i_icb_cmd_usr          (1'b0   )     ,\n \n  .i_icb_rsp_valid        (buf_icb_rsp_valid )     ,\n  .i_icb_rsp_ready        (buf_icb_rsp_ready )     ,\n  .i_icb_rsp_err          (buf_icb_rsp_err)        ,\n  .i_icb_rsp_excl_ok      (buf_icb_rsp_excl_ok)    ,\n  .i_icb_rsp_rdata        (buf_icb_rsp_rdata )     ,\n  .i_icb_rsp_usr          ( )     ,\n                               \n  .o_bus_icb_cmd_ready    (splt_bus_icb_cmd_ready ) ,\n  .o_bus_icb_cmd_valid    (splt_bus_icb_cmd_valid ) ,\n  .o_bus_icb_cmd_read     (splt_bus_icb_cmd_read )  ,\n  .o_bus_icb_cmd_addr     (splt_bus_icb_cmd_addr )  ,\n  .o_bus_icb_cmd_wdata    (splt_bus_icb_cmd_wdata ) ,\n  .o_bus_icb_cmd_wmask    (splt_bus_icb_cmd_wmask)  ,\n  .o_bus_icb_cmd_burst    (splt_bus_icb_cmd_burst),\n  .o_bus_icb_cmd_beat     (splt_bus_icb_cmd_beat ),\n  .o_bus_icb_cmd_excl     (splt_bus_icb_cmd_excl ),\n  .o_bus_icb_cmd_lock     (splt_bus_icb_cmd_lock ),\n  .o_bus_icb_cmd_size     (splt_bus_icb_cmd_size ),\n  .o_bus_icb_cmd_usr      ()     ,\n  \n  .o_bus_icb_rsp_valid    (splt_bus_icb_rsp_valid ) ,\n  .o_bus_icb_rsp_ready    (splt_bus_icb_rsp_ready ) ,\n  .o_bus_icb_rsp_err      (splt_bus_icb_rsp_err)    ,\n  .o_bus_icb_rsp_excl_ok  (splt_bus_icb_rsp_excl_ok),\n  .o_bus_icb_rsp_rdata    (splt_bus_icb_rsp_rdata ) ,\n  .o_bus_icb_rsp_usr      ({BIU_SPLT_I_NUM{1'b0}}) ,\n                             \n  .clk                    (clk  )                     ,\n  .rst_n                  (rst_n)\n  );\n\n\n  assign biu_active = ifu2biu_icb_cmd_valid | lsu2biu_icb_cmd_valid | icb_buffer_active; \n\n  ///////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////\n  ///////////////////////////////////////////////////////////////\n  // Implement the IFU-accessed-Peripheral region error\n  assign  ifuerr_icb_cmd"}
{"text": "_ready = ifuerr_icb_rsp_ready;\n  \n     // 0 Cycle response\n  assign  ifuerr_icb_rsp_valid = ifuerr_icb_cmd_valid;\n  assign  ifuerr_icb_rsp_err   = 1'b1;\n  assign  ifuerr_icb_rsp_excl_ok = 1'b0;\n  assign  ifuerr_icb_rsp_rdata   = {`E203_XLEN{1'b0}};\n\n\nendmodule\n\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n// Designer   : Bob Hu\n//\n// Description:\n//  The clock gating cell\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_clkgate (\n  input   clk_in,\n  input   test_mode,\n  input   clock_en,\n  output  clk_out\n);\n\n`ifdef FPGA_SOURCE//{\n    // In the FPGA, the clock gating is just pass through\n    assign clk_out = clk_in;\n`endif//}\n\n`ifndef FPGA_SOURCE//{\n\nreg enb;\n\nalways@(*)\n  if (!clk_in)\n    enb = (clock_en | test_mode);\n\nassign clk_out = enb & clk_in;\n\n`endif//}\n\nendmodule \n\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The Clock Ctrl module to implement Clock control\n//\n// ====================================================================\n\n`include \"e203_defines.v\"\n\nmodule e203_clk_ctrl (\n  input  clk,        // clock\n  input  rst_n,      // async reset\n  input  test_mode,  // test mode \n\n  // The cgstop is coming from CSR (0xBFE mcgstop)'s filed 0\n  // // This register is our self-defined CSR register to disable the \n      // automaticall clock gating for CPU logics for debugging purpose\n  input  core_cgstop,\n\n  // The Top always on clk and rst\n  output clk_aon,\n\n\n\n  input  core_ifu_active,\n  input  core_exu_active,\n  input  core_lsu_active,\n  input  core_biu_active,\n  `ifdef E203_HAS_ITCM\n  input  itcm_active,\n  output itcm_ls,\n  `endif\n  `ifdef E203_HAS_DTCM\n  input  dtcm_active,\n  output dtcm_ls,\n  `endif\n    // The core's clk and rst\n  output clk_core_ifu,\n  output clk_core_exu,\n  output clk_core_lsu,\n  output clk_core_biu,\n\n    // The ITCM/DTCM clk and rst\n  `ifdef E203_HAS_ITCM\n  output clk_itcm,\n  `endif\n  `ifdef E203_HAS_DTCM\n  output clk_dtcm,\n  `endif\n\n  input  core_wfi\n);\n\n  // The CSR control bit CGSTOP will override the automatical clock gating here for special debug purpose\n\n      // The IFU is always actively fetching unless it is WFI to override it\n  wire ifu_clk_en = core_cgstop | (core_ifu_active & (~core_wfi));\n      // The EXU, LSU and BIU module's clock gating does not need to check\n      //  WFI because it may have request from external agent\n      //  and also, it actually will automactically become inactive regardess\n      //  currently is WFI or not, hence we dont need WFI here\n  wire exu_clk_en = core_cgstop | (core_exu_active);\n  wire lsu_clk_en = core_cgstop | (core_lsu_active);\n  wire biu_clk_en = core_cgstop | (core_biu_active);\n\n\n\n\n  e203_clkgate u_ifu_clkgate(\n    .clk_in   (clk        ),\n    .test_mode(test_mode  ),\n    .clock_en (ifu_clk_en),\n    .clk_out  (clk_core_ifu)\n  );\n\n  e203_clkgate u_exu_clkgate(\n    .clk_in   (clk        ),\n    .test_mode(test_mode  ),\n    .clock_en (exu_clk_en),\n    .clk_out  (clk_core_exu)\n  );\n\n  e203_clkgate u_lsu_clkgate(\n    .clk_in   (clk        ),\n    .test_mode(test_mode  ),\n    .clock_en (lsu_clk_en),\n    .clk_out  (clk_core_lsu)\n  );\n\n  e203_clkgate u_biu_clkgate(\n    .clk_in   (clk        ),\n    .test_mode(test_mode  ),\n    .clock_en (biu_clk_en),\n    .clk_out  (clk_core_biu)\n  );\n\n  `ifdef E203_HAS_ITCM\n      // The ITCM and DTCM Ctrl module's clock gating does not need to check\n      //  WFI because it may have request from external agent\n      //  and also, it actually will automactically become inactive regardess\n      //  currently is WFI or not, hence we dont need WFI here\n  wire itcm_active_r;\n  sirv_gnrl_dffr #(1)itcm_active_dffr(itcm_active, itcm_active_r, clk, rst_n);\n  wire itcm_clk_en = core_cgstop | itcm_active | itcm_active_r;\n  assign itcm_ls = ~itcm_clk_en;\n\n  e203_clkgate u_itcm_clkgate(\n    .clk_in   (clk        ),\n    .test_mode(test_mode  ),\n    .clock_en (itcm_clk_en),\n    .clk_out  (clk_itcm)\n  );\n  `endif\n\n  `ifdef E203_HAS_DTCM\n  wire dtcm_active_r;\n  sirv_gnrl_dffr #(1)dtcm_active_dffr(dtcm_active, dtcm_active_r, clk, rst_n);\n  wire dtcm_clk_en = core_cgstop | dtcm_active | dtcm_active_r;\n  assign dtcm_ls = ~dtcm_clk_en;\n\n  e203_clkgate u_dtcm_clkgate(\n    .clk_in   (clk        ),\n    .test_mode(test_mode  ),\n    .clock_en (dtcm_clk_en),\n    .clk_out  (clk_dtcm)\n  );\n  `endif\n\n\n  // The Top always on clk and rst\n  assign clk_aon = clk;\n\nendmodule\n\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The Core module to implement the core portion of the cpu\n//\n// ====================================================================\n\n`include \"e203_defines.v\"\n\nmodule e203_core(\n  output[`E203_PC_SIZE-1:0] inspect_pc,\n\n  `ifdef E203_HAS_CSR_EAI//{\n  output         eai_csr_valid,\n  input          eai_csr_ready,\n  output  [31:0] eai_csr_addr,\n  output         eai_csr_wr,\n  output  [31:0] eai_csr_wdata,\n  input   [31:0] eai_csr_rdata,\n  `endif//}\n  output core_wfi,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n\n  input  [`E203_PC_SIZE-1:0] pc_rtvec,\n\n  input  [`E203_HART_ID_W-1:0] core_mhartid,\n  input  dbg_irq_r,\n  input  [`E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input  [`E203_EVT_NUM-1:0] evt_r,\n  input  ext_irq_r,\n  input  sft_irq_r,\n  input  tmr_irq_r,\n\n  //////////////////////////////////////////////////////////////\n  // From/To debug ctrl module\n  output  wr_dcsr_ena    ,\n  output  wr_dpc_ena     ,\n  output  wr_dscratch_ena,\n\n\n\n  output  [32-1:0] wr_csr_nxt    ,\n\n  input  [32-1:0] dcsr_r    ,\n  input  [`E203_PC_SIZE-1:0] dpc_r     ,\n  input  [32-1:0] dscratch_r,\n\n  output  [`E203_PC_SIZE-1:0] cmt_dpc,\n  output  cmt_dpc_ena,\n  output  [3-1:0] cmt_dcause,\n  output  cmt_dcause_ena,\n\n  input  dbg_mode,\n  input  dbg_halt_r,\n  input  dbg_step_r,\n  input  dbg_ebreakm_r,\n  input  dbg_stopcycle,\n\n  `ifdef E203_HAS_ITCM //{\n  // The ITCM address region indication signal\n  input [`E203_ADDR_SIZE-1:0] itcm_region_indic,\n  input  ifu2itcm_holdup,\n  //input  ifu2itcm_replay,\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // Bus Interface to ITCM, internal protocol called ICB (Internal Chip Bus)\n  //    * Bus cmd channel\n  output ifu2itcm_icb_cmd_valid, // Handshake valid\n  input  ifu2itcm_icb_cmd_ready, // Handshake ready\n            // Note: The data on rdata or wdata channel must be naturally\n            //       aligned, this is in line with the AXI definition\n  output [`E203_ITCM_ADDR_WIDTH-1:0]   ifu2itcm_icb_cmd_addr, // Bus transaction start addr \n\n  //    * Bus RSP channel\n  input  ifu2itcm_icb_rsp_valid, // Response valid \n  output ifu2itcm_icb_rsp_ready, // Response ready\n  input  ifu2itcm_icb_rsp_err,   // Response error\n            // Note: the RSP rdata is inline with AXI definition\n  input  [`E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata, \n  `endif//}\n\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface to Private Peripheral Interface\n  input [`E203_ADDR_SIZE-1:0]    ppi_region_indic,\n  //\n  input                          ppi_icb_enable,\n  //    * Bus cmd channel\n  output                         ppi_icb_cmd_valid,\n  input                          ppi_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   ppi_icb_cmd_addr, \n  output                         ppi_icb_cmd_read, \n  output [`E203_XLEN-1:0]        ppi_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      ppi_icb_cmd_wmask,\n  output                         ppi_icb_cmd_lock,\n  output                         ppi_icb_cmd_excl,\n  output [1:0]                   ppi_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          ppi_icb_rsp_valid,\n  output                         ppi_icb_rsp_ready,\n  input                          ppi_icb_rsp_err  ,\n  input                          ppi_icb_rsp_excl_ok  ,\n  input  [`E203_XLEN-1:0]        ppi_icb_rsp_rdata,\n\n  \n  input [`E203_ADDR_SIZE-1:0]    clint_region_indic,\n  input                          clint_icb_enable,\n\n  output                         clint_icb_cmd_valid,\n  input                          clint_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   clint_icb_cmd_addr, \n  output                         clint_icb_cmd_read, \n  output [`E203_XLEN-1:0]        clint_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      clint_icb_cmd_wmask,\n  output                         clint_icb_cmd_lock,\n  output                         clint_icb_cmd_excl,\n  output [1:0]                   clint_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          clint_icb_rsp_valid,\n  output                         clint_icb_rsp_ready,\n  input                          clint_icb_rsp_err  ,\n  input                          clint_icb_rsp_excl_ok  ,\n  input  [`E203_XLEN-1:0]        clint_icb_rsp_rdata,\n\n  input [`E203_ADDR_SIZE-1:0]    plic_region_indic,\n  input                          plic_icb_enable,\n\n  output                         plic_icb_cmd_valid,\n  input                          plic_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   plic_icb_cmd_addr, \n  output                         plic_icb_cmd_read, \n  output [`E203_XLEN-1:0]        plic_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      plic_icb_cmd_wmask,\n  output                         plic_icb_cmd_lock,\n  output                         plic_icb_cmd_excl,\n  output [1:0]                   plic_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          plic_icb_rsp_valid,\n  output                         plic_icb_rsp_ready,\n  input                          plic_icb_rsp_err  ,\n  input                          plic_icb_rsp_excl_ok  ,\n  input  [`E203_XLEN-1:0]        plic_icb_rsp_rdata,\n\n\n  `ifdef E203_HAS_FIO //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface to Fast I/O\n  input [`E203_ADDR_SIZE-1:0]    fio_region_indic,\n  //\n  input                          fio_icb_enable,\n  //    * Bus cmd channel\n  output                         fio_icb_cmd_valid,\n  input                          fio_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   fio_icb_cmd_addr, \n  output                         fio_icb_cmd_read, \n  output [`E203_XLEN-1:0]        fio_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      fio_icb_cmd_wmask,\n  output                         fio_icb_cmd_lock,\n  output                         fio_icb_cmd_excl,\n  output [1:0]                   fio_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          fio_icb_rsp_valid,\n  output                         fio_icb_rsp_ready,\n  input                          fio_icb_rsp_err  ,\n  input                          fio_icb_rsp_excl_ok  ,\n  input  [`E203_XLEN-1:0]        fio_icb_rsp_rdata,\n  `endif//}\n\n  `ifdef E203_HAS_MEM_ITF //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface from Ifetch \n  //\n  input                          mem_icb_enable,\n  //    * Bus cmd channel\n  output                         mem_icb_cmd_valid,\n  input                          mem_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   mem_icb_cmd_addr, \n  output                         mem_icb_cmd_read, \n  output [`E203_XLEN-1:0]        mem_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      mem_icb_cmd_wmask,\n  output                         mem_icb_cmd_lock,\n  output                         mem_icb_cmd_excl,\n  output [1:0]                   mem_icb_cmd_size,\n  output [1:0]                   mem_icb_cmd_burst,\n  output [1:0]                   mem_icb_cmd_beat,\n  //\n  //    * Bus RSP channel\n  input                          mem_icb_rsp_valid,\n  output                         mem_icb_rsp_ready,\n  input                          mem_icb_rsp_err  ,\n  input                          mem_icb_rsp_excl_ok  ,\n  input  [`E203_XLEN-1:0]        mem_icb_rsp_rdata,\n  `endif//}\n\n  `ifdef E203_HAS_ITCM //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface to ITCM\n  //\n  //    * Bus cmd channel\n  output                         lsu2itcm_icb_cmd_valid,\n  input                          lsu2itcm_icb_cmd_ready,\n  output [`E203_ITCM_ADDR_WIDTH-1:0]   lsu2itcm_icb_cmd_addr, \n  output                         lsu2itcm_icb_cmd_read, \n  output [`E203_XLEN-1:0]        lsu2itcm_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      lsu2itcm_icb_cmd_wmask,\n  output                         lsu2itcm_icb_cmd_lock,\n  output                         lsu2itcm_icb_cmd_excl,\n  output [1:0]                   lsu2itcm_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          lsu2itcm_icb_rsp_valid,\n  output                         lsu2itcm_icb_rsp_ready,\n  input                          lsu2itcm_icb_rsp_err  ,\n  input                          lsu2itcm_icb_rsp_excl_ok  ,\n  input  [`E203_XLEN-1:0]        lsu2itcm_icb_rsp_rdata,\n  `endif//}\n\n    `ifdef E203_HAS_DTCM //{\n  input [`E203_ADDR_SIZE-1:0] dtcm_region_indic,\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface to DTCM\n  //\n  //    * Bus cmd channel\n  output                         lsu2dtcm_icb_cmd_valid,\n  input                          lsu2dtcm_icb_cmd_ready,\n  output [`E203_DTCM_ADDR_WIDTH-1:0]   lsu2dtcm_icb_cmd_addr, \n  output                         lsu2dtcm_icb_cmd_read, \n  output [`E203_XLEN-1:0]        lsu2dtcm_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      lsu2dtcm_icb_cmd_wmask,\n  output                         lsu2dtcm_icb_cmd_lock,\n  output                         lsu2dtcm_icb_cmd_excl,\n  output [1:0]                   lsu2dtcm_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          lsu2dtcm_icb_rsp_valid,\n  output                         lsu2dtcm_icb_rsp_ready,\n  input                          lsu2dtcm_icb_rsp_err  ,\n  input                          lsu2dtcm_icb_rsp_excl_ok,\n  input  [`E203_XLEN-1:0]        lsu2dtcm_icb_rsp_rdata,\n  `endif//}\n\n  output exu_active,\n  output ifu_active,\n  output lsu_active,\n  output biu_active,\n\n  input  clk_core_ifu,\n  input  clk_core_exu,\n  input  clk_core_lsu,\n  input  clk_core_biu,\n  input  clk_aon,\n\n  input test_mode,\n  input  rst_n\n  );\n\n    `ifdef E203_HAS_MEM_ITF //{\n  wire                         ifu2biu_icb_cmd_valid;\n  wire                         ifu2biu_icb_cmd_ready;\n  wire [`E203_ADDR_SIZE-1:0]   ifu2biu_icb_cmd_addr; \n  wire                         ifu2biu_icb_rsp_valid;\n  wire                         ifu2biu_icb_rsp_ready;\n  wire                         ifu2biu_icb_rsp_err  ;\n  wire                         ifu2biu_icb_rsp_excl_ok;\n  wire [`E203_XLEN-1:0]        ifu2biu_icb_rsp_rdata;\n   \n  `endif//}\n\n\n\n\n  wire ifu_o_valid;\n  wire ifu_o_ready;\n  wire [`E203_INSTR_SIZE-1:0] ifu_o_ir;\n  wire [`E203_PC_SIZE-1:0] ifu_o_pc;\n  wire ifu_o_pc_vld; \n  wire ifu_o_misalgn; \n  wire ifu_o_buserr; \n  wire [`E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx;\n  wire [`E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx;\n  wire ifu_o_prdt_taken;\n  wire ifu_o_muldiv_b2b;\n\n  wire wfi_halt_ifu_req;\n  wire wfi_halt_ifu_ack;\n  wire pipe_flush_ack;\n  wire pipe_flush_req;\n  wire [`E203_PC_SIZE-1:0] pipe_flush_add_op1;  \n  wire [`E203_PC_SIZE-1:0] pipe_flush_add_op2;  \n  `ifdef E203_TIMING_BOOST//}\n  wire [`E203_PC_SIZE-1:0] pipe_flush_pc;  \n  `endif//}\n\n  wire oitf_empty;\n  wire [`E203_XLEN-1:0] rf2ifu_x1;\n  wire [`E203_XLEN-1:0] rf2ifu_rs1;\n  wire dec2ifu_rden;\n  wire dec2ifu_rs1en;\n  wire [`E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx;\n  wire dec2ifu_mulhsu;\n  wire dec2ifu_div   ;\n  wire dec2ifu_rem   ;\n  wire dec2ifu_divu  ;\n  wire dec2ifu_remu  ;\n\n\n  wire itcm_nohold;\n\n  e203_ifu u_e203_ifu(\n    .inspect_pc   (inspect_pc),\n\n    .ifu_active      (ifu_active),\n    .pc_rtvec        (pc_rtvec),  \n\n    .itcm_nohold     (itcm_nohold),\n\n  `ifdef E203_HAS_ITCM //{\n    .ifu2itcm_holdup (ifu2itcm_holdup),\n    //.ifu2itcm_replay (ifu2itcm_replay),\n\n  // The ITCM address region indication signal\n    .itcm_region_indic (itcm_region_indic),\n\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr (ifu2itcm_icb_cmd_addr ),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err  (ifu2itcm_icb_rsp_err  ),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n  `endif//}\n\n  `ifdef E203_HAS_MEM_ITF //{\n    .ifu2biu_icb_cmd_valid  (ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready  (ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr   (ifu2biu_icb_cmd_addr ),\n    \n    .ifu2biu_icb_rsp_valid  (ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready  (ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err    (ifu2biu_icb_rsp_err  ),\n    .ifu2biu_icb_rsp_rdata  (ifu2biu_icb_rsp_rdata),\n\n  `endif//}\n\n\n    .ifu_o_valid            (ifu_o_valid         ),\n    .ifu_o_ready            (ifu_o_ready         ),\n    .ifu_o_ir               (ifu_o_ir            ),\n    .ifu_o_pc               (ifu_o_pc            ),\n    .ifu_o_pc_vld           (ifu_o_pc_vld        ),\n    .ifu_o_misalgn          (ifu_o_misalgn       ), \n    .ifu_o_buserr           (ifu_o_buserr        ), \n    .ifu_o_rs1idx           (ifu_o_rs1idx        ),\n    .ifu_o_rs2idx           (ifu_o_rs2idx        ),\n    .ifu_o_prdt_taken       (ifu_o_prdt_taken    ),\n    .ifu_o_muldiv_b2b       (ifu_o_muldiv_b2b    ),\n\n    .ifu_halt_req           (wfi_halt_ifu_req),\n    .ifu_halt_ack           (wfi_halt_ifu_ack),\n    .pipe_flush_ack         (pipe_flush_ack      ),\n    .pipe_flush_req         (pipe_flush_req      ),\n    .pipe_flush_add_op1     (pipe_flush_add_op1  ),  \n    .pipe_flush_add_op2     (pipe_flush_add_op2  ),  \n  `ifdef E203_TIMING_BOOST//}\n    .pipe_flush_pc          (pipe_flush_pc),  \n  `endif//}\n\n                                 \n    .oitf_empty             (oitf_empty   ),\n    .rf2ifu_x1              (rf2ifu_x1    ),\n    .rf2ifu_rs1             (rf2ifu_rs1   ),\n    .dec2ifu_rden           (dec2ifu_rden ),\n    .dec2ifu_rs1en          (dec2ifu_rs1en),\n    .dec2ifu_rdidx          (dec2ifu_rdidx),\n    .dec2ifu_mulhsu         (dec2ifu_mulhsu),\n    .dec2ifu_div            (dec2ifu_div   ),\n    .dec2ifu_rem            (dec2ifu_rem   ),\n    .dec2ifu_divu           (dec2ifu_divu  ),\n    .dec2ifu_remu           (dec2ifu_remu  ),\n\n    .clk                    (clk_core_ifu  ),\n    .rst_n                  (rst_n         ) \n  );\n\n  \n\n  wire                         lsu_o_valid; \n  wire                         lsu_o_ready; \n  wire [`E203_XLEN-1:0]        lsu_o_wbck_wdat;\n  wire [`E203_ITAG_WIDTH -1:0] lsu_o_wbck_itag;\n  wire                         lsu_o_wbck_err ; \n  wire                         lsu_o_cmt_buserr ; \n  wire                         lsu_o_cmt_ld;\n  wire                         lsu_o_cmt_st;\n  wire [`E203_ADDR_SIZE -1:0]  lsu_o_cmt_badaddr;\n\n  wire                         agu_icb_cmd_valid; \n  wire                         agu_icb_cmd_ready; \n  wire [`E203_ADDR_SIZE-1:0]   agu_icb_cmd_addr; \n  wire                         agu_icb_cmd_read;   \n  wire [`E203_XLEN-1:0]        agu_icb_cmd_wdata; \n  wire [`E203_XLEN/8-1:0]      agu_icb_cmd_wmask; \n  wire                         agu_icb_cmd_lock;\n  wire                         agu_icb_cmd_excl;\n  wire [1:0]                   agu_icb_cmd_size;\n  wire                         agu_icb_cmd_back2agu; \n  wire                         agu_icb_cmd_usign;\n  wire [`E203_ITAG_WIDTH -1:0] agu_icb_cmd_itag;\n  wire                         agu_icb_rsp_valid; \n  wire                         agu_icb_rsp_ready; \n  wire                         agu_icb_rsp_err  ; \n  wire                         agu_icb_rsp_excl_ok  ; \n  wire [`E203_XLEN-1:0]        agu_icb_rsp_rdata;\n\n  wire commit_mret;\n  wire commit_trap;\n  wire excp_active;\n\n  e203_exu u_e203_exu(\n\n  `ifdef E203_HAS_CSR_EAI//{\n    .eai_csr_valid (eai_csr_valid),\n    .eai_csr_ready (eai_csr_ready),\n    .eai_csr_addr  (eai_csr_addr ),\n    .eai_csr_wr    (eai_csr_wr   ),\n    .eai_csr_wdata (eai_csr_wdata),\n    .eai_csr_rdata (eai_csr_rdata),\n  `endif//}\n\n\n    .excp_active            (excp_active),\n    .commit_mret            (commit_mret),\n    .commit_trap            (commit_trap),\n    .test_mode              (test_mode),\n    .core_wfi               (core_wfi),\n    .tm_stop                (tm_stop),\n    .itcm_nohold            (itcm_nohold),\n    .core_cgstop            (core_cgstop),\n    .tcm_cgstop             (tcm_cgstop),\n    .exu_active             (exu_active),\n\n    .core_mhartid           (core_mhartid),\n    .dbg_irq_r              (dbg_irq_r),\n    .lcl_irq_r              (lcl_irq_r    ),\n    .ext_irq_r              (ext_irq_r    ),\n    .sft_irq_r              (sft_irq_r    ),\n    .tmr_irq_r              (tmr_irq_r    ),\n    .evt_r                  (evt_r    ),\n\n    .cmt_dpc                (cmt_dpc        ),\n    .cmt_dpc_ena            (cmt_dpc_ena    ),\n    .cmt_dcause             (cmt_dcause     ),\n    .cmt_dcause_ena         (cmt_dcause_ena ),\n\n    .wr_dcsr_ena     (wr_dcsr_ena    ),\n    .wr_dpc_ena      (wr_dpc_ena     ),\n    .wr_dscratch_ena (wr_dscratch_ena),\n\n\n                                     \n    .wr_csr_nxt      (wr_csr_nxt    ),\n                                     \n    .dcsr_r          (dcsr_r         ),\n    .dpc_r           (dpc_r          ),\n    .dscratch_r      (dscratch_r     ),\n\n    .dbg_mode               (dbg_mode  ),\n    .dbg_halt_r             (dbg_halt_r),\n    .dbg_step_r             (dbg_step_r),\n    .dbg_ebreakm_r          (dbg_ebreakm_r),\n    .dbg_stopcycle          (dbg_stopcycle),\n\n    .i_valid                (ifu_o_valid         ),\n    .i_ready                (ifu_o_ready         ),\n    .i_ir                   (ifu_o_ir            ),\n    .i_pc                   (ifu_o_pc            ),\n    .i_pc_vld               (ifu_o_pc_vld        ),\n    .i_misalgn              (ifu_o_misalgn       ), \n    .i_buserr               (ifu_o_buserr        ), \n    .i_rs1idx               (ifu_o_rs1idx        ),\n    .i_rs2idx               (ifu_o_rs2idx        ),\n    .i_prdt_taken           (ifu_o_prdt_taken    ),\n    .i_muldiv_b2b           (ifu_o_muldiv_b2b    ),\n\n    .wfi_halt_ifu_req       (wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack       (wfi_halt_ifu_ack),\n\n    .pipe_flush_ack         (pipe_flush_ack      ),\n    .pipe_flush_req         (pipe_flush_req      ),\n    .pipe_flush_add_op1     (pipe_flush_add_op1  ),  \n    .pipe_flush_add_op2     (pipe_flush_add_op2  ),  \n  `ifdef E203_TIMING_BOOST//}\n    .pipe_flush_pc          (pipe_flush_pc),  \n  `endif//}\n\n    .lsu_o_valid            (lsu_o_valid   ),\n    .lsu_o_ready            (lsu_o_ready   ),\n    .lsu_o_wbck_wdat        (lsu_o_wbck_wdat    ),\n    .lsu_o_wbck_itag        (lsu_o_wbck_itag    ),\n    .lsu_o_wbck_err         (lsu_o_wbck_err     ),\n    .lsu_o_cmt_buserr       (lsu_o_cmt_buserr     ),\n    .lsu_o_cmt_ld           (lsu_o_cmt_ld),\n    .lsu_o_"}
{"text": "cmt_st           (lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr      (lsu_o_cmt_badaddr     ),\n\n    .agu_icb_cmd_valid      (agu_icb_cmd_valid   ),\n    .agu_icb_cmd_ready      (agu_icb_cmd_ready   ),\n    .agu_icb_cmd_addr       (agu_icb_cmd_addr    ),\n    .agu_icb_cmd_read       (agu_icb_cmd_read    ),\n    .agu_icb_cmd_wdata      (agu_icb_cmd_wdata   ),\n    .agu_icb_cmd_wmask      (agu_icb_cmd_wmask   ),\n    .agu_icb_cmd_lock       (agu_icb_cmd_lock    ),\n    .agu_icb_cmd_excl       (agu_icb_cmd_excl    ),\n    .agu_icb_cmd_size       (agu_icb_cmd_size    ),\n    .agu_icb_cmd_back2agu   (agu_icb_cmd_back2agu),\n    .agu_icb_cmd_usign      (agu_icb_cmd_usign   ),\n    .agu_icb_cmd_itag       (agu_icb_cmd_itag    ),\n    .agu_icb_rsp_valid      (agu_icb_rsp_valid   ),\n    .agu_icb_rsp_ready      (agu_icb_rsp_ready   ),\n    .agu_icb_rsp_err        (agu_icb_rsp_err     ),\n    .agu_icb_rsp_excl_ok    (agu_icb_rsp_excl_ok ),\n    .agu_icb_rsp_rdata      (agu_icb_rsp_rdata   ),\n\n    .oitf_empty             (oitf_empty   ),\n    .rf2ifu_x1              (rf2ifu_x1    ),\n    .rf2ifu_rs1             (rf2ifu_rs1   ),\n    .dec2ifu_rden           (dec2ifu_rden ),\n    .dec2ifu_rs1en          (dec2ifu_rs1en),\n    .dec2ifu_rdidx          (dec2ifu_rdidx),\n    .dec2ifu_mulhsu         (dec2ifu_mulhsu),\n    .dec2ifu_div            (dec2ifu_div   ),\n    .dec2ifu_rem            (dec2ifu_rem   ),\n    .dec2ifu_divu           (dec2ifu_divu  ),\n    .dec2ifu_remu           (dec2ifu_remu  ),\n\n\n    .clk_aon                (clk_aon),\n    .clk                    (clk_core_exu),\n    .rst_n                  (rst_n  ) \n  );\n\n  wire                         lsu2biu_icb_cmd_valid;\n  wire                         lsu2biu_icb_cmd_ready;\n  wire [`E203_ADDR_SIZE-1:0]   lsu2biu_icb_cmd_addr; \n  wire                         lsu2biu_icb_cmd_read; \n  wire [`E203_XLEN-1:0]        lsu2biu_icb_cmd_wdata;\n  wire [`E203_XLEN/8-1:0]      lsu2biu_icb_cmd_wmask;\n  wire                         lsu2biu_icb_cmd_lock;\n  wire                         lsu2biu_icb_cmd_excl;\n  wire [1:0]                   lsu2biu_icb_cmd_size;\n\n  wire                         lsu2biu_icb_rsp_valid;\n  wire                         lsu2biu_icb_rsp_ready;\n  wire                         lsu2biu_icb_rsp_err  ;\n  wire                         lsu2biu_icb_rsp_excl_ok;\n  wire [`E203_XLEN-1:0]        lsu2biu_icb_rsp_rdata;\n\n  e203_lsu u_e203_lsu(\n    .excp_active         (excp_active),\n    .commit_mret            (commit_mret),\n    .commit_trap         (commit_trap),\n    .lsu_active          (lsu_active),\n    .lsu_o_valid         (lsu_o_valid   ),\n    .lsu_o_ready         (lsu_o_ready   ),\n    .lsu_o_wbck_wdat     (lsu_o_wbck_wdat    ),\n    .lsu_o_wbck_itag     (lsu_o_wbck_itag    ),\n    .lsu_o_wbck_err      (lsu_o_wbck_err     ),\n    .lsu_o_cmt_buserr    (lsu_o_cmt_buserr     ),\n    .lsu_o_cmt_ld        (lsu_o_cmt_ld),\n    .lsu_o_cmt_st        (lsu_o_cmt_st),\n    .lsu_o_cmt_badaddr   (lsu_o_cmt_badaddr     ),\n                        \n    .agu_icb_cmd_valid   (agu_icb_cmd_valid ),\n    .agu_icb_cmd_ready   (agu_icb_cmd_ready ),\n    .agu_icb_cmd_addr    (agu_icb_cmd_addr  ),\n    .agu_icb_cmd_read    (agu_icb_cmd_read  ),\n    .agu_icb_cmd_wdata   (agu_icb_cmd_wdata ),\n    .agu_icb_cmd_wmask   (agu_icb_cmd_wmask ),\n    .agu_icb_cmd_lock    (agu_icb_cmd_lock  ),\n    .agu_icb_cmd_excl    (agu_icb_cmd_excl  ),\n    .agu_icb_cmd_size    (agu_icb_cmd_size  ),\n   \n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu ),\n    .agu_icb_cmd_usign   (agu_icb_cmd_usign),\n    .agu_icb_cmd_itag    (agu_icb_cmd_itag),\n  \n    .agu_icb_rsp_valid   (agu_icb_rsp_valid ),\n    .agu_icb_rsp_ready   (agu_icb_rsp_ready ),\n    .agu_icb_rsp_err     (agu_icb_rsp_err   ),\n    .agu_icb_rsp_excl_ok (agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata   (agu_icb_rsp_rdata),\n\n\n\n  `ifdef E203_HAS_ITCM //{\n    .itcm_region_indic   (itcm_region_indic),\n    .itcm_icb_cmd_valid  (lsu2itcm_icb_cmd_valid),\n    .itcm_icb_cmd_ready  (lsu2itcm_icb_cmd_ready),\n    .itcm_icb_cmd_addr   (lsu2itcm_icb_cmd_addr ),\n    .itcm_icb_cmd_read   (lsu2itcm_icb_cmd_read ),\n    .itcm_icb_cmd_wdata  (lsu2itcm_icb_cmd_wdata),\n    .itcm_icb_cmd_wmask  (lsu2itcm_icb_cmd_wmask),\n    .itcm_icb_cmd_lock   (lsu2itcm_icb_cmd_lock ),\n    .itcm_icb_cmd_excl   (lsu2itcm_icb_cmd_excl ),\n    .itcm_icb_cmd_size   (lsu2itcm_icb_cmd_size ),\n     \n    .itcm_icb_rsp_valid  (lsu2itcm_icb_rsp_valid),\n    .itcm_icb_rsp_ready  (lsu2itcm_icb_rsp_ready),\n    .itcm_icb_rsp_err    (lsu2itcm_icb_rsp_err  ),\n    .itcm_icb_rsp_excl_ok(lsu2itcm_icb_rsp_excl_ok  ),\n    .itcm_icb_rsp_rdata  (lsu2itcm_icb_rsp_rdata),\n\n  `endif//}\n\n  `ifdef E203_HAS_DTCM //{\n    .dtcm_region_indic   (dtcm_region_indic),\n\n    .dtcm_icb_cmd_valid  (lsu2dtcm_icb_cmd_valid),\n    .dtcm_icb_cmd_ready  (lsu2dtcm_icb_cmd_ready),\n    .dtcm_icb_cmd_addr   (lsu2dtcm_icb_cmd_addr ),\n    .dtcm_icb_cmd_read   (lsu2dtcm_icb_cmd_read ),\n    .dtcm_icb_cmd_wdata  (lsu2dtcm_icb_cmd_wdata),\n    .dtcm_icb_cmd_wmask  (lsu2dtcm_icb_cmd_wmask),\n    .dtcm_icb_cmd_lock   (lsu2dtcm_icb_cmd_lock ),\n    .dtcm_icb_cmd_excl   (lsu2dtcm_icb_cmd_excl ),\n    .dtcm_icb_cmd_size   (lsu2dtcm_icb_cmd_size ),\n     \n    .dtcm_icb_rsp_valid  (lsu2dtcm_icb_rsp_valid),\n    .dtcm_icb_rsp_ready  (lsu2dtcm_icb_rsp_ready),\n    .dtcm_icb_rsp_err    (lsu2dtcm_icb_rsp_err  ),\n    .dtcm_icb_rsp_excl_ok(lsu2dtcm_icb_rsp_excl_ok  ),\n    .dtcm_icb_rsp_rdata  (lsu2dtcm_icb_rsp_rdata),\n\n  `endif//}\n\n    .biu_icb_cmd_valid  (lsu2biu_icb_cmd_valid),\n    .biu_icb_cmd_ready  (lsu2biu_icb_cmd_ready),\n    .biu_icb_cmd_addr   (lsu2biu_icb_cmd_addr ),\n    .biu_icb_cmd_read   (lsu2biu_icb_cmd_read ),\n    .biu_icb_cmd_wdata  (lsu2biu_icb_cmd_wdata),\n    .biu_icb_cmd_wmask  (lsu2biu_icb_cmd_wmask),\n    .biu_icb_cmd_lock   (lsu2biu_icb_cmd_lock ),\n    .biu_icb_cmd_excl   (lsu2biu_icb_cmd_excl ),\n    .biu_icb_cmd_size   (lsu2biu_icb_cmd_size ),\n    \n    .biu_icb_rsp_valid  (lsu2biu_icb_rsp_valid),\n    .biu_icb_rsp_ready  (lsu2biu_icb_rsp_ready),\n    .biu_icb_rsp_err    (lsu2biu_icb_rsp_err  ),\n    .biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .biu_icb_rsp_rdata  (lsu2biu_icb_rsp_rdata),\n\n    .clk           (clk_core_lsu ),\n    .rst_n         (rst_n        ) \n  );\n\n\n  e203_biu u_e203_biu(\n\n\n    .biu_active             (biu_active),\n\n    .lsu2biu_icb_cmd_valid  (lsu2biu_icb_cmd_valid),\n    .lsu2biu_icb_cmd_ready  (lsu2biu_icb_cmd_ready),\n    .lsu2biu_icb_cmd_addr   (lsu2biu_icb_cmd_addr ),\n    .lsu2biu_icb_cmd_read   (lsu2biu_icb_cmd_read ),\n    .lsu2biu_icb_cmd_wdata  (lsu2biu_icb_cmd_wdata),\n    .lsu2biu_icb_cmd_wmask  (lsu2biu_icb_cmd_wmask),\n    .lsu2biu_icb_cmd_lock   (lsu2biu_icb_cmd_lock ),\n    .lsu2biu_icb_cmd_excl   (lsu2biu_icb_cmd_excl ),\n    .lsu2biu_icb_cmd_size   (lsu2biu_icb_cmd_size ),\n    .lsu2biu_icb_cmd_burst  (2'b0),\n    .lsu2biu_icb_cmd_beat   (2'b0 ),\n\n    .lsu2biu_icb_rsp_valid  (lsu2biu_icb_rsp_valid),\n    .lsu2biu_icb_rsp_ready  (lsu2biu_icb_rsp_ready),\n    .lsu2biu_icb_rsp_err    (lsu2biu_icb_rsp_err  ),\n    .lsu2biu_icb_rsp_excl_ok(lsu2biu_icb_rsp_excl_ok),\n    .lsu2biu_icb_rsp_rdata  (lsu2biu_icb_rsp_rdata),\n\n  `ifdef E203_HAS_MEM_ITF //{\n    .ifu2biu_icb_cmd_valid  (ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready  (ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr   (ifu2biu_icb_cmd_addr ),\n    .ifu2biu_icb_cmd_read   (1'b1 ),\n    .ifu2biu_icb_cmd_wdata  (`E203_XLEN'b0),\n    .ifu2biu_icb_cmd_wmask  ({`E203_XLEN/8{1'b0}}),\n    .ifu2biu_icb_cmd_lock   (1'b0 ),\n    .ifu2biu_icb_cmd_excl   (1'b0 ),\n    .ifu2biu_icb_cmd_size   (2'b10),\n    .ifu2biu_icb_cmd_burst  (2'b0),\n    .ifu2biu_icb_cmd_beat   (2'b0),\n    \n    .ifu2biu_icb_rsp_valid  (ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready  (ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err    (ifu2biu_icb_rsp_err  ),\n    .ifu2biu_icb_rsp_excl_ok(ifu2biu_icb_rsp_excl_ok),\n    .ifu2biu_icb_rsp_rdata  (ifu2biu_icb_rsp_rdata),\n\n  `endif//}\n\n    .ppi_region_indic      (ppi_region_indic ),\n    .ppi_icb_enable        (ppi_icb_enable),\n    .ppi_icb_cmd_valid     (ppi_icb_cmd_valid),\n    .ppi_icb_cmd_ready     (ppi_icb_cmd_ready),\n    .ppi_icb_cmd_addr      (ppi_icb_cmd_addr ),\n    .ppi_icb_cmd_read      (ppi_icb_cmd_read ),\n    .ppi_icb_cmd_wdata     (ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask     (ppi_icb_cmd_wmask),\n    .ppi_icb_cmd_lock      (ppi_icb_cmd_lock ),\n    .ppi_icb_cmd_excl      (ppi_icb_cmd_excl ),\n    .ppi_icb_cmd_size      (ppi_icb_cmd_size ),\n    .ppi_icb_cmd_burst     (),\n    .ppi_icb_cmd_beat      (),\n    \n    .ppi_icb_rsp_valid     (ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready     (ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err       (ppi_icb_rsp_err  ),\n    .ppi_icb_rsp_excl_ok   (ppi_icb_rsp_excl_ok),\n    .ppi_icb_rsp_rdata     (ppi_icb_rsp_rdata),\n\n\n    .plic_icb_enable        (plic_icb_enable),\n    .plic_region_indic      (plic_region_indic ),\n    .plic_icb_cmd_valid     (plic_icb_cmd_valid),\n    .plic_icb_cmd_ready     (plic_icb_cmd_ready),\n    .plic_icb_cmd_addr      (plic_icb_cmd_addr ),\n    .plic_icb_cmd_read      (plic_icb_cmd_read ),\n    .plic_icb_cmd_wdata     (plic_icb_cmd_wdata),\n    .plic_icb_cmd_wmask     (plic_icb_cmd_wmask),\n    .plic_icb_cmd_lock      (plic_icb_cmd_lock ),\n    .plic_icb_cmd_excl      (plic_icb_cmd_excl ),\n    .plic_icb_cmd_size      (plic_icb_cmd_size ),\n    .plic_icb_cmd_burst     (),\n    .plic_icb_cmd_beat      (),\n    \n    .plic_icb_rsp_valid     (plic_icb_rsp_valid),\n    .plic_icb_rsp_ready     (plic_icb_rsp_ready),\n    .plic_icb_rsp_err       (plic_icb_rsp_err  ),\n    .plic_icb_rsp_excl_ok   (plic_icb_rsp_excl_ok),\n    .plic_icb_rsp_rdata     (plic_icb_rsp_rdata),\n\n    .clint_icb_enable        (clint_icb_enable),\n    .clint_region_indic      (clint_region_indic ),\n    .clint_icb_cmd_valid     (clint_icb_cmd_valid),\n    .clint_icb_cmd_ready     (clint_icb_cmd_ready),\n    .clint_icb_cmd_addr      (clint_icb_cmd_addr ),\n    .clint_icb_cmd_read      (clint_icb_cmd_read ),\n    .clint_icb_cmd_wdata     (clint_icb_cmd_wdata),\n    .clint_icb_cmd_wmask     (clint_icb_cmd_wmask),\n    .clint_icb_cmd_lock      (clint_icb_cmd_lock ),\n    .clint_icb_cmd_excl      (clint_icb_cmd_excl ),\n    .clint_icb_cmd_size      (clint_icb_cmd_size ),\n    .clint_icb_cmd_burst     (),\n    .clint_icb_cmd_beat      (),\n    \n    .clint_icb_rsp_valid     (clint_icb_rsp_valid),\n    .clint_icb_rsp_ready     (clint_icb_rsp_ready),\n    .clint_icb_rsp_err       (clint_icb_rsp_err  ),\n    .clint_icb_rsp_excl_ok   (clint_icb_rsp_excl_ok),\n    .clint_icb_rsp_rdata     (clint_icb_rsp_rdata),\n\n\n  `ifdef E203_HAS_FIO //{\n    .fio_region_indic      (fio_region_indic ),\n    .fio_icb_enable        (fio_icb_enable),\n    .fio_icb_cmd_valid     (fio_icb_cmd_valid),\n    .fio_icb_cmd_ready     (fio_icb_cmd_ready),\n    .fio_icb_cmd_addr      (fio_icb_cmd_addr ),\n    .fio_icb_cmd_read      (fio_icb_cmd_read ),\n    .fio_icb_cmd_wdata     (fio_icb_cmd_wdata),\n    .fio_icb_cmd_wmask     (fio_icb_cmd_wmask),\n    .fio_icb_cmd_lock      (fio_icb_cmd_lock ),\n    .fio_icb_cmd_excl      (fio_icb_cmd_excl ),\n    .fio_icb_cmd_size      (fio_icb_cmd_size ),\n    .fio_icb_cmd_burst     (),\n    .fio_icb_cmd_beat      (),\n    \n    .fio_icb_rsp_valid     (fio_icb_rsp_valid),\n    .fio_icb_rsp_ready     (fio_icb_rsp_ready),\n    .fio_icb_rsp_err       (fio_icb_rsp_err  ),\n    .fio_icb_rsp_excl_ok   (fio_icb_rsp_excl_ok  ),\n    .fio_icb_rsp_rdata     (fio_icb_rsp_rdata),\n  `endif//}\n\n  `ifdef E203_HAS_MEM_ITF //{\n    .mem_icb_enable        (mem_icb_enable),\n    .mem_icb_cmd_valid     (mem_icb_cmd_valid),\n    .mem_icb_cmd_ready     (mem_icb_cmd_ready),\n    .mem_icb_cmd_addr      (mem_icb_cmd_addr ),\n    .mem_icb_cmd_read      (mem_icb_cmd_read ),\n    .mem_icb_cmd_wdata     (mem_icb_cmd_wdata),\n    .mem_icb_cmd_wmask     (mem_icb_cmd_wmask),\n    .mem_icb_cmd_lock      (mem_icb_cmd_lock ),\n    .mem_icb_cmd_excl      (mem_icb_cmd_excl ),\n    .mem_icb_cmd_size      (mem_icb_cmd_size ),\n    .mem_icb_cmd_burst     (mem_icb_cmd_burst),\n    .mem_icb_cmd_beat      (mem_icb_cmd_beat ),\n    \n    .mem_icb_rsp_valid     (mem_icb_rsp_valid),\n    .mem_icb_rsp_ready     (mem_icb_rsp_ready),\n    .mem_icb_rsp_err       (mem_icb_rsp_err  ),\n    .mem_icb_rsp_excl_ok   (mem_icb_rsp_excl_ok  ),\n    .mem_icb_rsp_rdata     (mem_icb_rsp_rdata),\n  `endif//}\n\n    .clk                    (clk_core_biu ),\n    .rst_n                  (rst_n        ) \n  );\n\n\n\nendmodule                                      \n                                               \n                                               \n                                               \n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The CPU module to implement Core and other top level glue logics \n//\n// ====================================================================\n\n`include \"e203_defines.v\"\n\nmodule e203_cpu #(\n    parameter MASTER = 1\n)(\n  output [`E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq      ,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk          ,\n  output core_csr_clk      ,\n  `ifdef E203_HAS_ITCM\n  output rst_itcm,\n  `endif\n  `ifdef E203_HAS_DTCM\n  output rst_dtcm,\n  `endif\n\n\n  output  core_wfi,\n  output  tm_stop,\n  \n  input  [`E203_PC_SIZE-1:0] pc_rtvec,\n\n  ///////////////////////////////////////\n  // With the interface to debug module \n  //\n    // The interface with commit stage\n  output  [`E203_PC_SIZE-1:0] cmt_dpc,\n  output  cmt_dpc_ena,\n\n  output  [3-1:0] cmt_dcause,\n  output  cmt_dcause_ena,\n\n  output  dbg_irq_r,\n\n    // The interface with CSR control \n  output  wr_dcsr_ena    ,\n  output  wr_dpc_ena     ,\n  output  wr_dscratch_ena,\n\n\n  output  [32-1:0] wr_csr_nxt    ,\n\n  input  [32-1:0] dcsr_r    ,\n  input  [`E203_PC_SIZE-1:0] dpc_r     ,\n  input  [32-1:0] dscratch_r,\n\n  input  dbg_mode,\n  input  dbg_halt_r,\n  input  dbg_step_r,\n  input  dbg_ebreakm_r,\n  input  dbg_stopcycle,\n\n\n  /////////////////////////////////////////////////////\n  input [`E203_HART_ID_W-1:0] core_mhartid,  \n\n  input  dbg_irq_a,\n  input  ext_irq_a,\n  input  sft_irq_a,\n  input  tmr_irq_a,\n\n  `ifdef E203_HAS_ITCM //{\n  //input [`E203_ADDR_SIZE-1:0] itcm_region_indic,\n  `endif//}\n\n  `ifdef E203_HAS_DTCM //{\n  //input [`E203_ADDR_SIZE-1:0] dtcm_region_indic,\n  `endif//}\n\n  `ifdef E203_HAS_ITCM_EXTITF //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // External-agent ICB to ITCM\n  //    * Bus cmd channel\n  input                          ext2itcm_icb_cmd_valid,\n  output                         ext2itcm_icb_cmd_ready,\n  input  [`E203_ITCM_ADDR_WIDTH-1:0]   ext2itcm_icb_cmd_addr, \n  input                          ext2itcm_icb_cmd_read, \n  input  [`E203_XLEN-1:0]        ext2itcm_icb_cmd_wdata,\n  input  [`E203_XLEN/8-1:0]      ext2itcm_icb_cmd_wmask,\n  //\n  //    * Bus RSP channel\n  output                         ext2itcm_icb_rsp_valid,\n  input                          ext2itcm_icb_rsp_ready,\n  output                         ext2itcm_icb_rsp_err  ,\n  output [`E203_XLEN-1:0]        ext2itcm_icb_rsp_rdata,\n  `endif//}\n\n  `ifdef E203_HAS_DTCM_EXTITF //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // External-agent ICB to DTCM\n  //    * Bus cmd channel\n  input                          ext2dtcm_icb_cmd_valid,\n  output                         ext2dtcm_icb_cmd_ready,\n  input  [`E203_DTCM_ADDR_WIDTH-1:0]   ext2dtcm_icb_cmd_addr, \n  input                          ext2dtcm_icb_cmd_read, \n  input  [`E203_XLEN-1:0]        ext2dtcm_icb_cmd_wdata,\n  input  [`E203_XLEN/8-1:0]      ext2dtcm_icb_cmd_wmask,\n  //\n  //    * Bus RSP channel\n  output                         ext2dtcm_icb_rsp_valid,\n  input                          ext2dtcm_icb_rsp_ready,\n  output                         ext2dtcm_icb_rsp_err  ,\n  output [`E203_XLEN-1:0]        ext2dtcm_icb_rsp_rdata,\n  `endif//}\n\n  \n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface to Private Peripheral Interface\n  input [`E203_ADDR_SIZE-1:0]    ppi_region_indic,\n  //\n  input                          ppi_icb_enable,\n  //    * Bus cmd channel\n  output                         ppi_icb_cmd_valid,\n  input                          ppi_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   ppi_icb_cmd_addr, \n  output                         ppi_icb_cmd_read, \n  output [`E203_XLEN-1:0]        ppi_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      ppi_icb_cmd_wmask,\n  output                         ppi_icb_cmd_lock,\n  output                         ppi_icb_cmd_excl,\n  output [1:0]                   ppi_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          ppi_icb_rsp_valid,\n  output                         ppi_icb_rsp_ready,\n  input                          ppi_icb_rsp_err  ,\n  input                          ppi_icb_rsp_excl_ok  ,\n  input  [`E203_XLEN-1:0]        ppi_icb_rsp_rdata,\n\n  \n  input [`E203_ADDR_SIZE-1:0]    clint_region_indic,\n  input                          clint_icb_enable,\n\n  output                         clint_icb_cmd_valid,\n  input                          clint_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   clint_icb_cmd_addr, \n  output                         clint_icb_cmd_read, \n  output [`E203_XLEN-1:0]        clint_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      clint_icb_cmd_wmask,\n  output                         clint_icb_cmd_lock,\n  output                         clint_icb_cmd_excl,\n  output [1:0]                   clint_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          clint_icb_rsp_valid,\n  output                         clint_icb_rsp_ready,\n  input                          clint_icb_rsp_err  ,\n  input                          clint_icb_rsp_excl_ok  ,\n  input  [`E203_XLEN-1:0]        clint_icb_rsp_rdata,\n\n  input [`E203_ADDR_SIZE-1:0]    plic_region_indic,\n  input                          plic_icb_enable,\n\n  output                         plic_icb_cmd_valid,\n  input                          plic_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   plic_icb_cmd_addr, \n  output                         plic_icb_cmd_read, \n  output [`E203_XLEN-1:0]        plic_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      plic_icb_cmd_wmask,\n  output                         plic_icb_cmd_lock,\n  output                         plic_icb_cmd_excl,\n  output [1:0]                   plic_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          plic_icb_rsp_valid,\n  output                         plic_icb_rsp_ready,\n  input                          plic_icb_rsp_err  ,\n  input                          plic_icb_rsp_excl_ok  ,\n  input  [`E203_XLEN-1:0]        plic_icb_rsp_rdata,\n\n\n  `ifdef E203_HAS_FIO //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface to Fast I/O\n  input [`E203_ADDR_SIZE-1:0]    fio_region_indic,\n  //\n  input                          fio_icb_enable,\n  //    * Bus cmd channel\n  output                         fio_icb_cmd_valid,\n  input                          fio_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   fio_icb_cmd_addr, \n  output                         fio_icb_cmd_read, \n  output [`E203_XLEN-1:0]        fio_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      fio_icb_cmd_wmask,\n  output                         fio_icb_cmd_lock,\n  output                         fio_icb_cmd_excl,\n  output [1:0]                   fio_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          fio_icb_rsp_valid,\n  output                         fio_icb_rsp_ready,\n  input                          fio_icb_rsp_err  ,\n  input                          fio_icb_rsp_excl_ok  ,\n  input  [`E203_XLEN-1:0]        fio_icb_rsp_rdata,\n  `endif//}\n\n  `ifdef E203_HAS_MEM_ITF //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface from Ifetch \n  //\n  input                          mem_icb_enable,\n  //    * Bus cmd channel\n  output                         mem_icb_cmd_valid,\n  input                          mem_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   mem_icb_cmd_addr, \n  output                         mem_icb_cmd_read, \n  output [`E203_XLEN-1:0]        mem_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      mem_icb_cmd_wmask,\n  output                         mem_icb_cmd_lock,\n  output                         mem_icb_cmd_excl,\n  output [1:0]                   mem_icb_cmd_size,\n  output [1:0]                   mem_icb_cmd_burst,\n  output [1:0]                   mem_icb_cmd_beat,\n  //\n  //    * Bus RSP channel\n  input                          mem_icb_rsp_valid,\n  output                         mem_icb_rsp_ready,\n  input                          mem_icb_rsp_err  ,\n  input                          mem_icb_rsp_excl_ok,\n  input  [`E203_XLEN-1:0]        mem_icb_rsp_rdata,\n  `endif//}\n\n  `ifdef E203_HAS_ITCM//{\n  output itcm_ls,\n\n  output                         itcm_ram_cs,  \n  output                         itcm_ram_we,  \n  output [`E203_ITCM_RAM_AW-1:0] itcm_ram_addr, \n  output [`E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [`E203_ITCM_RAM_DW-1:0] itcm_ram_din,          \n  input  [`E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output                         clk_itcm_ram,\n  `endif//}\n\n  `ifdef E203_HAS_DTCM//{\n  output dtcm_ls,\n\n  output                         dtcm_ram_cs,  \n  output                         dtcm_ram_we,  \n  output [`E203_DTCM_RAM_AW-1:0] dtcm_ram_addr, \n  output [`E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [`E203_DTCM_RAM_DW-1:0] dtcm_ram_din,          \n  input  [`E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output                         clk_dtcm_ram,\n  `endif//}\n\n  input  test_mode,\n\n  input  clk,\n  input  rst_n\n  );\n\n  wire core_cgstop;\n  wire tcm_cgstop;\n  \n  wire core_ifu_active;\n  wire core_exu_active;\n  wire core_lsu_active;\n  wire core_biu_active;\n  \n  // The core's clk and rst\n  wire rst_core;\n  wire clk_core_ifu;\n  wire clk_core_exu;\n  wire clk_core_lsu;\n  wire clk_core_biu;\n  \n  // The ITCM/DTCM clk and rst\n  `ifdef E203_HAS_ITCM\n  wire clk_itcm;\n  wire itcm_active;\n  `endif\n  `ifdef E203_HAS_DTCM\n  wire clk_dtcm;\n  wire dtcm_active;\n  `endif\n\n  // The Top always on clk and rst\n  wire rst_aon;\n  wire clk_aon;\n\n  // The reset ctrl and clock ctrl should be in the power always-on domain\n\n  e203_reset_ctrl #(.MASTER(MASTER)) u_e203_reset_ctrl (\n    .clk        (clk_aon  ),\n    .rst_n      (rst_n    ),\n    .test_mode  (test_mode),\n\n    .rst_core   (rst_core),\n\n\n  `ifdef E203_HAS_ITCM\n    .rst_itcm   (rst_itcm),\n  `endif\n  `ifdef E203_HAS_DTCM\n    .rst_dtcm   (rst_dtcm),\n  `endif\n\n    .rst_aon   (rst_aon) \n\n  );\n\n\n\n  e203_clk_ctrl u_e203_clk_ctrl(\n    .clk          (clk          ),\n    .rst_n        (rst_aon      ),\n    .test_mode    (test_mode    ),\n                                \n    .clk_aon      (clk_aon      ),\n\n    .core_cgstop   (core_cgstop),\n    \n\n\n    .clk_core_ifu (clk_core_ifu      ),\n    .clk_core_exu (clk_core_exu      ),\n    .clk_core_lsu (clk_core_lsu      ),\n    .clk_core_biu (clk_core_biu      ),\n  `ifdef E203_HAS_ITCM\n    .clk_itcm     (clk_itcm     ),\n    .itcm_active  (itcm_active),\n    .itcm_ls      (itcm_ls    ),\n  `endif\n  `ifdef E203_HAS_DTCM\n    .clk_dtcm     (clk_dtcm     ),\n    .dtcm_active  (dtcm_active),\n    .dtcm_ls      (dtcm_ls    ),\n  `endif\n\n    .core_ifu_active(core_ifu_active),\n    .core_exu_active(core_exu_active),\n    .core_lsu_active(core_lsu_active),\n    .core_biu_active(core_biu_active),\n    .core_wfi     (core_wfi ) \n  );\n\n  wire ext_irq_r;\n  wire sft_irq_r;\n  wire tmr_irq_r;\n\n  e203_irq_sync  #(.MASTER(MASTER)) u_e203_irq_sync(\n    .clk       (clk_aon  ),\n    .rst_n     (rst_aon  ),\n                         \n\n    .dbg_irq_a (dbg_irq_a),\n    .dbg_irq_r (dbg_irq_r),\n\n    .ext_irq_a   (ext_irq_a),\n    .sft_irq_a   (sft_irq_a),\n    .tmr_irq_a   (tmr_irq_a),\n    .ext_irq_r   (ext_irq_r),\n    .sft_irq_r   (sft_irq_r),\n    .tmr_irq_r   (tmr_irq_r) \n  );\n\n\n\n  `ifdef E203_HAS_ITCM //{\n  wire ifu2itcm_holdup;\n  //wire ifu2itcm_replay;\n\n  wire ifu2itcm_icb_cmd_valid;\n  wire ifu2itcm_icb_cmd_ready;\n  wire [`E203_ITCM_ADDR_WIDTH-1:0]   ifu2itcm_icb_cmd_addr;\n\n  wire ifu2itcm_icb_rsp_valid;\n  wire ifu2itcm_icb_rsp_ready;\n  wire ifu2itcm_icb_rsp_err;\n  wire [`E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata; \n\n  wire                         lsu2itcm_icb_cmd_valid;\n  wire                         lsu2itcm_icb_cmd_ready;\n  wire [`E203_ITCM_ADDR_WIDTH-1:0]   lsu2itcm_icb_cmd_addr; \n  wire                         lsu2itcm_icb_cmd_read; \n  wire [`E203_XLEN-1:0]        lsu2itcm_icb_cmd_wdata;\n  wire [`E203_XLEN/8-1:0]      lsu2itcm_icb_cmd_wmask;\n  wire                         lsu2itcm_icb_cmd_lock;\n  wire                         lsu2itcm_icb_cmd_excl;\n  wire [1:0]                   lsu2itcm_icb_cmd_size;\n  wire                         lsu2itcm_icb_rsp_valid;\n  wire                         lsu2itcm_icb_rsp_ready;\n  wire                         lsu2itcm_icb_rsp_err  ;\n  wire [`E203_XLEN-1:0]        lsu2itcm_icb_rsp_rdata;\n  `endif//}\n\n  `ifdef E203_HAS_DTCM //{\n  wire                               lsu2dtcm_icb_cmd_valid;\n  wire                               lsu2dtcm_icb_cmd_ready;\n  wire [`E203_DTCM_ADDR_WIDTH-1:0]   lsu2dtcm_icb_cmd_addr; \n  wire                               lsu2dtcm_icb_cmd_read; \n  wire [`E203_XLEN-1:0]              lsu2dtcm_icb_cmd_wdata;\n  wire [`E203_XLEN/8-1:0]            lsu2dtcm_icb_cmd_wmask;\n  wire                               lsu2dtcm_icb_cmd_lock;\n  wire                               lsu2dtcm_icb_cmd_excl;\n  wire [1:0]                         lsu2dtcm_icb_cmd_size;\n  wire                               lsu2dtcm_icb_rsp_valid;\n  wire                               lsu2dtcm_icb_rsp_ready;\n  wire                               lsu2dtcm_icb_rsp_err  ;\n  wire [`E203_XLEN-1:0]              lsu2dtcm_icb_rsp_rdata;\n  `endif//}\n\n  `ifdef E203_HAS_CSR_EAI//{\n  wire         eai_csr_valid;\n  wire         eai_csr_ready;\n  wire  [31:0] eai_csr_addr;\n  wire         eai_csr_wr;\n  wire  [31:0] eai_csr_wdata;\n  wire  [31:0] eai_csr_rdata;\n\n  // This is an empty module to just connect the EAI CSR interface, \n  //  user can hack it to become a real one\n  e203_extend_csr u_e203_extend_csr(\n    .eai_csr_valid (eai_csr_valid),\n    .eai_csr_ready (eai_csr_ready),\n    .eai_csr_addr  (eai_csr_addr ),\n    .eai_csr_wr    (eai_csr_wr   ),\n    .eai_csr_wdata (eai_csr_wdata),\n    .eai_csr_rdata (eai_csr_rdata),\n    .clk           (clk_core_exu ),\n    .rst_n         (rst_core ) \n   );\n  `endif//}\n\n \n\n  e203_core u_e203_core(\n    .inspect_pc            (inspect_pc),\n\n\n  `ifdef E203_HAS_CSR_EAI//{\n    .eai_csr_valid (eai_csr_valid),\n    .eai_csr_ready (eai_csr_ready),\n    .eai_csr_addr  (eai_csr_addr ),\n    .eai_csr_wr    (eai_csr_wr   ),\n    .eai_csr_wdata (eai_csr_wdata),\n    .eai_csr_rdata (eai_csr_rdata),\n  `endif//}\n    .tcm_cgstop              (tcm_cgstop),\n    .core_cgstop             (core_cgstop),\n    .tm_stop                 (tm_stop),\n\n    .pc_rtvec                (pc_rtvec),\n\n    .ifu_active              (core_ifu_active),\n    .exu_active              (core_exu_active),\n    .lsu_active              (core_lsu_active),\n    .biu_active              (core_biu_active),\n    .core_wfi                (core_wfi),\n\n    .core_mhartid            (core_mhartid),  \n    .dbg_irq_r               (dbg_irq_r),\n    .lcl_irq_r               (`E203_LIRQ_NUM'b0),// Not implemented now\n    .ext_irq_r               (ext_irq_r),\n    .sft_irq_r               (sft_irq_r),\n    .tmr_irq_r               (tmr_irq_r),\n    .evt_r                   (`E203_EVT_NUM'b0),// Not implemented now\n\n    .cmt_dpc                 (cmt_dpc        ),\n    .cmt_dpc_ena             (cmt_dpc_ena    ),\n    .cmt_dcause              (cmt_dcause     ),\n    .cmt_dcause_ena          (cmt_dcause_ena ),\n\n    .wr_dcsr_ena     (wr_dcsr_ena    ),\n    .wr_dpc_ena      (wr_dpc_ena     ),\n    .wr_dscratch_ena (wr_dscratch_ena),\n\n\n                                     \n    .wr_csr_nxt      (wr_csr_nxt    ),\n                                     \n    .dcsr_r          (dcsr_r         ),\n    .dpc_r           (dpc_r          ),\n    .dscratch_r      (dscratch_r     ),\n                                             \n    .dbg_mode                (dbg_mode       ),\n    .dbg_halt_r              (dbg_halt_r     ),\n    .dbg_step_r              (dbg_step_r     ),\n    .dbg_ebreakm_r           (dbg_ebreakm_r),\n    .dbg_stopcycle           (dbg_stopcycle),\n\n  `ifdef E203_HAS_ITCM //{\n    //.itcm_region_indic       (itcm_region_indic),\n    .itcm_region_indic       (`E203_ITCM_ADDR_BASE),\n  `endif//}\n   `ifdef E203_HAS_DTCM //{\n    //.dtcm_region_indic       (dtcm_region_indic),\n    .dtcm_region_indic       (`E203_DTCM_ADDR_BASE),\n  `endif//}\n\n  `ifdef E203_HAS_ITCM //{\n\n    .ifu2itcm_holdup         (ifu2itcm_holdup       ),\n    //.ifu2itcm_replay         (ifu2itcm_replay       ),\n\n    .ifu2itcm_icb_cmd_valid  (ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready  (ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr   (ifu2itcm_icb_cmd_addr ),\n    .ifu2itcm_icb_rsp_valid  (ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready  (ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err    (ifu2itcm_icb_rsp_err  ),\n    .ifu2itcm_icb_rsp_rdata  (ifu2itcm_icb_rsp_rdata),\n\n    .lsu2itcm_icb_cmd_valid  (lsu2itcm_icb_cmd_valid),\n    .lsu2itcm_icb_cmd_ready  (lsu2itcm_icb_cmd_ready),\n    .lsu2itcm_icb_cmd_addr   (lsu2itcm_icb_cmd_addr ),\n    .lsu2itcm_icb_cmd_read   (lsu2itcm_icb_cmd_read ),\n    .lsu2itcm_icb_cmd_wdata  (lsu2itcm_icb_cmd_wdata),\n    .lsu2itcm_icb_cmd_wmask  (lsu2itcm_icb_cmd_wmask),\n    .lsu2itcm_icb_cmd_lock   (lsu2itcm_icb_cmd_lock ),\n    .lsu2itcm_icb_cmd_excl   (lsu2itcm_icb_cmd_excl ),\n    .lsu2itcm_icb_cmd_size   (lsu2itcm_icb_cmd_size ),\n    \n    .lsu2itcm_icb_rsp_valid  (lsu2itcm_icb_rsp_valid),\n    .lsu2itcm_icb_rsp_ready  (lsu2itcm_icb_rsp_ready),\n    .lsu2itcm_icb_rsp_err    (lsu2itcm_icb_rsp_err  ),\n    .lsu2itcm_icb_rsp_excl_ok(1'b0),\n    .lsu2itcm_icb_rsp_rdata  (lsu2itcm_icb_rsp_rdata),\n\n  `endif//}\n\n  `ifdef E203_HAS_DTCM //{\n\n    .lsu2dtcm_icb_cmd_valid  (lsu2dtcm_icb_cmd_valid),\n    .lsu2dtcm_icb_cmd_ready  (lsu2dtcm_icb_cmd_ready),\n    .lsu2dtcm_icb_cmd_addr   (lsu2dtcm_icb_cmd_addr ),\n    .lsu2dtcm_icb_cmd_read   (lsu2dtcm_icb_cmd_read ),\n    .lsu2dtcm_icb_cmd_wdata  (lsu2dtcm_icb_cmd_wdata),\n    .lsu2dtcm_icb_cmd_wmask  (lsu2dtcm_icb_cmd_wmask),\n    .lsu2dtcm_icb_cmd_lock   (lsu2dtcm_icb_cmd_lock ),\n    .lsu2dtcm_icb_cmd_excl   (lsu2dtcm_icb_cmd_excl ),\n    .lsu2dtcm_icb_cmd_size   (lsu2dtcm_icb_cmd_size ),\n    \n    .lsu2dtcm_icb_rsp_valid  (lsu2dtcm_icb_rsp_valid),\n    .lsu2dtcm_icb_rsp_ready  (lsu2dtcm_icb_rsp_ready),\n    .lsu2dtcm_icb_rsp_err    (lsu2dtcm_icb_rsp_err  ),\n    .lsu2dtcm_icb_rsp_excl_ok(1'b0),\n    .lsu2dtcm_icb_rsp_rdata  (lsu2dtcm_icb_rsp_rdata),\n\n  `endif//}\n\n\n  \n    .ppi_icb_enable        (ppi_icb_enable),\n    .ppi_region_indic      (ppi_region_indic ),\n    .ppi_icb_cmd_valid     (ppi_icb"}
{"text": "_cmd_valid),\n    .ppi_icb_cmd_ready     (ppi_icb_cmd_ready),\n    .ppi_icb_cmd_addr      (ppi_icb_cmd_addr ),\n    .ppi_icb_cmd_read      (ppi_icb_cmd_read ),\n    .ppi_icb_cmd_wdata     (ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask     (ppi_icb_cmd_wmask),\n    .ppi_icb_cmd_lock      (ppi_icb_cmd_lock ),\n    .ppi_icb_cmd_excl      (ppi_icb_cmd_excl ),\n    .ppi_icb_cmd_size      (ppi_icb_cmd_size ),\n    \n    .ppi_icb_rsp_valid     (ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready     (ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err       (ppi_icb_rsp_err  ),\n    .ppi_icb_rsp_excl_ok   (ppi_icb_rsp_excl_ok),\n    .ppi_icb_rsp_rdata     (ppi_icb_rsp_rdata),\n\n    .plic_icb_enable        (plic_icb_enable),\n    .plic_region_indic      (plic_region_indic ),\n    .plic_icb_cmd_valid     (plic_icb_cmd_valid),\n    .plic_icb_cmd_ready     (plic_icb_cmd_ready),\n    .plic_icb_cmd_addr      (plic_icb_cmd_addr ),\n    .plic_icb_cmd_read      (plic_icb_cmd_read ),\n    .plic_icb_cmd_wdata     (plic_icb_cmd_wdata),\n    .plic_icb_cmd_wmask     (plic_icb_cmd_wmask),\n    .plic_icb_cmd_lock      (plic_icb_cmd_lock ),\n    .plic_icb_cmd_excl      (plic_icb_cmd_excl ),\n    .plic_icb_cmd_size      (plic_icb_cmd_size ),\n    \n    .plic_icb_rsp_valid     (plic_icb_rsp_valid),\n    .plic_icb_rsp_ready     (plic_icb_rsp_ready),\n    .plic_icb_rsp_err       (plic_icb_rsp_err  ),\n    .plic_icb_rsp_excl_ok   (plic_icb_rsp_excl_ok),\n    .plic_icb_rsp_rdata     (plic_icb_rsp_rdata),\n\n    .clint_icb_enable        (clint_icb_enable),\n    .clint_region_indic      (clint_region_indic ),\n    .clint_icb_cmd_valid     (clint_icb_cmd_valid),\n    .clint_icb_cmd_ready     (clint_icb_cmd_ready),\n    .clint_icb_cmd_addr      (clint_icb_cmd_addr ),\n    .clint_icb_cmd_read      (clint_icb_cmd_read ),\n    .clint_icb_cmd_wdata     (clint_icb_cmd_wdata),\n    .clint_icb_cmd_wmask     (clint_icb_cmd_wmask),\n    .clint_icb_cmd_lock      (clint_icb_cmd_lock ),\n    .clint_icb_cmd_excl      (clint_icb_cmd_excl ),\n    .clint_icb_cmd_size      (clint_icb_cmd_size ),\n    \n    .clint_icb_rsp_valid     (clint_icb_rsp_valid),\n    .clint_icb_rsp_ready     (clint_icb_rsp_ready),\n    .clint_icb_rsp_err       (clint_icb_rsp_err  ),\n    .clint_icb_rsp_excl_ok   (clint_icb_rsp_excl_ok),\n    .clint_icb_rsp_rdata     (clint_icb_rsp_rdata),\n\n  `ifdef E203_HAS_FIO //{\n    .fio_icb_enable        (fio_icb_enable),\n    .fio_region_indic      (fio_region_indic ),\n    .fio_icb_cmd_valid     (fio_icb_cmd_valid),\n    .fio_icb_cmd_ready     (fio_icb_cmd_ready),\n    .fio_icb_cmd_addr      (fio_icb_cmd_addr ),\n    .fio_icb_cmd_read      (fio_icb_cmd_read ),\n    .fio_icb_cmd_wdata     (fio_icb_cmd_wdata),\n    .fio_icb_cmd_wmask     (fio_icb_cmd_wmask),\n    .fio_icb_cmd_lock      (fio_icb_cmd_lock ),\n    .fio_icb_cmd_excl      (fio_icb_cmd_excl ),\n    .fio_icb_cmd_size      (fio_icb_cmd_size ),\n    \n    .fio_icb_rsp_valid     (fio_icb_rsp_valid),\n    .fio_icb_rsp_ready     (fio_icb_rsp_ready),\n    .fio_icb_rsp_err       (fio_icb_rsp_err  ),\n    .fio_icb_rsp_excl_ok   (fio_icb_rsp_excl_ok),\n    .fio_icb_rsp_rdata     (fio_icb_rsp_rdata),\n  `endif//}\n\n  `ifdef E203_HAS_MEM_ITF //{\n    .mem_icb_enable     (mem_icb_enable),\n    .mem_icb_cmd_valid  (mem_icb_cmd_valid),\n    .mem_icb_cmd_ready  (mem_icb_cmd_ready),\n    .mem_icb_cmd_addr   (mem_icb_cmd_addr ),\n    .mem_icb_cmd_read   (mem_icb_cmd_read ),\n    .mem_icb_cmd_wdata  (mem_icb_cmd_wdata),\n    .mem_icb_cmd_wmask  (mem_icb_cmd_wmask),\n    .mem_icb_cmd_lock   (mem_icb_cmd_lock ),\n    .mem_icb_cmd_excl   (mem_icb_cmd_excl ),\n    .mem_icb_cmd_size   (mem_icb_cmd_size ),\n    .mem_icb_cmd_burst  (mem_icb_cmd_burst ),\n    .mem_icb_cmd_beat   (mem_icb_cmd_beat ),\n    \n    .mem_icb_rsp_valid  (mem_icb_rsp_valid),\n    .mem_icb_rsp_ready  (mem_icb_rsp_ready),\n    .mem_icb_rsp_err    (mem_icb_rsp_err  ),\n    .mem_icb_rsp_excl_ok(mem_icb_rsp_excl_ok  ),\n    .mem_icb_rsp_rdata  (mem_icb_rsp_rdata),\n  `endif//}\n\n    .clk_aon           (clk_aon           ),\n    .clk_core_ifu      (clk_core_ifu      ),\n    .clk_core_exu      (clk_core_exu      ),\n    .clk_core_lsu      (clk_core_lsu      ),\n    .clk_core_biu      (clk_core_biu      ),\n    .test_mode         (test_mode),\n    .rst_n             (rst_core ) \n  );\n\n  `ifdef E203_HAS_ITCM //{\n  e203_itcm_ctrl u_e203_itcm_ctrl(\n    .tcm_cgstop   (tcm_cgstop),\n\n    .itcm_active  (itcm_active),\n\n    .ifu2itcm_icb_cmd_valid  (ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready  (ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr   (ifu2itcm_icb_cmd_addr ),\n    .ifu2itcm_icb_cmd_read   (1'b1 ),\n    .ifu2itcm_icb_cmd_wdata  ({`E203_ITCM_DATA_WIDTH{1'b0}}),\n    .ifu2itcm_icb_cmd_wmask  ({`E203_ITCM_DATA_WIDTH/8{1'b0}}),\n\n    .ifu2itcm_icb_rsp_valid  (ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready  (ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err    (ifu2itcm_icb_rsp_err  ),\n    .ifu2itcm_icb_rsp_rdata  (ifu2itcm_icb_rsp_rdata),\n\n    .ifu2itcm_holdup         (ifu2itcm_holdup       ),\n    //.ifu2itcm_replay         (ifu2itcm_replay       ),\n\n    .lsu2itcm_icb_cmd_valid  (lsu2itcm_icb_cmd_valid),\n    .lsu2itcm_icb_cmd_ready  (lsu2itcm_icb_cmd_ready),\n    .lsu2itcm_icb_cmd_addr   (lsu2itcm_icb_cmd_addr ),\n    .lsu2itcm_icb_cmd_read   (lsu2itcm_icb_cmd_read ),\n    .lsu2itcm_icb_cmd_wdata  (lsu2itcm_icb_cmd_wdata),\n    .lsu2itcm_icb_cmd_wmask  (lsu2itcm_icb_cmd_wmask),\n    \n    .lsu2itcm_icb_rsp_valid  (lsu2itcm_icb_rsp_valid),\n    .lsu2itcm_icb_rsp_ready  (lsu2itcm_icb_rsp_ready),\n    .lsu2itcm_icb_rsp_err    (lsu2itcm_icb_rsp_err  ),\n    .lsu2itcm_icb_rsp_rdata  (lsu2itcm_icb_rsp_rdata),\n\n    .itcm_ram_cs             (itcm_ram_cs  ),\n    .itcm_ram_we             (itcm_ram_we  ),\n    .itcm_ram_addr           (itcm_ram_addr), \n    .itcm_ram_wem            (itcm_ram_wem ),\n    .itcm_ram_din            (itcm_ram_din ),         \n    .itcm_ram_dout           (itcm_ram_dout),\n    .clk_itcm_ram            (clk_itcm_ram ),\n\n  `ifdef E203_HAS_ITCM_EXTITF //{\n    .ext2itcm_icb_cmd_valid  (ext2itcm_icb_cmd_valid),\n    .ext2itcm_icb_cmd_ready  (ext2itcm_icb_cmd_ready),\n    .ext2itcm_icb_cmd_addr   (ext2itcm_icb_cmd_addr ),\n    .ext2itcm_icb_cmd_read   (ext2itcm_icb_cmd_read ),\n    .ext2itcm_icb_cmd_wdata  (ext2itcm_icb_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask  (ext2itcm_icb_cmd_wmask),\n    \n    .ext2itcm_icb_rsp_valid  (ext2itcm_icb_rsp_valid),\n    .ext2itcm_icb_rsp_ready  (ext2itcm_icb_rsp_ready),\n    .ext2itcm_icb_rsp_err    (ext2itcm_icb_rsp_err  ),\n    .ext2itcm_icb_rsp_rdata  (ext2itcm_icb_rsp_rdata),\n  `endif//}\n\n    .test_mode               (test_mode),\n    .clk                     (clk_itcm),\n    .rst_n                   (rst_itcm) \n  );\n  `endif//}\n\n  `ifdef E203_HAS_DTCM //{\n  e203_dtcm_ctrl u_e203_dtcm_ctrl(\n    .tcm_cgstop   (tcm_cgstop),\n\n    .dtcm_active  (dtcm_active),\n\n    .lsu2dtcm_icb_cmd_valid  (lsu2dtcm_icb_cmd_valid),\n    .lsu2dtcm_icb_cmd_ready  (lsu2dtcm_icb_cmd_ready),\n    .lsu2dtcm_icb_cmd_addr   (lsu2dtcm_icb_cmd_addr ),\n    .lsu2dtcm_icb_cmd_read   (lsu2dtcm_icb_cmd_read ),\n    .lsu2dtcm_icb_cmd_wdata  (lsu2dtcm_icb_cmd_wdata),\n    .lsu2dtcm_icb_cmd_wmask  (lsu2dtcm_icb_cmd_wmask),\n    \n    .lsu2dtcm_icb_rsp_valid  (lsu2dtcm_icb_rsp_valid),\n    .lsu2dtcm_icb_rsp_ready  (lsu2dtcm_icb_rsp_ready),\n    .lsu2dtcm_icb_rsp_err    (lsu2dtcm_icb_rsp_err  ),\n    .lsu2dtcm_icb_rsp_rdata  (lsu2dtcm_icb_rsp_rdata),\n\n    .dtcm_ram_cs             (dtcm_ram_cs  ),\n    .dtcm_ram_we             (dtcm_ram_we  ),\n    .dtcm_ram_addr           (dtcm_ram_addr), \n    .dtcm_ram_wem            (dtcm_ram_wem ),\n    .dtcm_ram_din            (dtcm_ram_din ),         \n    .dtcm_ram_dout           (dtcm_ram_dout),\n    .clk_dtcm_ram            (clk_dtcm_ram ),\n\n  `ifdef E203_HAS_DTCM_EXTITF //{\n    .ext2dtcm_icb_cmd_valid  (ext2dtcm_icb_cmd_valid),\n    .ext2dtcm_icb_cmd_ready  (ext2dtcm_icb_cmd_ready),\n    .ext2dtcm_icb_cmd_addr   (ext2dtcm_icb_cmd_addr ),\n    .ext2dtcm_icb_cmd_read   (ext2dtcm_icb_cmd_read ),\n    .ext2dtcm_icb_cmd_wdata  (ext2dtcm_icb_cmd_wdata),\n    .ext2dtcm_icb_cmd_wmask  (ext2dtcm_icb_cmd_wmask),\n    \n    .ext2dtcm_icb_rsp_valid  (ext2dtcm_icb_rsp_valid),\n    .ext2dtcm_icb_rsp_ready  (ext2dtcm_icb_rsp_ready),\n    .ext2dtcm_icb_rsp_err    (ext2dtcm_icb_rsp_err  ),\n    .ext2dtcm_icb_rsp_rdata  (ext2dtcm_icb_rsp_rdata),\n  `endif//}\n\n    .test_mode               (test_mode),\n    .clk                     (clk_dtcm),\n    .rst_n                   (rst_dtcm) \n  );\n  `endif//}\n\n\n  assign inspect_dbg_irq       = dbg_irq_a;\n  assign inspect_mem_cmd_valid = mem_icb_cmd_valid;\n  assign inspect_mem_cmd_ready = mem_icb_cmd_ready;\n  assign inspect_mem_rsp_valid = mem_icb_rsp_valid;\n  assign inspect_mem_rsp_ready = mem_icb_rsp_ready;\n  assign inspect_core_clk   = clk;\n  assign core_csr_clk       = clk_core_exu;\n\nendmodule\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The CPU-TOP module to implement CPU and SRAMs\n//\n// ====================================================================\n\n`include \"e203_defines.v\"\n\nmodule e203_cpu_top(\n  output [`E203_PC_SIZE-1:0] inspect_pc,\n  output inspect_dbg_irq      ,\n  output inspect_mem_cmd_valid,\n  output inspect_mem_cmd_ready,\n  output inspect_mem_rsp_valid,\n  output inspect_mem_rsp_ready,\n  output inspect_core_clk     ,\n\n  output core_csr_clk         ,\n\n    \n\n    // If this signal is high, then indicate the Core have executed WFI instruction\n    //   and entered into the sleep state\n  output core_wfi,\n\n    // This signal is from our self-defined COUNTERSTOP (0xBFF) CSR's TM field\n    //   software can programe this CSR to turn off the MTIME timer to save power\n    // If this signal is high, then the MTIME timer from CLINT module will stop counting\n  output tm_stop,\n\n    // This signal can be used to indicate the PC value for the core after reset\n  input  [`E203_PC_SIZE-1:0] pc_rtvec,\n\n  ///////////////////////////////////////\n  // The interface to Debug Module: Begin\n  //\n    // The synced debug interrupt back to Debug module \n  output  dbg_irq_r,\n\n    // The debug mode CSR registers control interface from/to Debug module\n  output  [`E203_PC_SIZE-1:0] cmt_dpc,\n  output  cmt_dpc_ena,\n  output  [3-1:0] cmt_dcause,\n  output  cmt_dcause_ena,\n  output  wr_dcsr_ena    ,\n  output  wr_dpc_ena     ,\n  output  wr_dscratch_ena,\n  output  [32-1:0] wr_csr_nxt    ,\n  input  [32-1:0] dcsr_r    ,\n  input  [`E203_PC_SIZE-1:0] dpc_r     ,\n  input  [32-1:0] dscratch_r,\n\n    // The debug mode control signals from Debug Module\n  input  dbg_mode,\n  input  dbg_halt_r,\n  input  dbg_step_r,\n  input  dbg_ebreakm_r,\n  input  dbg_stopcycle,\n  input  dbg_irq_a,\n  // The interface to Debug Module: End\n\n\n    // This signal can be used to indicate the HART ID for this core\n  input  [`E203_HART_ID_W-1:0] core_mhartid,  \n\n    // The External Interrupt signal from PLIC\n  input  ext_irq_a,\n    // The Software Interrupt signal from CLINT\n  input  sft_irq_a,\n    // The Timer Interrupt signal from CLINT\n  input  tmr_irq_a,\n  \n  \n    // The PMU control signal from PMU to control the TCM Shutdown\n  input tcm_sd,\n    // The PMU control signal from PMU to control the TCM Deep-Sleep\n  input tcm_ds,\n    \n  `ifdef E203_HAS_ITCM_EXTITF //{\n  //////////////////////////////////////////////////////////////\n  // External interface (ICB) to access ITCM: Begin\n  //    * Bus cmd channel\n  input                          ext2itcm_icb_cmd_valid,\n  output                         ext2itcm_icb_cmd_ready,\n  input  [`E203_ITCM_ADDR_WIDTH-1:0]   ext2itcm_icb_cmd_addr, \n  input                          ext2itcm_icb_cmd_read, \n  input  [`E203_XLEN-1:0]        ext2itcm_icb_cmd_wdata,\n  input  [`E203_XLEN/8-1:0]      ext2itcm_icb_cmd_wmask,\n  //\n  //    * Bus RSP channel\n  output                         ext2itcm_icb_rsp_valid,\n  input                          ext2itcm_icb_rsp_ready,\n  output                         ext2itcm_icb_rsp_err  ,\n  output [`E203_XLEN-1:0]        ext2itcm_icb_rsp_rdata,\n  // External interface (ICB) to access ITCM: End\n  `endif//}\n\n  `ifdef E203_HAS_DTCM_EXTITF //{\n  //////////////////////////////////////////////////////////////\n  // External interface (ICB) to access DTCM: Start\n  //    * Bus cmd channel\n  input                          ext2dtcm_icb_cmd_valid,\n  output                         ext2dtcm_icb_cmd_ready,\n  input  [`E203_DTCM_ADDR_WIDTH-1:0]   ext2dtcm_icb_cmd_addr, \n  input                          ext2dtcm_icb_cmd_read, \n  input  [`E203_XLEN-1:0]        ext2dtcm_icb_cmd_wdata,\n  input  [`E203_XLEN/8-1:0]      ext2dtcm_icb_cmd_wmask,\n  //\n  //    * Bus RSP channel\n  output                         ext2dtcm_icb_rsp_valid,\n  input                          ext2dtcm_icb_rsp_ready,\n  output                         ext2dtcm_icb_rsp_err  ,\n  output [`E203_XLEN-1:0]        ext2dtcm_icb_rsp_rdata,\n  // External interface (ICB) to access DTCM: End\n  `endif//}\n\n  \n  //////////////////////////////////////////////////////////////\n  // The Private Peripheral Interface (ICB): Begin\n  //\n  //    * Bus cmd channel\n  output                         ppi_icb_cmd_valid,\n  input                          ppi_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   ppi_icb_cmd_addr, \n  output                         ppi_icb_cmd_read, \n  output [`E203_XLEN-1:0]        ppi_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      ppi_icb_cmd_wmask,\n  //\n  //    * Bus RSP channel\n  input                          ppi_icb_rsp_valid,\n  output                         ppi_icb_rsp_ready,\n  input                          ppi_icb_rsp_err  ,\n  input  [`E203_XLEN-1:0]        ppi_icb_rsp_rdata,\n  // The Private Peripheral Interface (ICB): End\n\n  //////////////////////////////////////////////////////////////\n  // The CLINT Interface (ICB): Begin\n  output                         clint_icb_cmd_valid,\n  input                          clint_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   clint_icb_cmd_addr, \n  output                         clint_icb_cmd_read, \n  output [`E203_XLEN-1:0]        clint_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      clint_icb_cmd_wmask,\n  //\n  //    * Bus RSP channel\n  input                          clint_icb_rsp_valid,\n  output                         clint_icb_rsp_ready,\n  input                          clint_icb_rsp_err  ,\n  input  [`E203_XLEN-1:0]        clint_icb_rsp_rdata,\n  // The CLINT Interface (ICB): End\n\n  //////////////////////////////////////////////////////////////\n  // The PLIC Interface (ICB): Begin\n  output                         plic_icb_cmd_valid,\n  input                          plic_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   plic_icb_cmd_addr, \n  output                         plic_icb_cmd_read, \n  output [`E203_XLEN-1:0]        plic_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      plic_icb_cmd_wmask,\n  //\n  //    * Bus RSP channel\n  input                          plic_icb_rsp_valid,\n  output                         plic_icb_rsp_ready,\n  input                          plic_icb_rsp_err  ,\n  input  [`E203_XLEN-1:0]        plic_icb_rsp_rdata,\n  // The PLIC Interface (ICB): End\n\n\n  //////////////////////////////////////////////////////////////\n  // The Fast IO Interface (ICB): Begin\n  //\n  //    * Bus cmd channel\n  output                         fio_icb_cmd_valid,\n  input                          fio_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   fio_icb_cmd_addr, \n  output                         fio_icb_cmd_read, \n  output [`E203_XLEN-1:0]        fio_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      fio_icb_cmd_wmask,\n  //\n  //    * Bus RSP channel\n  input                          fio_icb_rsp_valid,\n  output                         fio_icb_rsp_ready,\n  input                          fio_icb_rsp_err  ,\n  input  [`E203_XLEN-1:0]        fio_icb_rsp_rdata,\n  // The Fast IO Interface (ICB): End\n\n  //////////////////////////////////////////////////////////////\n  // The System Memory Interface (ICB): Begin\n  //\n  //    * Bus cmd channel\n  output                         mem_icb_cmd_valid,\n  input                          mem_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   mem_icb_cmd_addr, \n  output                         mem_icb_cmd_read, \n  output [`E203_XLEN-1:0]        mem_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      mem_icb_cmd_wmask,\n  //\n  //    * Bus RSP channel\n  input                          mem_icb_rsp_valid,\n  output                         mem_icb_rsp_ready,\n  input                          mem_icb_rsp_err  ,\n  input  [`E203_XLEN-1:0]        mem_icb_rsp_rdata,\n  // The System Memory Interface (ICB): End\n\n\n  // The test mode signal\n  input  test_mode,\n\n  // The Clock\n  input  clk,\n\n  // The low-level active reset signal, treated as async\n  input  rst_n\n  );\n\n  `ifdef E203_HAS_ITCM //{\n  wire  itcm_ls;\n\n  wire rst_itcm;\n\n  wire                          itcm_ram_cs  ;\n  wire                          itcm_ram_we  ;\n  wire  [`E203_ITCM_RAM_AW-1:0] itcm_ram_addr;\n  wire  [`E203_ITCM_RAM_MW-1:0] itcm_ram_wem ;\n  wire  [`E203_ITCM_RAM_DW-1:0] itcm_ram_din ;\n    `ifndef E203_HAS_LOCKSTEP//{\n  wire  [`E203_ITCM_RAM_DW-1:0] itcm_ram_dout;\n    `endif//}\n  wire                          clk_itcm_ram ;\n  `endif//}\n\n  \n  `ifdef E203_HAS_DTCM //{\n  wire  dtcm_ls;\n\n  wire rst_dtcm;\n  wire                          dtcm_ram_cs  ;\n  wire                          dtcm_ram_we  ;\n  wire  [`E203_DTCM_RAM_AW-1:0] dtcm_ram_addr;\n  wire  [`E203_DTCM_RAM_MW-1:0] dtcm_ram_wem ;\n  wire  [`E203_DTCM_RAM_DW-1:0] dtcm_ram_din ;\n    `ifndef E203_HAS_LOCKSTEP//{\n  wire  [`E203_DTCM_RAM_DW-1:0] dtcm_ram_dout;\n    `endif//}\n  wire                          clk_dtcm_ram ;\n  `endif//}\n\n\n`ifndef E203_HAS_LOCKSTEP//{\n  wire ppi_icb_rsp_excl_ok   ;\n  wire fio_icb_rsp_excl_ok   ;\n  wire plic_icb_rsp_excl_ok  ;\n  wire clint_icb_rsp_excl_ok ;\n  wire mem_icb_rsp_excl_ok   ;\n\n\n    `ifdef E203_HAS_PPI\n  wire ppi_icb_enable;\n  wire [`E203_ADDR_SIZE-1:0] ppi_region_indic;\n    `endif\n\n    `ifdef E203_HAS_PLIC\n  wire plic_icb_enable;\n  wire [`E203_ADDR_SIZE-1:0] plic_region_indic;\n    `endif\n\n    `ifdef E203_HAS_CLINT\n  wire clint_icb_enable;\n  wire [`E203_ADDR_SIZE-1:0] clint_region_indic;\n    `endif\n\n    `ifdef E203_HAS_MEM_ITF\n  wire mem_icb_enable;\n    `endif\n\n    `ifdef E203_HAS_FIO\n  wire fio_icb_enable;\n  wire [`E203_ADDR_SIZE-1:0] fio_region_indic;\n    `endif\n\n`endif//}\n\n    assign ppi_icb_rsp_excl_ok   = 1'b0;\n    assign fio_icb_rsp_excl_ok   = 1'b0;\n    assign plic_icb_rsp_excl_ok  = 1'b0;\n    assign clint_icb_rsp_excl_ok = 1'b0;\n    assign mem_icb_rsp_excl_ok   = 1'b0;\n\n\n    `ifdef E203_HAS_PPI\n    assign ppi_icb_enable = 1'b1;\n    assign ppi_region_indic = `E203_PPI_ADDR_BASE;\n    `else\n    assign ppi_icb_enable = 1'b0;\n    `endif\n\n    `ifdef E203_HAS_PLIC\n    assign plic_icb_enable = 1'b1;\n    assign plic_region_indic = `E203_PLIC_ADDR_BASE;\n    `else\n    assign plic_icb_enable = 1'b0;\n    `endif\n\n    `ifdef E203_HAS_CLINT\n    assign clint_icb_enable = 1'b1;\n    assign clint_region_indic = `E203_CLINT_ADDR_BASE;\n    `else\n    assign clint_icb_enable = 1'b0;\n    `endif\n\n    `ifdef E203_HAS_MEM_ITF\n    assign mem_icb_enable = 1'b1;\n    `else\n    assign mem_icb_enable = 1'b0;\n    `endif\n\n    `ifdef E203_HAS_FIO\n    assign fio_icb_enable = 1'b1;\n    assign fio_region_indic = `E203_FIO_ADDR_BASE;\n    `else\n    assign fio_icb_enable = 1'b0;\n    `endif\n\n  e203_cpu #(.MASTER(1)) u_e203_cpu(\n    .inspect_pc               (inspect_pc), \n    .inspect_dbg_irq          (inspect_dbg_irq      ),\n    .inspect_mem_cmd_valid    (inspect_mem_cmd_valid), \n    .inspect_mem_cmd_ready    (inspect_mem_cmd_ready), \n    .inspect_mem_rsp_valid    (inspect_mem_rsp_valid),\n    .inspect_mem_rsp_ready    (inspect_mem_rsp_ready),\n    .inspect_core_clk         (inspect_core_clk     ),\n\n\n    .core_csr_clk          (core_csr_clk      ),\n\n\n    .tm_stop (tm_stop),\n    .pc_rtvec(pc_rtvec),\n  `ifdef E203_HAS_ITCM //{\n    .itcm_ls (itcm_ls),\n  `endif//}\n  `ifdef E203_HAS_DTCM //{\n    .dtcm_ls (dtcm_ls),\n  `endif//}\n    .core_wfi        (core_wfi),\n    .dbg_irq_r       (dbg_irq_r      ),\n\n    .cmt_dpc         (cmt_dpc        ),\n    .cmt_dpc_ena     (cmt_dpc_ena    ),\n    .cmt_dcause      (cmt_dcause     ),\n    .cmt_dcause_ena  (cmt_dcause_ena ),\n\n    .wr_dcsr_ena     (wr_dcsr_ena    ),\n    .wr_dpc_ena      (wr_dpc_ena     ),\n    .wr_dscratch_ena (wr_dscratch_ena),\n\n\n                                     \n    .wr_csr_nxt      (wr_csr_nxt    ),\n                                     \n    .dcsr_r          (dcsr_r         ),\n    .dpc_r           (dpc_r          ),\n    .dscratch_r      (dscratch_r     ),\n\n    .dbg_mode        (dbg_mode),\n    .dbg_halt_r      (dbg_halt_r),\n    .dbg_step_r      (dbg_step_r),\n    .dbg_ebreakm_r   (dbg_ebreakm_r),\n    .dbg_stopcycle   (dbg_stopcycle),\n\n    .core_mhartid    (core_mhartid),  \n    .dbg_irq_a       (dbg_irq_a),\n    .ext_irq_a       (ext_irq_a),\n    .sft_irq_a       (sft_irq_a),\n    .tmr_irq_a       (tmr_irq_a),\n\n  `ifdef E203_HAS_ITCM_EXTITF //{\n    .ext2itcm_icb_cmd_valid  (ext2itcm_icb_cmd_valid),\n    .ext2itcm_icb_cmd_ready  (ext2itcm_icb_cmd_ready),\n    .ext2itcm_icb_cmd_addr   (ext2itcm_icb_cmd_addr ),\n    .ext2itcm_icb_cmd_read   (ext2itcm_icb_cmd_read ),\n    .ext2itcm_icb_cmd_wdata  (ext2itcm_icb_cmd_wdata),\n    .ext2itcm_icb_cmd_wmask  (ext2itcm_icb_cmd_wmask),\n    \n    .ext2itcm_icb_rsp_valid  (ext2itcm_icb_rsp_valid),\n    .ext2itcm_icb_rsp_ready  (ext2itcm_icb_rsp_ready),\n    .ext2itcm_icb_rsp_err    (ext2itcm_icb_rsp_err  ),\n    .ext2itcm_icb_rsp_rdata  (ext2itcm_icb_rsp_rdata),\n  `endif//}\n\n  `ifdef E203_HAS_DTCM_EXTITF //{\n    .ext2dtcm_icb_cmd_valid  (ext2dtcm_icb_cmd_valid),\n    .ext2dtcm_icb_cmd_ready  (ext2dtcm_icb_cmd_ready),\n    .ext2dtcm_icb_cmd_addr   (ext2dtcm_icb_cmd_addr ),\n    .ext2dtcm_icb_cmd_read   (ext2dtcm_icb_cmd_read ),\n    .ext2dtcm_icb_cmd_wdata  (ext2dtcm_icb_cmd_wdata),\n    .ext2dtcm_icb_cmd_wmask  (ext2dtcm_icb_cmd_wmask),\n    \n    .ext2dtcm_icb_rsp_valid  (ext2dtcm_icb_rsp_valid),\n    .ext2dtcm_icb_rsp_ready  (ext2dtcm_icb_rsp_ready),\n    .ext2dtcm_icb_rsp_err    (ext2dtcm_icb_rsp_err  ),\n    .ext2dtcm_icb_rsp_rdata  (ext2dtcm_icb_rsp_rdata),\n  `endif//}\n\n\n    .ppi_region_indic      (ppi_region_indic),\n    .ppi_icb_enable        (ppi_icb_enable),\n    .ppi_icb_cmd_valid     (ppi_icb_cmd_valid),\n    .ppi_icb_cmd_ready     (ppi_icb_cmd_ready),\n    .ppi_icb_cmd_addr      (ppi_icb_cmd_addr ),\n    .ppi_icb_cmd_read      (ppi_icb_cmd_read ),\n    .ppi_icb_cmd_wdata     (ppi_icb_cmd_wdata),\n    .ppi_icb_cmd_wmask     (ppi_icb_cmd_wmask),\n    .ppi_icb_cmd_lock      (),\n    .ppi_icb_cmd_excl      (),\n    .ppi_icb_cmd_size      (),\n    \n    .ppi_icb_rsp_valid     (ppi_icb_rsp_valid),\n    .ppi_icb_rsp_ready     (ppi_icb_rsp_ready),\n    .ppi_icb_rsp_err       (ppi_icb_rsp_err  ),\n    .ppi_icb_rsp_excl_ok   (ppi_icb_rsp_excl_ok  ),\n    .ppi_icb_rsp_rdata     (ppi_icb_rsp_rdata),\n\n    .clint_region_indic      (clint_region_indic),\n    .clint_icb_enable        (clint_icb_enable),\n    .clint_icb_cmd_valid     (clint_icb_cmd_valid),\n    .clint_icb_cmd_ready     (clint_icb_cmd_ready),\n    .clint_icb_cmd_addr      (clint_icb_cmd_addr ),\n    .clint_icb_cmd_read      (clint_icb_cmd_read ),\n    .clint_icb_cmd_wdata     (clint_icb_cmd_wdata),\n    .clint_icb_cmd_wmask     (clint_icb_cmd_wmask),\n    .clint_icb_cmd_lock      (),\n    .clint_icb_cmd_excl      (),\n    .clint_icb_cmd_size      (),\n    \n    .clint_icb_rsp_valid     (clint_icb_rsp_valid),\n    .clint_icb_rsp_ready     (clint_icb_rsp_ready),\n    .clint_icb_rsp_err       (clint_icb_rsp_err  ),\n    .clint_icb_rsp_excl_ok   (clint_icb_rsp_excl_ok  ),\n    .clint_icb_rsp_rdata     (clint_icb_rsp_rdata),\n\n    .plic_region_indic      (plic_region_indic),\n    .plic_icb_enable        (plic_icb_enable),\n    .plic_icb_cmd_valid     (plic_icb_cmd_valid),\n    .plic_icb_cmd_ready     (plic_icb_cmd_ready),\n    .plic_icb_cmd_addr      (plic_icb_cmd_addr ),\n    .plic_icb_cmd_read      (plic_icb_cmd_read ),\n    .plic_icb_cmd_wdata     (plic_icb_cmd_wdata),\n    .plic_icb_cmd_wmask     (plic_icb_cmd_wmask),\n    .plic_icb_cmd_lock      (),\n    .plic_icb_cmd_excl      (),\n    .plic_icb_cmd_size      (),\n    \n    .plic_icb_rsp_valid     (plic_icb_rsp_valid),\n    .plic_icb_rsp_ready     (plic_icb_rsp_ready),\n    .plic_icb_rsp_err       (plic_icb_rsp_err  ),\n    .plic_icb_rsp_excl_ok   (plic_icb_rsp_excl_ok  ),\n    .plic_icb_rsp_rdata     (plic_icb_rsp_rdata),\n\n\n  `ifdef E203_HAS_FIO //{\n    .fio_icb_enable        (fio_icb_enable),\n    .fio_region_indic      (fio_region_indic),\n    .fio_icb_cmd_valid     (fio_icb_cmd_valid),\n    .fio_icb_cmd_ready     (fio_icb_cmd_ready),\n    .fio_icb_cmd_addr      (fio_icb_cmd_addr ),\n    .fio_icb_cmd_read      (fio_icb_cmd_read ),\n    .fio_icb_cmd_wdata     (fio_icb_cmd_wdata),\n    .fio_icb_cmd_wmask     (fio_icb_cmd_wmask),\n    .fio_icb_cmd_lock      (),\n    .fio_icb_cmd_excl      (),\n    .fio_icb_cmd_size      (),\n    \n    .fio_icb_rsp_valid     (fio_icb_rsp_valid),\n    .fio_icb_rsp_ready     (fio_icb_rsp_ready),\n    .fio_icb_rsp_err       (fio_icb_rsp_err  ),\n    .fio_icb_rsp_excl_ok   (fio_icb_rsp_excl_ok  ),\n    .fio_icb_rsp_rdata     (fio_icb_rsp_rdata),\n  `endif//}\n\n  `ifdef E203_HAS_MEM_ITF //{\n    .mem_icb_enable     (mem_icb_enable),\n    .mem_icb_cmd_valid  (mem_icb_cmd_valid),\n    .mem_icb_cmd_ready  (mem_icb_cmd_ready),\n    .mem_icb_cmd_addr   (mem_icb_cmd_addr ),\n    .mem_icb_cmd_read   (mem_icb_cmd_read ),\n    .mem_icb_cmd_wdata  (mem_icb_cmd_wdata),\n    .mem_icb_cmd_wmask  (mem_icb_cmd_wmask),\n    .mem_icb_cmd_lock   (),\n    .mem_icb_cmd_excl   (),\n    .mem_icb_cmd_size   (),\n    .mem_icb_cmd_burst  (),\n    .mem_icb_cmd_beat   (),\n    \n    .mem_icb_rsp_valid  (mem_icb_rsp_valid),\n    .mem_icb_rsp_ready  (mem_icb_rsp_ready),\n    .mem_icb_rsp_err    (mem_icb_rsp_err  ),\n    .mem_icb_rsp_excl_ok(mem_icb_rsp_excl_ok  ),\n    .mem_icb_rsp_rdata  (mem_icb_rsp_rdata),\n  `endif//}\n\n  `ifdef E203_HAS_ITCM //{\n    .itcm_ram_cs   (itcm_ram_cs  ),\n    .itcm_ram_we   (itcm_ram_we  ),\n    .itcm_ram_addr (itcm_ram_addr), \n    .itcm_ram_wem  (itcm_ram_wem ),\n    .itcm_ram_din  (itcm_ram_din ),         \n    .itcm_ram_dout (itcm_ram_dout),\n    .clk_itcm_ram  (clk_itcm_ram ),  \n    .rst_itcm(rst_itcm),\n  `endif//}\n\n  `ifdef E203_HAS_DTCM //{\n    .dtcm_ram_cs   (dtcm_ram_cs  ),\n    .dtcm_ram_we   (dtcm_ram_we  ),\n    .dtcm_ram_addr (dtcm_ram_addr), \n    .dtcm_ram_wem  (dtcm_ram_wem ),\n    .dtcm_ram_din  (dtcm_ram_din ),         \n    .dtcm_ram_dout (dtcm_ram_dout),\n    .clk_dtcm_ram  (clk_dtcm_ram ),  \n    .rst_dtcm(rst_dtcm),\n  `endif//}\n\n    .test_mode     (test_mode), \n  `ifndef E203_HAS_LOCKSTEP//{\n  `endif//}\n    .rst_n         (rst_n),\n    .clk           (clk  ) \n\n  );\n\n  e203_srams u_e203_srams(\n  `ifdef E203_HAS_DTCM //{\n   .dtcm_ram_sd (tcm_sd),\n   .dtcm_ram_ds (tcm_ds),\n   .dtcm_ram_ls (dtcm_ls),\n\n   .dtcm_ram_cs   (dtcm_ram_cs  ),\n   .dtcm_ram_we   (dtcm_ram_we  ),\n   .dtcm_ram_addr (dtcm_ram_addr), \n   .dtcm_ram_wem  (dtcm_ram_wem ),\n   .dtcm_ram_din  (dtcm_ram_din ),         \n   .dtcm_ram_dout (dtcm_ram_dout),\n   .clk_dtcm_ram  (clk_dtcm_ram ),  \n   .rst_dtcm(rst_dtcm),\n  `endif//}\n\n  `ifdef E203_HAS_ITCM //{\n   .itcm_ram_sd (tcm_sd),\n   .itcm_ram_ds (tcm_ds),\n   .itcm_ram_ls (itcm_ls),\n\n   .itcm_ram_cs   (itcm_ram_cs  ),\n   .itcm_ram_we   (itcm_ram_we  ),\n   .itcm_ram_addr (itcm_ram_addr), \n   .itcm_ram_wem  (itcm_ram_wem ),\n   .itcm_ram_din  (itcm_ram_din ),         \n   .itcm_ram_dout (itcm_ram_dout),\n   .clk_itcm_ram  (clk_itcm_ram ),  \n   .rst_itcm(rst_itcm),\n  `endif//}\n   .test_mode (test_mode) \n  );\n\n "}
{"text": " \n\n\nendmodule\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The files to include all the macro defines\n//\n// ====================================================================\n`include \"config.v\"\n\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////// ISA relevant macro\n//\n`ifdef E203_CFG_ADDR_SIZE_IS_16\n   `define E203_ADDR_SIZE_IS_16\n   `define E203_PC_SIZE_IS_16\n   `define E203_ADDR_SIZE   16\n   `define E203_PC_SIZE     16\n`endif\n`ifdef E203_CFG_ADDR_SIZE_IS_32\n   `define E203_ADDR_SIZE_IS_32\n   `define E203_PC_SIZE_IS_32\n   `define E203_ADDR_SIZE   32\n   `define E203_PC_SIZE     32\n`endif\n`ifdef E203_CFG_ADDR_SIZE_IS_24\n   `define E203_ADDR_SIZE_IS_24\n   `define E203_PC_SIZE_IS_24\n   `define E203_ADDR_SIZE   24\n   `define E203_PC_SIZE     24\n`endif\n\n\n//`ifdef E203_CFG_SUPPORT_MSCRATCH\n   `define E203_SUPPORT_MSCRATCH \n//`endif\n//`ifdef E203_CFG_SUPPORT_MTVEC\n   `define E203_SUPPORT_MTVEC\n//`endif\n`ifdef E203_CFG_SUPPORT_MCYCLE_MINSTRET\n   `define E203_SUPPORT_MCYCLE_MINSTRET \n`endif\n\n\n`define E203_CFG_XLEN_IS_32\n`ifdef E203_CFG_XLEN_IS_32//{\n  `define E203_XLEN_IS_32 \n  `define E203_XLEN          32\n`endif//}\n\n`define E203_INSTR_SIZE    32\n\n//\n`define E203_RFIDX_WIDTH   5\n`ifdef E203_CFG_REGNUM_IS_32//{\n  `define E203_RFREG_NUM_IS_32 \n  `define E203_RFREG_NUM     32\n`endif//}\n`ifdef E203_CFG_REGNUM_IS_16//{\n  `define E203_RFREG_NUM_IS_16 \n  `define E203_RFREG_NUM     16\n`endif//}\n`ifdef E203_CFG_REGNUM_IS_8//{\n  `define E203_RFREG_NUM_IS_8 \n  `define E203_RFREG_NUM     8\n`endif//}\n`ifdef E203_CFG_REGNUM_IS_4//{\n  `define E203_RFREG_NUM_IS_4 \n  `define E203_RFREG_NUM     4\n`endif//}\n\n`ifdef E203_CFG_REGFILE_LATCH_BASED//{\n    `ifndef FPGA_SOURCE//{ Only If there is not on FPGA\n        `define E203_REGFILE_LATCH_BASED \n    `endif//}\n`endif//}\n\n`define E203_PPI_ADDR_BASE    `E203_CFG_PPI_ADDR_BASE  \n`define E203_PPI_BASE_REGION  `E203_CFG_PPI_BASE_REGION\n`define E203_CLINT_ADDR_BASE    `E203_CFG_CLINT_ADDR_BASE  \n`define E203_CLINT_BASE_REGION  `E203_CFG_CLINT_BASE_REGION\n`define E203_PLIC_ADDR_BASE    `E203_CFG_PLIC_ADDR_BASE  \n`define E203_PLIC_BASE_REGION  `E203_CFG_PLIC_BASE_REGION\n`define E203_FIO_ADDR_BASE    `E203_CFG_FIO_ADDR_BASE  \n`define E203_FIO_BASE_REGION  `E203_CFG_FIO_BASE_REGION\n                              \n`define E203_DTCM_ADDR_BASE   `E203_CFG_DTCM_ADDR_BASE \n`define E203_ITCM_ADDR_BASE   `E203_CFG_ITCM_ADDR_BASE \n                             \n\n\n\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////// Interface relevant macro\n//\n`define E203_HART_NUM   1\n`define E203_HART_ID_W  1\n`define E203_LIRQ_NUM   1\n`define E203_EVT_NUM    1\n\n`define E203_CFG_DEBUG_HAS_DM\n`ifdef E203_CFG_DEBUG_HAS_DM//{\n   `define E203_DEBUG_HAS_DM \n`endif//}\n\n`ifdef E203_CFG_IRQ_NEED_SYNC//{\n   `define E203_IRQ_NEED_SYNC \n`endif//}\n\n`ifdef E203_CFG_DEBUG_HAS_JTAG//{\n   `define E203_DEBUG_HAS_JTAG \n`endif//}\n\n`define E203_HAS_MEM_ITF\n`define E203_CFG_SYSMEM_DATA_WIDTH_IS_32\n`ifdef E203_CFG_SYSMEM_DATA_WIDTH_IS_32\n    `define E203_SYSMEM_DATA_WIDTH_IS_32\n    `define E203_SYSMEM_DATA_WIDTH   32\n`endif\n`ifdef E203_CFG_SYSMEM_DATA_WIDTH_IS_64\n    `define E203_SYSMEM_DATA_WIDTH_IS_64\n    `define E203_SYSMEM_DATA_WIDTH   64\n`endif\n\n//`ifdef E203_CFG_HAS_FIO//{\n//  `define E203_HAS_FIO \n//`endif//}\n\n`define E203_HAS_PPI \n`define E203_HAS_PLIC \n`define E203_HAS_CLINT \n`define E203_HAS_FIO \n\n`ifdef E203_CFG_HAS_ECC//{\n`endif//}\n`ifdef E203_CFG_HAS_EAI//{\n`endif//}\n\n`ifdef E203_CFG_HAS_LOCKSTEP//{\n`endif//}\n\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////// ITCM relevant macro\n//\n`ifdef E203_CFG_HAS_ITCM//{\n  `define E203_HAS_ITCM 1\n  `define E203_ITCM_ADDR_WIDTH  `E203_CFG_ITCM_ADDR_WIDTH\n  // The ITCM size is 2^addr_width bytes, and ITCM is 64bits wide (8 bytes)\n  //  so the DP is 2^addr_wdith/8\n  //  so the AW is addr_wdith - 3\n  `define E203_ITCM_RAM_DP      (1<<(`E203_CFG_ITCM_ADDR_WIDTH-3)) \n  `define E203_ITCM_RAM_AW          (`E203_CFG_ITCM_ADDR_WIDTH-3) \n  `define E203_ITCM_BASE_REGION  `E203_ADDR_SIZE-1:`E203_ITCM_ADDR_WIDTH\n  \n  `define E203_CFG_ITCM_DATA_WIDTH_IS_64\n  `ifdef E203_CFG_ITCM_DATA_WIDTH_IS_64\n    `define E203_ITCM_DATA_WIDTH_IS_64\n    `define E203_ITCM_DATA_WIDTH  64\n    `define E203_ITCM_WMSK_WIDTH  8\n  \n    `define E203_ITCM_RAM_ECC_DW  8\n    `define E203_ITCM_RAM_ECC_MW  1\n  `endif\n  `ifndef E203_HAS_ECC //{\n    `define E203_ITCM_RAM_DW      `E203_ITCM_DATA_WIDTH\n    `define E203_ITCM_RAM_MW      `E203_ITCM_WMSK_WIDTH\n    `define E203_ITCM_OUTS_NUM 1 // If no-ECC, ITCM is 1 cycle latency then only allow 1 oustanding for external agent\n  `endif//}\n\n  `define E203_HAS_ITCM_EXTITF\n`endif//}\n\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////// DTCM relevant macro\n//\n`ifdef E203_CFG_HAS_DTCM//{\n  `define E203_HAS_DTCM 1\n  `define E203_DTCM_ADDR_WIDTH  `E203_CFG_DTCM_ADDR_WIDTH\n  // The DTCM size is 2^addr_width bytes, and DTCM is 32bits wide (4 bytes)\n  //  so the DP is 2^addr_wdith/4\n  //  so the AW is addr_wdith - 2\n  `define E203_DTCM_RAM_DP      (1<<(`E203_CFG_DTCM_ADDR_WIDTH-2)) \n  `define E203_DTCM_RAM_AW          (`E203_CFG_DTCM_ADDR_WIDTH-2) \n  `define E203_DTCM_BASE_REGION `E203_ADDR_SIZE-1:`E203_DTCM_ADDR_WIDTH\n  \n    `define E203_DTCM_DATA_WIDTH  32\n    `define E203_DTCM_WMSK_WIDTH  4\n  \n    `define E203_DTCM_RAM_ECC_DW  7\n    `define E203_DTCM_RAM_ECC_MW  1\n\n  `ifndef E203_HAS_ECC //{\n    `define E203_DTCM_RAM_DW      `E203_DTCM_DATA_WIDTH\n    `define E203_DTCM_RAM_MW      `E203_DTCM_WMSK_WIDTH\n    `define E203_DTCM_OUTS_NUM 1 // If no-ECC, DTCM is 1 cycle latency then only allow 1 oustanding for external agent\n  `endif//}\n\n\n  `define E203_HAS_DTCM_EXTITF\n`endif//}\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////// MULDIV relevant macro\n//\n  `ifdef E203_CFG_SUPPORT_SHARE_MULDIV//{\n`define E203_SUPPORT_MULDIV\n`define E203_SUPPORT_SHARE_MULDIV\n  `endif//}\n\n  `ifdef E203_CFG_SUPPORT_INDEP_MULDIV//{\n`define E203_SUPPORT_MULDIV\n`define E203_SUPPORT_INDEP_MUL_1CYC\n  `endif//}\n\n\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////// ALU relevant macro\n//\n`define E203_MULDIV_ADDER_WIDTH 35\n\n  `ifdef E203_CFG_SUPPORT_SHARE_MULDIV\n`define E203_ALU_ADDER_WIDTH `E203_MULDIV_ADDER_WIDTH\n  `endif\n  `ifndef E203_CFG_SUPPORT_SHARE_MULDIV\n`define E203_ALU_ADDER_WIDTH (`E203_XLEN+1)\n  `endif\n\n\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////// MAS relevant macro\n//\n`define E203_ASYNC_FF_LEVELS   2\n//`ifdef E203_CFG_OITF_DEPTH_IS_1\n//  `define E203_OITF_DEPTH     1\n//  `define E203_OITF_DEPTH_IS_1\n//`endif\n // To cut down the loop between ALU write-back valid --> oitf_ret_ena --> oitf_ready ---> dispatch_ready --- > alu_i_valid\n //   we exclude the ret_ena from the ready signal\n //   so in order to back2back dispatch, we need at least 2 entries in OITF\n`define E203_CFG_OITF_DEPTH_IS_2\n`ifdef E203_CFG_SUPPORT_INDEP_MULDIV//{\n  `define E203_CFG_OITF_DEPTH_IS_4\n`endif//}\n`ifdef E203_CFG_HAS_FPU//{\n  `define E203_CFG_OITF_DEPTH_IS_4\n`endif//}\n\n`ifdef E203_CFG_OITF_DEPTH_IS_4\n  `define E203_OITF_DEPTH     4\n  `define E203_OITF_DEPTH_IS_4\n  `define E203_ITAG_WIDTH  2\n`elsif E203_CFG_OITF_DEPTH_IS_2\n  `define E203_OITF_DEPTH     2\n  `define E203_OITF_DEPTH_IS_2\n  `define E203_ITAG_WIDTH  1\n`endif\n\n`ifdef E203_CFG_HAS_FPU\n  `ifdef E203_CFG_FPU_DOUBLE\n    `define E203_FPU_DOUBLE     \n    `define E203_FLEN 64\n  `else\n    `define E203_FLEN 32\n  `endif\n`else\n    `define E203_FLEN 32\n`endif\n\n\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////// Decode relevant macro\n//\n  `define E203_DECINFO_GRP_WIDTH    3\n  `define E203_DECINFO_GRP_ALU      `E203_DECINFO_GRP_WIDTH'd0\n  `define E203_DECINFO_GRP_AGU      `E203_DECINFO_GRP_WIDTH'd1\n  `define E203_DECINFO_GRP_BJP      `E203_DECINFO_GRP_WIDTH'd2\n  `define E203_DECINFO_GRP_CSR      `E203_DECINFO_GRP_WIDTH'd3\n  `define E203_DECINFO_GRP_MULDIV   `E203_DECINFO_GRP_WIDTH'd4\n  `define E203_DECINFO_GRP_EAI      `E203_DECINFO_GRP_WIDTH'd5\n  `define E203_DECINFO_GRP_FPU      `E203_DECINFO_GRP_WIDTH'd6\n\n  `define E203_DECINFO_GRP_FPU_WIDTH    2\n  `define E203_DECINFO_GRP_FPU_FLSU     `E203_DECINFO_GRP_FPU_WIDTH'd0\n  `define E203_DECINFO_GRP_FPU_FMAC     `E203_DECINFO_GRP_FPU_WIDTH'd1\n  `define E203_DECINFO_GRP_FPU_FDIV     `E203_DECINFO_GRP_FPU_WIDTH'd2\n  `define E203_DECINFO_GRP_FPU_FMIS     `E203_DECINFO_GRP_FPU_WIDTH'd3\n\n      `define E203_DECINFO_GRP_LSB  0\n      `define E203_DECINFO_GRP_MSB  (`E203_DECINFO_GRP_LSB+`E203_DECINFO_GRP_WIDTH-1)\n  `define E203_DECINFO_GRP          `E203_DECINFO_GRP_MSB:`E203_DECINFO_GRP_LSB\n      `define E203_DECINFO_RV32_LSB  (`E203_DECINFO_GRP_MSB+1)\n      `define E203_DECINFO_RV32_MSB  (`E203_DECINFO_RV32_LSB+1-1)\n  `define E203_DECINFO_RV32          `E203_DECINFO_RV32_MSB:`E203_DECINFO_RV32_LSB\n\n  `define E203_DECINFO_SUBDECINFO_LSB    (`E203_DECINFO_RV32_MSB+1)\n\n  // ALU group\n      `define E203_DECINFO_ALU_ADD_LSB    `E203_DECINFO_SUBDECINFO_LSB\n      `define E203_DECINFO_ALU_ADD_MSB    (`E203_DECINFO_ALU_ADD_LSB+1-1)\n  `define E203_DECINFO_ALU_ADD    `E203_DECINFO_ALU_ADD_MSB :`E203_DECINFO_ALU_ADD_LSB \n      `define E203_DECINFO_ALU_SUB_LSB    (`E203_DECINFO_ALU_ADD_MSB+1)\n      `define E203_DECINFO_ALU_SUB_MSB    (`E203_DECINFO_ALU_SUB_LSB+1-1)\n  `define E203_DECINFO_ALU_SUB    `E203_DECINFO_ALU_SUB_MSB :`E203_DECINFO_ALU_SUB_LSB \n      `define E203_DECINFO_ALU_XOR_LSB    (`E203_DECINFO_ALU_SUB_MSB+1)\n      `define E203_DECINFO_ALU_XOR_MSB    (`E203_DECINFO_ALU_XOR_LSB+1-1)\n  `define E203_DECINFO_ALU_XOR    `E203_DECINFO_ALU_XOR_MSB :`E203_DECINFO_ALU_XOR_LSB \n      `define E203_DECINFO_ALU_SLL_LSB    (`E203_DECINFO_ALU_XOR_MSB+1)\n      `define E203_DECINFO_ALU_SLL_MSB    (`E203_DECINFO_ALU_SLL_LSB+1-1)\n  `define E203_DECINFO_ALU_SLL    `E203_DECINFO_ALU_SLL_MSB :`E203_DECINFO_ALU_SLL_LSB \n      `define E203_DECINFO_ALU_SRL_LSB    (`E203_DECINFO_ALU_SLL_MSB+1)\n      `define E203_DECINFO_ALU_SRL_MSB    (`E203_DECINFO_ALU_SRL_LSB+1-1)\n  `define E203_DECINFO_ALU_SRL    `E203_DECINFO_ALU_SRL_MSB :`E203_DECINFO_ALU_SRL_LSB \n      `define E203_DECINFO_ALU_SRA_LSB    (`E203_DECINFO_ALU_SRL_MSB+1)\n      `define E203_DECINFO_ALU_SRA_MSB    (`E203_DECINFO_ALU_SRA_LSB+1-1)\n  `define E203_DECINFO_ALU_SRA    `E203_DECINFO_ALU_SRA_MSB :`E203_DECINFO_ALU_SRA_LSB \n      `define E203_DECINFO_ALU_OR_LSB    (`E203_DECINFO_ALU_SRA_MSB+1)\n      `define E203_DECINFO_ALU_OR_MSB    (`E203_DECINFO_ALU_OR_LSB+1-1)\n  `define E203_DECINFO_ALU_OR     `E203_DECINFO_ALU_OR_MSB  :`E203_DECINFO_ALU_OR_LSB  \n      `define E203_DECINFO_ALU_AND_LSB    (`E203_DECINFO_ALU_OR_MSB+1)\n      `define E203_DECINFO_ALU_AND_MSB    (`E203_DECINFO_ALU_AND_LSB+1-1)\n  `define E203_DECINFO_ALU_AND    `E203_DECINFO_ALU_AND_MSB :`E203_DECINFO_ALU_AND_LSB \n      `define E203_DECINFO_ALU_SLT_LSB    (`E203_DECINFO_ALU_AND_MSB+1)\n      `define E203_DECINFO_ALU_SLT_MSB    (`E203_DECINFO_ALU_SLT_LSB+1-1)\n  `define E203_DECINFO_ALU_SLT    `E203_DECINFO_ALU_SLT_MSB :`E203_DECINFO_ALU_SLT_LSB \n      `define E203_DECINFO_ALU_SLTU_LSB    (`E203_DECINFO_ALU_SLT_MSB+1)\n      `define E203_DECINFO_ALU_SLTU_MSB    (`E203_DECINFO_ALU_SLTU_LSB+1-1)\n  `define E203_DECINFO_ALU_SLTU   `E203_DECINFO_ALU_SLTU_MSB:`E203_DECINFO_ALU_SLTU_LSB\n      `define E203_DECINFO_ALU_LUI_LSB    (`E203_DECINFO_ALU_SLTU_MSB+1)\n      `define E203_DECINFO_ALU_LUI_MSB    (`E203_DECINFO_ALU_LUI_LSB+1-1)\n  `define E203_DECINFO_ALU_LUI    `E203_DECINFO_ALU_LUI_MSB :`E203_DECINFO_ALU_LUI_LSB \n      `define E203_DECINFO_ALU_OP2IMM_LSB    (`E203_DECINFO_ALU_LUI_MSB+1)\n      `define E203_DECINFO_ALU_OP2IMM_MSB    (`E203_DECINFO_ALU_OP2IMM_LSB+1-1)\n  `define E203_DECINFO_ALU_OP2IMM    `E203_DECINFO_ALU_OP2IMM_MSB :`E203_DECINFO_ALU_OP2IMM_LSB \n      `define E203_DECINFO_ALU_OP1PC_LSB    (`E203_DECINFO_ALU_OP2IMM_MSB+1)\n      `define E203_DECINFO_ALU_OP1PC_MSB    (`E203_DECINFO_ALU_OP1PC_LSB+1-1)\n  `define E203_DECINFO_ALU_OP1PC    `E203_DECINFO_ALU_OP1PC_MSB :`E203_DECINFO_ALU_OP1PC_LSB \n      `define E203_DECINFO_ALU_NOP_LSB    (`E203_DECINFO_ALU_OP1PC_MSB+1)\n      `define E203_DECINFO_ALU_NOP_MSB    (`E203_DECINFO_ALU_NOP_LSB+1-1)\n  `define E203_DECINFO_ALU_NOP    `E203_DECINFO_ALU_NOP_MSB :`E203_DECINFO_ALU_NOP_LSB \n      `define E203_DECINFO_ALU_ECAL_LSB  (`E203_DECINFO_ALU_NOP_MSB+1)\n      `define E203_DECINFO_ALU_ECAL_MSB  (`E203_DECINFO_ALU_ECAL_LSB+1-1)\n  `define E203_DECINFO_ALU_ECAL   `E203_DECINFO_ALU_ECAL_MSB:`E203_DECINFO_ALU_ECAL_LSB \n      `define E203_DECINFO_ALU_EBRK_LSB  (`E203_DECINFO_ALU_ECAL_MSB+1)\n      `define E203_DECINFO_ALU_EBRK_MSB  (`E203_DECINFO_ALU_EBRK_LSB+1-1)\n  `define E203_DECINFO_ALU_EBRK   `E203_DECINFO_ALU_EBRK_MSB:`E203_DECINFO_ALU_EBRK_LSB \n      `define E203_DECINFO_ALU_WFI_LSB  (`E203_DECINFO_ALU_EBRK_MSB+1)\n      `define E203_DECINFO_ALU_WFI_MSB  (`E203_DECINFO_ALU_WFI_LSB+1-1)\n  `define E203_DECINFO_ALU_WFI   `E203_DECINFO_ALU_WFI_MSB:`E203_DECINFO_ALU_WFI_LSB \n\n  `define E203_DECINFO_ALU_WIDTH    (`E203_DECINFO_ALU_WFI_MSB+1)\n\n   //AGU group\n    `define E203_DECINFO_AGU_LOAD_LSB      `E203_DECINFO_SUBDECINFO_LSB\n    `define E203_DECINFO_AGU_LOAD_MSB      (`E203_DECINFO_AGU_LOAD_LSB+1-1)   \n  `define E203_DECINFO_AGU_LOAD      `E203_DECINFO_AGU_LOAD_MSB   :`E203_DECINFO_AGU_LOAD_LSB   \n    `define E203_DECINFO_AGU_STORE_LSB      (`E203_DECINFO_AGU_LOAD_MSB+1)\n    `define E203_DECINFO_AGU_STORE_MSB      (`E203_DECINFO_AGU_STORE_LSB+1-1)   \n  `define E203_DECINFO_AGU_STORE     `E203_DECINFO_AGU_STORE_MSB  :`E203_DECINFO_AGU_STORE_LSB  \n    `define E203_DECINFO_AGU_SIZE_LSB      (`E203_DECINFO_AGU_STORE_MSB+1)\n    `define E203_DECINFO_AGU_SIZE_MSB      (`E203_DECINFO_AGU_SIZE_LSB+2-1)   \n  `define E203_DECINFO_AGU_SIZE      `E203_DECINFO_AGU_SIZE_MSB   :`E203_DECINFO_AGU_SIZE_LSB   \n    `define E203_DECINFO_AGU_USIGN_LSB      (`E203_DECINFO_AGU_SIZE_MSB+1)\n    `define E203_DECINFO_AGU_USIGN_MSB      (`E203_DECINFO_AGU_USIGN_LSB+1-1)   \n  `define E203_DECINFO_AGU_USIGN     `E203_DECINFO_AGU_USIGN_MSB  :`E203_DECINFO_AGU_USIGN_LSB  \n    `define E203_DECINFO_AGU_EXCL_LSB      (`E203_DECINFO_AGU_USIGN_MSB+1)\n    `define E203_DECINFO_AGU_EXCL_MSB      (`E203_DECINFO_AGU_EXCL_LSB+1-1)   \n  `define E203_DECINFO_AGU_EXCL      `E203_DECINFO_AGU_EXCL_MSB   :`E203_DECINFO_AGU_EXCL_LSB   \n    `define E203_DECINFO_AGU_AMO_LSB      (`E203_DECINFO_AGU_EXCL_MSB+1)\n    `define E203_DECINFO_AGU_AMO_MSB      (`E203_DECINFO_AGU_AMO_LSB+1-1)   \n  `define E203_DECINFO_AGU_AMO       `E203_DECINFO_AGU_AMO_MSB    :`E203_DECINFO_AGU_AMO_LSB    \n    `define E203_DECINFO_AGU_AMOSWAP_LSB      (`E203_DECINFO_AGU_AMO_MSB+1)\n    `define E203_DECINFO_AGU_AMOSWAP_MSB      (`E203_DECINFO_AGU_AMOSWAP_LSB+1-1)   \n  `define E203_DECINFO_AGU_AMOSWAP   `E203_DECINFO_AGU_AMOSWAP_MSB:`E203_DECINFO_AGU_AMOSWAP_LSB\n    `define E203_DECINFO_AGU_AMOADD_LSB      (`E203_DECINFO_AGU_AMOSWAP_MSB+1)\n    `define E203_DECINFO_AGU_AMOADD_MSB      (`E203_DECINFO_AGU_AMOADD_LSB+1-1)   \n  `define E203_DECINFO_AGU_AMOADD    `E203_DECINFO_AGU_AMOADD_MSB :`E203_DECINFO_AGU_AMOADD_LSB \n    `define E203_DECINFO_AGU_AMOAND_LSB      (`E203_DECINFO_AGU_AMOADD_MSB+1)\n    `define E203_DECINFO_AGU_AMOAND_MSB      (`E203_DECINFO_AGU_AMOAND_LSB+1-1)   \n  `define E203_DECINFO_AGU_AMOAND    `E203_DECINFO_AGU_AMOAND_MSB :`E203_DECINFO_AGU_AMOAND_LSB \n    `define E203_DECINFO_AGU_AMOOR_LSB      (`E203_DECINFO_AGU_AMOAND_MSB+1)\n    `define E203_DECINFO_AGU_AMOOR_MSB      (`E203_DECINFO_AGU_AMOOR_LSB+1-1)   \n  `define E203_DECINFO_AGU_AMOOR     `E203_DECINFO_AGU_AMOOR_MSB  :`E203_DECINFO_AGU_AMOOR_LSB  \n    `define E203_DECINFO_AGU_AMOXOR_LSB      (`E203_DECINFO_AGU_AMOOR_MSB+1)\n    `define E203_DECINFO_AGU_AMOXOR_MSB      (`E203_DECINFO_AGU_AMOXOR_LSB+1-1)   \n  `define E203_DECINFO_AGU_AMOXOR    `E203_DECINFO_AGU_AMOXOR_MSB :`E203_DECINFO_AGU_AMOXOR_LSB \n    `define E203_DECINFO_AGU_AMOMAX_LSB      (`E203_DECINFO_AGU_AMOXOR_MSB+1)\n    `define E203_DECINFO_AGU_AMOMAX_MSB      (`E203_DECINFO_AGU_AMOMAX_LSB+1-1)   \n  `define E203_DECINFO_AGU_AMOMAX    `E203_DECINFO_AGU_AMOMAX_MSB :`E203_DECINFO_AGU_AMOMAX_LSB \n    `define E203_DECINFO_AGU_AMOMIN_LSB      (`E203_DECINFO_AGU_AMOMAX_MSB+1)\n    `define E203_DECINFO_AGU_AMOMIN_MSB      (`E203_DECINFO_AGU_AMOMIN_LSB+1-1)   \n  `define E203_DECINFO_AGU_AMOMIN    `E203_DECINFO_AGU_AMOMIN_MSB :`E203_DECINFO_AGU_AMOMIN_LSB \n    `define E203_DECINFO_AGU_AMOMAXU_LSB      (`E203_DECINFO_AGU_AMOMIN_MSB+1)\n    `define E203_DECINFO_AGU_AMOMAXU_MSB      (`E203_DECINFO_AGU_AMOMAXU_LSB+1-1)   \n  `define E203_DECINFO_AGU_AMOMAXU   `E203_DECINFO_AGU_AMOMAXU_MSB:`E203_DECINFO_AGU_AMOMAXU_LSB\n    `define E203_DECINFO_AGU_AMOMINU_LSB      (`E203_DECINFO_AGU_AMOMAXU_MSB+1)\n    `define E203_DECINFO_AGU_AMOMINU_MSB      (`E203_DECINFO_AGU_AMOMINU_LSB+1-1)   \n  `define E203_DECINFO_AGU_AMOMINU   `E203_DECINFO_AGU_AMOMINU_MSB:`E203_DECINFO_AGU_AMOMINU_LSB\n    `define E203_DECINFO_AGU_OP2IMM_LSB      (`E203_DECINFO_AGU_AMOMINU_MSB+1)\n    `define E203_DECINFO_AGU_OP2IMM_MSB      (`E203_DECINFO_AGU_OP2IMM_LSB+1-1)   \n  `define E203_DECINFO_AGU_OP2IMM   `E203_DECINFO_AGU_OP2IMM_MSB:`E203_DECINFO_AGU_OP2IMM_LSB\n\n  `define E203_DECINFO_AGU_WIDTH    (`E203_DECINFO_AGU_OP2IMM_MSB+1)\n\n  // Bxx group\n      `define E203_DECINFO_BJP_JUMP_LSB `E203_DECINFO_SUBDECINFO_LSB\n      `define E203_DECINFO_BJP_JUMP_MSB (`E203_DECINFO_BJP"}
{"text": "_JUMP_LSB+1-1)\n  `define E203_DECINFO_BJP_JUMP   `E203_DECINFO_BJP_JUMP_MSB :`E203_DECINFO_BJP_JUMP_LSB \n      `define E203_DECINFO_BJP_BPRDT_LSB (`E203_DECINFO_BJP_JUMP_MSB+1)\n      `define E203_DECINFO_BJP_BPRDT_MSB (`E203_DECINFO_BJP_BPRDT_LSB+1-1)\n  `define E203_DECINFO_BJP_BPRDT  `E203_DECINFO_BJP_BPRDT_MSB:`E203_DECINFO_BJP_BPRDT_LSB\n      `define E203_DECINFO_BJP_BEQ_LSB (`E203_DECINFO_BJP_BPRDT_MSB+1)\n      `define E203_DECINFO_BJP_BEQ_MSB (`E203_DECINFO_BJP_BEQ_LSB+1-1)\n  `define E203_DECINFO_BJP_BEQ    `E203_DECINFO_BJP_BEQ_MSB  :`E203_DECINFO_BJP_BEQ_LSB  \n      `define E203_DECINFO_BJP_BNE_LSB (`E203_DECINFO_BJP_BEQ_MSB+1)\n      `define E203_DECINFO_BJP_BNE_MSB (`E203_DECINFO_BJP_BNE_LSB+1-1)\n  `define E203_DECINFO_BJP_BNE    `E203_DECINFO_BJP_BNE_MSB  :`E203_DECINFO_BJP_BNE_LSB  \n      `define E203_DECINFO_BJP_BLT_LSB (`E203_DECINFO_BJP_BNE_MSB+1)\n      `define E203_DECINFO_BJP_BLT_MSB (`E203_DECINFO_BJP_BLT_LSB+1-1)\n  `define E203_DECINFO_BJP_BLT    `E203_DECINFO_BJP_BLT_MSB  :`E203_DECINFO_BJP_BLT_LSB  \n      `define E203_DECINFO_BJP_BGT_LSB (`E203_DECINFO_BJP_BLT_MSB+1)\n      `define E203_DECINFO_BJP_BGT_MSB (`E203_DECINFO_BJP_BGT_LSB+1-1)\n  `define E203_DECINFO_BJP_BGT    `E203_DECINFO_BJP_BGT_MSB  :`E203_DECINFO_BJP_BGT_LSB  \n      `define E203_DECINFO_BJP_BLTU_LSB (`E203_DECINFO_BJP_BGT_MSB+1)\n      `define E203_DECINFO_BJP_BLTU_MSB (`E203_DECINFO_BJP_BLTU_LSB+1-1)\n  `define E203_DECINFO_BJP_BLTU   `E203_DECINFO_BJP_BLTU_MSB :`E203_DECINFO_BJP_BLTU_LSB \n      `define E203_DECINFO_BJP_BGTU_LSB (`E203_DECINFO_BJP_BLTU_MSB+1)\n      `define E203_DECINFO_BJP_BGTU_MSB (`E203_DECINFO_BJP_BGTU_LSB+1-1)\n  `define E203_DECINFO_BJP_BGTU   `E203_DECINFO_BJP_BGTU_MSB :`E203_DECINFO_BJP_BGTU_LSB \n      `define E203_DECINFO_BJP_BXX_LSB  (`E203_DECINFO_BJP_BGTU_MSB+1)\n      `define E203_DECINFO_BJP_BXX_MSB  (`E203_DECINFO_BJP_BXX_LSB+1-1)\n  `define E203_DECINFO_BJP_BXX    `E203_DECINFO_BJP_BXX_MSB :`E203_DECINFO_BJP_BXX_LSB\n      `define E203_DECINFO_BJP_MRET_LSB  (`E203_DECINFO_BJP_BXX_MSB+1)\n      `define E203_DECINFO_BJP_MRET_MSB  (`E203_DECINFO_BJP_MRET_LSB+1-1)\n  `define E203_DECINFO_BJP_MRET    `E203_DECINFO_BJP_MRET_MSB :`E203_DECINFO_BJP_MRET_LSB\n      `define E203_DECINFO_BJP_DRET_LSB  (`E203_DECINFO_BJP_MRET_MSB+1)\n      `define E203_DECINFO_BJP_DRET_MSB  (`E203_DECINFO_BJP_DRET_LSB+1-1)\n  `define E203_DECINFO_BJP_DRET    `E203_DECINFO_BJP_DRET_MSB :`E203_DECINFO_BJP_DRET_LSB\n      `define E203_DECINFO_BJP_FENCE_LSB  (`E203_DECINFO_BJP_DRET_MSB+1)\n      `define E203_DECINFO_BJP_FENCE_MSB  (`E203_DECINFO_BJP_FENCE_LSB+1-1)\n  `define E203_DECINFO_BJP_FENCE    `E203_DECINFO_BJP_FENCE_MSB :`E203_DECINFO_BJP_FENCE_LSB\n      `define E203_DECINFO_BJP_FENCEI_LSB  (`E203_DECINFO_BJP_FENCE_MSB+1)\n      `define E203_DECINFO_BJP_FENCEI_MSB  (`E203_DECINFO_BJP_FENCEI_LSB+1-1)\n  `define E203_DECINFO_BJP_FENCEI    `E203_DECINFO_BJP_FENCEI_MSB :`E203_DECINFO_BJP_FENCEI_LSB\n\n`define E203_DECINFO_BJP_WIDTH  (`E203_DECINFO_BJP_FENCEI_MSB+1)\n\n\n  // CSR group\n      `define E203_DECINFO_CSR_CSRRW_LSB   `E203_DECINFO_SUBDECINFO_LSB\n      `define E203_DECINFO_CSR_CSRRW_MSB   (`E203_DECINFO_CSR_CSRRW_LSB+1-1)    \n  `define E203_DECINFO_CSR_CSRRW   `E203_DECINFO_CSR_CSRRW_MSB:`E203_DECINFO_CSR_CSRRW_LSB    \n      `define E203_DECINFO_CSR_CSRRS_LSB   (`E203_DECINFO_CSR_CSRRW_MSB+1)\n      `define E203_DECINFO_CSR_CSRRS_MSB   (`E203_DECINFO_CSR_CSRRS_LSB+1-1)    \n  `define E203_DECINFO_CSR_CSRRS   `E203_DECINFO_CSR_CSRRS_MSB:`E203_DECINFO_CSR_CSRRS_LSB \n      `define E203_DECINFO_CSR_CSRRC_LSB   (`E203_DECINFO_CSR_CSRRS_MSB+1)\n      `define E203_DECINFO_CSR_CSRRC_MSB   (`E203_DECINFO_CSR_CSRRC_LSB+1-1)    \n  `define E203_DECINFO_CSR_CSRRC   `E203_DECINFO_CSR_CSRRC_MSB:`E203_DECINFO_CSR_CSRRC_LSB \n      `define E203_DECINFO_CSR_RS1IMM_LSB  (`E203_DECINFO_CSR_CSRRC_MSB+1)\n      `define E203_DECINFO_CSR_RS1IMM_MSB   (`E203_DECINFO_CSR_RS1IMM_LSB+1-1)    \n  `define E203_DECINFO_CSR_RS1IMM  `E203_DECINFO_CSR_RS1IMM_MSB:`E203_DECINFO_CSR_RS1IMM_LSB\n      `define E203_DECINFO_CSR_ZIMMM_LSB   (`E203_DECINFO_CSR_RS1IMM_MSB+1)\n      `define E203_DECINFO_CSR_ZIMMM_MSB   (`E203_DECINFO_CSR_ZIMMM_LSB+5-1)    \n  `define E203_DECINFO_CSR_ZIMMM   `E203_DECINFO_CSR_ZIMMM_MSB:`E203_DECINFO_CSR_ZIMMM_LSB \n      `define E203_DECINFO_CSR_RS1IS0_LSB  (`E203_DECINFO_CSR_ZIMMM_MSB+1)\n      `define E203_DECINFO_CSR_RS1IS0_MSB  (`E203_DECINFO_CSR_RS1IS0_LSB+1-1)    \n  `define E203_DECINFO_CSR_RS1IS0  `E203_DECINFO_CSR_RS1IS0_MSB:`E203_DECINFO_CSR_RS1IS0_LSB\n      `define E203_DECINFO_CSR_CSRIDX_LSB  (`E203_DECINFO_CSR_RS1IS0_MSB+1)\n      `define E203_DECINFO_CSR_CSRIDX_MSB  (`E203_DECINFO_CSR_CSRIDX_LSB+12-1)    \n  `define E203_DECINFO_CSR_CSRIDX  `E203_DECINFO_CSR_CSRIDX_MSB:`E203_DECINFO_CSR_CSRIDX_LSB\n\n`define E203_DECINFO_CSR_WIDTH  (`E203_DECINFO_CSR_CSRIDX_MSB+1)\n\n  // EAI group\n      `define E203_DECINFO_EAI_INSTR_LSB   `E203_DECINFO_SUBDECINFO_LSB\n      `define E203_DECINFO_EAI_INSTR_MSB   (`E203_DECINFO_EAI_INSTR_LSB+27-1)    \n  `define E203_DECINFO_EAI_INSTR   `E203_DECINFO_EAI_INSTR_MSB:`E203_DECINFO_EAI_INSTR_LSB    \n\n`define E203_DECINFO_EAI_WIDTH  (`E203_DECINFO_EAI_INSTR_MSB+1)\n\n      `define E203_DECINFO_FPU_GRP_LSB   `E203_DECINFO_SUBDECINFO_LSB\n      `define E203_DECINFO_FPU_GRP_MSB   (`E203_DECINFO_FPU_GRP_LSB+`E203_DECINFO_GRP_FPU_WIDTH-1)    \n  `define E203_DECINFO_FPU_GRP   `E203_DECINFO_FPU_GRP_MSB:`E203_DECINFO_FPU_GRP_LSB    \n      `define E203_DECINFO_FPU_RM_LSB   (`E203_DECINFO_FPU_GRP_MSB+1)\n      `define E203_DECINFO_FPU_RM_MSB   (`E203_DECINFO_FPU_RM_LSB+3-1)    \n  `define E203_DECINFO_FPU_RM   `E203_DECINFO_FPU_RM_MSB:`E203_DECINFO_FPU_RM_LSB    \n      `define E203_DECINFO_FPU_USERM_LSB   (`E203_DECINFO_FPU_RM_MSB+1)\n      `define E203_DECINFO_FPU_USERM_MSB   (`E203_DECINFO_FPU_USERM_LSB+1-1)    \n  `define E203_DECINFO_FPU_USERM   `E203_DECINFO_FPU_USERM_MSB:`E203_DECINFO_FPU_USERM_LSB    \n\n  // FLSU group\n      `define E203_DECINFO_FLSU_LOAD_LSB   (`E203_DECINFO_FPU_USERM_MSB+1)\n      `define E203_DECINFO_FLSU_LOAD_MSB   (`E203_DECINFO_FLSU_LOAD_LSB+1-1)    \n  `define E203_DECINFO_FLSU_LOAD   `E203_DECINFO_FLSU_LOAD_MSB:`E203_DECINFO_FLSU_LOAD_LSB \n      `define E203_DECINFO_FLSU_STORE_LSB   (`E203_DECINFO_FLSU_LOAD_MSB+1)\n      `define E203_DECINFO_FLSU_STORE_MSB   (`E203_DECINFO_FLSU_STORE_LSB+1-1)    \n  `define E203_DECINFO_FLSU_STORE   `E203_DECINFO_FLSU_STORE_MSB:`E203_DECINFO_FLSU_STORE_LSB \n      `define E203_DECINFO_FLSU_DOUBLE_LSB  (`E203_DECINFO_FLSU_STORE_MSB+1)\n      `define E203_DECINFO_FLSU_DOUBLE_MSB   (`E203_DECINFO_FLSU_DOUBLE_LSB+1-1)    \n  `define E203_DECINFO_FLSU_DOUBLE  `E203_DECINFO_FLSU_DOUBLE_MSB:`E203_DECINFO_FLSU_DOUBLE_LSB\n      `define E203_DECINFO_FLSU_OP2IMM_LSB   (`E203_DECINFO_FLSU_DOUBLE_MSB+1)\n      `define E203_DECINFO_FLSU_OP2IMM_MSB   (`E203_DECINFO_FLSU_OP2IMM_LSB+1-1)    \n  `define E203_DECINFO_FLSU_OP2IMM   `E203_DECINFO_FLSU_OP2IMM_MSB:`E203_DECINFO_FLSU_OP2IMM_LSB \n\n`define E203_DECINFO_FLSU_WIDTH  (`E203_DECINFO_FLSU_OP2IMM_MSB+1)\n\n  // FDIV group\n      `define E203_DECINFO_FDIV_DIV_LSB   (`E203_DECINFO_FPU_USERM_MSB+1)\n      `define E203_DECINFO_FDIV_DIV_MSB   (`E203_DECINFO_FDIV_DIV_LSB+1-1)    \n  `define E203_DECINFO_FDIV_DIV   `E203_DECINFO_FDIV_DIV_MSB:`E203_DECINFO_FDIV_DIV_LSB \n      `define E203_DECINFO_FDIV_SQRT_LSB   (`E203_DECINFO_FDIV_DIV_MSB+1)\n      `define E203_DECINFO_FDIV_SQRT_MSB   (`E203_DECINFO_FDIV_SQRT_LSB+1-1)    \n  `define E203_DECINFO_FDIV_SQRT   `E203_DECINFO_FDIV_SQRT_MSB:`E203_DECINFO_FDIV_SQRT_LSB \n      `define E203_DECINFO_FDIV_DOUBLE_LSB  (`E203_DECINFO_FDIV_SQRT_MSB+1)\n      `define E203_DECINFO_FDIV_DOUBLE_MSB   (`E203_DECINFO_FDIV_DOUBLE_LSB+1-1)    \n  `define E203_DECINFO_FDIV_DOUBLE  `E203_DECINFO_FDIV_DOUBLE_MSB:`E203_DECINFO_FDIV_DOUBLE_LSB\n\n`define E203_DECINFO_FDIV_WIDTH  (`E203_DECINFO_FDIV_DOUBLE_MSB+1)\n\n  // FMIS group\n      `define E203_DECINFO_FMIS_FSGNJ_LSB   (`E203_DECINFO_FPU_USERM_MSB+1)\n      `define E203_DECINFO_FMIS_FSGNJ_MSB   (`E203_DECINFO_FMIS_FSGNJ_LSB+1-1)    \n  `define E203_DECINFO_FMIS_FSGNJ   `E203_DECINFO_FMIS_FSGNJ_MSB:`E203_DECINFO_FMIS_FSGNJ_LSB \n      `define E203_DECINFO_FMIS_FSGNJN_LSB   (`E203_DECINFO_FMIS_FSGNJ_MSB+1)\n      `define E203_DECINFO_FMIS_FSGNJN_MSB   (`E203_DECINFO_FMIS_FSGNJN_LSB+1-1)    \n  `define E203_DECINFO_FMIS_FSGNJN   `E203_DECINFO_FMIS_FSGNJN_MSB:`E203_DECINFO_FMIS_FSGNJN_LSB \n      `define E203_DECINFO_FMIS_FSGNJX_LSB  (`E203_DECINFO_FMIS_FSGNJN_MSB+1)\n      `define E203_DECINFO_FMIS_FSGNJX_MSB   (`E203_DECINFO_FMIS_FSGNJX_LSB+1-1)    \n  `define E203_DECINFO_FMIS_FSGNJX  `E203_DECINFO_FMIS_FSGNJX_MSB:`E203_DECINFO_FMIS_FSGNJX_LSB\n      `define E203_DECINFO_FMIS_FMVXW_LSB  (`E203_DECINFO_FMIS_FSGNJX_MSB+1)\n      `define E203_DECINFO_FMIS_FMVXW_MSB   (`E203_DECINFO_FMIS_FMVXW_LSB+1-1)    \n  `define E203_DECINFO_FMIS_FMVXW  `E203_DECINFO_FMIS_FMVXW_MSB:`E203_DECINFO_FMIS_FMVXW_LSB\n      `define E203_DECINFO_FMIS_FCLASS_LSB  (`E203_DECINFO_FMIS_FMVXW_MSB+1)\n      `define E203_DECINFO_FMIS_FCLASS_MSB   (`E203_DECINFO_FMIS_FCLASS_LSB+1-1)    \n  `define E203_DECINFO_FMIS_FCLASS  `E203_DECINFO_FMIS_FCLASS_MSB:`E203_DECINFO_FMIS_FCLASS_LSB\n      `define E203_DECINFO_FMIS_FMVWX_LSB  (`E203_DECINFO_FMIS_FCLASS_MSB+1)\n      `define E203_DECINFO_FMIS_FMVWX_MSB   (`E203_DECINFO_FMIS_FMVWX_LSB+1-1)    \n  `define E203_DECINFO_FMIS_FMVWX  `E203_DECINFO_FMIS_FMVWX_MSB:`E203_DECINFO_FMIS_FMVWX_LSB\n      `define E203_DECINFO_FMIS_CVTWS_LSB  (`E203_DECINFO_FMIS_FMVWX_MSB+1)\n      `define E203_DECINFO_FMIS_CVTWS_MSB   (`E203_DECINFO_FMIS_CVTWS_LSB+1-1)    \n  `define E203_DECINFO_FMIS_CVTWS  `E203_DECINFO_FMIS_CVTWS_MSB:`E203_DECINFO_FMIS_CVTWS_LSB\n      `define E203_DECINFO_FMIS_CVTWUS_LSB  (`E203_DECINFO_FMIS_CVTWS_MSB+1)\n      `define E203_DECINFO_FMIS_CVTWUS_MSB   (`E203_DECINFO_FMIS_CVTWUS_LSB+1-1)    \n  `define E203_DECINFO_FMIS_CVTWUS  `E203_DECINFO_FMIS_CVTWUS_MSB:`E203_DECINFO_FMIS_CVTWUS_LSB\n      `define E203_DECINFO_FMIS_CVTSW_LSB  (`E203_DECINFO_FMIS_CVTWUS_MSB+1)\n      `define E203_DECINFO_FMIS_CVTSW_MSB   (`E203_DECINFO_FMIS_CVTSW_LSB+1-1)    \n  `define E203_DECINFO_FMIS_CVTSW  `E203_DECINFO_FMIS_CVTSW_MSB:`E203_DECINFO_FMIS_CVTSW_LSB\n      `define E203_DECINFO_FMIS_CVTSWU_LSB  (`E203_DECINFO_FMIS_CVTSW_MSB+1)\n      `define E203_DECINFO_FMIS_CVTSWU_MSB   (`E203_DECINFO_FMIS_CVTSWU_LSB+1-1)    \n  `define E203_DECINFO_FMIS_CVTSWU  `E203_DECINFO_FMIS_CVTSWU_MSB:`E203_DECINFO_FMIS_CVTSWU_LSB\n      `define E203_DECINFO_FMIS_CVTSD_LSB  (`E203_DECINFO_FMIS_CVTSWU_MSB+1)\n      `define E203_DECINFO_FMIS_CVTSD_MSB   (`E203_DECINFO_FMIS_CVTSD_LSB+1-1)    \n  `define E203_DECINFO_FMIS_CVTSD  `E203_DECINFO_FMIS_CVTSD_MSB:`E203_DECINFO_FMIS_CVTSD_LSB\n      `define E203_DECINFO_FMIS_CVTDS_LSB  (`E203_DECINFO_FMIS_CVTSD_MSB+1)\n      `define E203_DECINFO_FMIS_CVTDS_MSB   (`E203_DECINFO_FMIS_CVTDS_LSB+1-1)    \n  `define E203_DECINFO_FMIS_CVTDS  `E203_DECINFO_FMIS_CVTDS_MSB:`E203_DECINFO_FMIS_CVTDS_LSB\n      `define E203_DECINFO_FMIS_CVTWD_LSB  (`E203_DECINFO_FMIS_CVTDS_MSB+1)\n      `define E203_DECINFO_FMIS_CVTWD_MSB   (`E203_DECINFO_FMIS_CVTWD_LSB+1-1)    \n  `define E203_DECINFO_FMIS_CVTWD  `E203_DECINFO_FMIS_CVTWD_MSB:`E203_DECINFO_FMIS_CVTWD_LSB\n      `define E203_DECINFO_FMIS_CVTWUD_LSB  (`E203_DECINFO_FMIS_CVTWD_MSB+1)\n      `define E203_DECINFO_FMIS_CVTWUD_MSB   (`E203_DECINFO_FMIS_CVTWUD_LSB+1-1)    \n  `define E203_DECINFO_FMIS_CVTWUD  `E203_DECINFO_FMIS_CVTWUD_MSB:`E203_DECINFO_FMIS_CVTWUD_LSB\n      `define E203_DECINFO_FMIS_CVTDW_LSB  (`E203_DECINFO_FMIS_CVTWUD_MSB+1)\n      `define E203_DECINFO_FMIS_CVTDW_MSB   (`E203_DECINFO_FMIS_CVTDW_LSB+1-1)    \n  `define E203_DECINFO_FMIS_CVTDW  `E203_DECINFO_FMIS_CVTDW_MSB:`E203_DECINFO_FMIS_CVTDW_LSB\n      `define E203_DECINFO_FMIS_CVTDWU_LSB  (`E203_DECINFO_FMIS_CVTDW_MSB+1)\n      `define E203_DECINFO_FMIS_CVTDWU_MSB   (`E203_DECINFO_FMIS_CVTDWU_LSB+1-1)    \n  `define E203_DECINFO_FMIS_CVTDWU  `E203_DECINFO_FMIS_CVTDWU_MSB:`E203_DECINFO_FMIS_CVTDWU_LSB\n      `define E203_DECINFO_FMIS_DOUBLE_LSB  (`E203_DECINFO_FMIS_CVTDWU_MSB+1)\n      `define E203_DECINFO_FMIS_DOUBLE_MSB   (`E203_DECINFO_FMIS_DOUBLE_LSB+1-1)    \n  `define E203_DECINFO_FMIS_DOUBLE  `E203_DECINFO_FMIS_DOUBLE_MSB:`E203_DECINFO_FMIS_DOUBLE_LSB\n\n`define E203_DECINFO_FMIS_WIDTH  (`E203_DECINFO_FMIS_DOUBLE_MSB+1)\n\n\n\n  // FMAC group\n      `define E203_DECINFO_FMAC_FMADD_LSB   (`E203_DECINFO_FPU_USERM_MSB+1)\n      `define E203_DECINFO_FMAC_FMADD_MSB   (`E203_DECINFO_FMAC_FMADD_LSB+1-1)    \n  `define E203_DECINFO_FMAC_FMADD   `E203_DECINFO_FMAC_FMADD_MSB:`E203_DECINFO_FMAC_FMADD_LSB \n      `define E203_DECINFO_FMAC_FMSUB_LSB   (`E203_DECINFO_FMAC_FMADD_MSB+1)\n      `define E203_DECINFO_FMAC_FMSUB_MSB   (`E203_DECINFO_FMAC_FMSUB_LSB+1-1)    \n  `define E203_DECINFO_FMAC_FMSUB   `E203_DECINFO_FMAC_FMSUB_MSB:`E203_DECINFO_FMAC_FMSUB_LSB \n      `define E203_DECINFO_FMAC_FNMSUB_LSB  (`E203_DECINFO_FMAC_FMSUB_MSB+1)\n      `define E203_DECINFO_FMAC_FNMSUB_MSB   (`E203_DECINFO_FMAC_FNMSUB_LSB+1-1)    \n  `define E203_DECINFO_FMAC_FNMSUB  `E203_DECINFO_FMAC_FNMSUB_MSB:`E203_DECINFO_FMAC_FNMSUB_LSB\n      `define E203_DECINFO_FMAC_FNMADD_LSB  (`E203_DECINFO_FMAC_FNMSUB_MSB+1)\n      `define E203_DECINFO_FMAC_FNMADD_MSB   (`E203_DECINFO_FMAC_FNMADD_LSB+1-1)    \n  `define E203_DECINFO_FMAC_FNMADD  `E203_DECINFO_FMAC_FNMADD_MSB:`E203_DECINFO_FMAC_FNMADD_LSB\n      `define E203_DECINFO_FMAC_FADD_LSB  (`E203_DECINFO_FMAC_FNMADD_MSB+1)\n      `define E203_DECINFO_FMAC_FADD_MSB   (`E203_DECINFO_FMAC_FADD_LSB+1-1)    \n  `define E203_DECINFO_FMAC_FADD  `E203_DECINFO_FMAC_FADD_MSB:`E203_DECINFO_FMAC_FADD_LSB\n      `define E203_DECINFO_FMAC_FSUB_LSB  (`E203_DECINFO_FMAC_FADD_MSB+1)\n      `define E203_DECINFO_FMAC_FSUB_MSB   (`E203_DECINFO_FMAC_FSUB_LSB+1-1)    \n  `define E203_DECINFO_FMAC_FSUB  `E203_DECINFO_FMAC_FSUB_MSB:`E203_DECINFO_FMAC_FSUB_LSB\n      `define E203_DECINFO_FMAC_FMUL_LSB  (`E203_DECINFO_FMAC_FSUB_MSB+1)\n      `define E203_DECINFO_FMAC_FMUL_MSB   (`E203_DECINFO_FMAC_FMUL_LSB+1-1)    \n  `define E203_DECINFO_FMAC_FMUL  `E203_DECINFO_FMAC_FMUL_MSB:`E203_DECINFO_FMAC_FMUL_LSB\n      `define E203_DECINFO_FMAC_FMIN_LSB  (`E203_DECINFO_FMAC_FMUL_MSB+1)\n      `define E203_DECINFO_FMAC_FMIN_MSB   (`E203_DECINFO_FMAC_FMIN_LSB+1-1)    \n  `define E203_DECINFO_FMAC_FMIN  `E203_DECINFO_FMAC_FMIN_MSB:`E203_DECINFO_FMAC_FMIN_LSB\n      `define E203_DECINFO_FMAC_FMAX_LSB  (`E203_DECINFO_FMAC_FMIN_MSB+1)\n      `define E203_DECINFO_FMAC_FMAX_MSB   (`E203_DECINFO_FMAC_FMAX_LSB+1-1)    \n  `define E203_DECINFO_FMAC_FMAX  `E203_DECINFO_FMAC_FMAX_MSB:`E203_DECINFO_FMAC_FMAX_LSB\n      `define E203_DECINFO_FMAC_FEQ_LSB  (`E203_DECINFO_FMAC_FMAX_MSB+1)\n      `define E203_DECINFO_FMAC_FEQ_MSB   (`E203_DECINFO_FMAC_FEQ_LSB+1-1)    \n  `define E203_DECINFO_FMAC_FEQ  `E203_DECINFO_FMAC_FEQ_MSB:`E203_DECINFO_FMAC_FEQ_LSB\n      `define E203_DECINFO_FMAC_FLT_LSB  (`E203_DECINFO_FMAC_FEQ_MSB+1)\n      `define E203_DECINFO_FMAC_FLT_MSB   (`E203_DECINFO_FMAC_FLT_LSB+1-1)    \n  `define E203_DECINFO_FMAC_FLT  `E203_DECINFO_FMAC_FLT_MSB:`E203_DECINFO_FMAC_FLT_LSB\n      `define E203_DECINFO_FMAC_FLE_LSB  (`E203_DECINFO_FMAC_FLT_MSB+1)\n      `define E203_DECINFO_FMAC_FLE_MSB   (`E203_DECINFO_FMAC_FLE_LSB+1-1)    \n  `define E203_DECINFO_FMAC_FLE  `E203_DECINFO_FMAC_FLE_MSB:`E203_DECINFO_FMAC_FLE_LSB\n      `define E203_DECINFO_FMAC_DOUBLE_LSB  (`E203_DECINFO_FMAC_FLE_MSB+1)\n      `define E203_DECINFO_FMAC_DOUBLE_MSB   (`E203_DECINFO_FMAC_DOUBLE_LSB+1-1)    \n  `define E203_DECINFO_FMAC_DOUBLE  `E203_DECINFO_FMAC_DOUBLE_MSB:`E203_DECINFO_FMAC_DOUBLE_LSB\n\n`define E203_DECINFO_FMAC_WIDTH  (`E203_DECINFO_FMAC_DOUBLE_MSB+1)\n\n  // MULDIV group\n      `define E203_DECINFO_MULDIV_MUL_LSB   `E203_DECINFO_SUBDECINFO_LSB\n      `define E203_DECINFO_MULDIV_MUL_MSB   (`E203_DECINFO_MULDIV_MUL_LSB+1-1)    \n  `define E203_DECINFO_MULDIV_MUL   `E203_DECINFO_MULDIV_MUL_MSB:`E203_DECINFO_MULDIV_MUL_LSB    \n      `define E203_DECINFO_MULDIV_MULH_LSB   (`E203_DECINFO_MULDIV_MUL_MSB+1)\n      `define E203_DECINFO_MULDIV_MULH_MSB   (`E203_DECINFO_MULDIV_MULH_LSB+1-1)    \n  `define E203_DECINFO_MULDIV_MULH   `E203_DECINFO_MULDIV_MULH_MSB:`E203_DECINFO_MULDIV_MULH_LSB \n      `define E203_DECINFO_MULDIV_MULHSU_LSB   (`E203_DECINFO_MULDIV_MULH_MSB+1)\n      `define E203_DECINFO_MULDIV_MULHSU_MSB   (`E203_DECINFO_MULDIV_MULHSU_LSB+1-1)    \n  `define E203_DECINFO_MULDIV_MULHSU   `E203_DECINFO_MULDIV_MULHSU_MSB:`E203_DECINFO_MULDIV_MULHSU_LSB \n      `define E203_DECINFO_MULDIV_MULHU_LSB  (`E203_DECINFO_MULDIV_MULHSU_MSB+1)\n      `define E203_DECINFO_MULDIV_MULHU_MSB   (`E203_DECINFO_MULDIV_MULHU_LSB+1-1)    \n  `define E203_DECINFO_MULDIV_MULHU  `E203_DECINFO_MULDIV_MULHU_MSB:`E203_DECINFO_MULDIV_MULHU_LSB\n      `define E203_DECINFO_MULDIV_DIV_LSB   (`E203_DECINFO_MULDIV_MULHU_MSB+1)\n      `define E203_DECINFO_MULDIV_DIV_MSB   (`E203_DECINFO_MULDIV_DIV_LSB+1-1)    \n  `define E203_DECINFO_MULDIV_DIV   `E203_DECINFO_MULDIV_DIV_MSB:`E203_DECINFO_MULDIV_DIV_LSB \n      `define E203_DECINFO_MULDIV_DIVU_LSB  (`E203_DECINFO_MULDIV_DIV_MSB+1)\n      `define E203_DECINFO_MULDIV_DIVU_MSB  (`E203_DECINFO_MULDIV_DIVU_LSB+1-1)    \n  `define E203_DECINFO_MULDIV_DIVU  `E203_DECINFO_MULDIV_DIVU_MSB:`E203_DECINFO_MULDIV_DIVU_LSB\n      `define E203_DECINFO_MULDIV_REM_LSB   (`E203_DECINFO_MULDIV_DIVU_MSB+1)\n      `define E203_DECINFO_MULDIV_REM_MSB   (`E203_DECINFO_MULDIV_REM_LSB+1-1)    \n  `define E203_DECINFO_MULDIV_REM   `E203_DECINFO_MULDIV_REM_MSB:`E203_DECINFO_MULDIV_REM_LSB    \n      `define E203_DECINFO_MULDIV_REMU_LSB   (`E203_DECINFO_MULDIV_REM_MSB+1)\n      `define E203_DECINFO_MULDIV_REMU_MSB   (`E203_DECINFO_MULDIV_REMU_LSB+1-1)    \n  `define E203_DECINFO_MULDIV_REMU   `E203_DECINFO_MULDIV_REMU_MSB:`E203_DECINFO_MULDIV_REMU_LSB \n      `define E203_DECINFO_MULDIV_B2B_LSB   (`E203_DECINFO_MULDIV_REMU_MSB+1)\n      `define E203_DECINFO_MULDIV_B2B_MSB   (`E203_DECINFO_MULDIV_B2B_LSB+1-1)    \n  `define E203_DECINFO_MULDIV_B2B   `E203_DECINFO_MULDIV_B2B_MSB:`E203_DECINFO_MULDIV_B2B_LSB \n\n`define E203_DECINFO_MULDIV_WIDTH  (`E203_DECINFO_MULDIV_B2B_MSB+1)\n\n// Choose the longest group as the final DEC info width\n`define E203_DECINFO_WIDTH  (`E203_DECINFO_EAI_WIDTH+1)\n\n\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////// LSU relevant macro\n//\n    // Currently is OITF_DEPTH, In the future, if the ROCC\n    // support multiple oustanding\n    // we can enlarge this number to 2 or 4\n    //\n    //\n  //`ifdef E203_CFG_HAS_EAI //{\n  //  //`define E203_LSU_OUTS_NUM 2 \n  //`else//}{\n    //`define E203_LSU_OUTS_NUM `E203_OITF_DEPTH \n    //`ifdef E203_OITF_DEPTH_IS_1\n    //  `define E203_LSU_OUTS_NUM_IS_1\n    //`endif\n    // Although we defined the OITF depth as 2, but for LSU, we still only allow 1 oustanding for LSU\n    `define E203_LSU_OUTS_NUM    1\n    `define E203_LSU_OUTS_NUM_IS_1\n  //`endif//}\n\n  `ifdef E203_CFG_SUPPORT_AMO//{\n     `define E203_SUPPORT_AMO\n  `endif//}\n  // No unalign\n  //`ifdef E203_CFG_SUPPORT_UNALGNLDST//{\n  //   `define E203_SUPPORT_UNALGNLDST\n  //`endif//}\n \n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////\n/////// BIU relevant macro\n//\n    // Currently is 1, In the future, if the DCache\n    // support hit-under-miss (out of order return), then\n    // we can enlarge this number to 2 or 4\n    //\n  `ifdef E203_HAS_DCACHE //{\n    //`define E203_BIU_OUTS_NUM 2 \n  `else//}{\n    `define E203_BIU_OUTS_NUM `E203_LSU_OUTS_NUM \n    `ifdef E203_LSU_OUTS_NUM_IS_1\n      `define E203_BIU_OUTS_NUM_IS_1\n      `define E203_BIU_OUTS_CNT_W  1\n    `endif\n  `endif//}\n\n\n\n  // To cut the potential comb loop and critical path between LSU and IFU\n  //   and also core and external system, we always cut the ready by BIU Stage\n  //   You may argue: Always cu"}
{"text": "t ready may potentially hurt throughput when the DP is just 1\n  //   but it is actually a Pseudo proposition because:\n  //     * If the BIU oustanding is just 1 in low end core, then we set DP as 1, and there is no \n  //         throughput issue becuase just only 1 oustanding. Even for the PPI or FIO port ideally\n  //         if it is 0 cycle response and throughput can be bck-to-back ideally, but we just\n  //         sacrafy sacrifice this performance lost, since this is a low end core\n  //     * If the BIU oustanding is more than 1 in middle or high end core, then we\n  //         set DP as 2 as ping-pong buffer, and then throughput is back-to-back\n  //\n  `define E203_BIU_CMD_CUT_READY 1\n  `define E203_BIU_RSP_CUT_READY 1\n\n  // If oustanding is just 1, then we just need 1 entry\n  // If oustanding is more than 1, then we need ping-pong buffer to enhance throughput\n  //   You may argue: why not allow 0 depth to save areas, well this is to cut the potential\n  //   comb loop and critical path between LSU and IFU and external bus\n    `ifdef E203_BIU_OUTS_NUM_IS_1\n  `define E203_BIU_CMD_DP 1\n  `define E203_BIU_RSP_DP_RAW 1\n    `else\n  `define E203_BIU_CMD_DP 2\n  `define E203_BIU_RSP_DP_RAW 2\n    `endif\n  //  // We allow such configurability to cut timing path of not to save areas\n  `define E203_TIMING_BOOST\n  `ifdef E203_TIMING_BOOST\n    `define E203_BIU_RSP_DP        `E203_BIU_RSP_DP_RAW       \n  `else\n    `define E203_BIU_RSP_DP        0\n  `endif\n\n  `define E203_HAS_CSR_EAI  1\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The dtcm_ctrl module control the DTCM access requests \n//\n// ====================================================================\n`include \"e203_defines.v\"\n\n  `ifdef E203_HAS_DTCM //{\n\nmodule e203_dtcm_ctrl(\n  output dtcm_active,\n  // The cgstop is coming from CSR (0xBFE mcgstop)'s filed 1\n  // // This register is our self-defined CSR register to disable the \n      // DTCM SRAM clock gating for debugging purpose\n  input  tcm_cgstop,\n  // Note: the DTCM ICB interface only support the single-transaction\n  \n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // LSU ICB to DTCM\n  //    * Bus cmd channel\n  input  lsu2dtcm_icb_cmd_valid, // Handshake valid\n  output lsu2dtcm_icb_cmd_ready, // Handshake ready\n            // Note: The data on rdata or wdata channel must be naturally\n            //       aligned, this is in line with the AXI definition\n  input  [`E203_DTCM_ADDR_WIDTH-1:0]   lsu2dtcm_icb_cmd_addr, // Bus transaction start addr \n  input  lsu2dtcm_icb_cmd_read,   // Read or write\n  input  [32-1:0] lsu2dtcm_icb_cmd_wdata, \n  input  [4-1:0] lsu2dtcm_icb_cmd_wmask, \n\n  //    * Bus RSP channel\n  output lsu2dtcm_icb_rsp_valid, // Response valid \n  input  lsu2dtcm_icb_rsp_ready, // Response ready\n  output lsu2dtcm_icb_rsp_err,   // Response error\n            // Note: the RSP rdata is inline with AXI definition\n  output [32-1:0] lsu2dtcm_icb_rsp_rdata, \n\n\n\n  `ifdef E203_HAS_DTCM_EXTITF //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // External-agent ICB to DTCM\n  //    * Bus cmd channel\n  input  ext2dtcm_icb_cmd_valid, // Handshake valid\n  output ext2dtcm_icb_cmd_ready, // Handshake ready\n            // Note: The data on rdata or wdata channel must be naturally\n            //       aligned, this is in line with the AXI definition\n  input  [`E203_DTCM_ADDR_WIDTH-1:0]   ext2dtcm_icb_cmd_addr, // Bus transaction start addr \n  input  ext2dtcm_icb_cmd_read,   // Read or write\n  input  [32-1:0] ext2dtcm_icb_cmd_wdata, \n  input  [ 4-1:0] ext2dtcm_icb_cmd_wmask, \n\n  //    * Bus RSP channel\n  output ext2dtcm_icb_rsp_valid, // Response valid \n  input  ext2dtcm_icb_rsp_ready, // Response ready\n  output ext2dtcm_icb_rsp_err,   // Response error\n            // Note: the RSP rdata is inline with AXI definition\n  output [32-1:0] ext2dtcm_icb_rsp_rdata, \n  `endif//}\n\n  output                         dtcm_ram_cs,  \n  output                         dtcm_ram_we,  \n  output [`E203_DTCM_RAM_AW-1:0] dtcm_ram_addr, \n  output [`E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  output [`E203_DTCM_RAM_DW-1:0] dtcm_ram_din,          \n  input  [`E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  output                         clk_dtcm_ram,\n\n  input  test_mode,\n  input  clk,\n  input  rst_n\n  );\n\n\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [`E203_DTCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [`E203_DTCM_DATA_WIDTH-1:0] arbt_icb_cmd_wdata;\n  wire [`E203_DTCM_WMSK_WIDTH-1:0] arbt_icb_cmd_wmask;\n\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [`E203_DTCM_DATA_WIDTH-1:0] arbt_icb_rsp_rdata;\n\n  `ifdef E203_HAS_DTCM_EXTITF //{\n      localparam DTCM_ARBT_I_NUM = 2;\n      localparam DTCM_ARBT_I_PTR_W = 1;\n  `else//}{\n      localparam DTCM_ARBT_I_NUM = 1;\n      localparam DTCM_ARBT_I_PTR_W = 1;\n  `endif//}\n\n  wire [DTCM_ARBT_I_NUM*1-1:0] arbt_bus_icb_cmd_valid;\n  wire [DTCM_ARBT_I_NUM*1-1:0] arbt_bus_icb_cmd_ready;\n  wire [DTCM_ARBT_I_NUM*`E203_DTCM_ADDR_WIDTH-1:0] arbt_bus_icb_cmd_addr;\n  wire [DTCM_ARBT_I_NUM*1-1:0] arbt_bus_icb_cmd_read;\n  wire [DTCM_ARBT_I_NUM*`E203_DTCM_DATA_WIDTH-1:0] arbt_bus_icb_cmd_wdata;\n  wire [DTCM_ARBT_I_NUM*`E203_DTCM_WMSK_WIDTH-1:0] arbt_bus_icb_cmd_wmask;\n\n  wire [DTCM_ARBT_I_NUM*1-1:0] arbt_bus_icb_rsp_valid;\n  wire [DTCM_ARBT_I_NUM*1-1:0] arbt_bus_icb_rsp_ready;\n  wire [DTCM_ARBT_I_NUM*1-1:0] arbt_bus_icb_rsp_err;\n  wire [DTCM_ARBT_I_NUM*`E203_DTCM_DATA_WIDTH-1:0] arbt_bus_icb_rsp_rdata;\n\n  assign arbt_bus_icb_cmd_valid =\n      //LSU take higher priority\n                           {\n                      `ifdef E203_HAS_DTCM_EXTITF //{\n                             ext2dtcm_icb_cmd_valid,\n                      `endif//}\n                             lsu2dtcm_icb_cmd_valid\n                           } ;\n  assign arbt_bus_icb_cmd_addr =\n                           {\n                      `ifdef E203_HAS_DTCM_EXTITF //{\n                             ext2dtcm_icb_cmd_addr,\n                      `endif//}\n                             lsu2dtcm_icb_cmd_addr\n                           } ;\n  assign arbt_bus_icb_cmd_read =\n                           {\n                      `ifdef E203_HAS_DTCM_EXTITF //{\n                             ext2dtcm_icb_cmd_read,\n                      `endif//}\n                             lsu2dtcm_icb_cmd_read\n                           } ;\n  assign arbt_bus_icb_cmd_wdata =\n                           {\n                      `ifdef E203_HAS_DTCM_EXTITF //{\n                             ext2dtcm_icb_cmd_wdata,\n                      `endif//}\n                             lsu2dtcm_icb_cmd_wdata\n                           } ;\n  assign arbt_bus_icb_cmd_wmask =\n                           {\n                      `ifdef E203_HAS_DTCM_EXTITF //{\n                             ext2dtcm_icb_cmd_wmask,\n                      `endif//}\n                             lsu2dtcm_icb_cmd_wmask\n                           } ;\n  assign                   {\n                      `ifdef E203_HAS_DTCM_EXTITF //{\n                             ext2dtcm_icb_cmd_ready,\n                      `endif//}\n                             lsu2dtcm_icb_cmd_ready\n                           } = arbt_bus_icb_cmd_ready;\n\n\n  assign                   {\n                      `ifdef E203_HAS_DTCM_EXTITF //{\n                             ext2dtcm_icb_rsp_valid,\n                      `endif//}\n                             lsu2dtcm_icb_rsp_valid\n                           } = arbt_bus_icb_rsp_valid;\n  assign                   {\n                      `ifdef E203_HAS_DTCM_EXTITF //{\n                             ext2dtcm_icb_rsp_err,\n                      `endif//}\n                             lsu2dtcm_icb_rsp_err\n                           } = arbt_bus_icb_rsp_err;\n  assign                   {\n                      `ifdef E203_HAS_DTCM_EXTITF //{\n                             ext2dtcm_icb_rsp_rdata,\n                      `endif//}\n                             lsu2dtcm_icb_rsp_rdata\n                           } = arbt_bus_icb_rsp_rdata;\n  assign arbt_bus_icb_rsp_ready = {\n                      `ifdef E203_HAS_DTCM_EXTITF //{\n                             ext2dtcm_icb_rsp_ready,\n                      `endif//}\n                             lsu2dtcm_icb_rsp_ready\n                           };\n\n  sirv_gnrl_icb_arbt # (\n  .ARBT_SCHEME (0),// Priority based\n  .ALLOW_0CYCL_RSP (0),// Dont allow the 0 cycle response because for ITCM and DTCM, \n                       //   Dcache, .etc, definitely they cannot reponse as 0 cycle\n  .FIFO_OUTS_NUM   (`E203_DTCM_OUTS_NUM),\n  .FIFO_CUT_READY(0),\n  .USR_W      (1),\n  .ARBT_NUM   (DTCM_ARBT_I_NUM  ),\n  .ARBT_PTR_W (DTCM_ARBT_I_PTR_W),\n  .AW         (`E203_DTCM_ADDR_WIDTH),\n  .DW         (`E203_DTCM_DATA_WIDTH) \n  ) u_dtcm_icb_arbt(\n  .o_icb_cmd_valid        (arbt_icb_cmd_valid )     ,\n  .o_icb_cmd_ready        (arbt_icb_cmd_ready )     ,\n  .o_icb_cmd_read         (arbt_icb_cmd_read )      ,\n  .o_icb_cmd_addr         (arbt_icb_cmd_addr )      ,\n  .o_icb_cmd_wdata        (arbt_icb_cmd_wdata )     ,\n  .o_icb_cmd_wmask        (arbt_icb_cmd_wmask)      ,\n  .o_icb_cmd_burst        ()     ,\n  .o_icb_cmd_beat         ()     ,\n  .o_icb_cmd_lock         ()     ,\n  .o_icb_cmd_excl         ()     ,\n  .o_icb_cmd_size         ()     ,\n  .o_icb_cmd_usr          ()     ,\n                                \n  .o_icb_rsp_valid        (arbt_icb_rsp_valid )     ,\n  .o_icb_rsp_ready        (arbt_icb_rsp_ready )     ,\n  .o_icb_rsp_err          (arbt_icb_rsp_err)        ,\n  .o_icb_rsp_rdata        (arbt_icb_rsp_rdata )     ,\n  .o_icb_rsp_usr          (1'b0),\n  .o_icb_rsp_excl_ok      (1'b0),\n                               \n  .i_bus_icb_cmd_ready    (arbt_bus_icb_cmd_ready ) ,\n  .i_bus_icb_cmd_valid    (arbt_bus_icb_cmd_valid ) ,\n  .i_bus_icb_cmd_read     (arbt_bus_icb_cmd_read )  ,\n  .i_bus_icb_cmd_addr     (arbt_bus_icb_cmd_addr )  ,\n  .i_bus_icb_cmd_wdata    (arbt_bus_icb_cmd_wdata ) ,\n  .i_bus_icb_cmd_wmask    (arbt_bus_icb_cmd_wmask)  ,\n  .i_bus_icb_cmd_burst    ({2*DTCM_ARBT_I_NUM{1'b0}}) ,\n  .i_bus_icb_cmd_beat     ({2*DTCM_ARBT_I_NUM{1'b0}}) ,\n  .i_bus_icb_cmd_lock     ({1*DTCM_ARBT_I_NUM{1'b0}}),\n  .i_bus_icb_cmd_excl     ({1*DTCM_ARBT_I_NUM{1'b0}}),\n  .i_bus_icb_cmd_size     ({2*DTCM_ARBT_I_NUM{1'b0}}),\n  .i_bus_icb_cmd_usr      ({1*DTCM_ARBT_I_NUM{1'b0}}),\n\n                                \n  .i_bus_icb_rsp_valid    (arbt_bus_icb_rsp_valid ) ,\n  .i_bus_icb_rsp_ready    (arbt_bus_icb_rsp_ready ) ,\n  .i_bus_icb_rsp_err      (arbt_bus_icb_rsp_err)    ,\n  .i_bus_icb_rsp_rdata    (arbt_bus_icb_rsp_rdata ) ,\n  .i_bus_icb_rsp_usr      (),\n  .i_bus_icb_rsp_excl_ok  (),\n                             \n  .clk                    (clk  )                     ,\n  .rst_n                  (rst_n)\n  );\n\n\n\n\n  wire sram_icb_cmd_ready;\n  wire sram_icb_cmd_valid;\n  wire [`E203_DTCM_ADDR_WIDTH-1:0] sram_icb_cmd_addr;\n  wire sram_icb_cmd_read;\n  wire [`E203_DTCM_DATA_WIDTH-1:0] sram_icb_cmd_wdata;\n  wire [`E203_DTCM_WMSK_WIDTH-1:0] sram_icb_cmd_wmask;\n\n  assign arbt_icb_cmd_ready = sram_icb_cmd_ready;\n\n  assign sram_icb_cmd_valid = arbt_icb_cmd_valid;\n  assign sram_icb_cmd_addr  = arbt_icb_cmd_addr;\n  assign sram_icb_cmd_read  = arbt_icb_cmd_read;\n  assign sram_icb_cmd_wdata = arbt_icb_cmd_wdata;\n  assign sram_icb_cmd_wmask = arbt_icb_cmd_wmask;\n\n  wire sram_icb_rsp_valid;\n  wire sram_icb_rsp_ready;\n  wire [`E203_DTCM_DATA_WIDTH-1:0] sram_icb_rsp_rdata;\n  wire sram_icb_rsp_err;\n\n\n  wire dtcm_sram_ctrl_active;\n\n\n  wire sram_icb_rsp_read;\n\n\n `ifndef E203_HAS_ECC //{\n  sirv_sram_icb_ctrl #(\n      .DW     (`E203_DTCM_DATA_WIDTH),\n      .AW     (`E203_DTCM_ADDR_WIDTH),\n      .MW     (`E203_DTCM_WMSK_WIDTH),\n      .AW_LSB (2),// DTCM is 32bits wide, so the LSB is 2\n      .USR_W  (1) \n  ) u_sram_icb_ctrl (\n     .sram_ctrl_active (dtcm_sram_ctrl_active),\n     .tcm_cgstop       (tcm_cgstop),\n     \n     .i_icb_cmd_valid (sram_icb_cmd_valid),\n     .i_icb_cmd_ready (sram_icb_cmd_ready),\n     .i_icb_cmd_read  (sram_icb_cmd_read ),\n     .i_icb_cmd_addr  (sram_icb_cmd_addr ), \n     .i_icb_cmd_wdata (sram_icb_cmd_wdata), \n     .i_icb_cmd_wmask (sram_icb_cmd_wmask), \n     .i_icb_cmd_usr   (sram_icb_cmd_read ),\n  \n     .i_icb_rsp_valid (sram_icb_rsp_valid),\n     .i_icb_rsp_ready (sram_icb_rsp_ready),\n     .i_icb_rsp_rdata (sram_icb_rsp_rdata),\n     .i_icb_rsp_usr   (sram_icb_rsp_read),\n  \n     .ram_cs   (dtcm_ram_cs  ),  \n     .ram_we   (dtcm_ram_we  ),  \n     .ram_addr (dtcm_ram_addr), \n     .ram_wem  (dtcm_ram_wem ),\n     .ram_din  (dtcm_ram_din ),          \n     .ram_dout (dtcm_ram_dout),\n     .clk_ram  (clk_dtcm_ram ),\n  \n     .test_mode(test_mode  ),\n     .clk  (clk  ),\n     .rst_n(rst_n)  \n    );\n\n  assign sram_icb_rsp_err = 1'b0;\n  `endif//}\n\n    \n\n  assign sram_icb_rsp_ready = arbt_icb_rsp_ready;\n\n  assign arbt_icb_rsp_valid = sram_icb_rsp_valid;\n  assign arbt_icb_rsp_err   = sram_icb_rsp_err;\n  assign arbt_icb_rsp_rdata = sram_icb_rsp_rdata;\n\n\n  assign dtcm_active = lsu2dtcm_icb_cmd_valid | dtcm_sram_ctrl_active\n       `ifdef E203_HAS_DTCM_EXTITF //{\n                     | ext2dtcm_icb_cmd_valid\n       `endif//}\n          ;\n\n\n\nendmodule\n\n  `endif//}\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The DTCM-SRAM module to implement DTCM SRAM\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\n  `ifdef E203_HAS_DTCM //{\n\n\nmodule e203_dtcm_ram(\n\n  input                              sd,\n  input                              ds,\n  input                              ls,\n\n  input                              cs,  \n  input                              we,  \n  input  [`E203_DTCM_RAM_AW-1:0] addr, \n  input  [`E203_DTCM_RAM_MW-1:0] wem,\n  input  [`E203_DTCM_RAM_DW-1:0] din,          \n  output [`E203_DTCM_RAM_DW-1:0] dout,\n  input                              rst_n,\n  input                              clk\n\n);\n\n  sirv_gnrl_ram #(\n    .FORCE_X2ZERO(1),//Always force X to zeros\n    .DP(`E203_DTCM_RAM_DP),\n    .DW(`E203_DTCM_RAM_DW),\n    .MW(`E203_DTCM_RAM_MW),\n    .AW(`E203_DTCM_RAM_AW) \n  ) u_e203_dtcm_gnrl_ram(\n  .sd  (sd  ),\n  .ds  (ds  ),\n  .ls  (ls  ),\n\n  .rst_n (rst_n ),\n  .clk (clk ),\n  .cs  (cs  ),\n  .we  (we  ),\n  .addr(addr),\n  .din (din ),\n  .wem (wem ),\n  .dout(dout)\n  );\n                                                      \nendmodule\n  `endif//}\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n// Designer   : Bob Hu\n//\n// Description:\n//  This module to implement the extended CSR\n//    current this is an empty module, user can hack it \n//    become a real one if they want\n//\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\n`ifdef E203_HAS_CSR_EAI//{\nmodule e203_extend_csr(\n\n  // The Handshake Interface \n  input          eai_csr_valid,\n  output         eai_csr_ready,\n\n  input   [31:0] eai_csr_addr,\n  input          eai_csr_wr,\n  input   [31:0] eai_csr_wdata,\n  output  [31:0] eai_csr_rdata,\n\n  input  clk,\n  input  rst_n\n  );\n\n  assign eai_csr_ready = 1'b1;\n  assign eai_csr_rdata = 32'b0;\n\n\nendmodule\n`endif//}\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n// Designer   : Bob Hu\n//\n// Description:\n//  The EXU module to implement entire Execution Stage\n//\n// ====================================================================\n\n`include \"e203_defines.v\"\n\nmodule e203_exu(\n  output commit_mret,\n  output commit_trap,\n  output exu_active,\n  output excp_active,\n\n  output core_wfi,\n  output tm_stop,\n  output itcm_nohold,\n  output core_cgstop,\n  output tcm_cgstop,\n\n  input  [`E203_HART_ID_W-1:0] core_mhartid,\n  input  dbg_irq_r,\n  input  [`E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input  [`E203_EVT_NUM-1:0] evt_r,\n  input  ext_irq_r,\n  input  sft_irq_r,\n  input  tmr_irq_r,\n\n  //////////////////////////////////////////////////////////////\n  // From/To debug ctrl module\n  output  [`E203_PC_SIZE-1:0] cmt_dpc,\n  output  cmt_dpc_ena,\n  output  [3-1:0] cmt_dcause,\n  output  cmt_dcause_ena,\n\n  output wr_dcsr_ena    ,\n  output wr_dpc_ena     ,\n  output wr_dscratch_ena,\n\n\n\n  output [`E203_XLEN-1:0] wr_csr_nxt    ,\n\n  input [`E203_XLEN-1:0] dcsr_r    ,\n  input [`E203_PC_SIZE-1:0] dpc_r     ,\n  input [`E203_XLEN-1:0] dscratch_r,\n\n  input  dbg_mode,\n  input  dbg_halt_r,\n  input  dbg_step_r,\n  input  dbg_ebreakm_r,\n  input  dbg_stopcycle,\n\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The IFU IR stage to EXU interface\n  input  i_valid, // Handshake signals with EXU stage\n  output i_ready,\n  input  [`E203_INSTR_SIZE-1:0] i_ir,// The instruction register\n  input  [`E203_PC_SIZE-1:0] i_pc,   // The PC register along with\n  input  i_pc_vld,\n  input  i_misalgn,              // The fetch misalign\n  input  i_buserr,               // The fetch bus error\n  input  i_prdt_taken,               \n  input  i_muldiv_b2b,               \n  input  [`E203_RFIDX_WIDTH-1:0] i_rs1idx,   // The RS1 index\n  input  [`E203_RFIDX_WIDTH-1:0] i_rs2idx,   // The RS2 index\n\n\n\n  //////////////////////////////////////////////////////////////\n  // The Flush interface to IFU\n  //\n  //   To save the gatecount, when we need to flush pipeline with new PC, \n  //     we want to reuse the adder in IFU, so we will not pass flush-PC\n  //     to IFU, instead, we pass the flush-pc-adder-op1/op2 to IFU\n  //     and IFU will just use its adder to caculate the flush-pc-adder-result\n  //\n  input   pipe_flush_ack,\n  output  pipe_flush_req,\n  output  [`E203_PC_SIZE-1:0] pipe_flush_add_op1,  \n  output  [`E203_PC_SIZE-1:0] pipe_flush_add_op2,  \n  `ifdef E203_TIMING_BOOST//}\n  output  [`E203_PC_SIZE-1:0] pipe_flush_pc,  \n  `endif//}\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The LSU Write-Back Interface\n  input  lsu_o_valid, // Handshake valid\n  output lsu_o_ready, // Handshake ready\n  input  [`E203_XLEN-1:0] lsu_o_wbck_wdat,\n  input  [`E203_ITAG_WIDTH -1:0] lsu_o_wbck_itag,\n  input  lsu_o_wbck_err , \n  input  lsu_o_cmt_ld,\n  input  lsu_o_cmt_st,\n  input  [`E203_ADDR_SIZE -1:0] lsu_o_cmt_badaddr,\n  input  lsu_o_cmt_buserr , // The bus-error exception generated\n\n  output wfi_halt_ifu_req,\n  input  wfi_halt_ifu_ack,\n\n  output oitf_empty,\n  output [`E203_XLEN-1:0] rf2ifu_x1,\n  output [`E203_XLEN-1:0] rf2ifu_rs1,\n  output dec2ifu_rden,\n  output dec2ifu_rs1en,\n  output [`E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  output dec2ifu_mulhsu,\n  output dec2ifu_div   ,\n  output dec2ifu_rem   ,\n  output dec2ifu_divu  ,\n  output dec2ifu_remu  ,\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The AGU ICB Interface to LSU-ctrl\n  //    * Bus cmd channel\n  output                         agu_icb_cmd_valid, // Handshake valid\n  input                          agu_icb_cmd_ready, // Handshake ready\n  output [`E203_ADDR_SIZE-1:0]   agu_icb_cmd_addr, // Bus transaction start addr \n  output                         agu_icb_cmd_read,   // Read or write\n  output [`E203_XLEN-1:0]        agu_icb_cmd_wdata, \n  output [`E203_XLEN/8-1:0]      agu_icb_cmd_wmask, \n  output                         agu_icb_cmd_lock,\n  output                         agu_icb_cmd_excl,\n  output [1:0]                   agu_icb_cmd_size,\n           // Several additional side channel signals\n           //   Indicate LSU-ctrl module to\n           //     return the ICB response channel back to AGU\n           //     this is only used by AMO or unaligned load/store 1st uop\n           //     to return the response\n  output                         agu_icb_cmd_back2agu, \n           //   Sign extension or not\n  output                         agu_icb_cmd_usign,\n  output [`E203_ITAG_WIDTH -1:0] agu_icb_cmd_itag,\n\n  //    * Bus RSP channel\n  input                          agu_icb_rsp_valid, // Response valid \n  output                         agu_icb_rsp_ready, // Response ready\n  input                          agu_icb_rsp_err  , // Response error\n  input                          agu_icb_rsp_excl_ok,\n  input  [`E203_XLEN-1:0]        agu_icb_rsp_rdata,\n\n  `ifdef E203_HAS_CSR_EAI//{\n  output         eai_csr_valid,\n  input          eai_csr_ready,\n  output  [31:0] eai_csr_addr,\n  output         eai_csr_wr,\n  output  [31:0] eai_csr_wdata,\n  input   [31:0] eai_csr_rdata,\n  `endif//}\n\n\n\n\n  input  test_mode,\n  input  clk_aon,\n  input  clk,\n  input  rst_n\n  );\n\n\n  //////////////////////////////////////////////////////////////\n  // Instantiate the Regfile\n  wire [`E203_XLEN-1:0] rf_rs1;\n  wire [`E203_XLEN-1:0] rf_rs2;\n\n  wire rf_wbck_ena;\n  wire [`E203_XLEN-1:0] rf_wbck_wdat;\n  wire [`E203_RFIDX_WIDTH-1:0] rf_wbck_rdidx;\n\n\n  e203_exu_regfile u_e203_exu_regfile(\n    .read_src1_idx (i_rs1idx ),\n    .read_src2_idx (i_rs2idx ),\n    .read_src1_dat (rf_rs1),\n    .read_src2_dat (rf_rs2),\n    \n    .x1_r          (rf2ifu_x1),\n                    \n    .wbck_dest_wen (rf_wbck_ena),\n    .wbck_dest_idx (rf_wbck_rdidx),\n    .wbck_dest_dat (rf_wbck_wdat),\n                                 \n    .test_mode     (test_mode),\n    .clk           (clk          ),\n    .rst_n         (rst_n        ) \n  );\n\n  wire dec_rs1en;\n  wire dec_rs2en;\n\n\n  \n  //////////////////////////////////////////////////////////////\n  // Instantiate the Decode\n  wire [`E203_DECINFO_WIDTH-1:0]  dec_info;\n  wire [`E203_XLEN-1:0] dec_imm;\n  wire [`E203_PC_SIZE-1:0] dec_pc;\n  wire dec_rs1x0;\n  wire dec_rs2x0;\n  wire dec_rdwen;\n  wire [`E203_RFIDX_WIDTH-1:0] dec_rdidx;\n  wire dec_misalgn;\n  wire dec_buserr;\n  wire dec_ilegl;\n\n\n  //////////////////////////////////////////////////////////////\n  // The Decoded Info-Bus\n  e203_exu_decode u_e203_exu_decode (\n    .dbg_mode     (dbg_mode),\n\n    .i_instr      (i_ir    ),\n    .i_pc         (i_pc    ),\n    .i_misalgn    (i_misalgn),\n    .i_buserr     (i_buserr ),\n    .i_prdt_taken (i_prdt_taken), \n    .i_muldiv_b2b (i_muldiv_b2b), \n      \n    .dec_rv32  (),\n    .dec_bjp   (),\n    .dec_jal   (),\n    .dec_jalr  (),\n    .dec_bxx   (),\n    .dec_jalr_rs1idx(),\n    .dec_bjp_imm(),\n\n    .dec_mulhsu  (dec2ifu_mulhsu),\n    .dec_mul     (),\n    .dec_div     (dec2ifu_div   ),\n    .dec_rem     (dec2ifu_rem   ),\n    .dec_divu    (dec2ifu_divu  ),\n    .dec_remu    (dec2ifu_remu  ),\n\n    \n\n\n    .dec_info  (dec_info ),\n    .dec_rs1x0 (dec_rs1x0),\n    .dec_rs2x0 (dec_rs2x0),\n    .dec_rs1en (dec_rs1en),\n    .dec_rs2en (dec_rs2en),\n    .dec_rdwen (dec_rdwen),\n    .dec_rs1idx(),\n    .dec_rs2idx(),\n    .dec_misalgn(dec_misalgn),\n    .dec_buserr (dec_buserr ),\n    .dec_ilegl  (dec_ilegl),\n    .dec_rdidx (dec_rdidx),\n    .dec_pc    (dec_pc),\n    .dec_imm   (dec_imm)\n  );\n\n  //////////////////////////////////////////////////////////////\n  // Instantiate the Dispatch\n  wire disp_alu_valid; \n  wire disp_alu_ready; \n  wire disp_alu_longpipe;\n  wire [`E203_ITAG_WIDTH-1:0] disp_alu_itag;\n  wire [`E203_XLEN-1:0] disp_alu_rs1;\n  wire [`E203_XLEN-1:0] disp_alu_rs2;\n  wire [`E203_XLEN-1:0] disp_alu_imm;\n  wire [`E203_DECINFO_WIDTH-1:0]  disp_alu_info;  \n  wire [`E203_PC_SIZE-1:0] disp_alu_pc;\n  wire [`E203_RFIDX_WIDTH-1:0] disp_alu_rdidx;\n  wire disp_alu_rdwen;\n  wire disp_alu_ilegl;\n  wire disp_alu_misalgn;\n  wire disp_alu_buserr;\n\n  wire [`E203_ITAG_WIDTH-1:0] disp_oitf_ptr;\n  wire disp_oitf_ready;\n\n  wire  disp_oitf_rs1fpu;\n  wire  disp_oitf_rs2fpu;\n  wire  disp_oitf_rs3fpu;\n  wire  disp_oitf_rdfpu;\n  wire  [`E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx;\n  wire  [`E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx;\n  wire  [`E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx;\n  wire  [`E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx;\n  wire  disp_oitf_rs1en;\n  wire  disp_oitf_rs2en;\n  wire  disp_oitf_rs3en;\n  wire  disp_oitf_rdwen;\n  wire  [`E203_PC_SIZE-1:0] disp_oitf_pc;\n\n  wire oitfrd_match_disprs1;\n  wire oitfrd_match_disprs2;\n  wire oitfrd_match_disprs3;\n  wire oitfrd_match_disprd;\n\n  wire disp_oitf_ena;\n\n  wire wfi_halt_exu_req;\n  wire wfi_halt_exu_ack;\n\n  wire amo_wait;\n\n  e203_exu_disp u_e203_exu_disp(\n    .wfi_halt_exu_req    (wfi_halt_exu_req),\n    .wfi_halt_exu_ack    (wfi_halt_exu_ack),\n    .oitf_empty          (oitf_empty),\n\n    .amo_wait            (amo_wait),\n\n    .disp_i_valid        (i_valid         ),\n    .disp_i_ready        (i_ready         ),\n                                       \n    .disp_i_rs1x0        (dec_rs1x0       ),\n    .disp_i_rs2x0        (dec_rs2x0       ),\n    .disp_i_rs1en        (dec_rs1en       ),\n    .disp_i_rs2en        (dec_rs2en       ),\n    .disp_i_rs1idx       (i_rs1idx      ),\n    .disp_i_rs2idx       (i_rs2idx      ),\n    .disp_i_rdwen        (dec_rdwen       ),\n    .disp_i_rdidx        (dec_rdidx       ),\n    .disp_i_info         (dec_info        ),\n    .disp_i_rs1          (rf_rs1          ),\n    .disp_i_rs2          (rf_rs2          ),\n    .disp_i_imm          (dec_imm        ),\n    .disp_i_pc           (dec_pc         ),\n    .disp_i_misalgn      (dec_misalgn    ),\n    .disp_i_buserr       (dec_buserr     ),\n    .disp_i_ilegl        (dec_ilegl      ),\n\n\n    .disp_o_alu_valid    (disp_alu_valid   ),\n    .disp_o_alu_ready    (disp_alu_ready   ),\n    .disp_o_alu_longpipe (disp_alu_longpipe),\n    .disp_o_alu_itag     (disp_alu_itag    ),\n    .disp_o_alu_rs1      (disp_alu_rs1     ),\n    .disp_o_alu_rs2      (disp_alu_rs2     ),\n    .disp_o_alu_rdwen    (disp_alu_rdwen    ),\n    .disp_o_alu_rdidx    (disp_alu_rdidx   ),\n    .disp_o_alu_info     (disp_alu_info    ),\n    .disp_o_alu_pc       (disp_alu_pc      ),\n    .disp_o_alu_imm      (disp_alu_imm     ),\n    .disp_o_alu_misalgn  (disp_alu_misalgn    ),\n    .disp_o_alu_buserr   (disp_alu_buserr     ),\n    .disp_o_alu_ilegl    (disp_alu_ilegl      ),\n\n    .disp_oitf_ena       (disp_oitf_ena    ),\n    .disp_oitf_ptr       (disp_oitf_ptr    ),\n    .disp_oitf_ready     (disp_oitf_ready  ),\n\n    .disp_oitf_rs1en     (disp_oitf_rs1en),\n    .disp_oitf_rs2en     (disp_oitf_rs2en),\n    .disp_oitf_rs3en     (disp_oitf_rs3en),\n    .disp_oitf_rdwen     (disp_oitf_rdwen ),\n    .disp_oitf_rs1idx    (disp_oitf_rs1idx),\n    .disp_oitf_rs2idx    (disp_oitf_rs2idx),\n    .disp_oitf_rs3idx    (disp_oitf_rs3idx),\n    .disp_oitf_rdidx     (disp_oitf_rdidx ),\n    .disp_oitf_rs1fpu    (disp_oitf_rs1fpu),\n    .disp_oitf_rs2fpu    (disp_oitf_rs2fpu),\n    .disp_oitf_rs3fpu    (disp_oitf_rs3fpu),\n    .disp_oitf_rdfpu     (disp_oitf_rdfpu),\n    .disp_oitf_pc        (disp_oitf_pc),\n\n  \n    .oitfrd_match_disprs1(oitfrd_match_disprs1),\n    .oitfrd_match_disprs2(oitfrd_match_disprs2),\n    .oitfrd_match_disprs3(oitfrd_match_disprs3),\n    .oitfrd_match_disprd (oitfrd_match_disprd ),\n    \n    .clk                 (clk  ),\n    .rst_n               (rst_n) \n  );\n\n  //////////////////////////////////////////////////////////////\n  // Instantiate the OITF\n  wire oitf_ret_ena;\n  wire [`E203_ITAG_WIDTH-1:0] oitf_ret_ptr;\n  wire [`E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx;\n  wire [`E203_PC_SIZE-1:0] oitf_ret_pc;\n  wire oitf_ret_rdwen;\n  wire oitf_ret_rdfpu;\n\n\n  e203_exu_oitf u_e203_exu_oitf(\n    .dis_ready            (disp_oitf_ready),\n    .dis_ena              (disp_oitf_ena  ),\n    .ret_ena              (oitf_ret_ena  ),\n\n    .dis_ptr              (disp_oitf_ptr  ),\n\n    .ret_ptr              (oitf_ret_ptr  ),\n    .ret_rdidx            (oitf_ret_rdidx),\n    .ret_rdwen            (oitf_ret_rdwen),\n    .ret_rdfpu            (oitf_ret_rdfpu),\n    .ret_pc               (oitf_ret_pc),\n\n    .disp_i_rs1en         (disp_oitf_rs1en),\n    .disp_i_rs2en         (disp_oitf_rs2en),\n    .disp_i_rs3en         (disp_oitf_rs3en),\n    .disp_i_rdwen         (disp_oitf_rdwen ),\n    .disp_i_rs1idx        (disp_oitf_rs1idx),\n    .disp_i_rs2idx        (disp_oitf_rs2idx),\n    .disp_i_rs3idx        (disp_oitf_rs3idx),\n    .disp_i_rdidx         (disp_oitf_rdidx ),\n    .disp_i_rs1fpu        (disp_oitf_rs1fpu),\n    .disp_i_rs2fpu        (disp_oitf_rs2fpu),\n    .disp_i_rs3fpu        (disp_oitf_rs3fpu),\n    .disp_i_rdfpu         (disp_oitf_rdfpu ),\n    .disp_i_pc            (disp_oitf_pc ),\n\n    .oitfrd_match_disprs1 (oitfrd_match_disprs1),\n    .oitfrd_match_disprs2 (oitfrd_match_disprs2),\n    .oitfrd_match_disprs3 (oitfrd_match_disprs3),\n    .oitfrd_match_disprd  (oitfrd_match_disprd ),\n\n    .oitf_empty           (oitf_empty    ),\n\n    .clk                  (clk           ),\n    .rst_n                (rst_n         ) \n  );\n\n  //////////////////////////////////////////////////////////////\n  // Instantiate the ALU\n  wire alu_wbck_o_valid;\n  wire alu_wbck_o_ready;\n  wire [`E203_XLEN-1:0] alu_wbck_o_wdat;\n  wire [`E203_RFIDX_WIDTH-1:0] alu_wbck_o_rdidx;\n\n  wire alu_cmt_valid;\n  wire alu_cmt_ready;\n  wire alu_cmt_pc_vld;\n  wire [`E203_PC_SIZE-1:0] alu_cmt_pc;\n  wire [`E203_INSTR_SIZE-1:0] alu_cmt_instr;\n  wire [`E203_XLEN-1:0]    alu_cmt_imm;\n  wire alu_cmt_rv32;\n  wire alu_cmt_bjp;\n  wire alu_cmt_mret;\n  wire alu_cmt_dret;\n  wire alu_cmt_ecall;\n  wire alu_cmt_ebreak;\n  wire alu_cmt_wfi;\n  wire alu_cmt_fencei;\n  wire alu_cmt_ifu_misalgn;\n  wire alu_cmt_ifu_buserr;\n  wire alu_cmt_ifu_ilegl;\n  wire alu_cmt_bjp_prdt;\n  wire alu_cmt_bjp_rslv;\n  wire alu_cmt_misalgn;\n  wire alu_cmt_ld;\n  wire alu_cmt_stamo;\n  wire alu_cmt_buserr;\n  wire [`E203_ADDR_SIZE-1:0] alu_cmt_badaddr;\n\n\n  wire csr_ena;\n  wire csr_wr_en;\n  wire csr_rd_en;\n  wire [12-1:0] csr_idx;\n\n  wire [`E203_XLEN-1:0] read_csr_dat;\n  wire [`E203_XLEN-1:0] wbck_csr_dat;\n\n  wire flush_pulse;\n  wire flush_req;\n\n  wire nonflush_cmt_ena;\n\n\n  wire eai_xs_off;\n\n  wire csr_access_ilgl;\n\n  wire mdv_nob2b;\n\n\n  e203_exu_alu u_e203_exu_alu(\n\n\n  `ifdef E203_HAS_CSR_EAI//{\n    .eai_csr_valid (eai_csr_valid),\n    .eai_csr_ready (eai_csr_ready),\n    .eai_csr_addr  (eai_csr_addr ),\n    .eai_csr_wr    (eai_csr_wr   ),\n    .eai_csr_wdata (eai_csr_wdata),\n    .eai_csr_rdata (eai_csr_rdata),\n  `endif//}\n    .csr_access_ilgl     (csr_access_ilgl),\n    .nonflush_cmt_ena    (nonflush_cmt_ena),\n\n    .i_valid             (disp_alu_valid   ),\n    .i_ready             (disp_alu_ready   ),\n    .i_longpipe          (disp_alu_longpipe),\n    .i_itag              (disp_alu_itag    ),\n    .i_rs1               (disp_alu_rs1     ),\n    .i_rs2               (disp_alu_rs2     ),\n    .eai_xs_off          (eai_xs_off),\n    .i_rdwen             (disp_alu_rdwen   ),\n    .i_rdidx             (disp_alu_rdidx   ),\n    .i_info              (disp_alu_info    ),\n    .i_pc                (i_pc    ),\n    .i_pc_vld            (i_pc_vld),\n    .i_instr             (i_ir    ),\n    .i_imm               (disp_alu_imm     ),\n    .i_misalgn           (disp_alu_misalgn    ),\n    .i_buserr            (disp_alu_buserr     ),\n    .i_ilegl             (disp_alu_ilegl      ),\n\n    .flush_pulse         (flush_pulse    ),\n    .flush_req           (flush_req      ),\n\n    .oitf_empty          (oitf_empty),\n    .amo_wait            (amo_wait),\n\n    .cmt_o_valid         (alu_cmt_valid      ),\n    .cmt_o_ready         (alu_cmt_ready      ),\n    .cmt_o_pc_vld        (alu_cmt_pc_vld     ),\n    .cmt_o_pc            (alu_cmt_pc         ),\n    .cmt_o_instr         (alu_cmt_instr      ),\n    .cmt_o_imm           (alu_cmt_imm        ),\n    .cmt_o_rv32          (alu_cmt_rv32       ),\n    .cmt_o_bjp           (alu_cmt_bjp        ),\n    .cmt_o_dret          (alu_cmt_dret        ),\n    .cmt_o_mret          (alu_cmt_mret        ),\n    .cmt_o_ecall         (alu_cmt_ecall      ),\n    .cmt_o_ebreak        (alu_cmt_ebreak     ),\n    .cmt_o_fencei        (alu_cmt_fencei     ),\n    .cmt_o_wfi           (alu_cmt_wfi        ),\n    .cmt_o_ifu_misalgn   (alu_cmt_ifu_misalgn),\n    .cmt_o_ifu_buserr    (alu_cmt_ifu_buserr ),\n    .cmt_o_ifu_ilegl     (alu_cmt_ifu_ilegl  ),\n    .cmt_o_bjp_prdt      (alu_cmt_bjp_prdt   ),\n    .cmt_o_bjp_rslv      (alu_cmt_bjp_rslv   ),\n    .cmt_o_misalgn       (alu_cmt_misalgn),\n    .cmt_o_ld            (alu_cmt_ld),\n    .cmt_o_stamo         (alu_cmt_stamo),\n    .cmt_o_buserr        (alu_cmt_buserr),\n    .cmt_o_badaddr       (alu_cmt_badaddr),\n\n    .wbck_o_valid        (alu_wbck_o_valid ), \n    .wbck_o_ready        (alu_wbck_o_ready ),\n    .wbck_o_wdat         (alu_wbck_o_wdat  ),\n    .wbck_o_rdidx        (alu_wbck_o_rdidx ),\n\n    .csr_ena             (csr_ena),\n    .csr_idx             (csr_idx),\n    .csr_rd_en           (csr_rd_en),\n    .csr_wr_en           (csr_wr_en),\n    .read_csr_dat        (read_csr_dat),\n    .wbck_csr_dat        (wbck_csr_dat),\n\n    .agu_icb_cmd_valid   (agu_icb_cmd_valid ),\n    .agu_icb_cmd_ready   (agu_icb_cmd_ready ),\n    .agu_icb_cmd_addr    (agu_icb_cmd_addr ),\n    .agu_icb_cmd_read    (agu_icb_cmd_read   ),\n    .agu_icb_cmd_wdata   (agu_icb_cmd_wdata ),\n    .agu_icb_cmd_wmask   (agu_icb_cmd_wmask ),\n    .agu_icb_cmd_lock    (agu_icb_cmd_lock),\n    .agu_icb_cmd_excl    (agu_icb_cmd_excl),\n    .agu_icb_cmd_size    (agu_icb_cmd_size),\n   \n    .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu ),\n    .agu_icb_cmd_usign   (agu_icb_cmd_usign),\n    .agu_icb_cmd_itag    (agu_icb_cmd_itag),\n  \n    .agu_icb_rsp_valid   (agu_icb_rsp_valid ),\n    .agu_icb_rsp_ready   (agu_icb_rsp_ready ),\n    .agu_icb_rsp_err     (agu_icb_rsp_err   ),\n    .agu_icb_rsp_excl_ok (agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata   (agu_icb_rsp_rdata),\n\n    \n\n\n    .mdv_nob2b         (mdv_nob2b),\n\n    .clk                 (clk          ),\n    .rst_n               (rst_n        ) \n  );\n\n  //////////////////////////////////////////////////////////////\n  // Instantiate the Long-pipe Write-Back\n  wire longp_wbck_o_valid;\n  wire longp_wbck_o_ready;\n  wire [`E203_FLEN-1:0] longp_wbck_o_wdat;\n  wire [`E203_RFIDX_WIDTH-1:0] longp_wbck_o_rdidx;\n  wire longp_wbck_o_rdfpu;\n  wire [4:0] longp_wbck_o_flags;\n\n  wire longp_excp_o_ready;\n  wire longp_excp_o_valid;\n  wire longp_excp_o_ld;\n  wire longp_excp_o_st;\n  wire longp_excp_o_buserr ;\n  wire[`E203_ADDR_SIZE-1:0]longp_excp_o_badaddr;\n  wire longp_excp_o_inste"}
{"text": "rr;\n  wire[`E203_PC_SIZE-1:0]longp_excp_o_pc;\n\n  e203_exu_longpwbck u_e203_exu_longpwbck(\n\n    .lsu_wbck_i_valid   (lsu_o_valid ),\n    .lsu_wbck_i_ready   (lsu_o_ready ),\n    .lsu_wbck_i_wdat    (lsu_o_wbck_wdat  ),\n    .lsu_wbck_i_itag    (lsu_o_wbck_itag  ),\n    .lsu_wbck_i_err     (lsu_o_wbck_err   ),\n    .lsu_cmt_i_ld       (lsu_o_cmt_ld     ),\n    .lsu_cmt_i_st       (lsu_o_cmt_st     ),\n    .lsu_cmt_i_badaddr  (lsu_o_cmt_badaddr),\n    .lsu_cmt_i_buserr   (lsu_o_cmt_buserr ),\n\n    .longp_wbck_o_valid   (longp_wbck_o_valid ), \n    .longp_wbck_o_ready   (longp_wbck_o_ready ),\n    .longp_wbck_o_wdat    (longp_wbck_o_wdat  ),\n    .longp_wbck_o_rdidx   (longp_wbck_o_rdidx ),\n    .longp_wbck_o_rdfpu   (longp_wbck_o_rdfpu ),\n    .longp_wbck_o_flags   (longp_wbck_o_flags ),\n\n    .longp_excp_o_ready   (longp_excp_o_ready  ),\n    .longp_excp_o_valid   (longp_excp_o_valid  ),\n    .longp_excp_o_ld      (longp_excp_o_ld     ),\n    .longp_excp_o_st      (longp_excp_o_st     ),\n    .longp_excp_o_buserr  (longp_excp_o_buserr ),\n    .longp_excp_o_badaddr (longp_excp_o_badaddr),\n    .longp_excp_o_insterr (longp_excp_o_insterr),\n    .longp_excp_o_pc      (longp_excp_o_pc),\n\n    .oitf_ret_rdidx      (oitf_ret_rdidx),\n    .oitf_ret_rdwen      (oitf_ret_rdwen),\n    .oitf_ret_rdfpu      (oitf_ret_rdfpu),\n    .oitf_ret_pc         (oitf_ret_pc),\n    .oitf_empty          (oitf_empty    ),\n    .oitf_ret_ptr        (oitf_ret_ptr  ),\n    .oitf_ret_ena        (oitf_ret_ena  ),\n    \n\n\n\n    .clk                 (clk          ),\n    .rst_n               (rst_n        ) \n  );\n\n\n  //////////////////////////////////////////////////////////////\n  // Instantiate the Final Write-Back\n  e203_exu_wbck u_e203_exu_wbck(\n\n    .alu_wbck_i_valid   (alu_wbck_o_valid ), \n    .alu_wbck_i_ready   (alu_wbck_o_ready ),\n    .alu_wbck_i_wdat    (alu_wbck_o_wdat  ),\n    .alu_wbck_i_rdidx   (alu_wbck_o_rdidx ),\n                         \n    .longp_wbck_i_valid (longp_wbck_o_valid ), \n    .longp_wbck_i_ready (longp_wbck_o_ready ),\n    .longp_wbck_i_wdat  (longp_wbck_o_wdat  ),\n    .longp_wbck_i_rdidx (longp_wbck_o_rdidx ),\n    .longp_wbck_i_rdfpu (longp_wbck_o_rdfpu ),\n    .longp_wbck_i_flags (longp_wbck_o_flags ),\n\n    .rf_wbck_o_ena      (rf_wbck_ena    ),\n    .rf_wbck_o_wdat     (rf_wbck_wdat   ),\n    .rf_wbck_o_rdidx    (rf_wbck_rdidx  ),\n       \n\n    .clk                 (clk          ),\n    .rst_n               (rst_n        ) \n  );\n\n  //////////////////////////////////////////////////////////////\n  // Instantiate the Commit\n  wire [`E203_ADDR_SIZE-1:0] cmt_badaddr;\n  wire cmt_badaddr_ena;\n  wire [`E203_PC_SIZE-1:0] cmt_epc;\n  wire cmt_epc_ena;\n  wire [`E203_XLEN-1:0] cmt_cause;\n  wire cmt_cause_ena;\n  wire cmt_instret_ena;\n  wire cmt_status_ena;\n\n  wire                      cmt_mret_ena;\n\n  wire [`E203_PC_SIZE-1:0]  csr_epc_r;\n  wire [`E203_PC_SIZE-1:0]  csr_dpc_r;\n  wire [`E203_XLEN-1:0]     csr_mtvec_r;\n\n  wire u_mode;\n  wire s_mode;\n  wire h_mode;\n  wire m_mode;\n\n  wire status_mie_r;\n  wire mtie_r;\n  wire msie_r;\n  wire meie_r;\n\n\n\n  e203_exu_commit u_e203_exu_commit(\n    .commit_mret         (commit_mret),\n    .commit_trap         (commit_trap),\n    .core_wfi            (core_wfi        ),\n    .nonflush_cmt_ena    (nonflush_cmt_ena),\n\n    .excp_active         (excp_active),\n\n    .amo_wait            (amo_wait     ),\n\n    .wfi_halt_exu_req    (wfi_halt_exu_req),\n    .wfi_halt_exu_ack    (wfi_halt_exu_ack),\n    .wfi_halt_ifu_req    (wfi_halt_ifu_req),\n    .wfi_halt_ifu_ack    (wfi_halt_ifu_ack),\n\n    .dbg_irq_r               (dbg_irq_r),\n    .lcl_irq_r               (lcl_irq_r),\n    .ext_irq_r               (ext_irq_r),\n    .sft_irq_r               (sft_irq_r),\n    .tmr_irq_r               (tmr_irq_r),\n    .evt_r                   (evt_r    ),\n\n    .status_mie_r            (status_mie_r),\n    .mtie_r                  (mtie_r      ),\n    .msie_r                  (msie_r      ),\n    .meie_r                  (meie_r      ),\n\n    .alu_cmt_i_valid         (alu_cmt_valid      ),\n    .alu_cmt_i_ready         (alu_cmt_ready      ),\n    .alu_cmt_i_pc            (alu_cmt_pc         ),\n    .alu_cmt_i_instr         (alu_cmt_instr      ),\n    .alu_cmt_i_pc_vld        (alu_cmt_pc_vld     ),\n    .alu_cmt_i_imm           (alu_cmt_imm        ),\n    .alu_cmt_i_rv32          (alu_cmt_rv32       ),\n    .alu_cmt_i_bjp           (alu_cmt_bjp        ),\n    .alu_cmt_i_mret          (alu_cmt_mret        ),\n    .alu_cmt_i_dret          (alu_cmt_dret        ),\n    .alu_cmt_i_ecall         (alu_cmt_ecall      ),\n    .alu_cmt_i_ebreak        (alu_cmt_ebreak     ),\n    .alu_cmt_i_fencei        (alu_cmt_fencei     ),\n    .alu_cmt_i_wfi           (alu_cmt_wfi     ),\n    .alu_cmt_i_ifu_misalgn   (alu_cmt_ifu_misalgn),\n    .alu_cmt_i_ifu_buserr    (alu_cmt_ifu_buserr ),\n    .alu_cmt_i_ifu_ilegl     (alu_cmt_ifu_ilegl  ),\n    .alu_cmt_i_bjp_prdt      (alu_cmt_bjp_prdt   ),\n    .alu_cmt_i_bjp_rslv      (alu_cmt_bjp_rslv   ),\n    .alu_cmt_i_misalgn       (alu_cmt_misalgn),\n    .alu_cmt_i_ld            (alu_cmt_ld),\n    .alu_cmt_i_stamo         (alu_cmt_stamo),\n    .alu_cmt_i_buserr        (alu_cmt_buserr),\n    .alu_cmt_i_badaddr       (alu_cmt_badaddr),\n\n\n    .longp_excp_i_ready    (longp_excp_o_ready  ),\n    .longp_excp_i_valid    (longp_excp_o_valid  ),\n    .longp_excp_i_ld       (longp_excp_o_ld     ),\n    .longp_excp_i_st       (longp_excp_o_st     ),\n    .longp_excp_i_buserr   (longp_excp_o_buserr ),\n    .longp_excp_i_badaddr  (longp_excp_o_badaddr),\n    .longp_excp_i_insterr  (longp_excp_o_insterr),\n    .longp_excp_i_pc       (longp_excp_o_pc     ),\n\n    .dbg_mode              (dbg_mode),\n    .dbg_halt_r            (dbg_halt_r),\n    .dbg_step_r            (dbg_step_r),\n    .dbg_ebreakm_r         (dbg_ebreakm_r),\n\n\n    .oitf_empty            (oitf_empty),\n    .u_mode                (u_mode),\n    .s_mode                (s_mode),\n    .h_mode                (h_mode),\n    .m_mode                (m_mode),\n\n    .cmt_badaddr           (cmt_badaddr    ), \n    .cmt_badaddr_ena       (cmt_badaddr_ena),\n    .cmt_epc               (cmt_epc        ),\n    .cmt_epc_ena           (cmt_epc_ena    ),\n    .cmt_cause             (cmt_cause      ),\n    .cmt_cause_ena         (cmt_cause_ena  ),\n    .cmt_instret_ena       (cmt_instret_ena  ),\n    .cmt_status_ena        (cmt_status_ena  ),\n                           \n    .cmt_dpc               (cmt_dpc        ),\n    .cmt_dpc_ena           (cmt_dpc_ena    ),\n    .cmt_dcause            (cmt_dcause     ),\n    .cmt_dcause_ena        (cmt_dcause_ena ),\n\n    .cmt_mret_ena            (cmt_mret_ena     ),\n    .csr_epc_r               (csr_epc_r       ),\n    .csr_dpc_r               (csr_dpc_r       ),\n    .csr_mtvec_r             (csr_mtvec_r     ),\n\n    .flush_pulse             (flush_pulse    ),\n    .flush_req           (flush_req      ),\n\n    .pipe_flush_ack          (pipe_flush_ack    ),\n    .pipe_flush_req          (pipe_flush_req    ),\n    .pipe_flush_add_op1      (pipe_flush_add_op1),  \n    .pipe_flush_add_op2      (pipe_flush_add_op2),  \n  `ifdef E203_TIMING_BOOST//}\n    .pipe_flush_pc           (pipe_flush_pc),  \n  `endif//}\n\n    .clk                     (clk          ),\n    .rst_n                   (rst_n        ) \n  );\n\n    \n    // The Decode to IFU read-en used for the branch dependency check\n    //   only need to check the integer regfile, so here we need to exclude\n    //   the FPU condition out\n  assign dec2ifu_rden  = disp_oitf_rdwen & (~disp_oitf_rdfpu); \n  assign dec2ifu_rs1en = disp_oitf_rs1en & (~disp_oitf_rs1fpu);\n  assign dec2ifu_rdidx = dec_rdidx;\n  assign rf2ifu_rs1    = rf_rs1;\n\n\n\n\n  e203_exu_csr u_e203_exu_csr(\n    .csr_access_ilgl     (csr_access_ilgl),\n    .eai_xs_off          (eai_xs_off),\n    .nonflush_cmt_ena    (nonflush_cmt_ena),\n    .tm_stop             (tm_stop),\n    .itcm_nohold         (itcm_nohold),\n    .mdv_nob2b           (mdv_nob2b),\n    .core_cgstop         (core_cgstop),\n    .tcm_cgstop          (tcm_cgstop ),\n    .csr_ena             (csr_ena),\n    .csr_idx             (csr_idx),\n    .csr_rd_en           (csr_rd_en),\n    .csr_wr_en           (csr_wr_en),\n    .read_csr_dat        (read_csr_dat),\n    .wbck_csr_dat        (wbck_csr_dat),\n   \n    .cmt_badaddr           (cmt_badaddr    ), \n    .cmt_badaddr_ena       (cmt_badaddr_ena),\n    .cmt_epc               (cmt_epc        ),\n    .cmt_epc_ena           (cmt_epc_ena    ),\n    .cmt_cause             (cmt_cause      ),\n    .cmt_cause_ena         (cmt_cause_ena  ),\n    .cmt_instret_ena       (cmt_instret_ena  ),\n    .cmt_status_ena        (cmt_status_ena ),\n\n    .cmt_mret_ena  (cmt_mret_ena     ),\n    .csr_epc_r     (csr_epc_r       ),\n    .csr_dpc_r     (csr_dpc_r       ),\n    .csr_mtvec_r   (csr_mtvec_r     ),\n\n    .wr_dcsr_ena     (wr_dcsr_ena    ),\n    .wr_dpc_ena      (wr_dpc_ena     ),\n    .wr_dscratch_ena (wr_dscratch_ena),\n\n                                     \n    .wr_csr_nxt      (wr_csr_nxt    ),\n                                     \n    .dcsr_r          (dcsr_r         ),\n    .dpc_r           (dpc_r          ),\n    .dscratch_r      (dscratch_r     ),\n                                    \n    .dbg_mode       (dbg_mode       ),\n    .dbg_stopcycle  (dbg_stopcycle),\n\n    .u_mode        (u_mode),\n    .s_mode        (s_mode),\n    .h_mode        (h_mode),\n    .m_mode        (m_mode),\n\n    .core_mhartid  (core_mhartid),\n\n    .status_mie_r  (status_mie_r),\n    .mtie_r        (mtie_r      ),\n    .msie_r        (msie_r      ),\n    .meie_r        (meie_r      ),\n\n    .ext_irq_r     (ext_irq_r),\n    .sft_irq_r     (sft_irq_r),\n    .tmr_irq_r     (tmr_irq_r),\n\n    .clk_aon       (clk_aon      ),\n    .clk           (clk          ),\n    .rst_n         (rst_n        ) \n  );\n\n  assign exu_active = (~oitf_empty) | i_valid | excp_active;\n\n\nendmodule                                      \n                                               \n                                               \n                                               \n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The ALU module to implement the compute function unit\n//    and the AGU (address generate unit) for LSU is also handled by ALU\n//    additionaly, the shared-impelmentation of MUL and DIV instruction \n//    is also shared by ALU in E200\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_exu_alu(\n\n  //////////////////////////////////////////////////////////////\n  // The operands and decode info from dispatch\n  input  i_valid, \n  output i_ready, \n\n  output i_longpipe, // Indicate this instruction is \n                     //   issued as a long pipe instruction\n\n  `ifdef E203_HAS_CSR_EAI//{\n  `ifndef E203_HAS_EAI\n  input  eai_xs_off,\n  `endif//\n  output         eai_csr_valid,\n  input          eai_csr_ready,\n  output  [31:0] eai_csr_addr,\n  output         eai_csr_wr,\n  output  [31:0] eai_csr_wdata,\n  input   [31:0] eai_csr_rdata,\n  `endif//}\n\n  output amo_wait,\n  input  oitf_empty,\n\n                     \n  input  [`E203_ITAG_WIDTH-1:0] i_itag,\n  input  [`E203_XLEN-1:0] i_rs1,\n  input  [`E203_XLEN-1:0] i_rs2,\n  input  [`E203_XLEN-1:0] i_imm,\n  input  [`E203_DECINFO_WIDTH-1:0]  i_info,  \n  input  [`E203_PC_SIZE-1:0] i_pc,\n  input  [`E203_INSTR_SIZE-1:0] i_instr,\n  input  i_pc_vld,\n  input  [`E203_RFIDX_WIDTH-1:0] i_rdidx,\n  input  i_rdwen,\n  input  i_ilegl,\n  input  i_buserr,\n  input  i_misalgn,\n\n  input  flush_req,\n  input  flush_pulse,\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The Commit Interface\n  output cmt_o_valid, // Handshake valid\n  input  cmt_o_ready, // Handshake ready\n  output cmt_o_pc_vld,  \n  output [`E203_PC_SIZE-1:0] cmt_o_pc,  \n  output [`E203_INSTR_SIZE-1:0] cmt_o_instr,  \n  output [`E203_XLEN-1:0]    cmt_o_imm,// The resolved ture/false\n    //   The Branch and Jump Commit\n  output cmt_o_rv32,// The predicted ture/false  \n  output cmt_o_bjp,\n  output cmt_o_mret,\n  output cmt_o_dret,\n  output cmt_o_ecall,\n  output cmt_o_ebreak,\n  output cmt_o_fencei,\n  output cmt_o_wfi,\n  output cmt_o_ifu_misalgn,\n  output cmt_o_ifu_buserr,\n  output cmt_o_ifu_ilegl,\n  output cmt_o_bjp_prdt,// The predicted ture/false  \n  output cmt_o_bjp_rslv,// The resolved ture/false\n    //   The AGU Exception \n  output cmt_o_misalgn, // The misalign exception generated\n  output cmt_o_ld,\n  output cmt_o_stamo,\n  output cmt_o_buserr , // The bus-error exception generated\n  output [`E203_ADDR_SIZE-1:0] cmt_o_badaddr,\n\n\n  //////////////////////////////////////////////////////////////\n  // The ALU Write-Back Interface\n  output wbck_o_valid, // Handshake valid\n  input  wbck_o_ready, // Handshake ready\n  output [`E203_XLEN-1:0] wbck_o_wdat,\n  output [`E203_RFIDX_WIDTH-1:0] wbck_o_rdidx,\n  \n  input  mdv_nob2b,\n\n  //////////////////////////////////////////////////////////////\n  // The CSR Interface\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [12-1:0] csr_idx,\n\n  input  nonflush_cmt_ena,\n  input  csr_access_ilgl,\n  input  [`E203_XLEN-1:0] read_csr_dat,\n  output [`E203_XLEN-1:0] wbck_csr_dat,\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The AGU ICB Interface to LSU-ctrl\n  //    * Bus cmd channel\n  output                         agu_icb_cmd_valid, // Handshake valid\n  input                          agu_icb_cmd_ready, // Handshake ready\n  output [`E203_ADDR_SIZE-1:0]   agu_icb_cmd_addr, // Bus transaction start addr \n  output                         agu_icb_cmd_read,   // Read or write\n  output [`E203_XLEN-1:0]        agu_icb_cmd_wdata, \n  output [`E203_XLEN/8-1:0]      agu_icb_cmd_wmask, \n  output                         agu_icb_cmd_lock,\n  output                         agu_icb_cmd_excl,\n  output [1:0]                   agu_icb_cmd_size,\n  output                         agu_icb_cmd_back2agu, \n  output                         agu_icb_cmd_usign,\n  output [`E203_ITAG_WIDTH -1:0] agu_icb_cmd_itag,\n  //    * Bus RSP channel\n  input                          agu_icb_rsp_valid, // Response valid \n  output                         agu_icb_rsp_ready, // Response ready\n  input                          agu_icb_rsp_err  , // Response error\n  input                          agu_icb_rsp_excl_ok,\n  input  [`E203_XLEN-1:0]        agu_icb_rsp_rdata,\n\n\n\n  input  clk,\n  input  rst_n\n  );\n\n\n\n  //////////////////////////////////////////////////////////////\n  // Dispatch to different sub-modules according to their types\n\n  wire ifu_excp_op = i_ilegl | i_buserr | i_misalgn;\n  wire alu_op = (~ifu_excp_op) & (i_info[`E203_DECINFO_GRP] == `E203_DECINFO_GRP_ALU); \n  wire agu_op = (~ifu_excp_op) & (i_info[`E203_DECINFO_GRP] == `E203_DECINFO_GRP_AGU); \n  wire bjp_op = (~ifu_excp_op) & (i_info[`E203_DECINFO_GRP] == `E203_DECINFO_GRP_BJP); \n  wire csr_op = (~ifu_excp_op) & (i_info[`E203_DECINFO_GRP] == `E203_DECINFO_GRP_CSR); \n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n  wire mdv_op = (~ifu_excp_op) & (i_info[`E203_DECINFO_GRP] == `E203_DECINFO_GRP_MULDIV); \n`endif//E203_SUPPORT_SHARE_MULDIV}\n\n  // The ALU incoming instruction may go to several different targets:\n  //   * The ALUDATAPATH if it is a regular ALU instructions\n  //   * The Branch-cmp if it is a BJP instructions\n  //   * The AGU if it is a load/store relevant instructions\n  //   * The MULDIV if it is a MUL/DIV relevant instructions and MULDIV\n  //       is reusing the ALU adder\n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n  wire mdv_i_valid = i_valid & mdv_op;\n`endif//E203_SUPPORT_SHARE_MULDIV}\n  wire agu_i_valid = i_valid & agu_op;\n  wire alu_i_valid = i_valid & alu_op;\n  wire bjp_i_valid = i_valid & bjp_op;\n  wire csr_i_valid = i_valid & csr_op;\n  wire ifu_excp_i_valid = i_valid & ifu_excp_op;\n\n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n  wire mdv_i_ready;\n`endif//E203_SUPPORT_SHARE_MULDIV}\n  wire agu_i_ready;\n  wire alu_i_ready;\n  wire bjp_i_ready;\n  wire csr_i_ready;\n  wire ifu_excp_i_ready;\n\n  assign i_ready =   (agu_i_ready & agu_op)\n                   `ifdef E203_SUPPORT_SHARE_MULDIV //{\n                   | (mdv_i_ready & mdv_op)\n                   `endif//E203_SUPPORT_SHARE_MULDIV}\n                   | (alu_i_ready & alu_op)\n                   | (ifu_excp_i_ready & ifu_excp_op)\n                   | (bjp_i_ready & bjp_op)\n                   | (csr_i_ready & csr_op)\n                     ;\n\n  wire agu_i_longpipe;\n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n  wire mdv_i_longpipe;\n`endif//E203_SUPPORT_SHARE_MULDIV}\n\n  assign i_longpipe = (agu_i_longpipe & agu_op) \n                   `ifdef E203_SUPPORT_SHARE_MULDIV //{\n                    | (mdv_i_longpipe & mdv_op) \n                   `endif//E203_SUPPORT_SHARE_MULDIV}\n                   ;\n\n  //////////////////////////////////////////////////////////////\n  // Instantiate the CSR module\n  //\n  wire csr_o_valid;\n  wire csr_o_ready;\n  wire [`E203_XLEN-1:0] csr_o_wbck_wdat;\n  wire csr_o_wbck_err;\n\n  wire  [`E203_XLEN-1:0]           csr_i_rs1   = {`E203_XLEN         {csr_op}} & i_rs1;\n  wire  [`E203_XLEN-1:0]           csr_i_rs2   = {`E203_XLEN         {csr_op}} & i_rs2;\n  wire  [`E203_XLEN-1:0]           csr_i_imm   = {`E203_XLEN         {csr_op}} & i_imm;\n  wire  [`E203_DECINFO_WIDTH-1:0]  csr_i_info  = {`E203_DECINFO_WIDTH{csr_op}} & i_info;  \n  wire                             csr_i_rdwen =                      csr_op   & i_rdwen;  \n\n  `ifndef E203_HAS_EAI//{\n  wire eai_o_cmt_wr_reg;\n  wire csr_sel_eai;\n  `endif//}\n\n  e203_exu_alu_csrctrl u_e203_exu_alu_csrctrl(\n\n\n\n  `ifdef E203_HAS_CSR_EAI//{\n    .csr_sel_eai      (csr_sel_eai),\n    .eai_xs_off       (eai_xs_off),\n    .eai_csr_valid    (eai_csr_valid),\n    .eai_csr_ready    (eai_csr_ready),\n    .eai_csr_addr     (eai_csr_addr ),\n    .eai_csr_wr       (eai_csr_wr ),\n    .eai_csr_wdata    (eai_csr_wdata),\n    .eai_csr_rdata    (eai_csr_rdata),\n  `endif//}\n    .csr_access_ilgl  (csr_access_ilgl),\n\n    .csr_i_valid      (csr_i_valid),\n    .csr_i_ready      (csr_i_ready),\n\n    .csr_i_rs1        (csr_i_rs1  ),\n    .csr_i_info       (csr_i_info[`E203_DECINFO_CSR_WIDTH-1:0]),\n    .csr_i_rdwen      (csr_i_rdwen),\n\n    .csr_ena          (csr_ena),\n    .csr_idx          (csr_idx),\n    .csr_rd_en        (csr_rd_en),\n    .csr_wr_en        (csr_wr_en),\n    .read_csr_dat     (read_csr_dat),\n    .wbck_csr_dat     (wbck_csr_dat),\n\n    .csr_o_valid      (csr_o_valid      ),   \n    .csr_o_ready      (csr_o_ready      ),   \n    .csr_o_wbck_wdat  (csr_o_wbck_wdat  ),\n    .csr_o_wbck_err   (csr_o_wbck_err   ),\n\n     .clk             (clk),\n     .rst_n           (rst_n)\n  );\n\n  //////////////////////////////////////////////////////////////\n  // Instantiate the BJP module\n  //\n  wire bjp_o_valid; \n  wire bjp_o_ready; \n  wire [`E203_XLEN-1:0] bjp_o_wbck_wdat;\n  wire bjp_o_wbck_err;\n  wire bjp_o_cmt_bjp;\n  wire bjp_o_cmt_mret;\n  wire bjp_o_cmt_dret;\n  wire bjp_o_cmt_fencei;\n  wire bjp_o_cmt_prdt;\n  wire bjp_o_cmt_rslv;\n\n  wire [`E203_XLEN-1:0] bjp_req_alu_op1;\n  wire [`E203_XLEN-1:0] bjp_req_alu_op2;\n  wire bjp_req_alu_cmp_eq ;\n  wire bjp_req_alu_cmp_ne ;\n  wire bjp_req_alu_cmp_lt ;\n  wire bjp_req_alu_cmp_gt ;\n  wire bjp_req_alu_cmp_ltu;\n  wire bjp_req_alu_cmp_gtu;\n  wire bjp_req_alu_add;\n  wire bjp_req_alu_cmp_res;\n  wire [`E203_XLEN-1:0] bjp_req_alu_add_res;\n\n  wire  [`E203_XLEN-1:0]           bjp_i_rs1  = {`E203_XLEN         {bjp_op}} & i_rs1;\n  wire  [`E203_XLEN-1:0]           bjp_i_rs2  = {`E203_XLEN         {bjp_op}} & i_rs2;\n  wire  [`E203_XLEN-1:0]           bjp_i_imm  = {`E203_XLEN         {bjp_op}} & i_imm;\n  wire  [`E203_DECINFO_WIDTH-1:0]  bjp_i_info = {`E203_DECINFO_WIDTH{bjp_op}} & i_info;  \n  wire  [`E203_PC_SIZE-1:0]        bjp_i_pc   = {`E203_PC_SIZE      {bjp_op}} & i_pc;  \n\n  e203_exu_alu_bjp u_e203_exu_alu_bjp(\n      .bjp_i_valid         (bjp_i_valid         ),\n      .bjp_i_ready         (bjp_i_ready         ),\n      .bjp_i_rs1           (bjp_i_rs1           ),\n      .bjp_i_rs2           (bjp_i_rs2           ),\n      .bjp_i_info          (bjp_i_info[`E203_DECINFO_BJP_WIDTH-1:0]),\n      .bjp_i_imm           (bjp_i_imm           ),\n      .bjp_i_pc            (bjp_i_pc            ),\n\n      .bjp_o_valid         (bjp_o_valid      ),\n      .bjp_o_ready         (bjp_o_ready      ),\n      .bjp_o_wbck_wdat     (bjp_o_wbck_wdat  ),\n      .bjp_o_wbck_err      (bjp_o_wbck_err   ),\n\n      .bjp_o_cmt_bjp       (bjp_o_cmt_bjp    ),\n      .bjp_o_cmt_mret      (bjp_o_cmt_mret    ),\n      .bjp_o_cmt_dret      (bjp_o_cmt_dret    ),\n      .bjp_o_cmt_fencei    (bjp_o_cmt_fencei  ),\n      .bjp_o_cmt_prdt      (bjp_o_cmt_prdt   ),\n      .bjp_o_cmt_rslv      (bjp_o_cmt_rslv   ),\n\n      .bjp_req_alu_op1     (bjp_req_alu_op1       ),\n      .bjp_req_alu_op2     (bjp_req_alu_op2       ),\n      .bjp_req_alu_cmp_eq  (bjp_req_alu_cmp_eq    ),\n      .bjp_req_alu_cmp_ne  (bjp_req_alu_cmp_ne    ),\n      .bjp_req_alu_cmp_lt  (bjp_req_alu_cmp_lt    ),\n      .bjp_req_alu_cmp_gt  (bjp_req_alu_cmp_gt    ),\n      .bjp_req_alu_cmp_ltu (bjp_req_alu_cmp_ltu   ),\n      .bjp_req_alu_cmp_gtu (bjp_req_alu_cmp_gtu   ),\n      .bjp_req_alu_add     (bjp_req_alu_add       ),\n      .bjp_req_alu_cmp_res (bjp_req_alu_cmp_res   ),\n      .bjp_req_alu_add_res (bjp_req_alu_add_res   ),\n\n      .clk                 (clk),\n      .rst_n               (rst_n)\n  );\n\n\n\n  \n  //////////////////////////////////////////////////////////////\n  // Instantiate the AGU module\n  //\n  wire agu_o_valid; \n  wire agu_o_ready; \n  \n  wire [`E203_XLEN-1:0] agu_o_wbck_wdat;\n  wire agu_o_wbck_err;   \n  \n  wire agu_o_cmt_misalgn; \n  wire agu_o_cmt_ld; \n  wire agu_o_cmt_stamo; \n  wire agu_o_cmt_buserr ; \n  wire [`E203_ADDR_SIZE-1:0]agu_o_cmt_badaddr ; \n  \n  wire [`E203_XLEN-1:0] agu_req_alu_op1;\n  wire [`E203_XLEN-1:0] agu_req_alu_op2;\n  wire agu_req_alu_swap;\n  wire agu_req_alu_add ;\n  wire agu_req_alu_and ;\n  wire agu_req_alu_or  ;\n  wire agu_req_alu_xor ;\n  wire agu_req_alu_max ;\n  wire agu_req_alu_min ;\n  wire agu_req_alu_maxu;\n  wire agu_req_alu_minu;\n  wire [`E203_XLEN-1:0] agu_req_alu_res;\n     \n  wire agu_sbf_0_ena;\n  wire [`E203_XLEN-1:0] agu_sbf_0_nxt;\n  wire [`E203_XLEN-1:0] agu_sbf_0_r;\n  wire agu_sbf_1_ena;\n  wire [`E203_XLEN-1:0] agu_sbf_1_nxt;\n  wire [`E203_XLEN-1:0] agu_sbf_1_r;\n\n  wire  [`E203_XLEN-1:0]           agu_i_rs1  = {`E203_XLEN         {agu_op}} & i_rs1;\n  wire  [`E203_XLEN-1:0]           agu_i_rs2  = {`E203_XLEN         {agu_op}} & i_rs2;\n  wire  [`E203_XLEN-1:0]           agu_i_imm  = {`E203_XLEN         {agu_op}} & i_imm;\n  wire  [`E203_DECINFO_WIDTH-1:0]  agu_i_info = {`E203_DECINFO_WIDTH{agu_op}} & i_info;  \n  wire  [`E203_ITAG_WIDTH-1:0]     agu_i_itag = {`E203_ITAG_WIDTH   {agu_op}} & i_itag;  \n\n\n  e203_exu_alu_lsuagu u_e203_exu_alu_lsuagu(\n\n      .agu_i_valid         (agu_i_valid     ),\n      .agu_i_ready         (agu_i_ready     ),\n      .agu_i_rs1           (agu_i_rs1       ),\n      .agu_i_rs2           (agu_i_rs2       ),\n      .agu_i_imm           (agu_i_imm       ),\n      .agu_i_info          (agu_i_info[`E203_DECINFO_AGU_WIDTH-1:0]),\n      .agu_i_longpipe      (agu_i_longpipe  ),\n      .agu_i_itag          (agu_i_itag      ),\n\n      .flush_pulse         (flush_pulse    ),\n      .flush_req           (flush_req      ),\n      .amo_wait            (amo_wait),\n      .oitf_empty          (oitf_empty),\n\n      .agu_o_valid         (agu_o_valid         ),\n      .agu_o_ready         (agu_o_ready         ),\n      .agu_o_wbck_wdat     (agu_o_wbck_wdat     ),\n      .agu_o_wbck_err      (agu_o_wbck_err      ),\n      .agu_o_cmt_misalgn   (agu_o_cmt_misalgn   ),\n      .agu_o_cmt_ld        (agu_o_cmt_ld        ),\n      .agu_o_cmt_stamo     (agu_o_cmt_stamo     ),\n      .agu_o_cmt_buserr    (agu_o_cmt_buserr    ),\n      .agu_o_cmt_badaddr   (agu_o_cmt_badaddr   ),\n                                                \n      .agu_icb_cmd_valid   (agu_icb_cmd_valid   ),\n      .agu_icb_cmd_ready   (agu_icb_cmd_ready   ),\n      .agu_icb_cmd_addr    (agu_icb_cmd_addr    ),\n      .agu_icb_cmd_read    (agu_icb_cmd_read    ),\n      .agu_icb_cmd_wdata   (agu_icb_cmd_wdata   ),\n      .agu_icb_cmd_wmask   (agu_icb_cmd_wmask   ),\n      .agu_icb_cmd_lock    (agu_icb_cmd_lock    ),\n      .agu_icb_cmd_excl    (agu_icb_cmd_excl    ),\n      .agu_icb_cmd_size    (agu_icb_cmd_size    ),\n      .agu_icb_cmd_back2agu(agu_icb_cmd_back2agu),\n      .agu_icb_cmd_usign   (agu_icb_cmd_usign   ),\n      .agu_icb_cmd_itag    (agu_icb_cmd_itag    ),\n      .agu_icb_rsp_valid   (agu_icb_rsp_valid   ),\n      .agu_icb_rsp_ready   (agu_icb_rsp_ready   ),\n      .agu_icb_rsp_err     (agu_icb_rsp_err     ),\n      .agu_icb_rsp_excl_ok (agu_icb_rsp_excl_ok ),\n      .agu_icb_rsp_rdata   (agu_icb_rsp_rdata   ),\n                                                \n      .agu_req_alu_op1     (agu_req_alu_op1     ),\n      .agu_req_alu_op2     (agu_req_alu_op2     ),\n      .agu_req_alu_swap    (agu_req_alu_swap    ),\n      .agu_req_alu_add     (agu_req_alu_add     ),\n      .agu_req_alu_and     (agu_req_alu_and     ),\n      .agu_req_alu_or      (agu_req_alu_or      ),\n      .agu_req_alu_xor     (agu_req_alu_xor     ),\n      .agu_req_alu_max     (agu_req_alu_max     ),\n      .agu_req_alu_min     (agu_req_alu_min     ),\n      .agu_req_alu_maxu    (agu_req_alu_maxu    ),\n      .agu_req_alu_minu    (agu_req_alu_minu    ),\n      .agu_req_alu_res     (agu_req_alu_res     ),\n                                                \n      .agu_sbf_0_ena       (agu_sbf_0_ena       ),\n      .agu_sbf_0_nxt       (agu_sbf_0_nxt       ),\n      .agu_sbf_0_r         (agu_sbf_0_r         ),\n                                                \n      .agu_sbf_1_ena       (agu_sbf_1_ena       ),\n      .agu_sbf_1_nxt       (agu_sbf_1_nxt       ),\n      .agu_sbf_1_r         (agu_sbf_1_r         ),\n     \n      .clk                 (clk),\n      .rst_n               (rst_n)\n  );\n\n  //////////////////////////////////////////////////////////////\n  // Instantiate the regular ALU module\n  //\n  wire alu_o_valid; \n  wire alu_o_ready; \n  wire [`E203_XLEN-1:0] alu_o_wbck_wdat;\n  wire alu_o_wbck_err;   \n  wire alu_o_cmt_ecall;\n  wire alu_o_cmt_ebreak;\n  wire alu_o_cmt_wfi;\n\n  wire alu_req_alu_add ;\n  wire alu_req_alu_sub ;\n  wire alu_req_alu_xor ;\n  wire alu_req_alu_sll ;\n  wire alu_req_alu_srl ;\n  wire alu_req_alu_sra ;\n  wire alu_req_alu_or  ;\n  wire alu_req_alu_and ;\n  wire alu_req_alu_slt ;\n  wire alu_req_alu_sltu;\n  wire alu_req_alu_lui ;\n  wire [`E203_XLEN-1:0] alu_req_alu_op1;\n  wire [`E203_XLEN-1:0] alu_req_alu_op2;\n  wire [`E203_XLEN-1:0] alu_req_alu_res;\n\n  wire  [`E203_XLEN-1:0]           alu_i_rs1  = {`E203_XLEN         {alu_op}} & i_rs1;\n  wire  [`E203_XLEN-1:0]           alu_i_rs2  = {`E203_XLEN         {alu_op}} & i_rs2;\n  wire  [`E203_XLEN-1:0]           alu_i_imm  = {`E203_XLEN         {alu_op}} & i_imm;\n  wire  [`E203_DECINFO_WIDTH-1:0]  alu_i_info = {`E203_DECINFO_WIDTH{alu_op}} & i_info;  \n  wire  [`E203_PC_SIZE-1:0]        alu_i_pc   = {`E203_PC_SIZE      {alu_op}} & i_pc;  \n\n  e203_exu_alu_rglr u_e203_exu_alu_rglr(\n\n      .alu_i_valid         (alu_i_valid     ),\n      .alu_i_ready         (alu_i_ready     ),\n      .alu_i_rs1           (alu_i_rs1           ),\n      .alu_i_rs2           (alu_i_rs2           ),\n      .alu_i_info          (alu_i_info[`E203_DECINFO_ALU_WIDTH-1:0]),\n      .alu_i_imm           (alu_i_imm           ),\n      .alu_i_pc            (alu_i_pc            ),\n\n      .alu_o_valid         (alu_o_valid         ),\n      .alu_o_ready         (alu_o_ready         ),\n      .alu_o_wbck_wdat     (alu_o_wbck_wdat     ),\n      .alu_o_wbck_err      (alu_o_wbck_err      ),\n      .alu_o_cmt_ecall     (alu_o_cmt_ecall ),\n      .alu_o_cmt_ebreak    (alu_o_cmt_ebreak),\n      .alu_o_cmt_wfi       (alu_o_cmt_wfi   ),\n\n      .alu_req_alu_add     (alu_req_alu_add       ),\n      .alu_req_alu_sub     (alu_req_alu_sub       ),\n      .alu_req_alu_xor     (alu_req_alu_xor       ),\n      .alu_req_alu_sll     (alu_req_alu_sll       ),\n      .alu_req_alu_srl     (alu_req_alu_srl       ),\n      .alu_req_alu_sra     (alu_req_alu_sra       ),\n      .alu_req_alu_or      (alu_req_alu_or        ),\n      .alu_req_alu_and     (alu_req_alu_and       ),\n      .alu_req_alu_slt     (alu_req_alu_slt       ),\n      .alu_req_alu_sltu    (alu_req_alu_sltu      ),\n      .alu_req_alu_lui     (alu_req_alu_lui       ),\n      .alu_req_alu_op1     (alu_req_alu_op1       ),\n      .alu_req_alu_op2     (alu_req_alu_op2       ),\n      .alu_req_alu_res     (alu_req_alu_res       ),\n\n      .clk                 (clk           ),\n      .rst_n               (rst_n         ) \n  );\n\n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n  ///////////////////////////////"}
{"text": "///////////////////////\n  // Instantiate the MULDIV module\n  wire [`E203_XLEN-1:0]           mdv_i_rs1  = {`E203_XLEN         {mdv_op}} & i_rs1;\n  wire [`E203_XLEN-1:0]           mdv_i_rs2  = {`E203_XLEN         {mdv_op}} & i_rs2;\n  wire [`E203_XLEN-1:0]           mdv_i_imm  = {`E203_XLEN         {mdv_op}} & i_imm;\n  wire [`E203_DECINFO_WIDTH-1:0]  mdv_i_info = {`E203_DECINFO_WIDTH{mdv_op}} & i_info;  \n  wire  [`E203_ITAG_WIDTH-1:0]    mdv_i_itag = {`E203_ITAG_WIDTH   {mdv_op}} & i_itag;  \n\n  wire mdv_o_valid; \n  wire mdv_o_ready;\n  wire [`E203_XLEN-1:0] mdv_o_wbck_wdat;\n  wire mdv_o_wbck_err;\n\n  wire [`E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1;\n  wire [`E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2;\n  wire                             muldiv_req_alu_add ;\n  wire                             muldiv_req_alu_sub ;\n  wire [`E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res;\n\n  wire          muldiv_sbf_0_ena;\n  wire [33-1:0] muldiv_sbf_0_nxt;\n  wire [33-1:0] muldiv_sbf_0_r;\n\n  wire          muldiv_sbf_1_ena;\n  wire [33-1:0] muldiv_sbf_1_nxt;\n  wire [33-1:0] muldiv_sbf_1_r;\n\n  e203_exu_alu_muldiv u_e203_exu_alu_muldiv(\n      .mdv_nob2b           (mdv_nob2b),\n\n      .muldiv_i_valid      (mdv_i_valid    ),\n      .muldiv_i_ready      (mdv_i_ready    ),\n                           \n      .muldiv_i_rs1        (mdv_i_rs1      ),\n      .muldiv_i_rs2        (mdv_i_rs2      ),\n      .muldiv_i_imm        (mdv_i_imm      ),\n      .muldiv_i_info       (mdv_i_info[`E203_DECINFO_MULDIV_WIDTH-1:0]),\n      .muldiv_i_longpipe   (mdv_i_longpipe ),\n      .muldiv_i_itag       (mdv_i_itag     ),\n                          \n\n      .flush_pulse         (flush_pulse    ),\n\n      .muldiv_o_valid      (mdv_o_valid    ),\n      .muldiv_o_ready      (mdv_o_ready    ),\n      .muldiv_o_wbck_wdat  (mdv_o_wbck_wdat),\n      .muldiv_o_wbck_err   (mdv_o_wbck_err ),\n\n      .muldiv_req_alu_op1  (muldiv_req_alu_op1),\n      .muldiv_req_alu_op2  (muldiv_req_alu_op2),\n      .muldiv_req_alu_add  (muldiv_req_alu_add),\n      .muldiv_req_alu_sub  (muldiv_req_alu_sub),\n      .muldiv_req_alu_res  (muldiv_req_alu_res),\n      \n      .muldiv_sbf_0_ena    (muldiv_sbf_0_ena  ),\n      .muldiv_sbf_0_nxt    (muldiv_sbf_0_nxt  ),\n      .muldiv_sbf_0_r      (muldiv_sbf_0_r    ),\n     \n      .muldiv_sbf_1_ena    (muldiv_sbf_1_ena  ),\n      .muldiv_sbf_1_nxt    (muldiv_sbf_1_nxt  ),\n      .muldiv_sbf_1_r      (muldiv_sbf_1_r    ),\n\n      .clk                 (clk               ),\n      .rst_n               (rst_n             ) \n  );\n`endif//E203_SUPPORT_SHARE_MULDIV}\n\n\n\n\n\n  //////////////////////////////////////////////////////////////\n  // Instantiate the Shared Datapath module\n  //\n  wire alu_req_alu = alu_op & i_rdwen;// Regular ALU only req datapath when it need to write-back\n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n  wire muldiv_req_alu = mdv_op;// Since MULDIV have no point to let rd=0, so always need ALU datapath\n`endif//E203_SUPPORT_SHARE_MULDIV}\n  wire bjp_req_alu = bjp_op;// Since BJP may not write-back, but still need ALU datapath\n  wire agu_req_alu = agu_op;// Since AGU may have some other features, so always need ALU datapath\n\n  e203_exu_alu_dpath u_e203_exu_alu_dpath(\n      .alu_req_alu         (alu_req_alu           ),    \n      .alu_req_alu_add     (alu_req_alu_add       ),\n      .alu_req_alu_sub     (alu_req_alu_sub       ),\n      .alu_req_alu_xor     (alu_req_alu_xor       ),\n      .alu_req_alu_sll     (alu_req_alu_sll       ),\n      .alu_req_alu_srl     (alu_req_alu_srl       ),\n      .alu_req_alu_sra     (alu_req_alu_sra       ),\n      .alu_req_alu_or      (alu_req_alu_or        ),\n      .alu_req_alu_and     (alu_req_alu_and       ),\n      .alu_req_alu_slt     (alu_req_alu_slt       ),\n      .alu_req_alu_sltu    (alu_req_alu_sltu      ),\n      .alu_req_alu_lui     (alu_req_alu_lui       ),\n      .alu_req_alu_op1     (alu_req_alu_op1       ),\n      .alu_req_alu_op2     (alu_req_alu_op2       ),\n      .alu_req_alu_res     (alu_req_alu_res       ),\n           \n      .bjp_req_alu         (bjp_req_alu           ),\n      .bjp_req_alu_op1     (bjp_req_alu_op1       ),\n      .bjp_req_alu_op2     (bjp_req_alu_op2       ),\n      .bjp_req_alu_cmp_eq  (bjp_req_alu_cmp_eq    ),\n      .bjp_req_alu_cmp_ne  (bjp_req_alu_cmp_ne    ),\n      .bjp_req_alu_cmp_lt  (bjp_req_alu_cmp_lt    ),\n      .bjp_req_alu_cmp_gt  (bjp_req_alu_cmp_gt    ),\n      .bjp_req_alu_cmp_ltu (bjp_req_alu_cmp_ltu   ),\n      .bjp_req_alu_cmp_gtu (bjp_req_alu_cmp_gtu   ),\n      .bjp_req_alu_add     (bjp_req_alu_add       ),\n      .bjp_req_alu_cmp_res (bjp_req_alu_cmp_res   ),\n      .bjp_req_alu_add_res (bjp_req_alu_add_res   ),\n             \n      .agu_req_alu         (agu_req_alu           ),\n      .agu_req_alu_op1     (agu_req_alu_op1       ),\n      .agu_req_alu_op2     (agu_req_alu_op2       ),\n      .agu_req_alu_swap    (agu_req_alu_swap      ),\n      .agu_req_alu_add     (agu_req_alu_add       ),\n      .agu_req_alu_and     (agu_req_alu_and       ),\n      .agu_req_alu_or      (agu_req_alu_or        ),\n      .agu_req_alu_xor     (agu_req_alu_xor       ),\n      .agu_req_alu_max     (agu_req_alu_max       ),\n      .agu_req_alu_min     (agu_req_alu_min       ),\n      .agu_req_alu_maxu    (agu_req_alu_maxu      ),\n      .agu_req_alu_minu    (agu_req_alu_minu      ),\n      .agu_req_alu_res     (agu_req_alu_res       ),\n             \n      .agu_sbf_0_ena       (agu_sbf_0_ena         ),\n      .agu_sbf_0_nxt       (agu_sbf_0_nxt         ),\n      .agu_sbf_0_r         (agu_sbf_0_r           ),\n            \n      .agu_sbf_1_ena       (agu_sbf_1_ena         ),\n      .agu_sbf_1_nxt       (agu_sbf_1_nxt         ),\n      .agu_sbf_1_r         (agu_sbf_1_r           ),      \n\n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n      .muldiv_req_alu      (muldiv_req_alu    ),\n\n      .muldiv_req_alu_op1  (muldiv_req_alu_op1),\n      .muldiv_req_alu_op2  (muldiv_req_alu_op2),\n      .muldiv_req_alu_add  (muldiv_req_alu_add),\n      .muldiv_req_alu_sub  (muldiv_req_alu_sub),\n      .muldiv_req_alu_res  (muldiv_req_alu_res),\n      \n      .muldiv_sbf_0_ena    (muldiv_sbf_0_ena  ),\n      .muldiv_sbf_0_nxt    (muldiv_sbf_0_nxt  ),\n      .muldiv_sbf_0_r      (muldiv_sbf_0_r    ),\n     \n      .muldiv_sbf_1_ena    (muldiv_sbf_1_ena  ),\n      .muldiv_sbf_1_nxt    (muldiv_sbf_1_nxt  ),\n      .muldiv_sbf_1_r      (muldiv_sbf_1_r    ),\n`endif//E203_SUPPORT_SHARE_MULDIV}\n\n      .clk                 (clk           ),\n      .rst_n               (rst_n         ) \n    );\n\n  wire ifu_excp_o_valid;\n  wire ifu_excp_o_ready;\n  wire [`E203_XLEN-1:0] ifu_excp_o_wbck_wdat;\n  wire ifu_excp_o_wbck_err;\n\n  assign ifu_excp_i_ready = ifu_excp_o_ready;\n  assign ifu_excp_o_valid = ifu_excp_i_valid;\n  assign ifu_excp_o_wbck_wdat = `E203_XLEN'b0;\n  assign ifu_excp_o_wbck_err  = 1'b1;// IFU illegal instruction always treat as error\n\n  //////////////////////////////////////////////////////////////\n  // Aribtrate the Result and generate output interfaces\n  // \n  wire o_valid;\n  wire o_ready;\n\n  wire o_sel_ifu_excp = ifu_excp_op;\n  wire o_sel_alu = alu_op;\n  wire o_sel_bjp = bjp_op;\n  wire o_sel_csr = csr_op;\n  wire o_sel_agu = agu_op;\n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n  wire o_sel_mdv = mdv_op;\n`endif//E203_SUPPORT_SHARE_MULDIV}\n\n  assign o_valid =     (o_sel_alu      & alu_o_valid     )\n                     | (o_sel_bjp      & bjp_o_valid     )\n                     | (o_sel_csr      & csr_o_valid     )\n                     | (o_sel_agu      & agu_o_valid     )\n                     | (o_sel_ifu_excp & ifu_excp_o_valid)\n                      `ifdef E203_SUPPORT_SHARE_MULDIV //{\n                     | (o_sel_mdv      & mdv_o_valid     )\n                      `endif//E203_SUPPORT_SHARE_MULDIV}\n                     ;\n\n  assign ifu_excp_o_ready = o_sel_ifu_excp & o_ready;\n  assign alu_o_ready      = o_sel_alu & o_ready;\n  assign agu_o_ready      = o_sel_agu & o_ready;\n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n  assign mdv_o_ready      = o_sel_mdv & o_ready;\n`endif//E203_SUPPORT_SHARE_MULDIV}\n  assign bjp_o_ready      = o_sel_bjp & o_ready;\n  assign csr_o_ready      = o_sel_csr & o_ready;\n\n  assign wbck_o_wdat = \n                    ({`E203_XLEN{o_sel_alu}} & alu_o_wbck_wdat)\n                  | ({`E203_XLEN{o_sel_bjp}} & bjp_o_wbck_wdat)\n                  | ({`E203_XLEN{o_sel_csr}} & csr_o_wbck_wdat)\n                  | ({`E203_XLEN{o_sel_agu}} & agu_o_wbck_wdat)\n                      `ifdef E203_SUPPORT_SHARE_MULDIV //{\n                  | ({`E203_XLEN{o_sel_mdv}} & mdv_o_wbck_wdat)\n                      `endif//E203_SUPPORT_SHARE_MULDIV}\n                  | ({`E203_XLEN{o_sel_ifu_excp}} & ifu_excp_o_wbck_wdat)\n                  ;\n\n  assign wbck_o_rdidx = i_rdidx; \n\n  wire wbck_o_rdwen = i_rdwen;\n                  \n  wire wbck_o_err = \n                    ({1{o_sel_alu}} & alu_o_wbck_err)\n                  | ({1{o_sel_bjp}} & bjp_o_wbck_err)\n                  | ({1{o_sel_csr}} & csr_o_wbck_err)\n                  | ({1{o_sel_agu}} & agu_o_wbck_err)\n                      `ifdef E203_SUPPORT_SHARE_MULDIV //{\n                  | ({1{o_sel_mdv}} & mdv_o_wbck_err)\n                      `endif//E203_SUPPORT_SHARE_MULDIV}\n                  | ({1{o_sel_ifu_excp}} & ifu_excp_o_wbck_err)\n                  ;\n\n  //  Each Instruction need to commit or write-back\n  //   * The write-back only needed when the unit need to write-back\n  //     the result (need to write RD), and it is not a long-pipe uop\n  //     (need to be write back by its long-pipe write-back, not here)\n  //   * Each instruction need to be commited \n  wire o_need_wbck = wbck_o_rdwen & (~i_longpipe) & (~wbck_o_err);\n  wire o_need_cmt  = 1'b1;\n  assign o_ready = \n           (o_need_cmt  ? cmt_o_ready  : 1'b1)  \n         & (o_need_wbck ? wbck_o_ready : 1'b1); \n\n  assign wbck_o_valid = o_need_wbck & o_valid & (o_need_cmt  ? cmt_o_ready  : 1'b1);\n  assign cmt_o_valid  = o_need_cmt  & o_valid & (o_need_wbck ? wbck_o_ready : 1'b1);\n  // \n  //  The commint interface have some special signals\n  assign cmt_o_instr   = i_instr;  \n  assign cmt_o_pc   = i_pc;  \n  assign cmt_o_imm  = i_imm;\n  assign cmt_o_rv32 = i_info[`E203_DECINFO_RV32]; \n    // The cmt_o_pc_vld is used by the commit stage to check\n    // if current instruction is outputing a valid current PC\n    //   to guarante the commit to flush pipeline safely, this\n    //   vld only be asserted when:\n    //     * There is a valid instruction here\n    //        --- otherwise, the commit stage may use wrong PC\n    //             value to stored in DPC or EPC\n  assign cmt_o_pc_vld      =\n              // Otherwise, just use the i_pc_vld\n                              i_pc_vld;\n\n  assign cmt_o_misalgn     = (o_sel_agu & agu_o_cmt_misalgn) \n                           ;\n  assign cmt_o_ld          = (o_sel_agu & agu_o_cmt_ld)      \n                           ;\n  assign cmt_o_badaddr     = ({`E203_ADDR_SIZE{o_sel_agu}} & agu_o_cmt_badaddr)  \n                           ;\n  assign cmt_o_buserr      = o_sel_agu & agu_o_cmt_buserr;\n  assign cmt_o_stamo       = o_sel_agu & agu_o_cmt_stamo ;\n\n  assign cmt_o_bjp         = o_sel_bjp & bjp_o_cmt_bjp;\n  assign cmt_o_mret        = o_sel_bjp & bjp_o_cmt_mret;\n  assign cmt_o_dret        = o_sel_bjp & bjp_o_cmt_dret;\n  assign cmt_o_bjp_prdt    = o_sel_bjp & bjp_o_cmt_prdt;\n  assign cmt_o_bjp_rslv    = o_sel_bjp & bjp_o_cmt_rslv;\n  assign cmt_o_fencei      = o_sel_bjp & bjp_o_cmt_fencei;\n\n  assign cmt_o_ecall       = o_sel_alu & alu_o_cmt_ecall;\n  assign cmt_o_ebreak      = o_sel_alu & alu_o_cmt_ebreak;\n  assign cmt_o_wfi         = o_sel_alu & alu_o_cmt_wfi;\n  assign cmt_o_ifu_misalgn = i_misalgn;\n  assign cmt_o_ifu_buserr  = i_buserr;\n  assign cmt_o_ifu_ilegl   = i_ilegl\n                           | (o_sel_csr & csr_access_ilgl)\n                        ;\n\nendmodule                                      \n                                               \n                                               \n                                               \n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  This module to implement the Conditional Branch Instructions,\n//  which is mostly share the datapath with ALU adder to resolve the comparasion\n//  result to save gatecount to mininum\n//\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_exu_alu_bjp(\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The Handshake Interface\n  //\n  input  bjp_i_valid, // Handshake valid\n  output bjp_i_ready, // Handshake ready\n\n  input  [`E203_XLEN-1:0] bjp_i_rs1,\n  input  [`E203_XLEN-1:0] bjp_i_rs2,\n  input  [`E203_XLEN-1:0] bjp_i_imm,\n  input  [`E203_PC_SIZE-1:0] bjp_i_pc,\n  input  [`E203_DECINFO_BJP_WIDTH-1:0] bjp_i_info,\n  \n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The BJP Commit Interface\n  output bjp_o_valid, // Handshake valid\n  input  bjp_o_ready, // Handshake ready\n    //   The Write-Back Result for JAL and JALR\n  output [`E203_XLEN-1:0] bjp_o_wbck_wdat,\n  output bjp_o_wbck_err,\n    //   The Commit Result for BJP\n  output bjp_o_cmt_bjp,\n  output bjp_o_cmt_mret,\n  output bjp_o_cmt_dret,\n  output bjp_o_cmt_fencei,\n  output bjp_o_cmt_prdt,// The predicted ture/false  \n  output bjp_o_cmt_rslv,// The resolved ture/false\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // To share the ALU datapath\n  // \n     // The operands and info to ALU\n\n  output [`E203_XLEN-1:0] bjp_req_alu_op1,\n  output [`E203_XLEN-1:0] bjp_req_alu_op2,\n  output bjp_req_alu_cmp_eq ,\n  output bjp_req_alu_cmp_ne ,\n  output bjp_req_alu_cmp_lt ,\n  output bjp_req_alu_cmp_gt ,\n  output bjp_req_alu_cmp_ltu,\n  output bjp_req_alu_cmp_gtu,\n  output bjp_req_alu_add,\n\n  input  bjp_req_alu_cmp_res,\n  input  [`E203_XLEN-1:0] bjp_req_alu_add_res,\n\n  input  clk,\n  input  rst_n\n  );\n\n\n  wire mret   = bjp_i_info [`E203_DECINFO_BJP_MRET ]; \n  wire dret   = bjp_i_info [`E203_DECINFO_BJP_DRET ]; \n  wire fencei = bjp_i_info [`E203_DECINFO_BJP_FENCEI ]; \n  wire bxx   = bjp_i_info [`E203_DECINFO_BJP_BXX ]; \n  wire jump  = bjp_i_info [`E203_DECINFO_BJP_JUMP ]; \n  wire rv32  = bjp_i_info [`E203_DECINFO_RV32]; \n\n  wire wbck_link = jump;\n\n  wire bjp_i_bprdt = bjp_i_info [`E203_DECINFO_BJP_BPRDT ];\n\n  assign bjp_req_alu_op1 = wbck_link ? \n                            bjp_i_pc \n                          : bjp_i_rs1;\n  assign bjp_req_alu_op2 = wbck_link ? \n                            (rv32 ? `E203_XLEN'd4 : `E203_XLEN'd2)\n                          : bjp_i_rs2;\n\n  assign bjp_o_cmt_bjp = bxx | jump;\n  assign bjp_o_cmt_mret = mret;\n  assign bjp_o_cmt_dret = dret;\n  assign bjp_o_cmt_fencei = fencei;\n\n  assign bjp_req_alu_cmp_eq  = bjp_i_info [`E203_DECINFO_BJP_BEQ  ]; \n  assign bjp_req_alu_cmp_ne  = bjp_i_info [`E203_DECINFO_BJP_BNE  ]; \n  assign bjp_req_alu_cmp_lt  = bjp_i_info [`E203_DECINFO_BJP_BLT  ]; \n  assign bjp_req_alu_cmp_gt  = bjp_i_info [`E203_DECINFO_BJP_BGT  ]; \n  assign bjp_req_alu_cmp_ltu = bjp_i_info [`E203_DECINFO_BJP_BLTU ]; \n  assign bjp_req_alu_cmp_gtu = bjp_i_info [`E203_DECINFO_BJP_BGTU ]; \n\n  assign bjp_req_alu_add  = wbck_link;\n\n  assign bjp_o_valid     = bjp_i_valid;\n  assign bjp_i_ready     = bjp_o_ready;\n  assign bjp_o_cmt_prdt  = bjp_i_bprdt;\n  assign bjp_o_cmt_rslv  = jump ? 1'b1 : bjp_req_alu_cmp_res;\n\n  assign bjp_o_wbck_wdat  = bjp_req_alu_add_res;\n  assign bjp_o_wbck_err   = 1'b0;\n\nendmodule\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n// Designer   : Bob Hu\n//\n// Description:\n//  This module to implement the CSR instructions\n//\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_exu_alu_csrctrl(\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The Handshake Interface \n  //\n  input  csr_i_valid, // Handshake valid\n  output csr_i_ready, // Handshake ready\n\n  input  [`E203_XLEN-1:0] csr_i_rs1,\n  input  [`E203_DECINFO_CSR_WIDTH-1:0] csr_i_info,\n  input  csr_i_rdwen,   \n\n  output csr_ena,\n  output csr_wr_en,\n  output csr_rd_en,\n  output [12-1:0] csr_idx,\n\n  input  csr_access_ilgl,\n  input  [`E203_XLEN-1:0] read_csr_dat,\n  output [`E203_XLEN-1:0] wbck_csr_dat,\n\n  \n  `ifdef E203_HAS_CSR_EAI//{\n  output         csr_sel_eai,\n  input          eai_xs_off,\n  output         eai_csr_valid,\n  input          eai_csr_ready,\n  output  [31:0] eai_csr_addr,\n  output         eai_csr_wr,\n  output  [31:0] eai_csr_wdata,\n  input   [31:0] eai_csr_rdata,\n  `endif//}\n\n\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The CSR Write-back/Commit Interface\n  output csr_o_valid, // Handshake valid\n  input  csr_o_ready, // Handshake ready\n  //   The Write-Back Interface for Special (unaligned ldst and AMO instructions) \n  output [`E203_XLEN-1:0] csr_o_wbck_wdat,\n  output csr_o_wbck_err,   \n\n  input  clk,\n  input  rst_n\n  );\n\n\n  `ifdef E203_HAS_CSR_EAI//{\n      // If accessed the EAI CSR range then we need to check if the EAI CSR is ready\n  assign csr_sel_eai        = (csr_idx[11:8] == 4'hE);\n  wire sel_eai            = csr_sel_eai & (~eai_xs_off);\n  wire addi_condi         = sel_eai ? eai_csr_ready : 1'b1; \n\n  assign csr_o_valid      = csr_i_valid\n                            & addi_condi; // Need to make sure the eai_csr-ready is ready to make sure\n                                          //  it can be sent to EAI and O interface same cycle\n  assign eai_csr_valid    = sel_eai & csr_i_valid & \n                            csr_o_ready;// Need to make sure the o-ready is ready to make sure\n                                        //  it can be sent to EAI and O interface same cycle\n\n  assign csr_i_ready      = sel_eai ? (eai_csr_ready & csr_o_ready) : csr_o_ready; \n\n  assign csr_o_wbck_err   = csr_access_ilgl;\n  assign csr_o_wbck_wdat  = sel_eai ? eai_csr_rdata : read_csr_dat;\n\n  assign eai_csr_addr = csr_idx;\n  assign eai_csr_wr   = csr_wr_en;\n  assign eai_csr_wdata = wbck_csr_dat;\n  `else//}{\n  assign sel_eai      = 1'b0;\n  assign csr_o_valid      = csr_i_valid;\n  assign csr_i_ready      = csr_o_ready;\n  assign csr_o_wbck_err   = csr_access_ilgl;\n  assign csr_o_wbck_wdat  = read_csr_dat;\n  `endif//}\n\n\n  wire        csrrw  = csr_i_info[`E203_DECINFO_CSR_CSRRW ];\n  wire        csrrs  = csr_i_info[`E203_DECINFO_CSR_CSRRS ];\n  wire        csrrc  = csr_i_info[`E203_DECINFO_CSR_CSRRC ];\n  wire        rs1imm = csr_i_info[`E203_DECINFO_CSR_RS1IMM];\n  wire        rs1is0 = csr_i_info[`E203_DECINFO_CSR_RS1IS0];\n  wire [4:0]  zimm   = csr_i_info[`E203_DECINFO_CSR_ZIMMM ];\n  wire [11:0] csridx = csr_i_info[`E203_DECINFO_CSR_CSRIDX];\n\n  wire [`E203_XLEN-1:0] csr_op1 = rs1imm ? {27'b0,zimm} : csr_i_rs1;\n\n  assign csr_rd_en = csr_i_valid & \n    (\n      (csrrw ? csr_i_rdwen : 1'b0) // the CSRRW only read when the destination reg need to be writen\n      | csrrs | csrrc // The set and clear operation always need to read CSR\n     );\n  assign csr_wr_en = csr_i_valid & (\n                csrrw // CSRRW always write the original RS1 value into the CSR\n               | ((csrrs | csrrc) & (~rs1is0)) // for CSRRS/RC, if the RS is x0, then should not really write                                        \n            );                                                                           \n                                                                                         \n  assign csr_idx = csridx;\n\n  assign csr_ena = csr_o_valid & csr_o_ready & (~sel_eai);\n\n  assign wbck_csr_dat = \n              ({`E203_XLEN{csrrw}} & csr_op1)\n            | ({`E203_XLEN{csrrs}} & (  csr_op1  | read_csr_dat))\n            | ({`E203_XLEN{csrrc}} & ((~csr_op1) & read_csr_dat));\n\nendmodule\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  This module to implement the datapath of ALU\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_exu_alu_dpath(\n\n  //////////////////////////////////////////////////////\n  // ALU request the datapath\n  input  alu_req_alu,\n\n  input  alu_req_alu_add ,\n  input  alu_req_alu_sub ,\n  input  alu_req_alu_xor ,\n  input  alu_req_alu_sll ,\n  input  alu_req_alu_srl ,\n  input  alu_req_alu_sra ,\n  input  alu_req_alu_or  ,\n  input  alu_req_alu_and ,\n  input  alu_req_alu_slt ,\n  input  alu_req_alu_sltu,\n  input  alu_req_alu_lui ,\n  input  [`E203_XLEN-1:0] alu_req_alu_op1,\n  input  [`E203_XLEN-1:0] alu_req_alu_op2,\n\n  output [`E203_XLEN-1:0] alu_req_alu_res,\n\n  //////////////////////////////////////////////////////\n  // BJP request the datapath\n  input  bjp_req_alu,\n\n  input  [`E203_XLEN-1:0] bjp_req_alu_op1,\n  input  [`E203_XLEN-1:0] bjp_req_alu_op2,\n  input  bjp_req_alu_cmp_eq ,\n  input  bjp_req_alu_cmp_ne ,\n  input  bjp_req_alu_cmp_lt ,\n  input  bjp_req_alu_cmp_gt ,\n  input  bjp_req_alu_cmp_ltu,\n  input  bjp_req_alu_cmp_gtu,\n  input  bjp_req_alu_add,\n\n  output bjp_req_alu_cmp_res,\n  output [`E203_XLEN-1:0] bjp_req_alu_add_res,\n\n  //////////////////////////////////////////////////////\n  // AGU request the datapath\n  input  agu_req_alu,\n\n  input  [`E203_XLEN-1:0] agu_req_alu_op1,\n  input  [`E203_XLEN-1:0] agu_req_alu_op2,\n  input  agu_req_alu_swap,\n  input  agu_req_alu_add ,\n  input  agu_req_alu_and ,\n  input  agu_req_alu_or  ,\n  input  agu_req_alu_xor ,\n  input  agu_req_alu_max ,\n  input  agu_req_alu_min ,\n  input  agu_req_alu_maxu,\n  input  agu_req_alu_minu,\n\n  output [`E203_XLEN-1:0] agu_req_alu_res,\n\n  input  agu_sbf_0_ena,\n  input  [`E203_XLEN-1:0] agu_sbf_0_nxt,\n  output [`E203_XLEN-1:0] agu_sbf_0_r,\n\n  input  agu_sbf_1_ena,\n  input  [`E203_XLEN-1:0] agu_sbf_1_nxt,\n  output [`E203_XLEN-1:0] agu_sbf_1_r,\n\n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n  //////////////////////////////////////////////////////\n  // MULDIV request the datapath\n  input  muldiv_req_alu,\n\n  input  [`E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  input  [`E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  input                              muldiv_req_alu_add ,\n  input                              muldiv_req_alu_sub ,\n  output [`E203_ALU_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n\n  input           muldiv_sbf_0_ena,\n  input  [33-1:0] muldiv_sbf_0_nxt,\n  output [33-1:0] muldiv_sbf_0_r,\n\n  input           muldiv_sbf_1_ena,\n  input  [33-1:0] muldiv_sbf_1_nxt,\n  output [33-1:0] muldiv_sbf_1_r,\n`endif//E203_SUPPORT_SHARE_MULDIV}\n\n  input  clk,\n  input  rst_n\n  );\n\n  `ifdef E203_XLEN_IS_32\n      // This is the correct config since E200 is 32bits core\n  `else\n      !!! ERROR: There must be something wrong, our core must be 32bits wide !!!\n  `endif\n\n  wire [`E203_XLEN-1:0] mux_op1;\n  wire [`E203_XLEN-1:0] mux_op2;\n\n  wire [`E203_XLEN-1:0] misc_op1 = mux_op1[`E203_XLEN-1:0];\n  wire [`E203_XLEN-1:0] misc_op2 = mux_op2[`E203_XLEN-1:0];\n\n  // Only the regular ALU use shifter\n  wire [`E203_XLEN-1:0] shifter_op1 = alu_req_alu_op1[`E203_XLEN-1:0];\n  wire [`E203_XLEN-1:0] shifter_op2 = alu_req_alu_op2[`E203_XLEN-1:0];\n\n  wire op_max;  \n  wire op_min ; \n  wire op_maxu;\n  wire op_minu;\n\n  wire op_add;\n  wire op_sub;\n  wire op_addsub = op_add | op_sub; \n\n  wire op_or;\n  wire op_xor;\n  wire op_and;\n\n  wire op_sll;\n  wire op_srl;\n  wire op_sra;\n\n  wire op_slt;\n  wire op_sltu;\n\n  wire op_mvop2;\n\n\n  wire op_cmp_eq ;\n  wire op_cmp_ne ;\n  wire op_cmp_lt ;\n  wire op_cmp_gt ;\n  wire op_cmp_ltu;\n  wire op_cmp_gtu;\n\n  wire cmp_res;\n\n  wire sbf_0_ena;\n  wire [33-1:0] sbf_0_nxt;\n  wire [33-1:0] sbf_0_r;\n\n  wire sbf_1_ena;\n  wire [33-1:0] sbf_1_nxt;\n  wire [33-1:0] sbf_1_r;\n\n\n  //////////////////////////////////////////////////////////////\n  // Impelment the Left-Shifter\n  //\n  // The Left-Shifter will be used to handle the shift op\n  wire [`E203_XLEN-1:0] shifter_in1;\n  wire [5-1:0] shifter_in2;\n  wire [`E203_XLEN-1:0] shifter_res;\n\n\n  wire op_shift = op_sra | op_sll | op_srl; \n  \n     // Make sure to use logic-gating to gateoff the \n  assign shifter_in1 = {`E203_XLEN{op_shift}} &\n          //   In order to save area and just use one left-shifter, we\n          //   convert the right-shift op into left-shift operation\n           (\n               (op_sra | op_srl) ? \n                 {\n    shifter_op1[00],shifter_op1[01],shifter_op1[02],shifter_op1[03],\n    shifter_op1[04],shifter_op1[05],shifter_op1[06],shifter_op1[07],\n    shifter_op1[08],shifter_op1[09],shifter_op1[10],shifter_op1[11],\n    shifter_op1[12],shifter_op1[13],shifter_op1[14],shifter_op1[15],\n    shifter_op1[16],shifter_op1[17],shifter_op1[18],shifter_op1[19],\n    shifter_op1[20],shifter_op1[21],shifter_op1[22],shifter_op1[23],\n    shifter_op1[24],shifter_op1[25],shifter_op1[26],shifter_op1[27],\n    shifter_op1[28],shifter_op1[29],shifter_op1[30],shifter_op1[31]\n                 } : shifter_op1\n           );\n  assign shifter_in2 = {5{op_shift}} & shifter_op2[4:0];\n\n  assign shifter_res = (shifter_in1 << shifter_in2);\n\n  wire [`E203_XLEN-1:0] sll_res = shifter_res;\n  wire [`E203_XLEN-1:0] srl_res =  \n                 {\n    shifter_res[00],shifter_res[01],shifter_res[02],shifter_res[03],\n    shifter_res[04],shifter_res[05],shifter_res[06],shifter_res[07],\n    shifter_res[08],shifter_res[09],shifter_res[10],shifter_res[11],\n    shifter_res[12],shifter_res[13],shifter_res[14],shifter_res[15],\n    shifter_res[16],shifter_res[17],shifter_res[18],shifter_res[19],\n    shifter_res[20],shifter_res[21],shifter_res[22],shifter_res[23],\n    shifter_res[24],shifter_res[25],shifter_res[26],shifter_res[27],\n    shifter_res[28],shifter_res[29],shifter_res[30],shifter_res[31]\n                 };\n  \n  wire [`E203_XLEN-1:0] eff_mask = (~(`E203_XLEN'b0)) >> shifter_in2;\n  wire [`E203_XLEN-1:0] sra_res =\n               (srl_res & eff_mask) | ({32{shifter_op1[31]}} & (~eff_mask));\n\n\n\n  //////////////////////////////////////////////////////////////\n  // Impelment the Adder\n  //\n  // The Adder will be reused to handle the add/sub/compare op\n\n     // Only the MULDIV request ALU-adder with 35bits operand with sign extended \n     // already, all other unit request ALU-adder with 32bits opereand without sign extended\n     //   For non-MULDIV operands\n  wire op_unsigned = op_sltu | op_cmp_ltu | op_cmp_gtu | op_maxu | op_minu;\n  wire [`E203_ALU_ADDER_WIDTH-1:0] misc_adder_op1 =\n      {{`E203_ALU_ADDER_WIDTH-`E203_XLEN{(~op_unsigned) & misc_op1[`E203_XLEN-1]}},misc_op1};\n  wire [`E203_ALU_ADDER_WIDTH-1:0] misc_adder_op2 =\n      {{`E203_ALU_ADDER_WIDTH-`E203_XLEN{(~op_unsigned) & misc_op2[`E203_XLEN-1]}},misc_op2};\n\n\n  wire [`E203_ALU_ADDER_WIDTH-1:0] adder_op1 = \n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n      muldiv_req_alu ? muldiv_req_alu_op1 :\n`endif//E203_SUPPORT_SHARE_MULDIV}\n      misc_adder_op1;\n  wire [`E203_ALU_ADDER_WIDTH-1:0] adder_op2 = \n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n      muldiv_req_alu ? muldiv_req_alu_op2 :\n`endif//E203_SUPPORT_SHARE_MULDIV}\n      misc_adder_op2;\n\n  wire adder_cin;\n  wire [`E203_ALU_ADDER_WIDTH-1:0] adder_in1;\n  wire [`E203_ALU_ADDER_WIDTH-1:0] adder_in2;\n  wire [`E203_ALU_ADDER_WIDTH-1:0] adder_res;\n\n  wire adder_add;\n  wire adder_sub;\n\n  assign adder_add =\n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n      muldiv_req_alu ? muldiv_req_alu_add :\n`endif//E203_SUPPORT_SHARE_MULDIV}\n      op_add; \n  assign adder_sub =\n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n      muldiv_req_alu ? muldiv_req_alu_sub :\n`endif//E203_SUPPORT_SHARE_MULDIV}\n               (\n                   // The original sub instruction\n               (op_sub) \n                   // The compare lt or gt instruction\n             | (op_cmp_lt | op_cmp_gt | \n                op_cmp_ltu | op_cmp_gtu |\n                op_max | op_maxu |\n                op_min | op_minu |\n                op_slt | op_sltu \n               ));\n\n  wire adder_addsub = adder_add | adder_sub; \n  \n\n     // Make sure to use logic-gating to gateoff the \n  assign adder_in1 = {`E203_ALU_ADDER_WIDTH{adder_addsub}} & (adder_op1);\n  assign adder_in2 = {`E203_ALU_ADDER_WIDTH{adder_addsub}} & (adder_sub ? (~adder_op2) : adder_op2);\n  assign adder_cin = adder_addsub & adder_sub;\n\n  assign adder_res = adder_in1 + adder_in2 + adder_cin;\n\n\n\n  //////////////////////////////////////////////////////////////\n  // Impelment the XOR-er\n  //\n  // The XOR-er will be reused to handle the XOR and compare op\n\n  wire [`E203_XLEN-1:0] xorer_in1;\n  wire [`E203_XLEN-1:0] xorer_in2;\n\n  wire xorer_op = \n               op_xor\n                   // The compare eq or ne instruction\n             | (op_cmp_eq | op_cmp_ne); \n\n     // Make sure to use logic-gating to gateoff the \n  assign xorer_in1 = {`E203_XLEN{xorer_op}} & misc_op1;\n  assign xorer_in2 = {`E203_XLEN{xorer_op}} & misc_op2;\n\n  wire [`E203_XLEN-1:0] xorer_res = xorer_in1 ^ xorer_in2;\n     // The OR and AND is too light-weight, so no need to gate off\n  wire [`E203_XLEN-1:0] orer_res  = misc_op1 | misc_op2; \n  wire [`E203_XLEN-1:0] ander_res = misc_op1 & misc_op2; \n\n\n  //////////////////////////////////////////////////////////////\n  // Generate the CMP operation result\n       // It is Non-Equal if the XOR result have any bit non-zero\n  wire neq  = (|xorer_res); \n  wire cmp_res_ne  = (op_cmp_ne  & neq);\n       // It is Equal if it is not Non-Equal\n  wire cmp_res_eq  = op_cmp_eq  & (~neq);\n       // It is Less-Than if the adder result is negative\n  wire cmp_res_lt  = op_cmp_lt  & adder_res[`E203_XLEN];\n  wire cmp_res_ltu = op_cmp_ltu & adder_res[`E203_XLEN];\n       // It is Greater-Than if the adder result is postive\n  wire op1_gt_op2  = (~adder_res[`E203_XLEN]);\n  wire cmp_res_gt  = op_cmp_gt  & op1_gt_op2;\n  wire cmp_res_gtu = op_cmp_gtu & op1_gt_op2;\n\n  assign cmp_res = cmp_res_eq \n                 | cmp_res_ne \n                 | cmp_res_lt \n                 | cmp_res_gt  \n                 | cmp_res_ltu \n                 | cmp_res_gtu; \n\n  //////////////////////////////////////////////////////////////\n  // Generate the mvop2 result\n  //   Just directly use op2 since the op2 will be the immediate\n  wire [`E203_XLEN-1:0] mvop2_res = misc_op2;\n\n  //////////////////////////////////////////////////////////////\n  // Generate the SLT and SLTU result\n  //   Just directly use op2 since the op2 will be the immediate\n  wire op_slttu = (op_slt | op_sltu);\n  //   The SLT and SLTU is reusing the adder to do the comparasion\n       // It is Less-Than if the adder result is negative\n  wire slttu_cmp_lt = op_slttu & adder_res[`E203_XLEN];\n  wire [`E203_XLEN-1:0] slttu_res = \n               slttu_cmp_lt ?\n               `E203_XLEN'b1 : `E203_XLEN'b0;\n\n  //////////////////////////////////////////////////////////////\n  // Generate the Max/Min result\n  wire maxmin_sel_op1 =  ((op_max | op_maxu) &   op1_gt_op2) \n                      |  ((op_min | op_minu) & (~op1_gt_op2));\n\n  wire [`E203_XLEN-1:0] maxmin_res  = maxmin_sel_op1 ? misc_op1 : misc_op2;  \n\n  //////////////////////////////////////////////////////////////\n  // Generate the final result\n  wire [`E203_XLEN-1:0] alu_dpath_res = \n        ({`E203_XLEN{op_or       }} & orer_res )\n      | ({`E203_XLEN{op_and      }} & ander_res)\n      | ({`E203_XLEN{op_xor      }} & xorer_res)\n      | ({`E203_XLEN{op_addsub   }} & adder_res[`E203_XLEN-1:0])\n      | ({`E203_XLEN{op_srl      }} & srl_res)\n      | ({`E203_XLEN{op_sll      }} & sll_res)\n      | ({`E203_XLEN{op_sra      }} & sra_res)\n      | ({`E203_XLEN{op_mvop2    }} & mvop2_res)\n      | ({`E203_XLEN{op_slttu    }} & slttu_res)\n      | ({`E203_XLEN{op_max | op_maxu | op_min | op_minu}} & maxmin_res)\n        ;\n\n  //////////////////////////////////////////////////////////////\n  // Implement the SBF: Shared Buffers\n  sirv_gnrl_dffl #(33) sbf_0_dffl (sbf_0_ena, sbf_0_nxt, sbf_0_r, clk);\n  sirv_gnrl_dffl #(33) sbf_1_dffl (sbf_1_ena, sbf_1_nxt, sbf_1_r, clk);\n\n  /////////////////////////////////////////////////////////////////////\n  /////////////////////////////////////////////////////////////////////\n  /////////////////////////////////////////////////////////////////////\n  //  The ALU-Datapath Mux for the requestors \n\n  localparam DPATH_MUX_WIDTH = ((`E203_XLEN*2)+21);\n\n  assign  {\n     mux_op1\n    ,mux_op2\n    ,op_max  \n    ,op_min  \n    ,op_maxu \n    ,op_minu \n    ,op_add\n    ,op_sub\n    ,op_or\n    ,op_xor\n    ,op_and\n    ,op_sll\n    ,op_srl\n    ,op_sra\n    ,op_slt\n    ,op_sltu\n    ,op_mvop2\n    ,op_cmp_eq \n    ,op_cmp_ne \n    ,op_cmp_lt \n    ,op_cmp_gt \n    ,op_cmp_ltu\n    ,op_cmp_gtu\n    }\n    = \n        ({DPATH_MUX_WIDTH{alu_req_alu}} & {\n             alu_req_alu_op1\n            ,alu_req_alu_op2\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,alu_req_alu_add\n            ,alu_req_alu_sub\n            ,alu_req_alu_or\n            ,alu_req_alu_xor\n            ,alu_req_alu_and\n            ,alu_req_alu_sll\n            ,alu_req_alu_srl\n            ,alu_req_alu_sra\n            ,alu_req_alu_slt\n            ,alu_req_alu_sltu\n            ,alu_req_alu_lui// LUI just move-Op2 operation\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,1'b0\n        })\n      | ({DPATH_MUX_WIDTH{bjp_req_alu}} & {\n             bjp_req_alu_op1\n            ,bjp_req_alu_op2\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,bjp_req_alu_add\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,bjp_req_alu_cmp_eq \n            ,bjp_req_alu_cmp_ne \n            ,bjp_req_alu_cmp_lt \n            ,bjp_req_alu_cmp_gt \n            ,bjp_req_alu_cmp_ltu\n            ,bjp_req_alu_cmp_gtu\n\n        })\n      | ({DPATH_MUX_WIDTH{agu_req_alu}} & {\n             agu_req_alu_op1\n            ,agu_req_alu_op2\n            ,agu_req_alu_max  \n            ,agu_req_alu_min  \n            ,agu_req_alu_maxu \n            ,agu_req_alu_minu \n            ,agu_req_alu_add\n            ,1'b0\n            ,agu_req_alu_or\n            ,agu_req_alu_xor\n            ,agu_req_alu_and\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,agu_req_alu_swap// SWAP just move-Op2 operation\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,1'b0\n            ,1'b0\n        })\n        ;\n        \n  assign alu_req_alu_res     = alu_dpath_res[`E203_XLEN-1:0];\n  assign agu_req_alu_res     = alu_dpath_res[`E203_XLEN-1:0];\n  assign bjp_req_alu_add_res = alu_dpath_res[`E203_XLEN-1:0];\n  assign bjp_req_alu_cmp_res = cmp_res;\n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n  assign muldiv_req_alu_res  = adder_res;\n`endif//E203_SUPPORT_SHARE_MULDIV}\n\n  assign sbf_0_ena = \n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n      muldiv_req_alu ? muldiv_sbf_0_ena : \n`endif//E203_SUPPORT_SHARE_MULDIV}\n                 agu_sbf_0_ena;\n  assign sbf_1_ena = \n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n      muldiv_req_alu ? muldiv_sbf_1_ena : \n`endif//E203_SUPPORT_SHARE_MULDIV}\n                 agu_sbf_1_ena;\n\n  assign sbf_0_nxt = \n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n      muldiv_req_alu ? muldiv_sbf_0_nxt : \n`endif//E203_SUPPORT_SHARE_MULDIV}\n                 {1'b0,agu_sbf_0_nxt};\n  assign sbf_1_nxt = \n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n      muldiv_req_alu ? muldiv_sbf_1_nxt : \n`endif//E203_SUPPORT_SHARE_MULDIV}\n                 {1'b0,agu_sbf_1_nxt};\n\n  assign agu_sbf_0_r = sbf_0_r[`E203_XLEN-1:0];\n  assign agu_sbf_1_r = sbf_1_r[`E203_XLEN-1:0];\n\n`ifdef E203_SUPPORT_SHARE_MULDIV //{\n  assign muldiv_sbf_0_r = sbf_0_r;\n  assign muldiv_sbf_1_r = sbf_1_r;\n`endif//E203_SUPPORT_SHARE_MULDIV}\n\nendmodule                                      \n                                               \n                                               \n                                               \n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  This module to implement the AGU (address generation unit for load/store \n//  and AMO instructions), which is mostly share the datapath with ALU module\n//  to save gatecount to mininum\n//\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_exu_alu_lsuagu(\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The Issue Handshake Interface to AGU \n  //\n  input  agu_i_valid, // Handshake valid\n  output agu_i_ready, // Handshake ready\n\n  input  [`E203_XLEN-1:0] agu_i_rs1,\n  input  [`E203_XLEN-1:0] agu_i_rs2,\n  input  [`E203_XLEN-1:0] agu_i_imm,\n  input  [`E203_DECINFO_AGU_WIDTH-1:0] agu_i_info,\n  input  [`E203_ITAG_WIDTH-1:0] agu_i_itag,\n\n  output agu_i_longpipe,\n\n  input  flush_req,\n  input  flush_pulse,\n\n  output amo_wait,\n  input  oitf_empty,\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The AGU Write-Back/Commit Interface\n  output agu_o_valid, // Handshake valid\n  input  agu_o_ready, // Handshake ready\n  output [`E203_XLEN-1:0] agu_o_wbck_wdat,\n  output agu_o_wbck_err,   \n  //   The Commit Interface for all ldst and amo instructions\n  output agu_o_cmt_misalgn, // The misalign exception generated\n  output agu_o_cmt_ld, \n  output agu_o_cmt_stamo,\n  output agu_o_cmt_buserr, // The bus-error exception generated\n  output [`E203_ADDR_SIZE-1:0] agu_o_cmt_badaddr,\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface to LSU-ctrl\n  //    * Bus cmd channel\n  output                       agu_icb_cmd_valid, // Handshake valid\n  input                        agu_icb_cmd_ready, // Handshake ready\n            // Note: The data on rdata or wdata channel must be naturally\n            //       aligned, this is in line with the AXI definition\n  output [`E203_ADDR_SIZE-1:0] agu_icb_cmd_addr, // Bus transaction start addr \n  output                       agu_icb_cmd_read,   // Read or write\n  output [`E203_XLEN-1:0]      agu_icb_cmd_wdata, \n  output [`E203_XLEN/8-1:0]    agu_icb_cmd_wmask, \n  output                       agu_icb_cmd_back2agu, \n  output                       agu_icb_cmd_lock,\n  output                       agu_icb_cmd_excl,\n  output [1:0]                 agu_icb_cmd_size,\n  output [`E203_ITAG_WIDTH-1:0]agu_icb_cmd_itag,\n  output                       agu_icb_cmd_usign,\n\n  //    * Bus RSP channel\n  input                        agu_icb_rsp_valid, // Response valid \n  output                       agu_icb_rsp_ready, // Response ready\n  input                        agu_icb_rsp_err  , // Response error\n  input                        agu_icb_rsp_excl_ok,\n            // Note: the RSP rdata is inline with AXI definition\n  input  [`E203_XLEN-1:0]      agu_icb_rsp_rdata,\n\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // To share the ALU datapath, generate interface to ALU\n  //   for single-issue machine, seems the AGU must be shared with ALU, otherwise\n  //   it wasted the area for no points \n  // \n     // The operands and info to ALU\n  output [`E203_XLEN-1:0] agu_req_alu_op1,\n  output [`E203_XLEN-1:0] agu_req_alu_op2,\n  output agu_req_alu_swap,\n  output agu_req_alu_add ,\n  output agu_req_alu_and ,\n  output agu_req_alu_or  ,\n  output agu_req_alu_xor ,\n  output agu_req_alu_max ,\n  output agu_req_alu_min ,\n  output agu_req_alu_maxu,\n  output agu_req_alu_minu,\n  input  [`E203_XLEN-1:0] agu_req_alu_res,\n\n     // The Shared-Buffer interface to ALU-Shared-Buffer\n  output agu_sbf_0_ena,\n  output [`E203_XLEN-1:0] agu_sbf_0_nxt,\n  input  [`E203_XLEN-1:0] agu_sbf_0_r,\n\n  output agu_sbf_1_ena,\n  output [`E203_XLEN-1:0] agu_sbf_1_nxt,\n  input  [`E203_XLEN-1:0] agu_sbf_1_r,\n\n  input  clk,\n  input  rst_n\n  );\n\n  //\n\n      // When there is a nonalu_flush which is going to flush the ALU, then we need to mask off it\n  wire       icb_sta_is_idle;\n  wire       flush_block = flush_req & icb_sta_is_idle; \n\n  wire       agu_i_load    = agu_i_info [`E203_DECINFO_AGU_LOAD   ] & (~flush_block);\n  wire       agu_i_store   = agu_i_info [`E203_DECINFO_AGU_STORE  ] & (~flush_block);\n  wire       agu_i_amo     = agu_i_info [`E203_DECINFO_AGU_AMO    ] & (~flush_block);\n\n  wire [1:0] agu_i_size    = agu_i_info [`E203_DECINFO_AGU_SIZE   ];\n  wire       agu_i_usign   = agu_i_info [`E203_DECINFO_AGU_USIGN  ];\n  wire       agu_i_excl    = agu_i_info [`E203_DECINFO_AGU_EXCL   ];\n  wire       agu_i_amoswap = agu_i_info [`E203_DECINFO_AGU_AMOSWAP];\n  wire       agu_i_amoadd  = agu_i_info [`E203_DECINFO_AGU_AMOADD ];\n  wire       agu_i_amoand  = agu_i_info [`E203_DECINFO_AGU_AMOAND ];\n  wire       agu_i_amoor   = agu_i_info [`E203_DECINFO_AGU_AMOOR  ];\n  wire       agu_i_amoxor  = agu_i_info [`E203_DECINFO_AGU_AMOXOR ];\n  wire       agu_i_amomax  = agu_i_info [`E203_DECINFO_AGU_AMOMAX ];\n  wire       agu_i_amomin  = agu_i_info [`E203_DECINFO_AGU_AMOMIN ];\n  wire       agu_i_amomaxu = agu_i_info [`E203_DECINFO_AGU_AMOMAXU];\n  wire       agu_i_amominu = agu_i_info [`E203_DECINFO_AGU_AMOMINU];\n\n\n  wire agu_icb_cmd_hsked = agu_icb_cmd_valid & agu_icb_cmd_ready; \n  `ifdef E203_SUPPORT_AMO//{\n  wire agu_icb_rsp_hsked = agu_icb_rsp_valid & agu_icb_rsp_ready; \n  `endif//E203_SUPPORT_AMO}\n    // These strange ifdef/ifndef rather than the ifdef-else, because of \n    //   our internal text processing scripts need this style\n  `ifndef E203_SUPPORT_AMO//{\n    `ifndef E203_SUPPORT_UNALGNLDST//{\n  wire agu_icb_rsp_hsked = 1'b0;\n    `endif//}\n  `endif//}\n\n  wire agu_i_size_b  = (agu_i_size == 2'b00);\n  wire agu_i_size_hw = (agu_i_size == 2'b01);\n  wire agu_i_size_w  = (agu_i_size == 2'b10);\n\n  wire agu_i_addr_unalgn = \n            (agu_i_size_hw &  agu_icb_cmd_addr[0])\n          | (agu_i_size_w  &  (|agu_icb_cmd_addr[1:0]));\n\n  wire state_last_exit_ena;\n  `ifdef E203_SUPPORT_AMO//{\n  wire state_idle_exit_ena;\n  wire unalgn_flg_r;\n  // Set when the ICB state is starting and it is unalign\n  wire unalgn_flg_set = agu_i_addr_unalgn & state_idle_exit_ena;\n  // Clear when the ICB state is entering\n  wire unalgn_flg_clr = unalgn_flg_r & state_last_exit_ena;\n  wire unalgn_flg_ena = unalgn_flg_set | unalgn_flg_clr;\n  wire unalgn_flg_nxt = unalgn_flg_set | (~unalgn_flg_clr);\n  sirv_gnrl_dfflr #(1) unalgn_flg_dffl (unalgn_flg_ena, unalgn_flg_nxt, unalgn_flg_r, clk, rst_n);\n  `endif//E203_SUPPORT_AMO}\n\n  wire agu_addr_unalgn = \n  `ifndef E203_SUPPORT_UNALGNLDST//{\n      `ifdef E203_SUPPORT_AMO//{\n      icb_sta_is_idle ? agu_i_addr_unalgn : unalgn_flg_r;\n      `endif//E203_SUPPORT_AMO}\n      `ifndef E203_SUPPORT_AMO//{\n      agu_i_addr_unalgn;\n      `endif//}\n  `endif//}\n\n \n  wire agu_i_unalgnld = (agu_addr_unalgn & agu_i_load)\n                      ;\n  wire agu_i_unalgnst = (agu_addr_unalgn & agu_i_store) \n                      ;\n  wire agu_i_unalgnldst = (agu_i_unalgnld | agu_i_unalgnst)\n                      ;\n  wire agu_i_algnld = (~agu_addr_unalgn) & agu_i_load\n                      ;\n  wire agu_i_algnst = (~agu_addr_unalgn) & agu_i_store\n                      ;\n  wire agu_i_algnldst = (agu_i_algnld | agu_i_algnst)\n                      ;\n\n  `ifdef E203_SUPPORT_AMO//{\n  wire agu_i_unalgnamo = (agu_addr_unalgn & agu_i_amo) \n                        ;\n  wire agu_i_algnamo = ((~agu_addr_unalgn) & agu_i_amo) \n                        ;\n  `endif//E203_SUPPORT_AMO}\n\n  wire agu_i_ofst0  = agu_i_amo | ((agu_i_load | agu_i_store) & agu_i_excl); \n\n\n  localparam ICB_STATE_WIDTH = 4;\n\n  wire icb_state_ena;\n  wire [ICB_STATE_WIDTH-1:0] icb_state_nxt;\n  wire [ICB_STATE_WIDTH-1:0] icb_state_r;\n\n  // State 0: The idle state, means there is no any oustanding ifetch request\n  localparam ICB_STATE_IDLE = 4'd0;\n  `ifdef E203_SUPPORT_AMO//{\n  // State  : Issued first request and wait response\n  localparam ICB_STATE_1ST  = 4'd1;\n  // State  : Wait to issue second request \n  localparam ICB_STATE_WAIT2ND  = 4'd2;\n  // State  : Issued second request and wait response\n  localparam ICB_STATE_2ND  = 4'd3;\n  // State  : For AMO instructions, in this state, read-data was in leftover\n  //            buffer for ALU calculation \n  localparam ICB_STATE_AMOALU  = 4'd4;\n  // State  : For AMO instructions, in this state, ALU have caculated the new\n  //            result and put into leftover buffer again \n  localparam ICB_STATE_AMORDY  = 4'd5;\n  // State  : For AMO instructions, in this state, the response data have been returned\n  //            and the write back result to commit/wback interface\n  localparam ICB_STATE_WBCK  = 4'd6;\n  `endif//E203_SUPPORT_AMO}\n  \n   \n  \n \n  `ifdef E203_SUPPORT_AMO//{\n  wire [ICB_STATE_WIDTH-1:0] state_idle_nxt   ;\n  wire [ICB_STATE_WIDTH-1:0] state_1st_nxt    ;\n  wire [ICB_STATE_WIDTH-1:0] state_wait2nd_nxt;\n  wire [ICB_STATE_WIDTH-1:0] state_2nd_nxt    ;\n  wire [ICB_STATE_WIDTH-1:0] state_amoalu_nxt ;\n  wire [ICB_STATE_WIDTH-1:0] state_amordy_nxt ;\n  wire [ICB_STATE_WIDTH-1:0] state_wbck_nxt ;\n  `endif//E203_SUPPORT_AMO}\n  `ifdef E203_SUPPORT_AMO//{\n  wire state_1st_exit_ena      ;\n  wire state_wait2nd_exit_ena  ;\n  wire state_2nd_exit_ena      ;\n  wire state_amoalu_exit_ena   ;\n  wire state_amordy_exit_ena   ;\n  wire state_wbck_exit_ena   ;\n  `endif//E203_SUPPORT_AMO}\n\n  // Define some common signals and reused later to save gatecounts\n  assign icb_sta_is_idle    = (icb_state_r == ICB_STATE_IDLE   );\n  `ifdef E203_SUPPORT_AMO//{\n  wire   icb_sta_is_1st     = (icb_state_r == ICB_STATE_1ST    );\n  wire   icb_sta_is_amoalu  = (icb_state_r == ICB_STATE_AMOALU );\n  wire   icb_sta_is_amordy  = (icb_state_r == ICB_STATE_AMORDY );\n  wire   icb_sta_is_wait2nd = (icb_state_r == ICB_STATE_WAIT2ND);\n  wire   icb_sta_is_2nd     = (icb_state_r == ICB_STATE_2ND    );\n  wire   icb_sta_is_wbck    = (icb_state_r == ICB_STATE_WBCK    );\n  `endif//E203_SUPPORT_AMO}\n\n\n  `ifdef E203_SUPPORT_AMO//{\n      // **** If the current state is idle,\n          // If a new load-store come and the ICB cmd channel is handshaked, next\n          //   state is ICB_STATE_1ST\n  wire state_idle_to_exit =    (( agu_i_algnamo\n                                  // Why do we add an oitf empty signal here? because\n                                  //   it is better to start AMO state-machine when the \n                                  //   long-pipes are completed, to avoid the long-pipes \n                                  //   have error-return which need to flush the pipeline\n                                  //   and which also need to wait the AMO state-machine\n                                  //   to complete first, in corner cases it may end \n                                  //   up with deadlock.\n                                  // Force to wait oitf empty before doing amo state-machine\n                                  //   may hurt performance, but we dont care it. In e200 implementation\n                                  //   the AMO was not target for performance.\n                                  & oitf_empty)\n                                 );\n  assign state_idle_exit_ena = icb_sta_is_idle & state_idle_to_exit \n                               & agu_icb_cmd_hsked & (~flush_pulse);\n  assign state_idle_nxt      = ICB_STATE_1ST;\n\n      // **** If the current state is 1st,\n          // If a response come, exit this state\n  assign state_1st_exit_ena = icb_sta_is_1st & (agu_icb_rsp_hsked | flush_pulse);\n  assign state_1st_nxt      = flush_pulse ? ICB_STATE_IDLE : \n                (\n                 // (agu_i_algnamo) ?  // No need this condition, because it will be either\n                                       // amo or unalgn load-store in this state\n                  ICB_STATE_AMOALU\n                );\n            \n      // **** If the current state is AMOALU \n              // Since the ALU is must be holdoff now, it can always be\n              //   served and then enter into next state\n  assign state_amoalu_exit_ena = icb_sta_is_amoalu & ( 1'b1 | flush_pulse);\n  assign state_amoalu_nxt      = flush_pulse ? ICB_STATE_IDLE : ICB_STATE_AMORDY;\n            \n      // **** If the current state is AMORDY\n              // It always enter into next state\n  assign state_amordy_exit_ena = icb_sta_is_amordy & ( 1'b1 | flush_pulse);\n  assign state_amordy_nxt      = flush_pulse ? ICB_STATE_IDLE : \n            (\n              // AMO after caculated read-modify-result, need to issue 2nd uop as store\n              //   back to memory, hence two ICB needed and we dont care the performance,\n              //   so always let it jump to wait2nd state\n                                       ICB_STATE_WAIT2ND\n            );\n\n      // **** If the current state is wait-2nd,\n  assign state_wait2nd_exit_ena = icb_sta_is_wait2nd & (agu_icb_cmd_ready | flush_pulse);\n              // If the ICB CMD is ready, then next state is ICB_STATE_2ND\n  assign state_wait2nd_nxt      = flush_pulse ? ICB_STATE_IDLE : ICB_STATE_2ND;\n  \n      // **** If the current state is 2nd,\n          // If a response come, exit this state\n  assign state_2nd_exit_ena = icb_sta_is_2nd & (agu_icb_rsp_hsked | flush_pulse);\n  assign state_2nd_nxt      = flush_pulse ? ICB_STATE_IDLE : \n                (\n                  ICB_STATE_WBCK \n                );\n\n       // **** If the current state is wbck,\n          // If it can be write back, exit this state\n  assign state_wbck_exit_ena = icb_sta_is_wbck & (agu_o_ready | flush_pulse);\n  assign state_wbck_nxt      = flush_pulse ? ICB_STATE_IDLE : \n                (\n                  ICB_STATE_IDLE \n                );\n  `endif//E203_SUPPORT_AMO}\n\n    // The state will only toggle when each state is meeting the condition to exit:\n  assign icb_state_ena = 1'b0 \n         `ifdef E203_SUPPORT_AMO//{\n            | state_idle_exit_ena | state_1st_exit_ena  \n            | state_amoalu_exit_ena  | state_amordy_exit_ena  \n            | state_wait2nd_exit_ena | state_2nd_exit_ena   \n            | state_wbck_exit_ena \n          `endif//E203_SUPPORT_AMO}\n          ;\n\n  // The next-state is onehot mux to select different entries\n  assign icb_state_nxt = \n              ({ICB_STATE_WIDTH{1'b0}})\n         `ifdef E203_SUPPORT_AMO//{\n            | ({ICB_STATE_WIDTH{state_idle_exit_ena   }} & state_idle_nxt   )\n            | ({ICB_STATE_WIDTH{state_1st_exit_ena    }} & state_1st_nxt    )\n            | ({ICB_STATE_WIDTH{state_amoalu_exit_ena }} & state_amoalu_nxt )\n            | ({ICB_STATE_WIDTH{state_amordy_exit_ena }} & state_amordy_nxt )\n            | ({ICB_STATE_WIDTH{state_wait2nd_exit_ena}} & state_wait2nd_nxt)\n            | ({ICB_STATE_WIDTH{state_2nd_exit_ena    }} & state_2nd_nxt    )\n            | ({ICB_STATE_WIDTH{state_wbck_exit_ena   }} & state_wbck_nxt   )\n          `endif//E203_SUPPORT_AMO}\n              ;\n\n\n  sirv_gnrl_dfflr #(ICB_STATE_WIDTH) icb_state_dfflr (icb_state_ena, icb_state_nxt, icb_state_r, clk, rst_n);\n\n\n  `ifdef E203_SUPPORT_AMO//{\n  wire  icb_sta_is_last = icb_sta_is_wbck;\n  `endif//E203_SUPPORT_AMO}\n  `ifndef E203_SUPPORT_AMO//{\n  wire  icb_sta_is_last = 1'b0; \n  `endif//}\n\n  `ifdef E203_SUPPORT_AMO//{\n  assign state_last_exit_ena = state_wbck_exit_ena;\n  `endif//E203_SUPPORT_AMO}\n  `ifndef E203_SUPPORT_AMO//{\n  assign state_last_exit_ena = 1'b0;\n  `endif//}\n\n  `ifndef E203_SUPPORT_UNALGNLDST//{\n  `else//}{\n      `ifndef E203_SUPPORT_AMO \n  !!!! ERROR: This config is not supported, must be something wrong \n      `endif//}\n  `endif//\n\n\n      // Indicate there is no oustanding memory transactions\n  `ifdef E203_SUPPORT_AMO//{\n                    // As long as the statemachine started, we must wait it to be empty\n                    // We cannot really kill this instruction when IRQ comes, becuase\n                    // the AMO uop alreay write data into the memory, and we must commit\n                    // this instructions\n  assign amo_wait = ~icb_sta_is_idle;\n  `endif//E203_SUPPORT_AMO}\n  `ifndef E203_SUPPORT_AMO//{\n  assign amo_wait = 1'b0;// If no AMO or UNaligned supported, then always 0\n  `endif//}\n  //\n  /////////////////////////////////////////////////////////////////////////////////\n  // Implement the leftover 0 buffer\n  wire leftover_ena;\n  wire [`E203_XLEN-1:0] leftover_nxt;\n  wire [`E203_XLEN-1:0] leftover_r;\n  wire leftover_err_nxt;\n  wire leftover_err_r;\n\n  wire [`E203_XLEN-1:0] leftover_1_r;\n  wire leftover_1_ena;\n  wire [`E203_XLEN-1:0] leftover_1_nxt;\n  //\n `ifdef E203_SUPPORT_AMO//{\n  wire amo_1stuop = icb_sta_is_1st & agu_i_algnamo;\n  wire amo_2nduop = icb_sta_is_2nd & agu_i_algnamo;\n `endif//E203_SUPPORT_AMO}\n  assign leftover_ena = agu_icb_rsp_hsked & (\n                   1'b0\n                   `ifdef E203_SUPPORT_AMO//{\n                   | amo_1stuop \n                   | amo_2nduop \n                   `endif//E203_SUPPORT_AMO}\n                   );\n  assign leftover_nxt = \n              {`E203_XLEN{1'b0}}\n         `ifdef E203_SUPPORT_AMO//{\n            | ({`E203_XLEN{amo_1stuop        }} & agu_icb_rsp_rdata)// Load the data from bus\n            | ({`E203_XLEN{amo_2nduop        }} & leftover_r)// Unchange the value of leftover_r\n         `endif//E203_SUPPORT_AMO}\n            ;\n                                   \n  assign leftover_err_nxt = 1'b0 \n         `ifdef E203_SUPPORT_AMO//{\n            | ({{amo_1stuop        }} & agu_icb_rsp_err)// 1st error from the bus\n            | ({{amo_2nduop        }} & (agu_icb_rsp_err | leftover_err_r))// second error merged\n         `endif//E203_SUPPORT_AMO}\n         ;\n  //\n  // The instantiation of leftover buffer is actually shared with the ALU SBF-0 Buffer\n  assign agu_sbf_0_ena = leftover_ena;\n  assign agu_sbf_0_nxt = leftover_nxt;\n  assign leftover_r    = agu_sbf_0_r;\n\n  // The error bit is implemented here\n  sirv_gnrl_dfflr #(1) icb_leftover_err_dfflr (leftover_ena, leftover_err_nxt, leftover_err_r, clk, rst_n);\n  \n  assign leftover_1_ena = 1'b0 \n         `ifdef E203_SUPPORT_AMO//{\n           | icb_sta_is_amoalu \n         `endif//E203_SUPPORT_AMO}\n         ;\n  assign leftover_1_nxt = agu_req_alu_res;\n  //\n  // The instantiation of last_icb_addr buffer is actually shared with the ALU SBF-1 Buffer\n  assign agu_sbf_1_ena   = leftover_1_ena;\n  assign agu_sbf_1_nxt   = leftover_1_nxt;\n  assign leftover_1_r = agu_sbf_1_r;\n\n\n  assign agu_req_alu_add  = 1'b0\n                     `ifdef E203_SUPPORT_AMO//{\n                           | (icb_sta_is_amoalu & agu_i_amoadd)\n                             // In order to let AMO 2nd uop have correct address\n              "}
{"text": "             | (agu_i_amo & (icb_sta_is_wait2nd | icb_sta_is_2nd | icb_sta_is_wbck))\n                     `endif//E203_SUPPORT_AMO}\n                           // To cut down the timing loop from agu_i_valid // | (icb_sta_is_idle & agu_i_valid)\n                           //   we dont need this signal at all\n                           | icb_sta_is_idle\n                           ;\n\n  assign agu_req_alu_op1 =  icb_sta_is_idle   ? agu_i_rs1\n                     `ifdef E203_SUPPORT_AMO//{\n                          : icb_sta_is_amoalu ? leftover_r\n                             // In order to let AMO 2nd uop have correct address\n                          : (agu_i_amo & (icb_sta_is_wait2nd | icb_sta_is_2nd | icb_sta_is_wbck)) ? agu_i_rs1\n                     `endif//E203_SUPPORT_AMO}\n                     `ifndef E203_SUPPORT_UNALGNLDST//{\n                          : `E203_XLEN'd0 \n                     `endif//}\n                     ;\n\n  wire [`E203_XLEN-1:0] agu_addr_gen_op2 = agu_i_ofst0 ? `E203_XLEN'b0 : agu_i_imm;\n  assign agu_req_alu_op2 =  icb_sta_is_idle   ? agu_addr_gen_op2 \n                     `ifdef E203_SUPPORT_AMO//{\n                          : icb_sta_is_amoalu ? agu_i_rs2\n                             // In order to let AMO 2nd uop have correct address\n                          : (agu_i_amo & (icb_sta_is_wait2nd | icb_sta_is_2nd | icb_sta_is_wbck)) ? agu_addr_gen_op2\n                     `endif//E203_SUPPORT_AMO}\n                     `ifndef E203_SUPPORT_UNALGNLDST//{\n                          : `E203_XLEN'd0 \n                     `endif//}\n                     ;\n\n  `ifdef E203_SUPPORT_AMO//{\n  assign agu_req_alu_swap = (icb_sta_is_amoalu & agu_i_amoswap );\n  assign agu_req_alu_and  = (icb_sta_is_amoalu & agu_i_amoand  );\n  assign agu_req_alu_or   = (icb_sta_is_amoalu & agu_i_amoor   );\n  assign agu_req_alu_xor  = (icb_sta_is_amoalu & agu_i_amoxor  );\n  assign agu_req_alu_max  = (icb_sta_is_amoalu & agu_i_amomax  );\n  assign agu_req_alu_min  = (icb_sta_is_amoalu & agu_i_amomin  );\n  assign agu_req_alu_maxu = (icb_sta_is_amoalu & agu_i_amomaxu );\n  assign agu_req_alu_minu = (icb_sta_is_amoalu & agu_i_amominu );\n  `endif//E203_SUPPORT_AMO}\n  `ifndef E203_SUPPORT_AMO//{\n  assign agu_req_alu_swap = 1'b0;\n  assign agu_req_alu_and  = 1'b0;\n  assign agu_req_alu_or   = 1'b0;\n  assign agu_req_alu_xor  = 1'b0;\n  assign agu_req_alu_max  = 1'b0;\n  assign agu_req_alu_min  = 1'b0;\n  assign agu_req_alu_maxu = 1'b0;\n  assign agu_req_alu_minu = 1'b0;\n  `endif//}\n\n\n/////////////////////////////////////////////////////////////////////////////////\n// Implement the AGU op handshake ready signal\n//\n// The AGU op handshakeke interface will be ready when\n//   * If it is unaligned instructions, then it will just \n//       directly pass out the write-back interface, hence it will only be \n//       ready when the write-back interface is ready\n//   * If it is not unaligned load/store instructions, then it will just \n//       directly pass out the instruction to LSU-ctrl interface, hence it need to check\n//       the AGU ICB interface is ready, but it also need to ask write-back interface \n//       for commit, so, also need to check if write-back interfac is ready\n//       \n  `ifndef E203_SUPPORT_UNALGNLDST//{\n  `else//}{\n  !!!! ERROR: This UNALIGNED load/store is not supported, must be something wrong \n  `endif//}\n\n  assign agu_i_ready =\n      ( 1'b0\n  `ifdef E203_SUPPORT_AMO//{\n       | agu_i_algnamo \n  `endif//E203_SUPPORT_AMO}\n       ) ? state_last_exit_ena :\n      (agu_icb_cmd_ready & agu_o_ready) ;\n  \n  // The aligned load/store instruction will be dispatched to LSU as long pipeline\n  //   instructions\n  assign agu_i_longpipe = agu_i_algnldst;\n  \n\n  //\n  /////////////////////////////////////////////////////////////////////////////////\n  // Implement the Write-back interfaces (unaligned and AMO instructions) \n\n  // The AGU write-back will be valid when:\n  //   * For the aligned load/store\n  //       Directly passed to ICB interface, but also need to pass \n  //       to write-back interface asking for commit\n  assign agu_o_valid = \n        `ifdef E203_SUPPORT_AMO//{\n      // For the unaligned load/store and aligned AMO, it will enter \n      //   into the state machine and let the last state to send back\n      //   to the commit stage\n      icb_sta_is_last \n        `endif//E203_SUPPORT_AMO}\n      // For the aligned load/store and unaligned AMO, it will be send\n      //   to the commit stage right the same cycle of agu_i_valid\n      |(\n         agu_i_valid & ( agu_i_algnldst \n        `ifndef E203_SUPPORT_UNALGNLDST//{\n           // If not support the unaligned load/store by hardware, then \n               // the unaligned load/store will be treated as exception\n               // and it will also be send to the commit stage right the\n               // same cycle of agu_i_valid\n           | agu_i_unalgnldst\n        `endif//}\n        `ifdef E203_SUPPORT_AMO//{\n           | agu_i_unalgnamo \n        `endif//E203_SUPPORT_AMO}\n         )\n          ////  // Since it is issuing to commit stage and \n          ////  // LSU at same cycle, so we must qualify the icb_cmd_ready signal from LSU\n          ////  // to make sure it is out to commit/LSU at same cycle\n               // To cut the critical timing  path from longpipe signal\n               // we always assume the AGU will need icb_cmd_ready\n          & agu_icb_cmd_ready\n      );\n\n  assign agu_o_wbck_wdat = {`E203_XLEN{1'b0 }}\n       `ifdef E203_SUPPORT_AMO//{\n                    | ({`E203_XLEN{agu_i_algnamo  }} & leftover_r) \n                    | ({`E203_XLEN{agu_i_unalgnamo}} & `E203_XLEN'b0) \n       `endif//E203_SUPPORT_AMO}\n       ;\n\n  assign agu_o_cmt_buserr = (1'b0 \n                `ifdef E203_SUPPORT_AMO//{\n                      | (agu_i_algnamo    & leftover_err_r) \n                      | (agu_i_unalgnamo  & 1'b0) \n                `endif//E203_SUPPORT_AMO}\n                      )\n                ;\n  assign agu_o_cmt_badaddr = agu_icb_cmd_addr;\n\n\n  assign agu_o_cmt_misalgn = (1'b0\n                `ifdef E203_SUPPORT_AMO//{\n                       | agu_i_unalgnamo \n                `endif//E203_SUPPORT_AMO}\n                       | (agu_i_unalgnldst) //& agu_i_excl) We dont support unaligned load/store regardless it is AMO or not\n                       )\n                       ;\n  assign agu_o_cmt_ld      = agu_i_load & (~agu_i_excl); \n  assign agu_o_cmt_stamo   = agu_i_store | agu_i_amo | agu_i_excl;\n\n  \n  // The exception or error result cannot write-back\n  assign agu_o_wbck_err = agu_o_cmt_buserr | agu_o_cmt_misalgn\n                          ;\n\n\n  assign agu_icb_rsp_ready = 1'b1;\n\n\n  \n\n  assign agu_icb_cmd_valid = \n            ((agu_i_algnldst & agu_i_valid)\n              // We must qualify the agu_o_ready signal from commit stage\n              // to make sure it is out to commit/LSU at same cycle\n              & (agu_o_ready)\n            )\n          `ifdef E203_SUPPORT_AMO//{\n            | (agu_i_algnamo & (\n                         (icb_sta_is_idle & agu_i_valid \n                             // We must qualify the agu_o_ready signal from commit stage\n                             // to make sure it is out to commit/LSU at same cycle\n                             & agu_o_ready)\n                       | (icb_sta_is_wait2nd)))\n            | (agu_i_unalgnamo & 1'b0) \n          `endif//E203_SUPPORT_AMO}\n            ;\n  assign agu_icb_cmd_addr = agu_req_alu_res[`E203_ADDR_SIZE-1:0];\n\n  assign agu_icb_cmd_read = \n            (agu_i_algnldst & agu_i_load) \n          `ifdef E203_SUPPORT_AMO//{\n          | (agu_i_algnamo & icb_sta_is_idle & 1'b1)\n          | (agu_i_algnamo & icb_sta_is_wait2nd & 1'b0) \n          `endif//E203_SUPPORT_AMO}\n          ;\n     // The AGU ICB CMD Wdata sources:\n     //   * For the aligned store instructions\n     //       Directly passed to AGU ICB, wdata is op2 repetitive form, \n     //       wmask is generated according to the LSB and size\n\n\n  wire [`E203_XLEN-1:0] algnst_wdata = \n            ({`E203_XLEN{agu_i_size_b }} & {4{agu_i_rs2[ 7:0]}})\n          | ({`E203_XLEN{agu_i_size_hw}} & {2{agu_i_rs2[15:0]}})\n          | ({`E203_XLEN{agu_i_size_w }} & {1{agu_i_rs2[31:0]}});\n  wire [`E203_XLEN/8-1:0] algnst_wmask = \n            ({`E203_XLEN/8{agu_i_size_b }} & (4'b0001 << agu_icb_cmd_addr[1:0]))\n          | ({`E203_XLEN/8{agu_i_size_hw}} & (4'b0011 << {agu_icb_cmd_addr[1],1'b0}))\n          | ({`E203_XLEN/8{agu_i_size_w }} & (4'b1111));\n\n          \n  assign agu_icb_cmd_wdata = \n  `ifdef E203_SUPPORT_AMO//{\n      agu_i_amo ? leftover_1_r :\n  `endif//E203_SUPPORT_AMO}\n      algnst_wdata;\n\n  assign agu_icb_cmd_wmask =\n  `ifdef E203_SUPPORT_AMO//{\n         // If the 1st uop have bus-error, then not write the data for 2nd uop\n      agu_i_amo ? (leftover_err_r ? 4'h0 : 4'hF) :\n  `endif//E203_SUPPORT_AMO}\n      algnst_wmask; \n\n  assign agu_icb_cmd_back2agu = 1'b0 \n             `ifdef E203_SUPPORT_AMO//{\n                | agu_i_algnamo  \n             `endif//E203_SUPPORT_AMO}\n             ;\n  //We dont support lock and exclusive in such 2 stage simple implementation\n  assign agu_icb_cmd_lock     = 1'b0 \n             `ifdef E203_SUPPORT_AMO//{\n                 | (agu_i_algnamo & icb_sta_is_idle)\n             `endif//E203_SUPPORT_AMO}\n                 ;\n  assign agu_icb_cmd_excl     = 1'b0\n             `ifdef E203_SUPPORT_AMO//{\n                 | agu_i_excl\n             `endif//E203_SUPPORT_AMO}\n                 ;\n\n  assign agu_icb_cmd_itag     = agu_i_itag;\n  assign agu_icb_cmd_usign    = agu_i_usign;\n  assign agu_icb_cmd_size     = \n                agu_i_size;\n\n\nendmodule                                      \n                                               \n                                               \n                                               \n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  This module to implement the 17cycles MUL and 33 cycles DIV unit, which is mostly \n//  share the datapath with ALU_DPATH module to save gatecount to mininum\n//\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\n`ifdef E203_SUPPORT_MULDIV //{\nmodule e203_exu_alu_muldiv(\n  input  mdv_nob2b,\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The Issue Handshake Interface to MULDIV \n  //\n  input  muldiv_i_valid, // Handshake valid\n  output muldiv_i_ready, // Handshake ready\n\n  input  [`E203_XLEN-1:0] muldiv_i_rs1,\n  input  [`E203_XLEN-1:0] muldiv_i_rs2,\n  input  [`E203_XLEN-1:0] muldiv_i_imm,\n  input  [`E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_i_info,\n  input  [`E203_ITAG_WIDTH-1:0] muldiv_i_itag,\n\n  output muldiv_i_longpipe,\n\n  input  flush_pulse,\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The MULDIV Write-Back/Commit Interface\n  output muldiv_o_valid, // Handshake valid\n  input  muldiv_o_ready, // Handshake ready\n  output [`E203_XLEN-1:0] muldiv_o_wbck_wdat,\n  output muldiv_o_wbck_err,   \n  //   There is no exception cases for MULDIV, so no addtional cmt signals\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // To share the ALU datapath, generate interface to ALU\n  // \n     // The operands and info to ALU\n  output [`E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op1,\n  output [`E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_op2,\n  output                                muldiv_req_alu_add ,\n  output                                muldiv_req_alu_sub ,\n  input  [`E203_MULDIV_ADDER_WIDTH-1:0] muldiv_req_alu_res,\n\n     // The Shared-Buffer interface to ALU-Shared-Buffer\n  output          muldiv_sbf_0_ena,\n  output [33-1:0] muldiv_sbf_0_nxt,\n  input  [33-1:0] muldiv_sbf_0_r,\n\n  output          muldiv_sbf_1_ena,\n  output [33-1:0] muldiv_sbf_1_nxt,\n  input  [33-1:0] muldiv_sbf_1_r,\n\n  input  clk,\n  input  rst_n\n  );\n\n  wire muldiv_i_hsked = muldiv_i_valid & muldiv_i_ready;\n  wire muldiv_o_hsked = muldiv_o_valid & muldiv_o_ready;\n\n  wire flushed_r;\n  wire flushed_set = flush_pulse;\n  wire flushed_clr = muldiv_o_hsked & (~flush_pulse);\n  wire flushed_ena = flushed_set | flushed_clr;\n  wire flushed_nxt = flushed_set | (~flushed_clr);\n  sirv_gnrl_dfflr #(1) flushed_dfflr (flushed_ena, flushed_nxt, flushed_r, clk, rst_n);\n\n\n\n  wire i_mul    = muldiv_i_info[`E203_DECINFO_MULDIV_MUL   ];// We treat this as signed X signed\n  wire i_mulh   = muldiv_i_info[`E203_DECINFO_MULDIV_MULH  ];\n  wire i_mulhsu = muldiv_i_info[`E203_DECINFO_MULDIV_MULHSU];\n  wire i_mulhu  = muldiv_i_info[`E203_DECINFO_MULDIV_MULHU ];\n  wire i_div    = muldiv_i_info[`E203_DECINFO_MULDIV_DIV   ];\n  wire i_divu   = muldiv_i_info[`E203_DECINFO_MULDIV_DIVU  ];\n  wire i_rem    = muldiv_i_info[`E203_DECINFO_MULDIV_REM   ];\n  wire i_remu   = muldiv_i_info[`E203_DECINFO_MULDIV_REMU  ];\n      // If it is flushed then it is not back2back real case\n  wire i_b2b    = muldiv_i_info[`E203_DECINFO_MULDIV_B2B   ] & (~flushed_r) & (~mdv_nob2b);\n\n  wire back2back_seq = i_b2b;\n\n  wire mul_rs1_sign = (i_mulhu)            ? 1'b0 : muldiv_i_rs1[`E203_XLEN-1];\n  wire mul_rs2_sign = (i_mulhsu | i_mulhu) ? 1'b0 : muldiv_i_rs2[`E203_XLEN-1];\n\n  wire [32:0] mul_op1 = {mul_rs1_sign, muldiv_i_rs1};\n  wire [32:0] mul_op2 = {mul_rs2_sign, muldiv_i_rs2};\n\n  wire i_op_mul = i_mul | i_mulh | i_mulhsu | i_mulhu;\n  wire i_op_div = i_div | i_divu | i_rem    | i_remu;\n\n\n  /////////////////////////////////////////////////////////////////////////////////\n  // Implement the state machine for \n  //    (1) The MUL instructions\n  //    (2) The DIV instructions\n  localparam MULDIV_STATE_WIDTH = 3;\n\n  wire [MULDIV_STATE_WIDTH-1:0] muldiv_state_nxt;\n  wire [MULDIV_STATE_WIDTH-1:0] muldiv_state_r;\n  wire muldiv_state_ena;\n\n  // State 0: The 0th state, means this is the 1 cycle see the operand inputs\n  localparam MULDIV_STATE_0TH = 3'd0;\n  // State 1: Executing the instructions\n  localparam MULDIV_STATE_EXEC = 3'd1;\n  // State 2: Div check if need correction\n  localparam MULDIV_STATE_REMD_CHCK = 3'd2;\n  // State 3: Quotient correction\n  localparam MULDIV_STATE_QUOT_CORR = 3'd3;\n  // State 4: Reminder correction\n  localparam MULDIV_STATE_REMD_CORR = 3'd4;\n  \n \n  wire [MULDIV_STATE_WIDTH-1:0] state_0th_nxt;\n  wire [MULDIV_STATE_WIDTH-1:0] state_exec_nxt;\n  wire [MULDIV_STATE_WIDTH-1:0] state_remd_chck_nxt;\n  wire [MULDIV_STATE_WIDTH-1:0] state_quot_corr_nxt;\n  wire [MULDIV_STATE_WIDTH-1:0] state_remd_corr_nxt;\n  wire state_0th_exit_ena;\n  wire state_exec_exit_ena;\n  wire state_remd_chck_exit_ena;\n  wire state_quot_corr_exit_ena;\n  wire state_remd_corr_exit_ena;\n\n  wire special_cases;\n  wire muldiv_i_valid_nb2b = muldiv_i_valid & (~back2back_seq) & (~special_cases);\n\n  // Define some common signals and reused later to save gatecounts\n  wire   muldiv_sta_is_0th       = (muldiv_state_r == MULDIV_STATE_0TH   );\n  wire   muldiv_sta_is_exec      = (muldiv_state_r == MULDIV_STATE_EXEC   );\n  wire   muldiv_sta_is_remd_chck  = (muldiv_state_r == MULDIV_STATE_REMD_CHCK   );\n  wire   muldiv_sta_is_quot_corr = (muldiv_state_r == MULDIV_STATE_QUOT_CORR   );\n  wire   muldiv_sta_is_remd_corr = (muldiv_state_r == MULDIV_STATE_REMD_CORR   );\n\n      // **** If the current state is 0th,\n          // If a new instruction come (non back2back), next state is MULDIV_STATE_EXEC\n  assign state_0th_exit_ena = muldiv_sta_is_0th & muldiv_i_valid_nb2b & (~flush_pulse);\n  assign state_0th_nxt      = MULDIV_STATE_EXEC;\n\n      // **** If the current state is exec,\n  wire div_need_corrct; \n  wire mul_exec_last_cycle; \n  wire div_exec_last_cycle; \n  wire exec_last_cycle; \n  assign state_exec_exit_ena =  muldiv_sta_is_exec & ((\n          // If it is the last cycle (16th or 32rd cycles), \n                           exec_last_cycle \n              // If it is div op, then jump to DIV_CHECK state\n                         & (i_op_div ? 1'b1\n              // If it is not div-need-correction, then jump to 0th \n                                            : muldiv_o_hsked))\n            | flush_pulse);\n  assign state_exec_nxt      = \n                (\n                         flush_pulse ? MULDIV_STATE_0TH :\n              // If it is div op, then jump to DIV_CHECK state\n                         i_op_div ? MULDIV_STATE_REMD_CHCK\n              // If it is not div-need-correction, then jump to 0th \n                                         : MULDIV_STATE_0TH\n                );\n\n      // **** If the current state is REMD_CHCK,\n          // If it is div-need-correction, then jump to QUOT_CORR state\n          //   otherwise jump to the 0th\n  assign state_remd_chck_exit_ena = (muldiv_sta_is_remd_chck & ( \n              // If it is div op, then jump to DIV_CHECK state\n                                              (div_need_corrct ? 1'b1\n              // If it is not div-need-correction, then jump to 0th \n                                                         : muldiv_o_hsked) \n                                              | flush_pulse )) ;\n  assign state_remd_chck_nxt      = flush_pulse ? MULDIV_STATE_0TH :\n              // If it is div-need-correction, then jump to QUOT_CORR state\n                         div_need_corrct ? MULDIV_STATE_QUOT_CORR\n              // If it is not div-need-correction, then jump to 0th \n                                         : MULDIV_STATE_0TH;\n\n      // **** If the current state is QUOT_CORR,\n          // Always jump to REMD_CORR state\n  assign state_quot_corr_exit_ena = (muldiv_sta_is_quot_corr & (flush_pulse | 1'b1));\n  assign state_quot_corr_nxt      = flush_pulse ? MULDIV_STATE_0TH : MULDIV_STATE_REMD_CORR;\n\n                \n      // **** If the current state is REMD_CORR,\n              // Then jump to 0th \n  assign state_remd_corr_exit_ena = (muldiv_sta_is_remd_corr & (flush_pulse | muldiv_o_hsked));\n  assign state_remd_corr_nxt      = flush_pulse ? MULDIV_STATE_0TH : MULDIV_STATE_0TH;\n\n  // The state will only toggle when each state is meeting the condition to exit \n  assign muldiv_state_ena = state_0th_exit_ena \n                          | state_exec_exit_ena  \n                          | state_remd_chck_exit_ena  \n                          | state_quot_corr_exit_ena  \n                          | state_remd_corr_exit_ena;  \n\n  // The next-state is onehot mux to select different entries\n  assign muldiv_state_nxt = \n              ({MULDIV_STATE_WIDTH{state_0th_exit_ena      }} & state_0th_nxt      )\n            | ({MULDIV_STATE_WIDTH{state_exec_exit_ena     }} & state_exec_nxt     )\n            | ({MULDIV_STATE_WIDTH{state_remd_chck_exit_ena}} & state_remd_chck_nxt)\n            | ({MULDIV_STATE_WIDTH{state_quot_corr_exit_ena}} & state_quot_corr_nxt)\n            | ({MULDIV_STATE_WIDTH{state_remd_corr_exit_ena}} & state_remd_corr_nxt)\n              ;\n\n  sirv_gnrl_dfflr #(MULDIV_STATE_WIDTH) muldiv_state_dfflr (muldiv_state_ena, muldiv_state_nxt, muldiv_state_r, clk, rst_n);\n\n  wire state_exec_enter_ena = muldiv_state_ena & (muldiv_state_nxt == MULDIV_STATE_EXEC);\n\n  localparam EXEC_CNT_W  = 6;\n  localparam EXEC_CNT_1  = 6'd1 ;\n  localparam EXEC_CNT_16 = 6'd16;\n  localparam EXEC_CNT_32 = 6'd32;\n\n  wire[EXEC_CNT_W-1:0] exec_cnt_r;\n  wire exec_cnt_set = state_exec_enter_ena;\n  wire exec_cnt_inc = muldiv_sta_is_exec & (~exec_last_cycle); \n  wire exec_cnt_ena = exec_cnt_inc | exec_cnt_set; \n    // When set, the counter is set to 1, because the 0th state also counted as 0th cycle\n  wire[EXEC_CNT_W-1:0] exec_cnt_nxt = exec_cnt_set ? EXEC_CNT_1 : (exec_cnt_r + 1'b1);\n  sirv_gnrl_dfflr #(EXEC_CNT_W) exec_cnt_dfflr (exec_cnt_ena, exec_cnt_nxt, exec_cnt_r, clk, rst_n);\n  // The exec state is the last cycle when the exec_cnt_r is reaching the last cycle (16 or 32cycles)\n\n  wire cycle_0th  = muldiv_sta_is_0th;\n  wire cycle_16th = (exec_cnt_r == EXEC_CNT_16);\n  wire cycle_32nd = (exec_cnt_r == EXEC_CNT_32);\n  assign mul_exec_last_cycle = cycle_16th;\n  assign div_exec_last_cycle = cycle_32nd;\n  assign exec_last_cycle = i_op_mul ? mul_exec_last_cycle : div_exec_last_cycle;\n\n\n\n///////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////\n// Use booth-4 algorithm to conduct the multiplication\n\n  wire [32:0] part_prdt_hi_r;\n  wire [32:0] part_prdt_lo_r;\n  wire [32:0] part_prdt_hi_nxt;\n  wire [32:0] part_prdt_lo_nxt;\n\n  wire part_prdt_sft1_r;\n  wire [2:0] booth_code = cycle_0th  ? {muldiv_i_rs1[1:0],1'b0}\n                        : cycle_16th ? {mul_rs1_sign,part_prdt_lo_r[0],part_prdt_sft1_r}\n                        : {part_prdt_lo_r[1:0],part_prdt_sft1_r};\n      //booth_code == 3'b000 =  0\n      //booth_code == 3'b001 =  1\n      //booth_code == 3'b010 =  1\n      //booth_code == 3'b011 =  2\n      //booth_code == 3'b100 = -2\n      //booth_code == 3'b101 = -1\n      //booth_code == 3'b110 = -1\n      //booth_code == 3'b111 = -0\n  wire booth_sel_zero = (booth_code == 3'b000) | (booth_code == 3'b111);\n  wire booth_sel_two  = (booth_code == 3'b011) | (booth_code == 3'b100);\n  wire booth_sel_one  = (~booth_sel_zero) & (~booth_sel_two);\n  wire booth_sel_sub  = booth_code[2];  \n\n  // 35 bits adder needed\n  wire [`E203_MULDIV_ADDER_WIDTH-1:0] mul_exe_alu_res = muldiv_req_alu_res;\n  wire [`E203_MULDIV_ADDER_WIDTH-1:0] mul_exe_alu_op2 = \n      ({`E203_MULDIV_ADDER_WIDTH{booth_sel_zero}} & `E203_MULDIV_ADDER_WIDTH'b0) \n    | ({`E203_MULDIV_ADDER_WIDTH{booth_sel_one }} & {mul_rs2_sign,mul_rs2_sign,mul_rs2_sign,muldiv_i_rs2}) \n    | ({`E203_MULDIV_ADDER_WIDTH{booth_sel_two }} & {mul_rs2_sign,mul_rs2_sign,muldiv_i_rs2,1'b0}) \n      ;\n  wire [`E203_MULDIV_ADDER_WIDTH-1:0] mul_exe_alu_op1 =\n       cycle_0th ? `E203_MULDIV_ADDER_WIDTH'b0 : {part_prdt_hi_r[32],part_prdt_hi_r[32],part_prdt_hi_r};  \n  wire mul_exe_alu_add = (~booth_sel_sub);\n  wire mul_exe_alu_sub = booth_sel_sub;\n\n  assign part_prdt_hi_nxt = mul_exe_alu_res[34:2];\n  assign part_prdt_lo_nxt = {mul_exe_alu_res[1:0],\n                         (cycle_0th ? {mul_rs1_sign,muldiv_i_rs1[31:2]} : part_prdt_lo_r[32:2])\n                         };\n  wire part_prdt_sft1_nxt = cycle_0th ? muldiv_i_rs1[1] : part_prdt_lo_r[1];\n\n  wire mul_exe_cnt_set = exec_cnt_set & i_op_mul;\n  wire mul_exe_cnt_inc = exec_cnt_inc & i_op_mul; \n\n  wire part_prdt_hi_ena = mul_exe_cnt_set | mul_exe_cnt_inc | state_exec_exit_ena;\n  wire part_prdt_lo_ena = part_prdt_hi_ena;\n\n  sirv_gnrl_dfflr #(1) part_prdt_sft1_dfflr (part_prdt_lo_ena, part_prdt_sft1_nxt, part_prdt_sft1_r, clk, rst_n);\n\n    // This mul_res is not back2back case, so directly from the adder result\n  wire[`E203_XLEN-1:0] mul_res = i_mul ? part_prdt_lo_r[32:1] : mul_exe_alu_res[31:0];\n\n\n\n\n///////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////\n// The Divider Implementation, using the non-restoring signed division \n  wire [32:0] part_remd_r;\n  wire [32:0] part_quot_r;\n\n  wire div_rs1_sign = (i_divu | i_remu) ? 1'b0 : muldiv_i_rs1[`E203_XLEN-1];\n  wire div_rs2_sign = (i_divu | i_remu) ? 1'b0 : muldiv_i_rs2[`E203_XLEN-1];\n\n  wire [65:0] dividend = {{33{div_rs1_sign}}, div_rs1_sign, muldiv_i_rs1};\n  wire [33:0] divisor  = {div_rs2_sign, div_rs2_sign, muldiv_i_rs2};\n\n  wire quot_0cycl = (dividend[65] ^ divisor[33]) ? 1'b0 : 1'b1;// If the sign(s0)!=sign(d), then set q_1st = -1\n\n  wire [66:0] dividend_lsft1 = {dividend[65:0],quot_0cycl};\n\n\n  wire prev_quot = cycle_0th ? quot_0cycl : part_quot_r[0];\n\n  wire part_remd_sft1_r;\n  // 34 bits adder needed\n  wire [33:0] div_exe_alu_res = muldiv_req_alu_res[33:0];\n  wire [33:0] div_exe_alu_op1 = cycle_0th ? dividend_lsft1[66:33] : {part_remd_sft1_r, part_remd_r[32:0]};\n  wire [33:0] div_exe_alu_op2 = divisor;\n  wire div_exe_alu_add = (~prev_quot);\n  wire div_exe_alu_sub =   prev_quot ;\n\n  wire current_quot = (div_exe_alu_res[33] ^ divisor[33]) ? 1'b0 : 1'b1;\n\n  wire [66:0] div_exe_part_remd;\n  assign div_exe_part_remd[66:33] = div_exe_alu_res;\n  assign div_exe_part_remd[32: 0] = cycle_0th ? dividend_lsft1[32:0] : part_quot_r[32:0];\n\n  wire [67:0] div_exe_part_remd_lsft1 = {div_exe_part_remd[66:0],current_quot};\n\n  wire part_remd_ena;\n    // Since the part_remd_r is only save 33bits (after left shifted), so the adder result MSB bit we need to save\n    //   it here, which will be used at next round\n  sirv_gnrl_dfflr #(1) part_remd_sft1_dfflr (part_remd_ena, div_exe_alu_res[32], part_remd_sft1_r, clk, rst_n);\n  \n  wire div_exe_cnt_set = exec_cnt_set & i_op_div;\n  wire div_exe_cnt_inc = exec_cnt_inc & i_op_div; \n\n  wire corrct_phase = muldiv_sta_is_remd_corr | muldiv_sta_is_quot_corr;\n  wire check_phase  = muldiv_sta_is_remd_chck;\n\n  wire [33:0] div_quot_corr_alu_res;\n  wire [33:0] div_remd_corr_alu_res;\n       // Note: in last cycle, the reminder value is the non-shifted value\n       //   but the quotient value is the shifted value, and last bit of quotient value is shifted always by 1 \n       // If need corrective, the correct quot first, and then reminder, so reminder output as comb logic directly to \n           // save a cycle\n  wire [32:0] div_remd = check_phase  ? part_remd_r [32:0]:\n                         corrct_phase ? div_remd_corr_alu_res[32:0] :\n                                        div_exe_part_remd[65:33];\n  wire [32:0] div_quot = check_phase  ? part_quot_r [32:0]:\n                         corrct_phase ? part_quot_r [32:0]: \n                                        {div_exe_part_remd[31:0],1'b1};\n\n  // The partial reminder and quotient   \n  wire [32:0] part_remd_nxt = corrct_phase ? div_remd_corr_alu_res[32:0] :\n                              (muldiv_sta_is_exec & div_exec_last_cycle) ? div_remd :\n                                                          div_exe_part_remd_lsft1[65:33];\n  wire [32:0] part_quot_nxt = corrct_phase ? div_quot_corr_alu_res[32:0] :\n                              (muldiv_sta_is_exec & div_exec_last_cycle) ? div_quot :\n                                                          div_exe_part_remd_lsft1[32: 0];\n\n  wire [33:0] div_remd_chck_alu_res = muldiv_req_alu_res[33:0];\n  wire [33:0] div_remd_chck_alu_op1 = {part_remd_r[32], part_remd_r};\n  wire [33:0] div_remd_chck_alu_op2 = divisor;\n  wire div_remd_chck_alu_add = 1'b1;\n  wire div_remd_chck_alu_sub = 1'b0;\n\n  wire remd_is_0 = ~(|part_remd_r);\n  wire remd_is_neg_divs = ~(|div_remd_chck_alu_res); \n  wire remd_is_divs = (part_remd_r == divisor[32:0]);\n  assign div_need_corrct = i_op_div & (\n                                ((part_remd_r[32] ^ dividend[65]) & (~remd_is_0))\n                              | remd_is_neg_divs\n                              | remd_is_divs\n                            );\n\n  wire remd_inc_quot_dec = (part_remd_r[32] ^ divisor[33]);\n\n  assign div_quot_corr_alu_res = muldiv_req_alu_res[33:0];\n  wire [33:0] div_quot_corr_alu_op1 = {part_quot_r[32], part_quot_r};\n  wire [33:0] div_quot_corr_alu_op2 = 34'b1;\n  wire div_quot_corr_alu_add = (~remd_inc_quot_dec);\n  wire div_quot_corr_alu_sub = remd_inc_quot_dec;\n\n  assign div_remd_corr_alu_res = muldiv_req_alu_res[33:0];\n  wire [33:0] div_remd_corr_alu_op1 = {part_remd_r[32], part_remd_r};\n  wire [33:0] div_remd_corr_alu_op2 = divisor;\n  wire div_remd_corr_alu_add = remd_inc_quot_dec;\n  wire div_remd_corr_alu_sub = ~remd_inc_quot_dec;\n\n  // The partial reminder register will be loaded in the exe state, and in reminder correction cycle\n  assign part_remd_ena = div_exe_cnt_set | div_exe_cnt_inc | state_exec_exit_ena | state_remd_corr_exit_ena;\n  // The partial quotient register will be loaded in the exe state, and in quotient correction cycle\n  wire part_quot_ena = div_exe_cnt_set | div_exe_cnt_inc | state_exec_exit_ena | state_quot_corr_exit_ena;\n\n  wire[`E203_XLEN-1:0] div_res = (i_div | i_divu) ? div_quot[`E203_XLEN-1:0] : div_remd[`E203_XLEN-1:0];\n\n\n\n  wire div_by_0 = ~(|muldiv_i_rs2);// Divisor is all zeros\n  wire div_ovf  = (i_div | i_rem) & (&muldiv_i_rs2)  // Divisor is all ones, means -1\n                        //Dividend is 10000...000, means -(2^xlen -1)\n                & muldiv_i_rs1[`E203_XLEN-1] & (~(|muldiv_i_rs1[`E203_XLEN-2:0]));\n\n  wire[`E203_XLEN-1:0] div_by_0_res_quot = ~`E203_XLEN'b0;\n  wire[`E203_XLEN-1:0] div_by_0_res_remd = "}
{"text": "dividend[`E203_XLEN-1:0];\n  wire[`E203_XLEN-1:0] div_by_0_res = (i_div | i_divu) ? div_by_0_res_quot : div_by_0_res_remd;\n\n  wire[`E203_XLEN-1:0] div_ovf_res_quot  = {1'b1,{`E203_XLEN-1{1'b0}}};\n  wire[`E203_XLEN-1:0] div_ovf_res_remd  = `E203_XLEN'b0;\n  wire[`E203_XLEN-1:0] div_ovf_res = (i_div | i_divu) ? div_ovf_res_quot : div_ovf_res_remd;\n\n  wire div_special_cases = i_op_div & (div_by_0 | div_ovf);\n  wire[`E203_XLEN-1:0] div_special_res = div_by_0 ? div_by_0_res : div_ovf_res;\n\n\n\n///////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////\n// Output generateion\n  assign special_cases = div_special_cases;// Only divider have special cases\n  wire[`E203_XLEN-1:0] special_res = div_special_res;// Only divider have special cases\n\n  // To detect the sequence of MULH[[S]U] rdh, rs1, rs2;    MUL rdl, rs1, rs2\n  // To detect the sequence of     DIV[U] rdq, rs1, rs2; REM[U] rdr, rs1, rs2  \n  wire [`E203_XLEN-1:0] back2back_mul_res = {part_prdt_lo_r[`E203_XLEN-2:0],part_prdt_sft1_r};// Only the MUL will be treated as back2back\n  wire [`E203_XLEN-1:0] back2back_mul_rem = part_remd_r[`E203_XLEN-1:0];\n  wire [`E203_XLEN-1:0] back2back_mul_div = part_quot_r[`E203_XLEN-1:0];\n  wire [`E203_XLEN-1:0] back2back_res = (\n             ({`E203_XLEN{i_mul         }} & back2back_mul_res)\n           | ({`E203_XLEN{i_rem | i_remu}} & back2back_mul_rem)\n           | ({`E203_XLEN{i_div | i_divu}} & back2back_mul_div)\n     );\n\n    // The output will be valid:\n    //   * If it is back2back and sepcial cases, just directly pass out from input\n    //   * If it is not back2back sequence when it is the last cycle of exec state \n    //     (not div need correction) or last correct state;\n  wire wbck_condi = (back2back_seq | special_cases) ? 1'b1 : \n                       (\n                           (muldiv_sta_is_exec & exec_last_cycle & (~i_op_div))\n                         | (muldiv_sta_is_remd_chck & (~div_need_corrct)) \n                         | muldiv_sta_is_remd_corr \n                       );\n  assign muldiv_o_valid = wbck_condi & muldiv_i_valid;\n  assign muldiv_i_ready = wbck_condi & muldiv_o_ready;\n  wire res_sel_spl = special_cases;\n  wire res_sel_b2b  = back2back_seq & (~special_cases);\n  wire res_sel_div  = (~back2back_seq) & (~special_cases) & i_op_div;\n  wire res_sel_mul  = (~back2back_seq) & (~special_cases) & i_op_mul;\n  assign muldiv_o_wbck_wdat = \n               ({`E203_XLEN{res_sel_b2b}} & back2back_res)\n             | ({`E203_XLEN{res_sel_spl}} & special_res)\n             | ({`E203_XLEN{res_sel_div}} & div_res)\n             | ({`E203_XLEN{res_sel_mul}} & mul_res);\n\n  //   There is no exception cases for MULDIV, so no addtional cmt signals\n  assign muldiv_o_wbck_err = 1'b0;\n\n     // The operands and info to ALU\n  wire req_alu_sel1 = i_op_mul;\n  wire req_alu_sel2 = i_op_div & (muldiv_sta_is_0th | muldiv_sta_is_exec);\n  wire req_alu_sel3 = i_op_div & muldiv_sta_is_quot_corr;\n  wire req_alu_sel4 = i_op_div & muldiv_sta_is_remd_corr;\n  wire req_alu_sel5 = i_op_div & muldiv_sta_is_remd_chck;\n\n  assign muldiv_req_alu_op1 = \n             ({`E203_MULDIV_ADDER_WIDTH{req_alu_sel1}} & mul_exe_alu_op1      )\n           | ({`E203_MULDIV_ADDER_WIDTH{req_alu_sel2}} & {{`E203_MULDIV_ADDER_WIDTH-34{1'b0}},div_exe_alu_op1      })\n           | ({`E203_MULDIV_ADDER_WIDTH{req_alu_sel3}} & {{`E203_MULDIV_ADDER_WIDTH-34{1'b0}},div_quot_corr_alu_op1})\n           | ({`E203_MULDIV_ADDER_WIDTH{req_alu_sel4}} & {{`E203_MULDIV_ADDER_WIDTH-34{1'b0}},div_remd_corr_alu_op1}) \n           | ({`E203_MULDIV_ADDER_WIDTH{req_alu_sel5}} & {{`E203_MULDIV_ADDER_WIDTH-34{1'b0}},div_remd_chck_alu_op1});\n\n  assign muldiv_req_alu_op2 = \n             ({`E203_MULDIV_ADDER_WIDTH{req_alu_sel1}} & mul_exe_alu_op2      )\n           | ({`E203_MULDIV_ADDER_WIDTH{req_alu_sel2}} & {{`E203_MULDIV_ADDER_WIDTH-34{1'b0}},div_exe_alu_op2      })\n           | ({`E203_MULDIV_ADDER_WIDTH{req_alu_sel3}} & {{`E203_MULDIV_ADDER_WIDTH-34{1'b0}},div_quot_corr_alu_op2})\n           | ({`E203_MULDIV_ADDER_WIDTH{req_alu_sel4}} & {{`E203_MULDIV_ADDER_WIDTH-34{1'b0}},div_remd_corr_alu_op2}) \n           | ({`E203_MULDIV_ADDER_WIDTH{req_alu_sel5}} & {{`E203_MULDIV_ADDER_WIDTH-34{1'b0}},div_remd_chck_alu_op2});\n\n  assign muldiv_req_alu_add  = \n             (req_alu_sel1 & mul_exe_alu_add      )\n           | (req_alu_sel2 & div_exe_alu_add      )\n           | (req_alu_sel3 & div_quot_corr_alu_add)\n           | (req_alu_sel4 & div_remd_corr_alu_add) \n           | (req_alu_sel5 & div_remd_chck_alu_add);\n\n  assign muldiv_req_alu_sub  = \n             (req_alu_sel1 & mul_exe_alu_sub      )\n           | (req_alu_sel2 & div_exe_alu_sub      )\n           | (req_alu_sel3 & div_quot_corr_alu_sub)\n           | (req_alu_sel4 & div_remd_corr_alu_sub) \n           | (req_alu_sel5 & div_remd_chck_alu_sub);\n\n  assign muldiv_sbf_0_ena = part_remd_ena | part_prdt_hi_ena;\n  assign muldiv_sbf_0_nxt = i_op_mul ? part_prdt_hi_nxt : part_remd_nxt;\n\n  assign muldiv_sbf_1_ena = part_quot_ena | part_prdt_lo_ena;\n  assign muldiv_sbf_1_nxt = i_op_mul ? part_prdt_lo_nxt : part_quot_nxt;\n\n  assign part_remd_r = muldiv_sbf_0_r;\n  assign part_quot_r = muldiv_sbf_1_r;\n  assign part_prdt_hi_r = muldiv_sbf_0_r;\n  assign part_prdt_lo_r = muldiv_sbf_1_r;\n\n  assign muldiv_i_longpipe = 1'b0;\n\n\n\n\n\n`ifndef FPGA_SOURCE//{\n`ifndef DISABLE_SV_ASSERTION//{\n//synopsys translate_off\n///////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////\n// These below code are used for reference check with assertion\n  wire [31:0] golden0_mul_op1 = mul_op1[32] ? (~mul_op1[31:0]+1) : mul_op1[31:0];\n  wire [31:0] golden0_mul_op2 = mul_op2[32] ? (~mul_op2[31:0]+1) : mul_op2[31:0];\n  wire [63:0] golden0_mul_res_pre = golden0_mul_op1 * golden0_mul_op2;\n  wire [63:0] golden0_mul_res = (mul_op1[32]^mul_op2[32]) ? (~golden0_mul_res_pre + 1) : golden0_mul_res_pre;\n  wire [63:0] golden1_mul_res = $signed(mul_op1) * $signed(mul_op2); \n  \n  // To check the signed * operation is really get what we wanted\n    CHECK_SIGNED_OP_CORRECT:\n      assert property (@(posedge clk) disable iff ((~rst_n) | (~muldiv_o_valid))  ((golden0_mul_res == golden1_mul_res)))\n      else $fatal (\"\\n Error: Oops, This should never happen. \\n\");\n\n  wire [31:0] golden1_res_mul    = golden1_mul_res[31:0];\n  wire [31:0] golden1_res_mulh   = golden1_mul_res[63:32];                       \n  wire [31:0] golden1_res_mulhsu = golden1_mul_res[63:32];                                              \n  wire [31:0] golden1_res_mulhu  = golden1_mul_res[63:32];                                                \n\n  wire [63:0] golden2_res_mul_SxS = $signed(muldiv_i_rs1)   * $signed(muldiv_i_rs2);\n  wire [63:0] golden2_res_mul_SxU = $signed(muldiv_i_rs1)   * $unsigned(muldiv_i_rs2);\n  wire [63:0] golden2_res_mul_UxS = $unsigned(muldiv_i_rs1) * $signed(muldiv_i_rs2);\n  wire [63:0] golden2_res_mul_UxU = $unsigned(muldiv_i_rs1) * $unsigned(muldiv_i_rs2);\n  \n  wire [31:0] golden2_res_mul    = golden2_res_mul_SxS[31:0];\n  wire [31:0] golden2_res_mulh   = golden2_res_mul_SxS[63:32];                       \n  wire [31:0] golden2_res_mulhsu = golden2_res_mul_SxU[63:32];                                              \n  wire [31:0] golden2_res_mulhu  = golden2_res_mul_UxU[63:32];                                                \n\n  // To check four different combination will all generate same lower 32bits result\n    CHECK_FOUR_COMB_SAME_RES:\n      assert property (@(posedge clk) disable iff ((~rst_n) | (~muldiv_o_valid))\n          (golden2_res_mul_SxS[31:0] == golden2_res_mul_SxU[31:0])\n        & (golden2_res_mul_UxS[31:0] == golden2_res_mul_UxU[31:0])\n        & (golden2_res_mul_SxU[31:0] == golden2_res_mul_UxS[31:0])\n       )\n      else $fatal (\"\\n Error: Oops, This should never happen. \\n\");\n\n      // Seems the golden2 result is not correct in case of mulhsu, so have to comment it out\n // // To check golden1 and golden2 result are same\n //   CHECK_GOLD1_AND_GOLD2_SAME:\n //     assert property (@(posedge clk) disable iff ((~rst_n) | (~muldiv_o_valid))\n //         (i_mul    ? (golden1_res_mul    == golden2_res_mul   ) : 1'b1)\n //        &(i_mulh   ? (golden1_res_mulh   == golden2_res_mulh  ) : 1'b1)\n //        &(i_mulhsu ? (golden1_res_mulhsu == golden2_res_mulhsu) : 1'b1)\n //        &(i_mulhu  ? (golden1_res_mulhu  == golden2_res_mulhu ) : 1'b1)\n //      )\n //     else $fatal (\"\\n Error: Oops, This should never happen. \\n\");\n      \n     // The special case will need to be handled specially\n  wire [32:0] golden_res_div  = div_special_cases ? div_special_res : \n     (  $signed({div_rs1_sign,muldiv_i_rs1})   / ((div_by_0 | div_ovf) ? 1 :   $signed({div_rs2_sign,muldiv_i_rs2})));\n  wire [32:0] golden_res_divu  = div_special_cases ? div_special_res : \n     ($unsigned({div_rs1_sign,muldiv_i_rs1})   / ((div_by_0 | div_ovf) ? 1 : $unsigned({div_rs2_sign,muldiv_i_rs2})));\n  wire [32:0] golden_res_rem  = div_special_cases ? div_special_res : \n     (  $signed({div_rs1_sign,muldiv_i_rs1})   % ((div_by_0 | div_ovf) ? 1 :   $signed({div_rs2_sign,muldiv_i_rs2})));\n  wire [32:0] golden_res_remu  = div_special_cases ? div_special_res : \n     ($unsigned({div_rs1_sign,muldiv_i_rs1})   % ((div_by_0 | div_ovf) ? 1 : $unsigned({div_rs2_sign,muldiv_i_rs2})));\n \n  // To check golden and actual result are same\n  wire [`E203_XLEN-1:0] golden_res = \n         i_mul    ? golden1_res_mul    :\n         i_mulh   ? golden1_res_mulh   :\n         i_mulhsu ? golden1_res_mulhsu :\n         i_mulhu  ? golden1_res_mulhu  :\n         i_div    ? golden_res_div [31:0]    :\n         i_divu   ? golden_res_divu[31:0]    :\n         i_rem    ? golden_res_rem [31:0]    :\n         i_remu   ? golden_res_remu[31:0]    :\n                    `E203_XLEN'b0;\n\n  CHECK_GOLD_AND_ACTUAL_SAME:\n        // Since the printed value is not aligned with posedge clock, so change it to negetive\n    assert property (@(negedge clk) disable iff ((~rst_n) | flush_pulse)\n        (muldiv_o_valid ? (golden_res == muldiv_o_wbck_wdat   ) : 1'b1)\n     )\n    else begin\n        $display(\"??????????????????????????????????????????\");\n        $display(\"??????????????????????????????????????????\");\n        $display(\"{i_mul,i_mulh,i_mulhsu,i_mulhu,i_div,i_divu,i_rem,i_remu}=%d%d%d%d%d%d%d%d\",i_mul,i_mulh,i_mulhsu,i_mulhu,i_div,i_divu,i_rem,i_remu);\n        $display(\"muldiv_i_rs1=%h\\nmuldiv_i_rs2=%h\\n\",muldiv_i_rs1,muldiv_i_rs2);     \n        $display(\"golden_res=%h\\nmuldiv_o_wbck_wdat=%h\",golden_res,muldiv_o_wbck_wdat);     \n        $display(\"??????????????????????????????????????????\");\n        $fatal (\"\\n Error: Oops, This should never happen. \\n\");\n      end\n\n//synopsys translate_on\n`endif//}\n`endif//}\n\n\nendmodule                                      \n`endif//}\n                                               \n                                               \n                                               \n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  This module to implement the regular ALU instructions\n//\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_exu_alu_rglr(\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The Handshake Interface \n  //\n  input  alu_i_valid, // Handshake valid\n  output alu_i_ready, // Handshake ready\n\n  input  [`E203_XLEN-1:0] alu_i_rs1,\n  input  [`E203_XLEN-1:0] alu_i_rs2,\n  input  [`E203_XLEN-1:0] alu_i_imm,\n  input  [`E203_PC_SIZE-1:0] alu_i_pc,\n  input  [`E203_DECINFO_ALU_WIDTH-1:0] alu_i_info,\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ALU Write-back/Commit Interface\n  output alu_o_valid, // Handshake valid\n  input  alu_o_ready, // Handshake ready\n  //   The Write-Back Interface for Special (unaligned ldst and AMO instructions) \n  output [`E203_XLEN-1:0] alu_o_wbck_wdat,\n  output alu_o_wbck_err,   \n  output alu_o_cmt_ecall,   \n  output alu_o_cmt_ebreak,   \n  output alu_o_cmt_wfi,   \n\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // To share the ALU datapath\n  // \n  // The operands and info to ALU\n  output alu_req_alu_add ,\n  output alu_req_alu_sub ,\n  output alu_req_alu_xor ,\n  output alu_req_alu_sll ,\n  output alu_req_alu_srl ,\n  output alu_req_alu_sra ,\n  output alu_req_alu_or  ,\n  output alu_req_alu_and ,\n  output alu_req_alu_slt ,\n  output alu_req_alu_sltu,\n  output alu_req_alu_lui ,\n  output [`E203_XLEN-1:0] alu_req_alu_op1,\n  output [`E203_XLEN-1:0] alu_req_alu_op2,\n\n\n  input  [`E203_XLEN-1:0] alu_req_alu_res,\n\n  input  clk,\n  input  rst_n\n  );\n\n  wire op2imm  = alu_i_info [`E203_DECINFO_ALU_OP2IMM ];\n  wire op1pc   = alu_i_info [`E203_DECINFO_ALU_OP1PC  ];\n\n  assign alu_req_alu_op1  = op1pc  ? alu_i_pc  : alu_i_rs1;\n  assign alu_req_alu_op2  = op2imm ? alu_i_imm : alu_i_rs2;\n\n  wire nop    = alu_i_info [`E203_DECINFO_ALU_NOP ] ;\n  wire ecall  = alu_i_info [`E203_DECINFO_ALU_ECAL ];\n  wire ebreak = alu_i_info [`E203_DECINFO_ALU_EBRK ];\n  wire wfi    = alu_i_info [`E203_DECINFO_ALU_WFI ];\n\n     // The NOP is encoded as ADDI, so need to uncheck it\n  assign alu_req_alu_add  = alu_i_info [`E203_DECINFO_ALU_ADD ] & (~nop);\n  assign alu_req_alu_sub  = alu_i_info [`E203_DECINFO_ALU_SUB ];\n  assign alu_req_alu_xor  = alu_i_info [`E203_DECINFO_ALU_XOR ];\n  assign alu_req_alu_sll  = alu_i_info [`E203_DECINFO_ALU_SLL ];\n  assign alu_req_alu_srl  = alu_i_info [`E203_DECINFO_ALU_SRL ];\n  assign alu_req_alu_sra  = alu_i_info [`E203_DECINFO_ALU_SRA ];\n  assign alu_req_alu_or   = alu_i_info [`E203_DECINFO_ALU_OR  ];\n  assign alu_req_alu_and  = alu_i_info [`E203_DECINFO_ALU_AND ];\n  assign alu_req_alu_slt  = alu_i_info [`E203_DECINFO_ALU_SLT ];\n  assign alu_req_alu_sltu = alu_i_info [`E203_DECINFO_ALU_SLTU];\n  assign alu_req_alu_lui  = alu_i_info [`E203_DECINFO_ALU_LUI ];\n\n  assign alu_o_valid = alu_i_valid;\n  assign alu_i_ready = alu_o_ready;\n  assign alu_o_wbck_wdat = alu_req_alu_res;\n\n  assign alu_o_cmt_ecall  = ecall;   \n  assign alu_o_cmt_ebreak = ebreak;   \n  assign alu_o_cmt_wfi = wfi;   \n  \n  // The exception or error result cannot write-back\n  assign alu_o_wbck_err = alu_o_cmt_ecall | alu_o_cmt_ebreak | alu_o_cmt_wfi;\n\nendmodule\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The Branch Resolve module to resolve the branch instructions\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\n\nmodule e203_exu_branchslv(\n\n  //   The BJP condition final result need to be resolved at ALU\n  input  cmt_i_valid,  \n  output cmt_i_ready,\n  input  cmt_i_rv32,  \n  input  cmt_i_dret,// The dret instruction\n  input  cmt_i_mret,// The ret instruction\n  input  cmt_i_fencei,// The fencei instruction\n  input  cmt_i_bjp,  \n  input  cmt_i_bjp_prdt,// The predicted ture/false  \n  input  cmt_i_bjp_rslv,// The resolved ture/false\n  input  [`E203_PC_SIZE-1:0] cmt_i_pc,  \n  input  [`E203_XLEN-1:0] cmt_i_imm,// The resolved ture/false\n\n  input  [`E203_PC_SIZE-1:0] csr_epc_r,\n  input  [`E203_PC_SIZE-1:0] csr_dpc_r,\n\n\n  input  nonalu_excpirq_flush_req_raw,\n  input  brchmis_flush_ack,\n  output brchmis_flush_req,\n  output [`E203_PC_SIZE-1:0] brchmis_flush_add_op1,  \n  output [`E203_PC_SIZE-1:0] brchmis_flush_add_op2,  \n  `ifdef E203_TIMING_BOOST//}\n  output [`E203_PC_SIZE-1:0] brchmis_flush_pc,  \n  `endif//}\n\n  output  cmt_mret_ena,\n  output  cmt_dret_ena,\n  output  cmt_fencei_ena,\n\n  input  clk,\n  input  rst_n\n  );\n\n  wire brchmis_flush_ack_pre;\n  wire brchmis_flush_req_pre;\n\n  assign brchmis_flush_req = brchmis_flush_req_pre & (~nonalu_excpirq_flush_req_raw);\n  assign brchmis_flush_ack_pre = brchmis_flush_ack & (~nonalu_excpirq_flush_req_raw);\n  // In Two stage impelmentation, several branch instructions are handled as below:\n  //   * It is predicted at IFU, and target is handled in IFU. But \n  //             we need to check if it is predicted correctly or not. If not,\n  //             we need to flush the pipeline\n  //             Note: the JUMP instrution will always jump, hence they will be\n  //                   both predicted and resolved as true\n  wire brchmis_need_flush = (\n        (cmt_i_bjp & (cmt_i_bjp_prdt ^ cmt_i_bjp_rslv)) \n  //   If it is a FenceI instruction, it is always Flush \n       | cmt_i_fencei \n  //   If it is a RET instruction, it is always jump \n       | cmt_i_mret \n  //   If it is a DRET instruction, it is always jump \n       | cmt_i_dret \n      );\n\n  wire cmt_i_is_branch = (\n         cmt_i_bjp \n       | cmt_i_fencei \n       | cmt_i_mret \n       | cmt_i_dret \n      );\n\n  assign brchmis_flush_req_pre = cmt_i_valid & brchmis_need_flush;\n\n  // * If it is a DRET instruction, the new target PC is DPC register\n  // * If it is a RET instruction, the new target PC is EPC register\n  // * If predicted as taken, but actually it is not taken, then \n  //     The new target PC should caculated by PC+2/4\n  // * If predicted as not taken, but actually it is taken, then \n  //     The new target PC should caculated by PC+offset\n  assign brchmis_flush_add_op1 = cmt_i_dret ? csr_dpc_r : cmt_i_mret ? csr_epc_r : cmt_i_pc; \n  assign brchmis_flush_add_op2 = cmt_i_dret ? `E203_PC_SIZE'b0 : cmt_i_mret ? `E203_PC_SIZE'b0 :\n                                 (cmt_i_fencei | cmt_i_bjp_prdt) ? (cmt_i_rv32 ? `E203_PC_SIZE'd4 : `E203_PC_SIZE'd2)\n                                    : cmt_i_imm[`E203_PC_SIZE-1:0];\n  `ifdef E203_TIMING_BOOST//}\n      // Replicated two adders here to trade area with timing\n  assign brchmis_flush_pc = \n                                // The fenceI is also need to trigger the flush to its next instructions\n                          (cmt_i_fencei | (cmt_i_bjp & cmt_i_bjp_prdt)) ? (cmt_i_pc + (cmt_i_rv32 ? `E203_PC_SIZE'd4 : `E203_PC_SIZE'd2)) :\n                          (cmt_i_bjp & (~cmt_i_bjp_prdt)) ? (cmt_i_pc + cmt_i_imm[`E203_PC_SIZE-1:0]) :\n                          cmt_i_dret ? csr_dpc_r :\n                          //cmt_i_mret ? csr_epc_r :\n                                       csr_epc_r ;// Last condition cmt_i_mret commented\n                                                  //   to save gatecount and timing\n  `endif//}\n\n  wire brchmis_flush_hsked = brchmis_flush_req & brchmis_flush_ack;\n  assign cmt_mret_ena = cmt_i_mret & brchmis_flush_hsked;\n  assign cmt_dret_ena = cmt_i_dret & brchmis_flush_hsked;\n  assign cmt_fencei_ena = cmt_i_fencei & brchmis_flush_hsked;\n\n  assign cmt_i_ready = (~cmt_i_is_branch) | \n                             (\n                                 (brchmis_need_flush ? brchmis_flush_ack_pre : 1'b1) \n                               // The Non-ALU flush will override the ALU flush\n                                     & (~nonalu_excpirq_flush_req_raw) \n                             );\n\nendmodule                                      \n                                               \n                                               \n                                               \n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The Commit module to commit instructions or flush pipeline\n//\n// ====================================================================\n\n\n`include \"e203_defines.v\"\n\nmodule e203_exu_commit(\n  output  commit_mret,\n  output  commit_trap,\n  output  core_wfi,\n  output  nonflush_cmt_ena,\n\n  output  excp_active,\n\n  input   amo_wait,\n\n  output  wfi_halt_ifu_req,\n  output  wfi_halt_exu_req,\n  input   wfi_halt_ifu_ack,\n  input   wfi_halt_exu_ack,\n\n  input  dbg_irq_r,\n  input  [`E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input  ext_irq_r,\n  input  sft_irq_r,\n  input  tmr_irq_r,\n  input  [`E203_EVT_NUM-1:0] evt_r,\n\n  input   status_mie_r,\n  input   mtie_r,\n  input   msie_r,\n  input   meie_r,\n\n  input                      alu_cmt_i_valid,\n  output                     alu_cmt_i_ready,\n  input  [`E203_PC_SIZE-1:0] alu_cmt_i_pc,  \n  input  [`E203_INSTR_SIZE-1:0] alu_cmt_i_instr,  \n  input                      alu_cmt_i_pc_vld,  \n  input  [`E203_XLEN-1:0]    alu_cmt_i_imm,\n  input                      alu_cmt_i_rv32,\n    //   The Branch Commit\n  input                      alu_cmt_i_bjp,\n  input                      alu_cmt_i_wfi,\n  input                      alu_cmt_i_fencei,\n  input                      alu_cmt_i_mret,\n  input                      alu_cmt_i_dret,\n  input                      alu_cmt_i_ecall,\n  input                      alu_cmt_i_ebreak,\n  input                      alu_cmt_i_ifu_misalgn ,\n  input                      alu_cmt_i_ifu_buserr ,\n  input                      alu_cmt_i_ifu_ilegl ,\n  input                      alu_cmt_i_bjp_prdt,// The predicted ture/false  \n  input                      alu_cmt_i_bjp_rslv,// The resolved ture/false\n    //   The AGU Exception \n  input                      alu_cmt_i_misalgn, // The misalign exception generated\n  input                      alu_cmt_i_ld,\n  input                      alu_cmt_i_stamo,\n  input                      alu_cmt_i_buserr , // The bus-error exception generated\n  input [`E203_ADDR_SIZE-1:0]alu_cmt_i_badaddr,\n  \n  output  [`E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output  cmt_badaddr_ena,\n  output  [`E203_PC_SIZE-1:0] cmt_epc,\n  output  cmt_epc_ena,\n  output  [`E203_XLEN-1:0] cmt_cause,\n  output  cmt_cause_ena,\n  output  cmt_instret_ena,\n  output  cmt_status_ena,\n\n  output  [`E203_PC_SIZE-1:0] cmt_dpc,\n  output  cmt_dpc_ena,\n  output  [3-1:0] cmt_dcause,\n  output  cmt_dcause_ena,\n\n  output                     cmt_mret_ena,\n\n  input [`E203_PC_SIZE-1:0]  csr_epc_r,\n  input [`E203_PC_SIZE-1:0]  csr_dpc_r,\n  input [`E203_XLEN-1:0]     csr_mtvec_r,\n\n  input   dbg_mode,\n  input   dbg_halt_r,\n  input   dbg_step_r,\n  input   dbg_ebreakm_r,\n\n\n  input   oitf_empty,\n  \n  input   u_mode,\n  input   s_mode,\n  input   h_mode,\n  input   m_mode,\n\n  output                     longp_excp_i_ready,\n  input                      longp_excp_i_valid,\n  input                      longp_excp_i_ld,\n  input                      longp_excp_i_st,\n  input                      longp_excp_i_buserr , // The load/store bus-error exception generated\n  input [`E203_ADDR_SIZE-1:0]longp_excp_i_badaddr,\n  input                      longp_excp_i_insterr,\n  input [`E203_PC_SIZE-1:0]  longp_excp_i_pc,\n\n  //////////////////////////////////////////////////////////////\n  // The Flush interface to IFU\n  //\n  //   To save the gatecount, when we need to flush pipeline with new PC, \n  //     we want to reuse the adder in IFU, so we will not pass flush-PC\n  //     to IFU, instead, we pass the flush-pc-adder-op1/op2 to IFU\n  //     and IFU will just use its adder to caculate the flush-pc-adder-result\n  //\n  output  flush_pulse,\n       // To cut the combinational loop, we need this flush_req from non-alu source to flush ALU pipeline (e.g., MUL-div statemachine)\n  output  flush_req,\n\n  input   pipe_flush_ack,\n  output  pipe_flush_req,\n  output  [`E203_PC_SIZE-1:0] pipe_flush_add_op1,  \n  output  [`E203_PC_SIZE-1:0] pipe_flush_add_op2,  \n  `ifdef E203_TIMING_BOOST//}\n  output  [`E203_PC_SIZE-1:0] pipe_flush_pc,  \n  `endif//}\n\n  input  clk,\n  input  rst_n\n  );\n\n\n  wire                      alu_brchmis_flush_ack;\n  wire                      alu_brchmis_flush_req;\n  wire  [`E203_PC_SIZE-1:0] alu_brchmis_flush_add_op1;  \n  wire  [`E203_PC_SIZE-1:0] alu_brchmis_flush_add_op2;\n  `ifdef E203_TIMING_BOOST//}\n  wire [`E203_PC_SIZE-1:0] alu_brchmis_flush_pc;\n  `endif//}\n  wire                      alu_brchmis_cmt_i_ready;\n\n  wire                      cmt_dret_ena;\n\n  wire nonalu_excpirq_flush_req_raw;\n\n  e203_exu_branchslv u_e203_exu_branchslv(\n    .cmt_i_ready             (alu_brchmis_cmt_i_ready    ),\n    .cmt_i_valid             (alu_cmt_i_valid   ),  \n    .cmt_i_rv32              (alu_cmt_i_rv32    ),  \n    .cmt_i_bjp               (alu_cmt_i_bjp     ),  \n    .cmt_i_fencei            (alu_cmt_i_fencei  ),\n    .cmt_i_mret              (alu_cmt_i_mret     ),\n    .cmt_i_dret              (alu_cmt_i_dret     ),\n    .cmt_i_bjp_prdt          (alu_cmt_i_bjp_prdt),\n    .cmt_i_bjp_rslv          (alu_cmt_i_bjp_rslv),\n    .cmt_i_pc                (alu_cmt_i_pc      ),\n    .cmt_i_imm               (alu_cmt_i_imm     ),\n                         \n    .cmt_mret_ena            (cmt_mret_ena       ),\n    .cmt_dret_ena            (cmt_dret_ena       ),\n    .cmt_fencei_ena          (),\n    .csr_epc_r               (csr_epc_r         ),\n    .csr_dpc_r               (csr_dpc_r         ),\n\n\n    .nonalu_excpirq_flush_req_raw(nonalu_excpirq_flush_req_raw ),\n    .brchmis_flush_ack       (alu_brchmis_flush_ack    ),\n    .brchmis_flush_req       (alu_brchmis_flush_req    ),\n    .brchmis_flush_add_op1   (alu_brchmis_flush_add_op1),  \n    .brchmis_flush_add_op2   (alu_brchmis_flush_add_op2),  \n  `ifdef E203_TIMING_BOOST//}\n    .brchmis_flush_pc        (alu_brchmis_flush_pc),  \n  `endif//}\n\n    .clk   (clk  ),\n    .rst_n (rst_n)\n  );\n\n  wire excpirq_flush_ack;\n  wire excpirq_flush_req;\n  wire [`E203_PC_SIZE-1:0] excpirq_flush_add_op1;  \n  wire [`E203_PC_SIZE-1:0] excpirq_flush_add_op2;\n  `ifdef E203_TIMING_BOOST//}\n  wire [`E203_PC_SIZE-1:0] excpirq_flush_pc;\n  `endif//}\n  wire [`E203_XLEN-1:0] excpirq_cause;\n  wire alu_excp_cmt_i_ready;\n\n  wire cmt_ena;\n\n\n  e203_exu_excp u_e203_exu_excp(\n    .commit_trap           (commit_trap     ),\n    .core_wfi              (core_wfi        ),\n    .wfi_halt_ifu_req      (wfi_halt_ifu_req),\n    .wfi_halt_exu_req      (wfi_halt_exu_req),\n    .wfi_halt_ifu_ack      (wfi_halt_ifu_ack),\n    .wfi_halt_exu_ack      (wfi_halt_exu_ack),\n\n    .cmt_badaddr           (cmt_badaddr    ), \n    .cmt_badaddr_ena       (cmt_badaddr_ena),\n    .cmt_epc               (cmt_epc        ),\n    .cmt_epc_ena           (cmt_epc_ena    ),\n    .cmt_cause             (cmt_cause      ),\n    .cmt_cause_ena         (cmt_cause_ena  ),\n    .cmt_status_ena        (cmt_status_ena ),\n                           \n    .cmt_dpc               (cmt_dpc        ),\n    .cmt_dpc_ena           (cmt_dpc_ena    ),\n    .cmt_dcause            (cmt_dcause     ),\n    .cmt_dcause_ena        (cmt_dcause_ena ),\n\n    .cmt_dret_ena          (cmt_dret_ena   ),\n    .cmt_ena               (cmt_ena        ),\n\n    .alu_excp_i_valid      (alu_cmt_i_valid  ),\n    .alu_excp_i_ready      (alu_excp_cmt_i_ready    ),\n    .alu_excp_i_misalgn    (alu_cmt_i_misalgn),\n    .alu_excp_i_ld         (alu_cmt_i_ld     ),\n    .alu_excp_i_stamo      (alu_cmt_i_stamo  ),\n    .alu_excp_i_buserr     (alu_cmt_i_buserr ),\n    .alu_excp_i_pc         (alu_cmt_i_pc     ),\n    .alu_excp_i_instr      (alu_cmt_i_instr  ),\n    .alu_excp_i_pc_vld     (alu_cmt_i_pc_vld ),\n    .alu_excp_i_badaddr    (alu_cmt_i_badaddr ),\n    .alu_excp_i_ecall      (alu_cmt_i_ecall   ),\n    .alu_excp_i_ebreak     (alu_cmt_i_ebreak  ),\n    .alu_excp_i_wfi        (alu_cmt_i_wfi  ),\n    .alu_excp_i_ifu_misalgn(alu_cmt_i_ifu_misalgn),\n    .alu_excp_i_ifu_buserr (alu_cmt_i_ifu_buserr ),\n    .alu_excp_i_ifu_ilegl  (alu_cmt_i_ifu_ilegl  ),\n                         \n    .longp_excp_i_ready    (longp_excp_i_ready  ),\n    .longp_excp_i_valid    (longp_excp_i_valid  ),\n    .longp_excp_i_ld       (longp_excp_i_ld     ),\n    .longp_excp_i_st       (longp_excp_i_st     ),\n    .longp_excp_i_buserr   (longp_excp_i_buserr ),\n    .longp_excp_i_badaddr  (longp_excp_i_badaddr),\n    .longp_excp_i_insterr  (longp_excp_i_insterr),\n    .longp_excp_i_pc       (longp_excp_i_pc     ),\n\n    .csr_mtvec_r           (csr_mtvec_r       ),\n\n    .dbg_irq_r             (dbg_irq_r),\n    .lcl_irq_r             (lcl_irq_r),\n    .ext_irq_r             (ext_irq_r),\n    .sft_irq_r             (sft_irq_r),\n    .tmr_irq_r             (tmr_irq_r),\n\n    .status_mie_r          (status_mie_r),\n    .mtie_r                (mtie_r      ),\n    .msie_r                (msie_r      ),\n    .meie_r                (meie_r      ),\n\n\n    .dbg_mode              (dbg_mode),\n    .dbg_halt_r            (dbg_halt_r),\n    .dbg_step_r            (dbg_step_r),\n    .dbg_ebreakm_r         (dbg_ebreakm_r),\n    .oitf_empty            (oitf_empty),\n\n    .u_mode                (u_mode),\n    .s_mode                (s_mode),\n    .h_mode                (h_mode),\n    .m_mode                (m_mode),\n\n    .excpirq_flush_ack        (excpirq_flush_ack       ),\n    .excpirq_flush_req        (excpirq_flush_req       ),\n    .nonalu_excpirq_flush_req_raw (nonalu_excpirq_flush_req_raw ),\n    .excpirq_flush_add_op1    (excpirq_flush_add_op1),  \n    .excpirq_flush_add_op2    (excpirq_flush_add_op2),  \n  `ifdef E203_TIMING_BOOST//}\n    .excpirq_flush_pc         (excpirq_flush_pc),\n  `endif//}\n\n    .excp_active (excp_active),\n    .amo_wait (amo_wait),\n\n    .clk   (clk  ),\n    .rst_n (rst_n)\n  );\n\n \n\n  assign excpirq_flush_ack = pipe_flush_ack;\n  assign alu_brchmis_flush_ack = pipe_flush_ack;\n\n  assign pipe_flush_req = excpirq_flush_req | alu_brchmis_flush_req;\n            \n  assign alu_cmt_i_ready = alu_excp_cmt_i_ready & alu_brchmis_cmt_i_ready;\n\n  assign pipe_flush_add_op1 = excpirq_flush_req ? excpirq_flush_add_op1 : alu_brchmis_flush_add_op1;  \n  assign pipe_flush_add_op2 = excpirq_flush_req ? excpirq_flush_add_op2 : alu_brchmis_flush_add_op2;  \n  `ifdef E203_TIMING_BOOST//}\n  assign pipe_flush_pc      = excpirq_flush_req ? excpirq_flush_pc : alu_brchmis_flush_pc;  \n  `endif//}\n\n  assign cmt_ena = alu_cmt_i_valid & alu_cmt_i_ready;\n  assign cmt_instret_ena = cmt_ena & (~alu_brchmis_flush_req);\n\n  // Generate the signal as the real-commit enable (non-flush)\n  assign nonflush_cmt_ena = cmt_ena & (~pipe_flush_req);\n\n\n  assign flush_pulse = pipe_flush_ack & pipe_flush_req;\n  assign flush_req   = nonalu_excpirq_flush_req_raw;\n\n  assign commit_mret = cmt_mret_ena;\n\n`ifndef FPGA_SOURCE//{\n`ifndef DISABLE_SV_ASSERTION//{\n//synopsys translate_off\n\n `ifndef E203_HAS_LOCKSTEP//{\nCHECK_1HOT_FLUSH_HALT:\n  assert property (@(posedge clk) disable iff (~rst_n)\n                     ($onehot0({wfi_halt_ifu_req,pipe_flush_req}))\n                  )\n  else $fatal (\"\\n Error: Oops, detected non-onehot0 value for halt and flush req!!! This should never happen. \\n\");\n `endif//}\n\n//synopsys translate_on\n`endif//}\n`endif//}\n\nendmodule                                      \n                                               \n                                               \n                                               \n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The module to implement the core's CSRs\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_exu_csr(\n  input nonflush_cmt_ena,\n  output eai_xs_off,\n\n  input csr_ena,\n  input csr_wr_en,\n  input csr_rd_en,\n  input [12-1:0] csr_idx,\n\n  output csr_access_ilgl,\n  output tm_stop,\n  output core_cgstop,\n  output tcm_cgstop,\n  output itcm_nohold,\n  output mdv_nob2b,\n\n\n  output [`E203_XLEN-1:0] read_csr_dat,\n  input  [`E203_XLEN-1:0] wbck_csr_dat,\n   \n  input  [`E203_HART_ID_W-1:0] core_mhartid,\n  input  ext_irq_r,\n  input  sft_irq_r,\n  input  tmr_irq_r,\n\n  output status_mie_r,\n  output mtie_r,\n  output msie_r,\n  output meie_r,\n\n  output wr_dcsr_ena    ,\n  output wr_dpc_ena     ,\n  output wr_dscratch_ena,\n\n\n  input [`E203_XLEN-1:0] dcsr_r    ,\n  input [`E203_PC_SIZE-1:0] dpc_r     ,\n  input [`E203_XLEN-1:0] dscratch_r,\n\n  output [`E203_XLEN-1:0] wr_csr_nxt    ,\n\n  input  dbg_mode,\n  input  dbg_stopcycle,\n\n  output u_mode,\n  output s_mode,\n  output h_mode,\n  output m_mode,\n\n  input [`E203_ADDR_SIZE-1:0] cmt_badaddr,\n  input cmt_badaddr_ena,\n  input [`E203_PC_SIZE-1:0] cmt_epc,\n  input cmt_epc_ena,\n  input [`E203_XLEN-1:0] cmt_cause,\n  input cmt_cause_ena,\n  input cmt_status_ena,\n  input cmt_instret_ena,\n\n  input                      cmt_mret_ena,\n  output[`E203_PC_SIZE-1:0]  csr_epc_r,\n  output[`E203_PC_SIZE-1:0]  csr_dpc_r,\n  output[`E203_XLEN-1:0]     csr_mtvec_r,\n\n\n  input  clk_aon,\n  input  clk,\n  input  rst_n\n\n  );\n\n\n\nassign csr_access_ilgl = 1'b0\n                ;\n\n// Only toggle when need to read or write to save power\nwire wbck_csr_wen = csr_wr_en & csr_ena & (~csr_access_ilgl);\nwire read_csr_ena = csr_rd_en & csr_ena & (~csr_access_ilgl);\n\nwire [1:0] priv_mode = u_mode ? 2'b00 : \n                       s_mode ? 2'b01 :\n                       h_mode ? 2'b10 : \n                       m_mode ? 2'b11 : \n                                2'b11;\n\n//0x000 URW ustatus User status register.\n//    * Since we support the user-level interrupt, hence we need to support UIE\n//0x300 MRW mstatus Machine status register.\nwire sel_ustatus = (csr_idx == 12'h000);\nwire sel_mstatus = (csr_idx == 12'h300);\n\nwire rd_ustatus = sel_ustatus & csr_rd_en;\nwire rd_mstatus = sel_mstatus & csr_rd_en;\nwire wr_ustatus = sel_ustatus & csr_wr_en;\nwire wr_mstatus = sel_mstatus & csr_wr_en;\n\n\n/////////////////////////////////////////////////////////////////////\n// Note: the below implementation only apply to Machine-mode config,\n//       if other mode is also supported, these logics need to be updated\n\n//////////////////////////\n// Implement MPIE field\n//\nwire status_mpie_r;\n    // The MPIE Feilds will be updates when: \nwire status_mpie_ena  = \n        // The CSR is written by CSR instructions\n        (wr_mstatus & wbck_csr_wen) |\n        // The MRET instruction commited\n        cmt_mret_ena |\n        // The Trap is taken\n        cmt_status_ena;\n\nwire status_mpie_nxt    = \n    //   See Priv SPEC:\n    //       When a trap is taken from privilege mode y into privilege\n    //       mode x, xPIE is set to the value of xIE;\n    // So, When the Trap is taken, the MPIE is updated with the current MIE value\n    cmt_status_ena ? status_mie_r :\n    //   See Priv SPEC:\n    //       When executing an xRET instruction, supposing xPP holds the value y, xIE\n    //       is set to xPIE; the privilege mode is changed to y; \n    //       xPIE is set to 1;\n    // So, When the MRET instruction commited, the MPIE is updated with 1\n    cmt_mret_ena  ? 1'b1 :\n    // When the CSR is written by CSR instructions\n    (wr_mstatus & wbck_csr_wen) ? wbck_csr_dat[7] : // MPIE is in field 7 of mstatus\n                  status_mpie_r; // Unchanged \n\nsirv_gnrl_dfflr #(1) status_mpie_dfflr (status_mpie_ena, status_mpie_nxt, status_mpie_r, clk, rst_n);\n\n//////////////////////////\n// Implement MIE field\n//\n    // The MIE Feilds will be updates same as MPIE\nwire status_mie_ena  = status_mpie_ena; \nwire status_mie_nxt    = \n    //   See Priv SPEC:\n    //       When a trap is taken from privilege mode y into privilege\n    //       mode x, xPIE is set to the value of xIE,\n    //       xIE is set to 0;\n    // So, When the Trap is taken, the MIE is updated with 0\n     cmt_status_ena ? 1'b0 :\n    //   See Priv SPEC:\n    //       When executing an xRET instruction, supposing xPP holds the value y, xIE\n    //       is set to xPIE; the privilege mode is changed to y, xPIE is set to 1;\n    // So, When the MRET instruction commited, the MIE is updated with MPIE\n    cmt_mret_ena ? status_mpie_r :\n    // When the CSR is written by CSR instructions\n    (wr_mstatus & wbck_csr_wen) ? wbck_csr_dat[3] : // MIE is in field 3 of mstatus\n                  status_mie_r; // Unchanged \n\nsirv_gnrl_dfflr #(1) status_mie_dfflr (status_mie_ena, status_mie_nxt, status_mie_r, clk, rst_n);\n\n//////////////////////////\n// Implement SD field\n//\n//  See Priv SPEC:\n//    The SD bit is read-only \n//    And is set when either the FS or XS bits encode a Dirty\n//      state (i.e., SD=((FS==11) OR (XS==11))).\nwire [1:0] status_fs_r;\nwire [1:0] status_xs_r;\nwire status_sd_r = (status_fs_r == 2'b11) | (status_xs_r == 2'b11);\n\n//////////////////////////\n// Implement XS field\n//\n//  See Priv SPEC:\n//    XS field is read-only\n//    The XS field represents a summary of all extensions' status\n    // But in E200 we implement XS exactly same as FS to make it usable by software to \n    //   disable extended accelerators\n`ifndef E203_HAS_EAI\n   // If no EAI coprocessor interface configured, the XS is just hardwired to 0\nassign status_xs_r = 2'b0; \nassign eai_xs_off = 1'b0;// We just make this signal to 0\n`endif\n\n//////////////////////////\n// Implement FS field\n//\n\n`ifndef E203_HAS_FPU\n   // If no FPU configured, the FS is just hardwired to 0\nassign status_fs_r = 2'b0; \n`endif\n\n//////////////////////////\n// Pack to the full mstatus register\n//\nwire [`E203_XLEN-1:0] status_r;\nassign status_r[31]    = status_sd_r;                        //SD\nassign status_r[30:23] = 8'b0; // Reserved\nassign status_r[22:17] = 6'b0;               // TSR--MPRV\nassign status_r[16:15] = status_xs_r;                        // XS\nassign status_r[14:13] = status_fs_r;                        // FS\nassign status_r[12:11] = 2'b11;              // MPP \nassign status_r[10:9]  = 2'b0; // Reserved\nassign status_r[8]     = 1'b0;               // SPP\nassign status_r[7]     = status_mpie_r;                      // MPIE\nassign status_r[6]     = 1'b0; // Reserved\nassign status_r[5]     = 1'b0;               // SPIE \nassign status_r[4]     = 1'b0;               // UPIE \nassign status_r[3]     = status_mie_r;                       // MIE\nassign status_r[2]     = 1'b0; // Reserved\nassign status_r[1]     = 1'b0;               // SIE \nassign status_r[0]     = 1'b0;               // UIE \n\nwire [`E203_XLEN-1:0] csr_mstatus = status_r;\n\n//0x004 URW uie User interrupt-enable register.\n//    * Since we dont delegate interrupt to user mode, hence it is as all 0s\n//0x304 MRW mie Machine interrupt-enable register.\nwire sel_mie = (csr_idx == 12'h304);\nwire rd_mie = sel_mie & csr_rd_en;\nwire wr_mie = sel_mie & csr_wr_en;\nwire mie_ena = wr_mie & wbck_csr_wen;\nwire [`E203_XLEN-1:0] mie_r;\nwire [`E203_XLEN-1:0] mie_nxt;\nassign mie_nxt[31:12] = 20'b0;\nassign mie_nxt[11] = wbck_csr_dat[11];//MEIE\nassign mie_nxt[10:8] = 3'b0;\nassign mie_nxt[ 7] = wbck_csr_dat[ 7];//MTIE\nassign mie_nxt[6:4] = 3'b0;\nassign mie_nxt[ 3] = wbck_csr_dat[ 3];//MSIE\nassign mie_nxt[2:0] = 3'b0;\nsirv_gnrl_dfflr #(`E203_XLEN) mie_dfflr (mie_ena, mie_nxt, mie_r, clk, rst_n);\nwire [`E203_XLEN-1:0] csr_mie = mie_r;\n\nassign meie_r = csr_mie[11];\nassign mtie_r = csr_mie[ 7];\nassign msie_r = csr_mie[ 3];\n\n//0x044 URW uip User interrupt pending.\n//  We dont support delegation scheme, so no need to support the uip\n//0x344 MRW mip Machine interrupt pending\nwire sel_mip = (csr_idx == 12'h344);\nwire rd_mip = sel_mip & csr_rd_en;\n//wire wr_mip = sel_mip & csr_wr_en;\n// The MxIP is read-only\nwire meip_r;\nwire msip_r;\nwire mtip_r;\nsirv_gnrl_dffr #(1) meip_dffr (ext_irq_r, meip_r, clk, rst_n);\nsirv_gnrl_dffr #(1) msip_dffr (sft_irq_r, msip_r, clk, rst_n);\nsirv_gnrl_dffr #(1) mtip_dffr (tmr_irq_r, mtip_r, clk, rst_n);\n\nwire [`E203_XLEN-1:0] ip_r;\nassign ip_r[31:12] = 20'b0;\nassign ip_r[11] = meip_r;\nassign ip_r[10:8] = 3'b0;\nassign ip_r[ 7] = mtip_r;\nassign ip_r[6:4] = 3'b0;\nassign ip_r[ 3] = msip_r;\nassign ip_r[2:0] = 3'b0;\nwire [`E203_XLEN-1:0] csr_mip = ip_r;\n//\n\n//0x005 URW utvec User trap handler base address.\n//  We dont support user trap, so no utvec needed\n//0x305 MRW mtvec Machine trap-handler base address.\nwire sel_mtvec = (csr_idx == 12'h305);\nwire rd_mtvec = csr_rd_en & sel_mtvec;\n`ifdef E203_SUPPORT_MTVEC //{\nwire wr_mtvec = sel_mtvec & csr_wr_en;\nwire mtvec_ena = (wr_mtvec & wbck_csr_wen);\nwire [`E203_XLEN-1:0] mtvec_r;\nwire [`E203_XLEN-1:0] mtvec_nxt = wbck_csr_dat;\nsirv_gnrl_dfflr #(`E203_XLEN) mtvec_dfflr (mtvec_ena, mtvec_nxt, mtvec_r, clk, rst_n);\nwire [`E203_XLEN-1:0] csr_mtvec = mtvec_r;\n`else//}{\n  // THe vector table base is a configurable parameter, so we dont support writeable to it\nwire [`E203_XLEN-1:0] csr_mtvec = `E203_MTVEC_TRAP_BASE;\n`endif//}\nassign csr_mtvec_r = csr_mtvec;\n\n//0x340 MRW mscratch \nwire sel_mscratch = (csr_idx == 12'h340);\nwire rd_mscratch = sel_mscratch & csr_rd_en;\n`ifdef E203_SUPPORT_MSCRATCH //{\nwire wr_mscratch = sel_mscratch & csr_wr_en;\nwire mscratch_ena = (wr_mscratch & wbck_csr_wen);\nwire [`E203_XLEN-1:0] mscratch_r;\nwire [`E203_XLEN-1:0] mscratch_nxt = wbck_csr_dat;\nsirv_gnrl_dfflr #(`E203_XLEN) mscratch_dfflr (mscratch_ena, mscratch_nxt, mscratch_r, clk, rst_n);\nwire [`E203_XLEN-1:0] csr_mscratch = mscratch_r;\n`else//}{\nwire [`E203_XLEN-1:0] csr_mscratch = `E203_XLEN'b0;\n`endif//}\n\n// 0xB00 MRW mcycle \n// 0xB02 MRW minstret \n// 0xB80 MRW mcycleh\n// 0xB82 MRW minstreth \nwire sel_mcycle    = (csr_idx == 12'hB00);\nwire sel_mcycleh   = (csr_idx == 12'hB80);\nwire sel_minstret  = (csr_idx == 12'hB02);\nwire sel_minstreth = (csr_idx == 12'hB82);\n\n// 0xBFF MRW counterstop \n      // This register is our self-defined register to stop\n      // the cycle/time/instret counters to save dynamic powers\nwire sel_counterstop = (csr_idx == 12'hBFF);// This address is not used by ISA\n// 0xBFE MRW mcgstop \n      // This register is our self-defined register to disable the \n      // automaticall clock gating for CPU logics for debugging purpose\nwire sel_mcgstop = (csr_idx == 12'hBFE);// This address is not used by ISA\n// 0xBFD MRW itcmnohold \n      // This register is our self-defined register to disble the \n      // ITCM SRAM output holdup feature, if set, then we assume\n      // ITCM SRAM output cannot holdup last read value\nwire sel_itcmnohold = (csr_idx == 12'hBFD);// This address is not used by ISA\n// 0xBF0 MRW mdvnob2b \n      // This register is our self-defined register to disble the \n      // Mul/div back2back feature\nwire sel_mdvnob2b = (csr_idx == 12'hBF0);// This address is not used by ISA\n\n\nwire rd_mcycle     = csr_rd_en & sel_mcycle   ;\nwire rd_mcycleh    = csr_rd_en & sel_mcycleh  ;\nwire rd_minstret   = csr_rd_en & sel_minstret ;\nwire rd_minstreth  = csr_rd_en & sel_minstreth;\n\nwire rd_itcmnohold   = csr_rd_en & sel_itcmnohold;\nwire rd_mdvnob2b   = csr_rd_en & sel_mdvnob2b;\nwire rd_counterstop  = csr_rd_en & sel_counterstop;\nwire rd_mcgstop       = csr_rd_en & sel_mcgstop;\n\n`ifdef E203_SUPPORT_MCYCLE_MINSTRET //{\nwire wr_mcycle     = csr_wr_en & sel_mcycle   ;\nwire wr_mcycleh    = csr_wr_en & sel_mcycleh  ;\nwire wr_minstret   = csr_wr_en & sel_minstret ;\nwire wr_minstreth  = csr_wr_en & sel_minstreth;\n\nwire wr_itcmnohold   = csr_wr_en & sel_itcmnohold ;\nwire wr_mdvnob2b   = csr_wr_en & sel_mdvnob2b ;\nwire wr_counterstop  = csr_wr_en & sel_counterstop;\nwire wr_mcgstop       = csr_wr_en & sel_mcgstop     ;\n\nwire mcycle_wr_ena    = (wr_mcycle    & wbck_csr_wen);\nwire mcycleh_wr_ena   = (wr_mcycleh   & wbck_csr_wen);\nwire minstret_wr_ena  = (wr_minstret  & wbck_csr_wen);\nwire minstreth_wr_ena = (wr_minstreth & wbck_csr_wen);\n\nwire itcmnohold_wr_ena  = (wr_itcmnohold  & wbck_csr_wen);\nwire mdvnob2b_wr_ena  = (wr_mdvnob2b  & wbck_csr_wen);\nwire counterstop_wr_ena = (wr_counterstop & wbck_csr_wen);\nwire mcgstop_wr_ena      = (wr_mcgstop      & wbck_csr_wen);\n\nwire [`E203_XLEN-1:0] mcycle_r   ;\nwire [`E203_XLEN-1:0] mcycleh_r  ;\nwire [`E203_XLEN-1:0] minstret_r ;\nwire [`E203_XLEN-1:0] minstreth_r;\n\nwire cy_stop;\nwire ir_stop;\n\nwire stop_cycle_in_dbg = dbg_stopcycle & dbg_mode;\nwire mcycle_ena    = mcycle_wr_ena    | \n                     ((~cy_stop) & (~stop_cycle_in_dbg) & (1'b1));\nwire mcycleh_ena   = mcycleh_wr_ena   | \n                     ((~cy_stop) & (~stop_cycle_in_dbg) & ((mcycle_r == (~(`E203_XLEN'b0)))));\nwire minstret_ena  = minstret_wr_ena  |\n                     ((~ir_stop) & (~stop_cycle_in_dbg) & (cmt_instret_ena));\nwire minstreth_ena = minstreth_wr_ena |\n                     ((~ir_stop) & (~stop_cycle_in_dbg) & ((cmt_instret_ena & (minstret_r == (~(`E203_XLEN'b0))))));\n\nwire [`E203_XLEN-1:0] mcycle_nxt    = mcycle_wr_ena    ? wbck_csr_dat : (mcycle_r    + 1'b1);\nwire [`E203_XLEN-1:0] mcycleh_nxt   = mcycleh_wr_ena   ? wbck_csr_dat : (mcycleh_r   + 1'b1);\nwire [`E203_XLEN-1:0] minstret_nxt  = minstret_wr_ena  ? wbck_csr_dat : (minstret_r  + 1'b1);\nwire [`E203_XLEN-1:0] minstreth_nxt = minstreth_wr_ena ? wbck_csr_dat : (minstreth_r + 1'b1);\n\n//We need to use the always-on clock for this counter\nsirv_gnrl_dfflr #(`E203_XLEN) mcycle_dfflr (mcycle_ena, mcycle_nxt, mcycle_r   , clk_aon, rst_n);\nsirv_gnrl_dfflr #(`E203_XLEN) mcycleh_dfflr (mcycleh_ena, mcycleh_nxt, mcycleh_r  , clk_aon, rst_n);\nsirv_gnrl_dfflr #(`E203_XLEN) minstret_dfflr (minstret_ena, minstret_nxt, minstret_r , clk, rst_n);\nsirv_gnrl_dfflr #(`E203_XLEN) minstreth_dfflr (minstreth_ena, minstreth_nxt, minstreth_r, clk, rst_n);\n\nwire [`E203_XLEN-1:0] counterstop_r;\nwire counterstop_ena = counterstop_wr_ena;\nwire [`E203_XLEN-1:0] counterstop_nxt = {29'b0,wbck_csr_dat[2:0]};// Only LSB 3bits are useful\nsirv_gnrl_dfflr #(`E203_XLEN) counterstop_dfflr (counterstop_ena, counterstop_nxt, counterstop_r, clk, rst_n);\n\nwire [`E203_XLEN-1:0] csr_mcycle    = mcycle_r;\nwire [`E203_XLEN-1:0] csr_mcycleh   = mcycleh_r;\nwire [`E203_XLEN-1:0] csr_minstret  = minstret_r;\nwire [`E203_XLEN-1:0] csr_minstreth = minstreth_r;\nwire [`E203_XLEN-1:0] csr_counterstop = counterstop_r;\n`else//}{\nwire [`E203_XLEN-1:0] csr_mcycle    = `E203_XLEN'b0;\nwire [`E203_XLEN-1:0] csr_mcycleh   = `E203_XLEN'b0;\nwire [`E203_XLEN-1:0] csr_minstret  = `E203_XLEN'b0;\nwire [`E203_XLEN-1:0] csr_minstreth = `E203_XLEN'b0;\nwire [`E203_XLEN-1:0] csr_counterstop = `E203_XLEN'b0;\n`endif//}\n\nwire [`E203_XLEN-1:0] itcmnohold_r;\nwire itcmnohold_ena = itcmnohold_wr_ena;\nwire [`E203_XLEN-1:0] itcmnohold_nxt = {31'b0,wbck_csr_dat[0]};// Only LSB 1bits are useful\nsirv_gnrl_dfflr #(`E203_XLEN) itcmnohold_dfflr (itcmnohold_ena, itcmnohold_nxt, itcmnohold_r, clk, rst_n);\n\nwire [`E203_XLEN-1:0] csr_itcmnohold  = itcmnohold_r;\n\nwire [`E203_XLEN-1:0] mdvnob2b_r;\nwire mdvnob2b_ena = mdvnob2b_wr_ena;\nwire [`E203_XLEN-1:0] mdvnob2b_nxt = {31'b0,wbck_csr_dat[0]};// Only LSB 1bits are useful\nsirv_gnrl_dfflr #(`E203_XLEN) mdvnob2b_dfflr (mdvnob2b_ena, mdvnob2b_nxt, mdvnob2b_r, clk, rst_n);\n\nwire [`E203_XLEN-1:0] csr_mdvnob2b  = mdvnob2b_r;\n\nassign cy_stop = counterstop_r[0];// Stop CYCLE   counter\nassign tm_stop = counterstop_r[1];// Stop TIME    counter\nassign ir_stop = counterstop_r[2];// Stop INSTRET counter\n\nassign itcm_nohold = itcmnohold_r[0];// ITCM no-hold up feature\nassign mdv_nob2b = mdvnob2b_r[0];// Mul/Div no back2back feature\n\n\n\nwire [`E203_XLEN-1:0] mcgstop_r;\nwire mcgstop_ena = mcgstop_wr_ena;\nwire [`E203_XLEN-1:0] mcgstop_nxt = {30'b0,wbck_csr_dat[1:0]};// Only LSB 2bits are useful\nsirv_gnrl_dfflr #(`E203_XLEN) mcgstop_dfflr (mcgstop_ena, mcgstop_nxt, mcgstop_r, clk, rst_n);\nwire [`E203_XLEN-1:0] csr_mcgstop = mcgstop_r;\nassign core_cgstop = mcgstop_r[0];// Stop Core clock gating\nassign tcm_cgstop = mcgstop_r[1];// Stop TCM  clock gating\n\n\n//`ifdef E203_SUPPORT_CYCLE //{\n////0xC00 URO cycle \n////0xC80 URO cycleh\n//wire sel_cycle  = (csr_idx == 12'hc00);\n//wire sel_cycleh = (csr_idx == 12'hc80);\n//wire rd_cycle = sel_cycle & csr_rd_en;\n//wire wr_cycle = sel_cycle & csr_wr_en;\n//wire cycle_ena = (wr_cycle & wbck_csr_wen);\n//wire rd_cycleh = sel_cycleh & csr_rd_en;\n//wire wr_cycleh = sel_cycleh & csr_wr_en;\n//wire cycleh_ena = (wr_cycleh & wbck_csr_wen);\n//wire [`E203_XLEN-1:0] cycle_r;\n//wire [`E203_XLEN-1:0] cycleh_r;\n//wire [`E203_XLEN-1:0] cycle_nxt = wbck_csr_dat;\n//wire [`E203_XLEN-1:0] cycleh_nxt = wbck_csr_dat;\n//sirv_gnrl_dfflr #(`E203_XLEN) cycle_dfflr (cycle_ena, cycle_nxt, cycle_r, clk, rst_n);\n//sirv_gnrl_dfflr #(`E203_XLEN) cycleh_dfflr(cycleh_ena,cycleh_nxt,cycleh_r,clk, rst_n);\n//wire [`E203_XLEN-1:0] csr_cycle  = cycle_r;\n//wire [`E203_XLEN-1:0] csr_cycleh = cycleh_r;\n//`else//}{\n//wire [`E203_XLEN-1:0] csr_cycle = `E203_XLEN'b0;\n//wire [`E203_XLEN-1:0] csr_cycleh = `E203_XLEN'b0;\n//`endif//}\n\n//\n//0x041 URW uepc User exception program counter.\n//  We dont support user trap, so no uepc needed\n//0x341 MRW mepc Machine exception program counter.\nwire sel_mepc = (csr_idx == 12'h341);\nwire rd_mepc = sel_mepc & csr_rd_en;\nwire wr_mepc = sel_mepc & csr_wr_en;\nwire epc_ena = (wr_mepc & wbck_csr_wen) | cmt_epc_ena;\nwire [`E203_PC_SIZE-1:0] epc_r;\nwire [`E203_PC_SIZE-1:0] epc_nxt;\nassign epc_nxt[`E203_PC_SIZE-1:1] = cmt_epc_ena ? cmt_epc[`E203_PC_SIZE-1:1] : wbck_csr_dat[`E203_PC_SIZE-1:1];\nassign epc_nxt[0] = 1'b0;// Must not hold PC which will generate the misalign exception according to ISA\nsirv_gnrl_dfflr #(`E203_PC_SIZE) epc_dfflr (epc_ena, epc_nxt, epc_r, clk, rst_n);\nwire [`E203_XLEN-1:0] csr_mepc;\nwire dummy_0;\nassign {dummy_0,csr_mepc} = {{`E203_XLEN+1-`E203_PC_SIZE{1'b0}},epc_r};\nassign csr_epc_r = csr_mepc;\n\n//0x042 URW ucause User trap cause.\n//  We dont support user trap, so no ucause needed\n//0x342 MRW mcause Machine trap cause.\nwire sel_mcause = (csr_idx == 12'h342);\nwire rd_mcause = sel_mcause & csr_rd_en;\nwire wr_mcause = sel_mcause & csr_wr_en;\nwire cause_ena = (wr_mcause & wbck_csr_wen) | cmt_cause_ena;\nwire [`E203_XLEN-1:0] cause_r;\nwire [`E203_XLEN-1:0] cause_nxt;\nassign cause_nxt[31]  = cmt_cause_ena ? cmt_cause[31] : wbck_csr_dat[31];\nassign cause_nxt[30:4] = 27'b0;\nassign cause_nxt[3:0] = cmt_cause_ena ? cmt_cause[3:0] : wbck_csr_dat[3:0];\nsirv_gnrl_dfflr #(`E203_XLEN) cause_dfflr (cause_ena, cause_nxt, cause_r, clk, rst_n);\nwire [`E203_XLEN-1:0] csr_mcause = cause_r;\n\n\n//0x043 U"}
{"text": "RW ubadaddr User bad address.\n//  We dont support user trap, so no ubadaddr needed\n//0x343 MRW mbadaddr Machine bad address.\nwire sel_mbadaddr = (csr_idx == 12'h343);\nwire rd_mbadaddr = sel_mbadaddr & csr_rd_en;\nwire wr_mbadaddr = sel_mbadaddr & csr_wr_en;\nwire cmt_trap_badaddr_ena = cmt_badaddr_ena;\nwire badaddr_ena = (wr_mbadaddr & wbck_csr_wen) | cmt_trap_badaddr_ena;\nwire [`E203_ADDR_SIZE-1:0] badaddr_r;\nwire [`E203_ADDR_SIZE-1:0] badaddr_nxt;\nassign badaddr_nxt = cmt_trap_badaddr_ena ? cmt_badaddr : wbck_csr_dat[`E203_ADDR_SIZE-1:0];\nsirv_gnrl_dfflr #(`E203_ADDR_SIZE) badaddr_dfflr (badaddr_ena, badaddr_nxt, badaddr_r, clk, rst_n);\nwire [`E203_XLEN-1:0] csr_mbadaddr;\nwire dummy_1;\nassign {dummy_1,csr_mbadaddr} = {{`E203_XLEN+1-`E203_ADDR_SIZE{1'b0}},badaddr_r};\n\n// We dont support the delegation scheme, so no need to implement\n//   delegete registers\n\n\n//0x301 MRW misa ISA and extensions\nwire sel_misa = (csr_idx == 12'h301);\nwire rd_misa = sel_misa & csr_rd_en;\n// Only implemented the M mode, IMC or EMC\nwire [`E203_XLEN-1:0] csr_misa = {\n    2'b1\n   ,4'b0 //WIRI\n   ,1'b0 //              25 Z Reserved\n   ,1'b0 //              24 Y Reserved\n   ,1'b0 //              23 X Non-standard extensions present\n   ,1'b0 //              22 W Reserved\n   ,1'b0 //              21 V Tentatively reserved for Vector extension 20 U User mode implemented\n   ,1'b0 //              20 U User mode implemented\n   ,1'b0 //              19 T Tentatively reserved for Transactional Memory extension\n   ,1'b0 //              18 S Supervisor mode implemented\n   ,1'b0 //              17 R Reserved\n   ,1'b0 //              16 Q Quad-precision floating-point extension\n   ,1'b0 //              15 P Tentatively reserved for Packed-SIMD extension\n   ,1'b0 //              14 O Reserved\n   ,1'b0 //              13 N User-level interrupts supported\n   ,1'b1 // 12 M Integer Multiply/Divide extension\n   ,1'b0 //              11 L Tentatively reserved for Decimal Floating-Point extension\n   ,1'b0 //              10 K Reserved\n   ,1'b0 //              9 J Reserved\n   `ifdef E203_RFREG_NUM_IS_32\n   ,1'b1 // 8 I RV32I/64I/128I base ISA\n   `else\n   ,1'b0\n   `endif\n   ,1'b0 //              7 H Hypervisor mode implemented\n   ,1'b0 //              6 G Additional standard extensions present\n  `ifndef E203_HAS_FPU//{\n   ,1'b0 //              5 F Single-precision floating-point extension\n  `endif//\n   `ifdef E203_RFREG_NUM_IS_32\n   ,1'b0 //              4 E RV32E base ISA\n   `else\n   ,1'b1 //              \n   `endif\n  `ifndef E203_HAS_FPU//{\n   ,1'b0 //              3 D Double-precision floating-point extension\n  `endif//\n   ,1'b1 // 2 C Compressed extension\n   ,1'b0 //              1 B Tentatively reserved for Bit operations extension\n  `ifdef E203_SUPPORT_AMO//{\n   ,1'b1 //              0 A Atomic extension\n  `endif//E203_SUPPORT_AMO}\n  `ifndef E203_SUPPORT_AMO//{\n   ,1'b0 //              0 A Atomic extension\n  `endif//}\n                           };\n\n//Machine Information Registers\n//0xF11 MRO mvendorid Vendor ID.\n//0xF12 MRO marchid Architecture ID.\n//0xF13 MRO mimpid Implementation ID.\n//0xF14 MRO mhartid Hardware thread ID.\nwire [`E203_XLEN-1:0] csr_mvendorid = `E203_XLEN'h536;\nwire [`E203_XLEN-1:0] csr_marchid   = `E203_XLEN'hE203;\nwire [`E203_XLEN-1:0] csr_mimpid    = `E203_XLEN'h1;\nwire [`E203_XLEN-1:0] csr_mhartid   = {{`E203_XLEN-`E203_HART_ID_W{1'b0}},core_mhartid};\nwire rd_mvendorid = csr_rd_en & (csr_idx == 12'hF11);\nwire rd_marchid   = csr_rd_en & (csr_idx == 12'hF12);\nwire rd_mimpid    = csr_rd_en & (csr_idx == 12'hF13);\nwire rd_mhartid   = csr_rd_en & (csr_idx == 12'hF14);\n\n//0x7b0 Debug Control and Status\n//0x7b1 Debug PC\n//0x7b2 Debug Scratch Register\n//0x7a0 Trigger selection register\nwire sel_dcsr     = (csr_idx == 12'h7b0);\nwire sel_dpc      = (csr_idx == 12'h7b1);\nwire sel_dscratch = (csr_idx == 12'h7b2);\n\nwire rd_dcsr     = dbg_mode & csr_rd_en & sel_dcsr    ;\nwire rd_dpc      = dbg_mode & csr_rd_en & sel_dpc     ;\nwire rd_dscratch = dbg_mode & csr_rd_en & sel_dscratch;\n\n\nassign wr_dcsr_ena     = dbg_mode & csr_wr_en & sel_dcsr    ;\nassign wr_dpc_ena      = dbg_mode & csr_wr_en & sel_dpc     ;\nassign wr_dscratch_ena = dbg_mode & csr_wr_en & sel_dscratch;\n\n\nassign wr_csr_nxt     = wbck_csr_dat;\n\n\nwire [`E203_XLEN-1:0] csr_dcsr     = dcsr_r    ;\n`ifdef E203_PC_SIZE_IS_16\nwire [`E203_XLEN-1:0] csr_dpc      = {{`E203_XLEN-`E203_PC_SIZE{1'b0}},dpc_r};\n`endif\n`ifdef E203_PC_SIZE_IS_24\nwire [`E203_XLEN-1:0] csr_dpc      = {{`E203_XLEN-`E203_PC_SIZE{1'b0}},dpc_r};\n`endif\n`ifdef E203_PC_SIZE_IS_32\nwire [`E203_XLEN-1:0] csr_dpc      = dpc_r     ;\n`endif\nwire [`E203_XLEN-1:0] csr_dscratch = dscratch_r;\n\nassign csr_dpc_r = dpc_r;\n\n/////////////////////////////////////////////////////////////////////\n//  Generate the Read path\n  //Currently we only support the M mode to simplify the implementation and \n  //      reduce the gatecount because we are a privite core\nassign u_mode = 1'b0;\nassign s_mode = 1'b0;\nassign h_mode = 1'b0;\nassign m_mode = 1'b1;\nassign read_csr_dat = `E203_XLEN'b0 \n               //| ({`E203_XLEN{rd_ustatus  }} & csr_ustatus  )\n               | ({`E203_XLEN{rd_mstatus  }} & csr_mstatus  )\n               | ({`E203_XLEN{rd_mie      }} & csr_mie      )\n               | ({`E203_XLEN{rd_mtvec    }} & csr_mtvec    )\n               | ({`E203_XLEN{rd_mepc     }} & csr_mepc     )\n               | ({`E203_XLEN{rd_mscratch }} & csr_mscratch )\n               | ({`E203_XLEN{rd_mcause   }} & csr_mcause   )\n               | ({`E203_XLEN{rd_mbadaddr }} & csr_mbadaddr )\n               | ({`E203_XLEN{rd_mip      }} & csr_mip      )\n               | ({`E203_XLEN{rd_misa     }} & csr_misa      )\n               | ({`E203_XLEN{rd_mvendorid}} & csr_mvendorid)\n               | ({`E203_XLEN{rd_marchid  }} & csr_marchid  )\n               | ({`E203_XLEN{rd_mimpid   }} & csr_mimpid   )\n               | ({`E203_XLEN{rd_mhartid  }} & csr_mhartid  )\n               | ({`E203_XLEN{rd_mcycle   }} & csr_mcycle   )\n               | ({`E203_XLEN{rd_mcycleh  }} & csr_mcycleh  )\n               | ({`E203_XLEN{rd_minstret }} & csr_minstret )\n               | ({`E203_XLEN{rd_minstreth}} & csr_minstreth)\n               | ({`E203_XLEN{rd_counterstop}} & csr_counterstop)// Self-defined\n               | ({`E203_XLEN{rd_mcgstop}} & csr_mcgstop)// Self-defined\n               | ({`E203_XLEN{rd_itcmnohold}} & csr_itcmnohold)// Self-defined\n               | ({`E203_XLEN{rd_mdvnob2b}} & csr_mdvnob2b)// Self-defined\n               | ({`E203_XLEN{rd_dcsr     }} & csr_dcsr    )\n               | ({`E203_XLEN{rd_dpc      }} & csr_dpc     )\n               | ({`E203_XLEN{rd_dscratch }} & csr_dscratch)\n               ;\n\n\nendmodule\n\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The decode module to decode the instruction details\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_exu_decode(\n\n  //////////////////////////////////////////////////////////////\n  // The IR stage to Decoder\n  input  [`E203_INSTR_SIZE-1:0] i_instr,\n  input  [`E203_PC_SIZE-1:0] i_pc,\n  input  i_prdt_taken, \n  input  i_misalgn,              // The fetch misalign\n  input  i_buserr,               // The fetch bus error\n  input  i_muldiv_b2b,           // The back2back case for mul/div\n\n  input  dbg_mode,\n  //////////////////////////////////////////////////////////////\n  // The Decoded Info-Bus\n\n  output dec_rs1x0,\n  output dec_rs2x0,\n  output dec_rs1en,\n  output dec_rs2en,\n  output dec_rdwen,\n  output [`E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [`E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n  output [`E203_RFIDX_WIDTH-1:0] dec_rdidx,\n  output [`E203_DECINFO_WIDTH-1:0] dec_info,  \n  output [`E203_XLEN-1:0] dec_imm,\n  output [`E203_PC_SIZE-1:0] dec_pc,\n  output dec_misalgn,\n  output dec_buserr,\n  output dec_ilegl,\n  \n\n  output dec_mulhsu,\n  output dec_mul   ,\n  output dec_div   ,\n  output dec_rem   ,\n  output dec_divu  ,\n  output dec_remu  ,\n\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n\n  output [`E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [`E203_XLEN-1:0] dec_bjp_imm \n  );\n\n\n\n  wire [32-1:0] rv32_instr = i_instr;\n  wire [16-1:0] rv16_instr = i_instr[15:0];\n\n  wire [6:0]  opcode = rv32_instr[6:0];\n\n  wire opcode_1_0_00  = (opcode[1:0] == 2'b00);\n  wire opcode_1_0_01  = (opcode[1:0] == 2'b01);\n  wire opcode_1_0_10  = (opcode[1:0] == 2'b10);\n  wire opcode_1_0_11  = (opcode[1:0] == 2'b11);\n\n  wire rv32 = (~(i_instr[4:2] == 3'b111)) & opcode_1_0_11;\n\n  wire [4:0]  rv32_rd     = rv32_instr[11:7];\n  wire [2:0]  rv32_func3  = rv32_instr[14:12];\n  wire [4:0]  rv32_rs1    = rv32_instr[19:15];\n  wire [4:0]  rv32_rs2    = rv32_instr[24:20];\n  wire [6:0]  rv32_func7  = rv32_instr[31:25];\n\n  wire [4:0]  rv16_rd     = rv32_rd;\n  wire [4:0]  rv16_rs1    = rv16_rd; \n  wire [4:0]  rv16_rs2    = rv32_instr[6:2];\n\n  wire [4:0]  rv16_rdd    = {2'b01,rv32_instr[4:2]};\n  wire [4:0]  rv16_rss1   = {2'b01,rv32_instr[9:7]};\n  wire [4:0]  rv16_rss2   = rv16_rdd;\n\n  wire [2:0]  rv16_func3  = rv32_instr[15:13];\n\n  \n  // We generate the signals and reused them as much as possible to save gatecounts\n  wire opcode_4_2_000 = (opcode[4:2] == 3'b000);\n  wire opcode_4_2_001 = (opcode[4:2] == 3'b001);\n  wire opcode_4_2_010 = (opcode[4:2] == 3'b010);\n  wire opcode_4_2_011 = (opcode[4:2] == 3'b011);\n  wire opcode_4_2_100 = (opcode[4:2] == 3'b100);\n  wire opcode_4_2_101 = (opcode[4:2] == 3'b101);\n  wire opcode_4_2_110 = (opcode[4:2] == 3'b110);\n  wire opcode_4_2_111 = (opcode[4:2] == 3'b111);\n  wire opcode_6_5_00  = (opcode[6:5] == 2'b00);\n  wire opcode_6_5_01  = (opcode[6:5] == 2'b01);\n  wire opcode_6_5_10  = (opcode[6:5] == 2'b10);\n  wire opcode_6_5_11  = (opcode[6:5] == 2'b11);\n\n  wire rv32_func3_000 = (rv32_func3 == 3'b000);\n  wire rv32_func3_001 = (rv32_func3 == 3'b001);\n  wire rv32_func3_010 = (rv32_func3 == 3'b010);\n  wire rv32_func3_011 = (rv32_func3 == 3'b011);\n  wire rv32_func3_100 = (rv32_func3 == 3'b100);\n  wire rv32_func3_101 = (rv32_func3 == 3'b101);\n  wire rv32_func3_110 = (rv32_func3 == 3'b110);\n  wire rv32_func3_111 = (rv32_func3 == 3'b111);\n\n  wire rv16_func3_000 = (rv16_func3 == 3'b000);\n  wire rv16_func3_001 = (rv16_func3 == 3'b001);\n  wire rv16_func3_010 = (rv16_func3 == 3'b010);\n  wire rv16_func3_011 = (rv16_func3 == 3'b011);\n  wire rv16_func3_100 = (rv16_func3 == 3'b100);\n  wire rv16_func3_101 = (rv16_func3 == 3'b101);\n  wire rv16_func3_110 = (rv16_func3 == 3'b110);\n  wire rv16_func3_111 = (rv16_func3 == 3'b111);\n\n  wire rv32_func7_0000000 = (rv32_func7 == 7'b0000000);\n  wire rv32_func7_0100000 = (rv32_func7 == 7'b0100000);\n  wire rv32_func7_0000001 = (rv32_func7 == 7'b0000001);\n  wire rv32_func7_0000101 = (rv32_func7 == 7'b0000101);\n  wire rv32_func7_0001001 = (rv32_func7 == 7'b0001001);\n  wire rv32_func7_0001101 = (rv32_func7 == 7'b0001101);\n  wire rv32_func7_0010101 = (rv32_func7 == 7'b0010101);\n  wire rv32_func7_0100001 = (rv32_func7 == 7'b0100001);\n  wire rv32_func7_0010001 = (rv32_func7 == 7'b0010001);\n  wire rv32_func7_0101101 = (rv32_func7 == 7'b0101101);\n  wire rv32_func7_1111111 = (rv32_func7 == 7'b1111111);\n  wire rv32_func7_0000100 = (rv32_func7 == 7'b0000100); \n  wire rv32_func7_0001000 = (rv32_func7 == 7'b0001000); \n  wire rv32_func7_0001100 = (rv32_func7 == 7'b0001100); \n  wire rv32_func7_0101100 = (rv32_func7 == 7'b0101100); \n  wire rv32_func7_0010000 = (rv32_func7 == 7'b0010000); \n  wire rv32_func7_0010100 = (rv32_func7 == 7'b0010100); \n  wire rv32_func7_1100000 = (rv32_func7 == 7'b1100000); \n  wire rv32_func7_1110000 = (rv32_func7 == 7'b1110000); \n  wire rv32_func7_1010000 = (rv32_func7 == 7'b1010000); \n  wire rv32_func7_1101000 = (rv32_func7 == 7'b1101000); \n  wire rv32_func7_1111000 = (rv32_func7 == 7'b1111000); \n  wire rv32_func7_1010001 = (rv32_func7 == 7'b1010001);  \n  wire rv32_func7_1110001 = (rv32_func7 == 7'b1110001);  \n  wire rv32_func7_1100001 = (rv32_func7 == 7'b1100001);  \n  wire rv32_func7_1101001 = (rv32_func7 == 7'b1101001);  \n\n  wire rv32_rs1_x0 = (rv32_rs1 == 5'b00000);\n  wire rv32_rs2_x0 = (rv32_rs2 == 5'b00000);\n  wire rv32_rs2_x1 = (rv32_rs2 == 5'b00001);\n  wire rv32_rd_x0  = (rv32_rd  == 5'b00000);\n  wire rv32_rd_x2  = (rv32_rd  == 5'b00010);\n\n  wire rv16_rs1_x0 = (rv16_rs1 == 5'b00000);\n  wire rv16_rs2_x0 = (rv16_rs2 == 5'b00000);\n  wire rv16_rd_x0  = (rv16_rd  == 5'b00000);\n  wire rv16_rd_x2  = (rv16_rd  == 5'b00010);\n\n  wire rv32_rs1_x31 = (rv32_rs1 == 5'b11111);\n  wire rv32_rs2_x31 = (rv32_rs2 == 5'b11111);\n  wire rv32_rd_x31  = (rv32_rd  == 5'b11111);\n\n  wire rv32_load     = opcode_6_5_00 & opcode_4_2_000 & opcode_1_0_11; \n  wire rv32_store    = opcode_6_5_01 & opcode_4_2_000 & opcode_1_0_11; \n  wire rv32_madd     = opcode_6_5_10 & opcode_4_2_000 & opcode_1_0_11; \n  wire rv32_branch   = opcode_6_5_11 & opcode_4_2_000 & opcode_1_0_11; \n\n  wire rv32_load_fp  = opcode_6_5_00 & opcode_4_2_001 & opcode_1_0_11; \n  wire rv32_store_fp = opcode_6_5_01 & opcode_4_2_001 & opcode_1_0_11; \n  wire rv32_msub     = opcode_6_5_10 & opcode_4_2_001 & opcode_1_0_11; \n  wire rv32_jalr     = opcode_6_5_11 & opcode_4_2_001 & opcode_1_0_11; \n\n  wire rv32_custom0  = opcode_6_5_00 & opcode_4_2_010 & opcode_1_0_11; \n  wire rv32_custom1  = opcode_6_5_01 & opcode_4_2_010 & opcode_1_0_11; \n  wire rv32_nmsub    = opcode_6_5_10 & opcode_4_2_010 & opcode_1_0_11; \n  wire rv32_resved0  = opcode_6_5_11 & opcode_4_2_010 & opcode_1_0_11; \n\n  wire rv32_miscmem  = opcode_6_5_00 & opcode_4_2_011 & opcode_1_0_11; \n  `ifdef E203_SUPPORT_AMO//{\n  wire rv32_amo      = opcode_6_5_01 & opcode_4_2_011 & opcode_1_0_11; \n  `endif//E203_SUPPORT_AMO}\n  `ifndef E203_SUPPORT_AMO//{\n  wire rv32_amo      = 1'b0;\n  `endif//}\n  wire rv32_nmadd    = opcode_6_5_10 & opcode_4_2_011 & opcode_1_0_11; \n  wire rv32_jal      = opcode_6_5_11 & opcode_4_2_011 & opcode_1_0_11; \n\n  wire rv32_op_imm   = opcode_6_5_00 & opcode_4_2_100 & opcode_1_0_11; \n  wire rv32_op       = opcode_6_5_01 & opcode_4_2_100 & opcode_1_0_11; \n  wire rv32_op_fp    = opcode_6_5_10 & opcode_4_2_100 & opcode_1_0_11; \n  wire rv32_system   = opcode_6_5_11 & opcode_4_2_100 & opcode_1_0_11; \n\n  wire rv32_auipc    = opcode_6_5_00 & opcode_4_2_101 & opcode_1_0_11; \n  wire rv32_lui      = opcode_6_5_01 & opcode_4_2_101 & opcode_1_0_11; \n  wire rv32_resved1  = opcode_6_5_10 & opcode_4_2_101 & opcode_1_0_11; \n  wire rv32_resved2  = opcode_6_5_11 & opcode_4_2_101 & opcode_1_0_11; \n\n  wire rv32_op_imm_32= opcode_6_5_00 & opcode_4_2_110 & opcode_1_0_11; \n  wire rv32_op_32    = opcode_6_5_01 & opcode_4_2_110 & opcode_1_0_11; \n  wire rv32_custom2  = opcode_6_5_10 & opcode_4_2_110 & opcode_1_0_11; \n  wire rv32_custom3  = opcode_6_5_11 & opcode_4_2_110 & opcode_1_0_11; \n\n  wire rv16_addi4spn     = opcode_1_0_00 & rv16_func3_000;//\n  wire rv16_lw           = opcode_1_0_00 & rv16_func3_010;//\n  wire rv16_sw           = opcode_1_0_00 & rv16_func3_110;//\n\n\n  wire rv16_addi         = opcode_1_0_01 & rv16_func3_000;//\n  wire rv16_jal          = opcode_1_0_01 & rv16_func3_001;//\n  wire rv16_li           = opcode_1_0_01 & rv16_func3_010;//\n  wire rv16_lui_addi16sp = opcode_1_0_01 & rv16_func3_011;//--\n  wire rv16_miscalu      = opcode_1_0_01 & rv16_func3_100;//--\n  wire rv16_j            = opcode_1_0_01 & rv16_func3_101;//\n  wire rv16_beqz         = opcode_1_0_01 & rv16_func3_110;//\n  wire rv16_bnez         = opcode_1_0_01 & rv16_func3_111;//\n\n\n  wire rv16_slli         = opcode_1_0_10 & rv16_func3_000;//\n  wire rv16_lwsp         = opcode_1_0_10 & rv16_func3_010;//\n  wire rv16_jalr_mv_add  = opcode_1_0_10 & rv16_func3_100;//--\n  wire rv16_swsp         = opcode_1_0_10 & rv16_func3_110;//\n\n  `ifndef E203_HAS_FPU//{\n  wire rv16_flw          = 1'b0;\n  wire rv16_fld          = 1'b0;\n  wire rv16_fsw          = 1'b0;\n  wire rv16_fsd          = 1'b0;\n  wire rv16_fldsp        = 1'b0;\n  wire rv16_flwsp        = 1'b0;\n  wire rv16_fsdsp        = 1'b0;\n  wire rv16_fswsp        = 1'b0;\n  `endif//}\n\n  wire rv16_lwsp_ilgl    = rv16_lwsp & rv16_rd_x0;//(RES, rd=0)\n\n  wire rv16_nop          = rv16_addi  \n                         & (~rv16_instr[12]) & (rv16_rd_x0) & (rv16_rs2_x0);\n\n  wire rv16_srli         = rv16_miscalu  & (rv16_instr[11:10] == 2'b00);\n  wire rv16_srai         = rv16_miscalu  & (rv16_instr[11:10] == 2'b01);\n  wire rv16_andi         = rv16_miscalu  & (rv16_instr[11:10] == 2'b10);\n\n  wire rv16_instr_12_is0   = (rv16_instr[12] == 1'b0);\n  wire rv16_instr_6_2_is0s = (rv16_instr[6:2] == 5'b0);\n\n  wire rv16_sxxi_shamt_legl = \n                 rv16_instr_12_is0 //shamt[5] must be zero for RV32C\n               & (~(rv16_instr_6_2_is0s)) //shamt[4:0] must be non-zero for RV32C\n                 ;\n  wire rv16_sxxi_shamt_ilgl =  (rv16_slli | rv16_srli | rv16_srai) & (~rv16_sxxi_shamt_legl);\n\n  wire rv16_addi16sp     = rv16_lui_addi16sp & rv32_rd_x2;//\n  wire rv16_lui          = rv16_lui_addi16sp & (~rv32_rd_x0) & (~rv32_rd_x2);//\n  \n  //C.LI is only valid when rd!=x0.\n  wire rv16_li_ilgl = rv16_li & (rv16_rd_x0);\n  //C.LUI is only valid when rd!=x0 or x2, and when the immediate is not equal to zero.\n  wire rv16_lui_ilgl = rv16_lui & (rv16_rd_x0 | rv16_rd_x2 | (rv16_instr_6_2_is0s & rv16_instr_12_is0));\n\n  wire rv16_li_lui_ilgl = rv16_li_ilgl | rv16_lui_ilgl;\n\n  wire rv16_addi4spn_ilgl = rv16_addi4spn & (rv16_instr_12_is0 & rv16_rd_x0 & opcode_6_5_00);//(RES, nzimm=0, bits[12:5])\n  wire rv16_addi16sp_ilgl = rv16_addi16sp & rv16_instr_12_is0 & rv16_instr_6_2_is0s; //(RES, nzimm=0, bits 12,6:2)\n\n  wire rv16_subxororand  = rv16_miscalu  & (rv16_instr[12:10] == 3'b011);//\n  wire rv16_sub          = rv16_subxororand & (rv16_instr[6:5] == 2'b00);//\n  wire rv16_xor          = rv16_subxororand & (rv16_instr[6:5] == 2'b01);//\n  wire rv16_or           = rv16_subxororand & (rv16_instr[6:5] == 2'b10);//\n  wire rv16_and          = rv16_subxororand & (rv16_instr[6:5] == 2'b11);//\n\n  wire rv16_jr           = rv16_jalr_mv_add //\n                         & (~rv16_instr[12]) & (~rv16_rs1_x0) & (rv16_rs2_x0);// The RES rs1=0 illegal is already covered here\n  wire rv16_mv           = rv16_jalr_mv_add //\n                         & (~rv16_instr[12]) & (~rv16_rd_x0) & (~rv16_rs2_x0);\n  wire rv16_ebreak       = rv16_jalr_mv_add //\n                         & (rv16_instr[12]) & (rv16_rd_x0) & (rv16_rs2_x0);\n  wire rv16_jalr         = rv16_jalr_mv_add //\n                         & (rv16_instr[12]) & (~rv16_rs1_x0) & (rv16_rs2_x0);\n  wire rv16_add          = rv16_jalr_mv_add // \n                         & (rv16_instr[12]) & (~rv16_rd_x0) & (~rv16_rs2_x0);\n\n  \n \n\n\n  // ===========================================================================\n  // Branch Instructions\n  wire rv32_beq      = rv32_branch & rv32_func3_000;\n  wire rv32_bne      = rv32_branch & rv32_func3_001;\n  wire rv32_blt      = rv32_branch & rv32_func3_100;\n  wire rv32_bgt      = rv32_branch & rv32_func3_101;\n  wire rv32_bltu     = rv32_branch & rv32_func3_110;\n  wire rv32_bgtu     = rv32_branch & rv32_func3_111;\n\n  // ===========================================================================\n  // System Instructions\n  wire rv32_ecall    = rv32_system & rv32_func3_000 & (rv32_instr[31:20] == 12'b0000_0000_0000);\n  wire rv32_ebreak   = rv32_system & rv32_func3_000 & (rv32_instr[31:20] == 12'b0000_0000_0001);\n  wire rv32_mret     = rv32_system & rv32_func3_000 & (rv32_instr[31:20] == 12'b0011_0000_0010);\n  wire rv32_dret     = rv32_system & rv32_func3_000 & (rv32_instr[31:20] == 12'b0111_1011_0010);\n  wire rv32_wfi      = rv32_system & rv32_func3_000 & (rv32_instr[31:20] == 12'b0001_0000_0101);\n  // We dont implement the WFI and MRET illegal exception when the rs and rd is not zeros\n\n  wire rv32_csrrw    = rv32_system & rv32_func3_001; \n  wire rv32_csrrs    = rv32_system & rv32_func3_010; \n  wire rv32_csrrc    = rv32_system & rv32_func3_011; \n  wire rv32_csrrwi   = rv32_system & rv32_func3_101; \n  wire rv32_csrrsi   = rv32_system & rv32_func3_110; \n  wire rv32_csrrci   = rv32_system & rv32_func3_111; \n\n  wire rv32_dret_ilgl = rv32_dret & (~dbg_mode);\n\n  wire rv32_ecall_ebreak_ret_wfi = rv32_system & rv32_func3_000;\n  wire rv32_csr          = rv32_system & (~rv32_func3_000);\n\n\n  // ===========================================================================\n    // The Branch and system group of instructions will be handled by BJP\n\n  assign dec_jal     = rv32_jal    | rv16_jal  | rv16_j;\n  assign dec_jalr    = rv32_jalr   | rv16_jalr | rv16_jr;\n  assign dec_bxx     = rv32_branch | rv16_beqz | rv16_bnez;\n  assign dec_bjp     = dec_jal | dec_jalr | dec_bxx;\n\n\n  wire rv32_fence  ;\n  wire rv32_fence_i;\n  wire rv32_fence_fencei;\n  wire bjp_op = dec_bjp | rv32_mret | (rv32_dret & (~rv32_dret_ilgl)) | rv32_fence_fencei;\n\n  wire [`E203_DECINFO_BJP_WIDTH-1:0] bjp_info_bus;\n  assign bjp_info_bus[`E203_DECINFO_GRP    ]    = `E203_DECINFO_GRP_BJP;\n  assign bjp_info_bus[`E203_DECINFO_RV32   ]    = rv32;\n  assign bjp_info_bus[`E203_DECINFO_BJP_JUMP ]  = dec_jal | dec_jalr;\n  assign bjp_info_bus[`E203_DECINFO_BJP_BPRDT]  = i_prdt_taken;\n  assign bjp_info_bus[`E203_DECINFO_BJP_BEQ  ]  = rv32_beq | rv16_beqz;\n  assign bjp_info_bus[`E203_DECINFO_BJP_BNE  ]  = rv32_bne | rv16_bnez;\n  assign bjp_info_bus[`E203_DECINFO_BJP_BLT  ]  = rv32_blt; \n  assign bjp_info_bus[`E203_DECINFO_BJP_BGT  ]  = rv32_bgt ;\n  assign bjp_info_bus[`E203_DECINFO_BJP_BLTU ]  = rv32_bltu;\n  assign bjp_info_bus[`E203_DECINFO_BJP_BGTU ]  = rv32_bgtu;\n  assign bjp_info_bus[`E203_DECINFO_BJP_BXX  ]  = dec_bxx;\n  assign bjp_info_bus[`E203_DECINFO_BJP_MRET ]  = rv32_mret;\n  assign bjp_info_bus[`E203_DECINFO_BJP_DRET ]  = rv32_dret;\n  assign bjp_info_bus[`E203_DECINFO_BJP_FENCE ]  = rv32_fence;\n  assign bjp_info_bus[`E203_DECINFO_BJP_FENCEI]  = rv32_fence_i;\n\n\n  // ===========================================================================\n  // ALU Instructions\n  wire rv32_addi     = rv32_op_imm & rv32_func3_000;\n  wire rv32_slti     = rv32_op_imm & rv32_func3_010;\n  wire rv32_sltiu    = rv32_op_imm & rv32_func3_011;\n  wire rv32_xori     = rv32_op_imm & rv32_func3_100;\n  wire rv32_ori      = rv32_op_imm & rv32_func3_110;\n  wire rv32_andi     = rv32_op_imm & rv32_func3_111;\n\n  wire rv32_slli     = rv32_op_imm & rv32_func3_001 & (rv32_instr[31:26] == 6'b000000);\n  wire rv32_srli     = rv32_op_imm & rv32_func3_101 & (rv32_instr[31:26] == 6'b000000);\n  wire rv32_srai     = rv32_op_imm & rv32_func3_101 & (rv32_instr[31:26] == 6'b010000);\n\n  wire rv32_sxxi_shamt_legl = (rv32_instr[25] == 1'b0); //shamt[5] must be zero for RV32I\n  wire rv32_sxxi_shamt_ilgl =  (rv32_slli | rv32_srli | rv32_srai) & (~rv32_sxxi_shamt_legl);\n\n  wire rv32_add      = rv32_op     & rv32_func3_000 & rv32_func7_0000000;\n  wire rv32_sub      = rv32_op     & rv32_func3_000 & rv32_func7_0100000;\n  wire rv32_sll      = rv32_op     & rv32_func3_001 & rv32_func7_0000000;\n  wire rv32_slt      = rv32_op     & rv32_func3_010 & rv32_func7_0000000;\n  wire rv32_sltu     = rv32_op     & rv32_func3_011 & rv32_func7_0000000;\n  wire rv32_xor      = rv32_op     & rv32_func3_100 & rv32_func7_0000000;\n  wire rv32_srl      = rv32_op     & rv32_func3_101 & rv32_func7_0000000;\n  wire rv32_sra      = rv32_op     & rv32_func3_101 & rv32_func7_0100000;\n  wire rv32_or       = rv32_op     & rv32_func3_110 & rv32_func7_0000000;\n  wire rv32_and      = rv32_op     & rv32_func3_111 & rv32_func7_0000000;\n\n  wire rv32_nop      = rv32_addi & rv32_rs1_x0 & rv32_rd_x0 & (~(|rv32_instr[31:20]));\n  // The ALU group of instructions will be handled by 1cycle ALU-datapath\n  wire ecall_ebreak = rv32_ecall | rv32_ebreak | rv16_ebreak;\n\n  wire alu_op = (~rv32_sxxi_shamt_ilgl) & (~rv16_sxxi_shamt_ilgl) \n              & (~rv16_li_lui_ilgl) & (~rv16_addi4spn_ilgl) & (~rv16_addi16sp_ilgl) & \n              ( rv32_op_imm \n              | rv32_op & (~rv32_func7_0000001) // Exclude the MULDIV\n              | rv32_auipc\n              | rv32_lui\n              | rv16_addi4spn\n              | rv16_addi         \n              | rv16_lui_addi16sp \n              | rv16_li | rv16_mv\n              | rv16_slli         \n              | rv16_miscalu  \n              | rv16_add\n              | rv16_nop | rv32_nop\n              | rv32_wfi // We just put WFI into ALU and do nothing in ALU\n              | ecall_ebreak)\n              ;\n  wire need_imm;\n  wire [`E203_DECINFO_ALU_WIDTH-1:0] alu_info_bus;\n  assign alu_info_bus[`E203_DECINFO_GRP    ]    = `E203_DECINFO_GRP_ALU;\n  assign alu_info_bus[`E203_DECINFO_RV32   ]    = rv32;\n  assign alu_info_bus[`E203_DECINFO_ALU_ADD]    = rv32_add  | rv32_addi | rv32_auipc |\n                                                  rv16_addi4spn | rv16_addi | rv16_addi16sp | rv16_add |\n                            // We also decode LI and MV as the add instruction, becuase\n                            //   they all add x0 with a RS2 or Immeidate, and then write into RD\n                                                  rv16_li | rv16_mv;\n  assign alu_info_bus[`E203_DECINFO_ALU_SUB]    = rv32_sub  | rv16_sub;      \n  assign alu_info_bus[`E203_DECINFO_ALU_SLT]    = rv32_slt  | rv32_slti;     \n  assign alu_info_bus[`E203_DECINFO_ALU_SLTU]   = rv32_sltu | rv32_sltiu;  \n  assign alu_info_bus[`E203_DECINFO_ALU_XOR]    = rv32_xor  | rv32_xori | rv16_xor;    \n  assign alu_info_bus[`E203_DECINFO_ALU_SLL]    = rv32_sll  | rv32_slli | rv16_slli;   \n  assign alu_info_bus[`E203_DECINFO_ALU_SRL]    = rv32_sr"}
{"text": "l  | rv32_srli | rv16_srli;\n  assign alu_info_bus[`E203_DECINFO_ALU_SRA]    = rv32_sra  | rv32_srai | rv16_srai;   \n  assign alu_info_bus[`E203_DECINFO_ALU_OR ]    = rv32_or   | rv32_ori  | rv16_or;     \n  assign alu_info_bus[`E203_DECINFO_ALU_AND]    = rv32_and  | rv32_andi | rv16_andi | rv16_and;\n  assign alu_info_bus[`E203_DECINFO_ALU_LUI]    = rv32_lui  | rv16_lui; \n  assign alu_info_bus[`E203_DECINFO_ALU_OP2IMM] = need_imm; \n  assign alu_info_bus[`E203_DECINFO_ALU_OP1PC ] = rv32_auipc;\n  assign alu_info_bus[`E203_DECINFO_ALU_NOP ]   = rv16_nop | rv32_nop;\n  assign alu_info_bus[`E203_DECINFO_ALU_ECAL ]  = rv32_ecall; \n  assign alu_info_bus[`E203_DECINFO_ALU_EBRK ]  = rv32_ebreak | rv16_ebreak;\n  assign alu_info_bus[`E203_DECINFO_ALU_WFI  ]  = rv32_wfi;\n\n\n  \n  wire csr_op = rv32_csr;\n  wire [`E203_DECINFO_CSR_WIDTH-1:0] csr_info_bus;\n  assign csr_info_bus[`E203_DECINFO_GRP    ]    = `E203_DECINFO_GRP_CSR;\n  assign csr_info_bus[`E203_DECINFO_RV32   ]    = rv32;\n  assign csr_info_bus[`E203_DECINFO_CSR_CSRRW ] = rv32_csrrw | rv32_csrrwi; \n  assign csr_info_bus[`E203_DECINFO_CSR_CSRRS ] = rv32_csrrs | rv32_csrrsi;\n  assign csr_info_bus[`E203_DECINFO_CSR_CSRRC ] = rv32_csrrc | rv32_csrrci;\n  assign csr_info_bus[`E203_DECINFO_CSR_RS1IMM] = rv32_csrrwi | rv32_csrrsi | rv32_csrrci;\n  assign csr_info_bus[`E203_DECINFO_CSR_ZIMMM ] = rv32_rs1;\n  assign csr_info_bus[`E203_DECINFO_CSR_RS1IS0] = rv32_rs1_x0;\n  assign csr_info_bus[`E203_DECINFO_CSR_CSRIDX] = rv32_instr[31:20];\n\n  \n  // ===========================================================================\n  // Memory Order Instructions\n  assign rv32_fence    = rv32_miscmem & rv32_func3_000;\n  assign rv32_fence_i  = rv32_miscmem & rv32_func3_001;\n\n  assign rv32_fence_fencei  = rv32_miscmem;\n\n\n  // ===========================================================================\n  // MUL/DIV Instructions\n  wire rv32_mul      = rv32_op     & rv32_func3_000 & rv32_func7_0000001;\n  wire rv32_mulh     = rv32_op     & rv32_func3_001 & rv32_func7_0000001;\n  wire rv32_mulhsu   = rv32_op     & rv32_func3_010 & rv32_func7_0000001;\n  wire rv32_mulhu    = rv32_op     & rv32_func3_011 & rv32_func7_0000001;\n  wire rv32_div      = rv32_op     & rv32_func3_100 & rv32_func7_0000001;\n  wire rv32_divu     = rv32_op     & rv32_func3_101 & rv32_func7_0000001;\n  wire rv32_rem      = rv32_op     & rv32_func3_110 & rv32_func7_0000001;\n  wire rv32_remu     = rv32_op     & rv32_func3_111 & rv32_func7_0000001;\n  \n  // The MULDIV group of instructions will be handled by MUL-DIV-datapath\n  `ifdef E203_SUPPORT_MULDIV//{\n  wire muldiv_op = rv32_op & rv32_func7_0000001;\n  `endif//}\n  `ifndef E203_SUPPORT_MULDIV//{\n  wire muldiv_op = 1'b0;\n  `endif//}\n\n  wire [`E203_DECINFO_MULDIV_WIDTH-1:0] muldiv_info_bus;\n  assign muldiv_info_bus[`E203_DECINFO_GRP          ] = `E203_DECINFO_GRP_MULDIV;\n  assign muldiv_info_bus[`E203_DECINFO_RV32         ] = rv32        ;\n  assign muldiv_info_bus[`E203_DECINFO_MULDIV_MUL   ] = rv32_mul    ;   \n  assign muldiv_info_bus[`E203_DECINFO_MULDIV_MULH  ] = rv32_mulh   ;\n  assign muldiv_info_bus[`E203_DECINFO_MULDIV_MULHSU] = rv32_mulhsu ;\n  assign muldiv_info_bus[`E203_DECINFO_MULDIV_MULHU ] = rv32_mulhu  ;\n  assign muldiv_info_bus[`E203_DECINFO_MULDIV_DIV   ] = rv32_div    ;\n  assign muldiv_info_bus[`E203_DECINFO_MULDIV_DIVU  ] = rv32_divu   ;\n  assign muldiv_info_bus[`E203_DECINFO_MULDIV_REM   ] = rv32_rem    ;\n  assign muldiv_info_bus[`E203_DECINFO_MULDIV_REMU  ] = rv32_remu   ;\n  assign muldiv_info_bus[`E203_DECINFO_MULDIV_B2B   ] = i_muldiv_b2b;\n\n  assign dec_mulhsu = rv32_mulh | rv32_mulhsu | rv32_mulhu;\n  assign dec_mul    = rv32_mul;\n  assign dec_div    = rv32_div ;\n  assign dec_divu   = rv32_divu;\n  assign dec_rem    = rv32_rem;\n  assign dec_remu   = rv32_remu;\n \n  // ===========================================================================\n  // Load/Store Instructions\n  wire rv32_lb       = rv32_load   & rv32_func3_000;\n  wire rv32_lh       = rv32_load   & rv32_func3_001;\n  wire rv32_lw       = rv32_load   & rv32_func3_010;\n  wire rv32_lbu      = rv32_load   & rv32_func3_100;\n  wire rv32_lhu      = rv32_load   & rv32_func3_101;\n\n  wire rv32_sb       = rv32_store  & rv32_func3_000;\n  wire rv32_sh       = rv32_store  & rv32_func3_001;\n  wire rv32_sw       = rv32_store  & rv32_func3_010;\n\n\n  // ===========================================================================\n  // Atomic Instructions\n  `ifdef E203_SUPPORT_AMO//{\n  wire rv32_lr_w      = rv32_amo & rv32_func3_010 & (rv32_func7[6:2] == 5'b00010);\n  wire rv32_sc_w      = rv32_amo & rv32_func3_010 & (rv32_func7[6:2] == 5'b00011);\n  wire rv32_amoswap_w = rv32_amo & rv32_func3_010 & (rv32_func7[6:2] == 5'b00001);\n  wire rv32_amoadd_w  = rv32_amo & rv32_func3_010 & (rv32_func7[6:2] == 5'b00000);\n  wire rv32_amoxor_w  = rv32_amo & rv32_func3_010 & (rv32_func7[6:2] == 5'b00100);\n  wire rv32_amoand_w  = rv32_amo & rv32_func3_010 & (rv32_func7[6:2] == 5'b01100);\n  wire rv32_amoor_w   = rv32_amo & rv32_func3_010 & (rv32_func7[6:2] == 5'b01000);\n  wire rv32_amomin_w  = rv32_amo & rv32_func3_010 & (rv32_func7[6:2] == 5'b10000);\n  wire rv32_amomax_w  = rv32_amo & rv32_func3_010 & (rv32_func7[6:2] == 5'b10100);\n  wire rv32_amominu_w = rv32_amo & rv32_func3_010 & (rv32_func7[6:2] == 5'b11000);\n  wire rv32_amomaxu_w = rv32_amo & rv32_func3_010 & (rv32_func7[6:2] == 5'b11100);\n\n  `endif//E203_SUPPORT_AMO}\n  `ifndef E203_SUPPORT_AMO//{\n  wire rv32_lr_w      = 1'b0;\n  wire rv32_sc_w      = 1'b0;\n  wire rv32_amoswap_w = 1'b0;\n  wire rv32_amoadd_w  = 1'b0;\n  wire rv32_amoxor_w  = 1'b0;\n  wire rv32_amoand_w  = 1'b0;\n  wire rv32_amoor_w   = 1'b0;\n  wire rv32_amomin_w  = 1'b0;\n  wire rv32_amomax_w  = 1'b0;\n  wire rv32_amominu_w = 1'b0;\n  wire rv32_amomaxu_w = 1'b0;\n\n  `endif//}\n\n  wire   amoldst_op = rv32_amo | rv32_load | rv32_store | rv16_lw | rv16_sw | (rv16_lwsp & (~rv16_lwsp_ilgl)) | rv16_swsp;\n    // The RV16 always is word\n  wire [1:0] lsu_info_size  = rv32 ? rv32_func3[1:0] : 2'b10;\n    // The RV16 always is signed\n  wire       lsu_info_usign = rv32? rv32_func3[2] : 1'b0;\n\n  wire [`E203_DECINFO_AGU_WIDTH-1:0] agu_info_bus;\n  assign agu_info_bus[`E203_DECINFO_GRP    ] = `E203_DECINFO_GRP_AGU;\n  assign agu_info_bus[`E203_DECINFO_RV32   ] = rv32;\n  assign agu_info_bus[`E203_DECINFO_AGU_LOAD   ] = rv32_load  | rv32_lr_w | rv16_lw | rv16_lwsp;\n  assign agu_info_bus[`E203_DECINFO_AGU_STORE  ] = rv32_store | rv32_sc_w | rv16_sw | rv16_swsp;\n  assign agu_info_bus[`E203_DECINFO_AGU_SIZE   ] = lsu_info_size;\n  assign agu_info_bus[`E203_DECINFO_AGU_USIGN  ] = lsu_info_usign;\n  assign agu_info_bus[`E203_DECINFO_AGU_EXCL   ] = rv32_lr_w | rv32_sc_w;\n  assign agu_info_bus[`E203_DECINFO_AGU_AMO    ] = rv32_amo & (~(rv32_lr_w | rv32_sc_w));// We seperated the EXCL out of AMO in LSU handling\n  assign agu_info_bus[`E203_DECINFO_AGU_AMOSWAP] = rv32_amoswap_w;\n  assign agu_info_bus[`E203_DECINFO_AGU_AMOADD ] = rv32_amoadd_w ;\n  assign agu_info_bus[`E203_DECINFO_AGU_AMOAND ] = rv32_amoand_w ;\n  assign agu_info_bus[`E203_DECINFO_AGU_AMOOR  ] = rv32_amoor_w ;\n  assign agu_info_bus[`E203_DECINFO_AGU_AMOXOR ] = rv32_amoxor_w  ;\n  assign agu_info_bus[`E203_DECINFO_AGU_AMOMAX ] = rv32_amomax_w ;\n  assign agu_info_bus[`E203_DECINFO_AGU_AMOMIN ] = rv32_amomin_w ;\n  assign agu_info_bus[`E203_DECINFO_AGU_AMOMAXU] = rv32_amomaxu_w;\n  assign agu_info_bus[`E203_DECINFO_AGU_AMOMINU] = rv32_amominu_w;\n  assign agu_info_bus[`E203_DECINFO_AGU_OP2IMM ] = need_imm; \n\n\n\n\n  // Reuse the common signals as much as possible to save gatecounts\n  wire rv32_all0s_ilgl  = rv32_func7_0000000 \n                        & rv32_rs2_x0 \n                        & rv32_rs1_x0 \n                        & rv32_func3_000 \n                        & rv32_rd_x0 \n                        & opcode_6_5_00 \n                        & opcode_4_2_000 \n                        & (opcode[1:0] == 2'b00); \n\n  wire rv32_all1s_ilgl  = rv32_func7_1111111 \n                        & rv32_rs2_x31 \n                        & rv32_rs1_x31 \n                        & rv32_func3_111 \n                        & rv32_rd_x31 \n                        & opcode_6_5_11 \n                        & opcode_4_2_111 \n                        & (opcode[1:0] == 2'b11); \n\n  wire rv16_all0s_ilgl  = rv16_func3_000 //rv16_func3  = rv32_instr[15:13];\n                        & rv32_func3_000 //rv32_func3  = rv32_instr[14:12];\n                        & rv32_rd_x0     //rv32_rd     = rv32_instr[11:7];\n                        & opcode_6_5_00 \n                        & opcode_4_2_000 \n                        & (opcode[1:0] == 2'b00); \n\n  wire rv16_all1s_ilgl  = rv16_func3_111\n                        & rv32_func3_111 \n                        & rv32_rd_x31 \n                        & opcode_6_5_11 \n                        & opcode_4_2_111 \n                        & (opcode[1:0] == 2'b11);\n  \n  wire rv_all0s1s_ilgl = rv32 ?  (rv32_all0s_ilgl | rv32_all1s_ilgl)\n                              :  (rv16_all0s_ilgl | rv16_all1s_ilgl);\n\n  //\n  // All the RV32IMA need RD register except the\n  //   * Branch, Store,\n  //   * fence, fence_i \n  //   * ecall, ebreak  \n  wire rv32_need_rd = \n                      (~rv32_rd_x0) & (\n                    (\n                      (~rv32_branch) & (~rv32_store)\n                    & (~rv32_fence_fencei)\n                    & (~rv32_ecall_ebreak_ret_wfi) \n                    )\n                   );\n\n  // All the RV32IMA need RS1 register except the\n  //   * lui\n  //   * auipc\n  //   * jal\n  //   * fence, fence_i \n  //   * ecall, ebreak  \n  //   * csrrwi\n  //   * csrrsi\n  //   * csrrci\n  wire rv32_need_rs1 =\n                      (~rv32_rs1_x0) & (\n                    (\n                      (~rv32_lui)\n                    & (~rv32_auipc)\n                    & (~rv32_jal)\n                    & (~rv32_fence_fencei)\n                    & (~rv32_ecall_ebreak_ret_wfi)\n                    & (~rv32_csrrwi)\n                    & (~rv32_csrrsi)\n                    & (~rv32_csrrci)\n                    )\n                  );\n                    \n  // Following RV32IMA instructions need RS2 register\n  //   * branch\n  //   * store\n  //   * rv32_op\n  //   * rv32_amo except the rv32_lr_w\n  wire rv32_need_rs2 = (~rv32_rs2_x0) & (\n                (\n                 (rv32_branch)\n               | (rv32_store)\n               | (rv32_op)\n               | (rv32_amo & (~rv32_lr_w))\n                 )\n                 );\n\n  wire [31:0]  rv32_i_imm = { \n                               {20{rv32_instr[31]}} \n                              , rv32_instr[31:20]\n                             };\n\n  wire [31:0]  rv32_s_imm = {\n                               {20{rv32_instr[31]}} \n                              , rv32_instr[31:25] \n                              , rv32_instr[11:7]\n                             };\n\n\n  wire [31:0]  rv32_b_imm = {\n                               {19{rv32_instr[31]}} \n                              , rv32_instr[31] \n                              , rv32_instr[7] \n                              , rv32_instr[30:25] \n                              , rv32_instr[11:8]\n                              , 1'b0\n                              };\n\n  wire [31:0]  rv32_u_imm = {rv32_instr[31:12],12'b0};\n\n  wire [31:0]  rv32_j_imm = {\n                               {11{rv32_instr[31]}} \n                              , rv32_instr[31] \n                              , rv32_instr[19:12] \n                              , rv32_instr[20] \n                              , rv32_instr[30:21]\n                              , 1'b0\n                              };\n\n                   // It will select i-type immediate when\n                   //    * rv32_op_imm\n                   //    * rv32_jalr\n                   //    * rv32_load\n  wire rv32_imm_sel_i = rv32_op_imm | rv32_jalr | rv32_load;\n  wire rv32_imm_sel_jalr = rv32_jalr;\n  wire [31:0]  rv32_jalr_imm = rv32_i_imm;\n\n                   // It will select u-type immediate when\n                   //    * rv32_lui, rv32_auipc \n  wire rv32_imm_sel_u = rv32_lui | rv32_auipc;\n\n                   // It will select j-type immediate when\n                   //    * rv32_jal\n  wire rv32_imm_sel_j = rv32_jal;\n  wire rv32_imm_sel_jal = rv32_jal;\n  wire [31:0]  rv32_jal_imm = rv32_j_imm;\n\n                   // It will select b-type immediate when\n                   //    * rv32_branch\n  wire rv32_imm_sel_b = rv32_branch;\n  wire rv32_imm_sel_bxx = rv32_branch;\n  wire [31:0]  rv32_bxx_imm = rv32_b_imm;\n                   \n                   // It will select s-type immediate when\n                   //    * rv32_store\n  wire rv32_imm_sel_s = rv32_store;\n\n\n\n  //   * Note: this CIS/CILI/CILUI/CI16SP-type is named by myself, because in \n  //           ISA doc, the CI format for LWSP is different\n  //           with other CI formats in terms of immediate\n  \n                   // It will select CIS-type immediate when\n                   //    * rv16_lwsp\n  wire rv16_imm_sel_cis = rv16_lwsp;\n  wire [31:0]  rv16_cis_imm ={\n                          24'b0\n                        , rv16_instr[3:2]\n                        , rv16_instr[12]\n                        , rv16_instr[6:4]\n                        , 2'b0\n                         };\n                   \n  wire [31:0]  rv16_cis_d_imm ={\n                          23'b0\n                        , rv16_instr[4:2]\n                        , rv16_instr[12]\n                        , rv16_instr[6:5]\n                        , 3'b0\n                         };\n                   // It will select CILI-type immediate when\n                   //    * rv16_li\n                   //    * rv16_addi\n                   //    * rv16_slli\n                   //    * rv16_srai\n                   //    * rv16_srli\n                   //    * rv16_andi\n  wire rv16_imm_sel_cili = rv16_li | rv16_addi | rv16_slli\n                   | rv16_srai | rv16_srli | rv16_andi;\n  wire [31:0]  rv16_cili_imm ={\n                          {26{rv16_instr[12]}}\n                        , rv16_instr[12]\n                        , rv16_instr[6:2]\n                         };\n                   \n                   // It will select CILUI-type immediate when\n                   //    * rv16_lui\n  wire rv16_imm_sel_cilui = rv16_lui;\n  wire [31:0]  rv16_cilui_imm ={\n                          {14{rv16_instr[12]}}\n                        , rv16_instr[12]\n                        , rv16_instr[6:2]\n                        , 12'b0\n                         };\n                   \n                   // It will select CI16SP-type immediate when\n                   //    * rv16_addi16sp\n  wire rv16_imm_sel_ci16sp = rv16_addi16sp;\n  wire [31:0]  rv16_ci16sp_imm ={\n                          {22{rv16_instr[12]}}\n                        , rv16_instr[12]\n                        , rv16_instr[4]\n                        , rv16_instr[3]\n                        , rv16_instr[5]\n                        , rv16_instr[2]\n                        , rv16_instr[6]\n                        , 4'b0\n                         };\n                   \n                   // It will select CSS-type immediate when\n                   //    * rv16_swsp\n  wire rv16_imm_sel_css = rv16_swsp;\n  wire [31:0]  rv16_css_imm ={\n                          24'b0\n                        , rv16_instr[8:7]\n                        , rv16_instr[12:9]\n                        , 2'b0\n                         };\n  wire [31:0]  rv16_css_d_imm ={\n                          23'b0\n                        , rv16_instr[9:7]\n                        , rv16_instr[12:10]\n                        , 3'b0\n                         };\n                   // It will select CIW-type immediate when\n                   //    * rv16_addi4spn\n  wire rv16_imm_sel_ciw = rv16_addi4spn;\n  wire [31:0]  rv16_ciw_imm ={\n                          22'b0\n                        , rv16_instr[10:7]\n                        , rv16_instr[12]\n                        , rv16_instr[11]\n                        , rv16_instr[5]\n                        , rv16_instr[6]\n                        , 2'b0\n                         };\n\n                   // It will select CL-type immediate when\n                   //    * rv16_lw\n  wire rv16_imm_sel_cl = rv16_lw;\n  wire [31:0]  rv16_cl_imm ={\n                          25'b0\n                        , rv16_instr[5]\n                        , rv16_instr[12]\n                        , rv16_instr[11]\n                        , rv16_instr[10]\n                        , rv16_instr[6]\n                        , 2'b0\n                         };\n                   \n  wire [31:0]  rv16_cl_d_imm ={\n                          24'b0\n                        , rv16_instr[6]\n                        , rv16_instr[5]\n                        , rv16_instr[12]\n                        , rv16_instr[11]\n                        , rv16_instr[10]\n                        , 3'b0\n                         };\n                   // It will select CS-type immediate when\n                   //    * rv16_sw\n  wire rv16_imm_sel_cs = rv16_sw;\n  wire [31:0]  rv16_cs_imm ={\n                          25'b0\n                        , rv16_instr[5]\n                        , rv16_instr[12]\n                        , rv16_instr[11]\n                        , rv16_instr[10]\n                        , rv16_instr[6]\n                        , 2'b0\n                         };\n   wire [31:0]  rv16_cs_d_imm ={\n                          24'b0\n                        , rv16_instr[6]\n                        , rv16_instr[5]\n                        , rv16_instr[12]\n                        , rv16_instr[11]\n                        , rv16_instr[10]\n                        , 3'b0\n                         };\n\n                   // It will select CB-type immediate when\n                   //    * rv16_beqz\n                   //    * rv16_bnez\n  wire rv16_imm_sel_cb = rv16_beqz | rv16_bnez;\n  wire [31:0]  rv16_cb_imm ={\n                          {23{rv16_instr[12]}}\n                        , rv16_instr[12]\n                        , rv16_instr[6:5]\n                        , rv16_instr[2]\n                        , rv16_instr[11:10]\n                        , rv16_instr[4:3]\n                        , 1'b0\n                         };\n  wire [31:0]  rv16_bxx_imm = rv16_cb_imm;\n\n                   // It will select CJ-type immediate when\n                   //    * rv16_j\n                   //    * rv16_jal\n  wire rv16_imm_sel_cj = rv16_j | rv16_jal;\n  wire [31:0]  rv16_cj_imm ={\n                          {20{rv16_instr[12]}}\n                        , rv16_instr[12]\n                        , rv16_instr[8]\n                        , rv16_instr[10:9]\n                        , rv16_instr[6]\n                        , rv16_instr[7]\n                        , rv16_instr[2]\n                        , rv16_instr[11]\n                        , rv16_instr[5:3]\n                        , 1'b0\n                         };\n  wire [31:0]  rv16_jjal_imm = rv16_cj_imm;\n\n                   // It will select CR-type register (no-imm) when\n                   //    * rv16_jalr_mv_add\n  wire [31:0]  rv16_jrjalr_imm = 32'b0;\n                   \n                   // It will select CSR-type register (no-imm) when\n                   //    * rv16_subxororand\n\n                   \n  wire [31:0]  rv32_load_fp_imm  = rv32_i_imm;\n  wire [31:0]  rv32_store_fp_imm = rv32_s_imm;\n  wire [31:0]  rv32_imm = \n                     ({32{rv32_imm_sel_i}} & rv32_i_imm)\n                   | ({32{rv32_imm_sel_s}} & rv32_s_imm)\n                   | ({32{rv32_imm_sel_b}} & rv32_b_imm)\n                   | ({32{rv32_imm_sel_u}} & rv32_u_imm)\n                   | ({32{rv32_imm_sel_j}} & rv32_j_imm)\n                   ;\n                   \n  wire  rv32_need_imm = \n                     rv32_imm_sel_i\n                   | rv32_imm_sel_s\n                   | rv32_imm_sel_b\n                   | rv32_imm_sel_u\n                   | rv32_imm_sel_j\n                   ;\n\n  wire [31:0]  rv16_imm = \n                     ({32{rv16_imm_sel_cis   }} & rv16_cis_imm)\n                   | ({32{rv16_imm_sel_cili  }} & rv16_cili_imm)\n                   | ({32{rv16_imm_sel"}
{"text": "_cilui }} & rv16_cilui_imm)\n                   | ({32{rv16_imm_sel_ci16sp}} & rv16_ci16sp_imm)\n                   | ({32{rv16_imm_sel_css   }} & rv16_css_imm)\n                   | ({32{rv16_imm_sel_ciw   }} & rv16_ciw_imm)\n                   | ({32{rv16_imm_sel_cl    }} & rv16_cl_imm)\n                   | ({32{rv16_imm_sel_cs    }} & rv16_cs_imm)\n                   | ({32{rv16_imm_sel_cb    }} & rv16_cb_imm)\n                   | ({32{rv16_imm_sel_cj    }} & rv16_cj_imm)\n                   ;\n\n  wire rv16_need_imm = \n                     rv16_imm_sel_cis   \n                   | rv16_imm_sel_cili  \n                   | rv16_imm_sel_cilui \n                   | rv16_imm_sel_ci16sp\n                   | rv16_imm_sel_css   \n                   | rv16_imm_sel_ciw   \n                   | rv16_imm_sel_cl    \n                   | rv16_imm_sel_cs    \n                   | rv16_imm_sel_cb    \n                   | rv16_imm_sel_cj    \n                   ;\n\n\n  assign need_imm = rv32 ? rv32_need_imm : rv16_need_imm; \n\n  assign dec_imm = rv32 ? rv32_imm : rv16_imm;\n  assign dec_pc  = i_pc;\n\n  \n\n  assign dec_info = \n              ({`E203_DECINFO_WIDTH{alu_op}}     & {{`E203_DECINFO_WIDTH-`E203_DECINFO_ALU_WIDTH{1'b0}},alu_info_bus})\n            | ({`E203_DECINFO_WIDTH{amoldst_op}} & {{`E203_DECINFO_WIDTH-`E203_DECINFO_AGU_WIDTH{1'b0}},agu_info_bus})\n            | ({`E203_DECINFO_WIDTH{bjp_op}}     & {{`E203_DECINFO_WIDTH-`E203_DECINFO_BJP_WIDTH{1'b0}},bjp_info_bus})\n            | ({`E203_DECINFO_WIDTH{csr_op}}     & {{`E203_DECINFO_WIDTH-`E203_DECINFO_CSR_WIDTH{1'b0}},csr_info_bus})\n            | ({`E203_DECINFO_WIDTH{muldiv_op}}  & {{`E203_DECINFO_WIDTH-`E203_DECINFO_CSR_WIDTH{1'b0}},muldiv_info_bus})\n              ;\n\n\n  wire legl_ops = \n              alu_op\n            | amoldst_op\n            | bjp_op\n            | csr_op\n            | muldiv_op\n            ;\n\n  // To decode the registers for Rv16, divided into 8 groups\n  wire rv16_format_cr  = rv16_jalr_mv_add;\n  wire rv16_format_ci  = rv16_lwsp | rv16_flwsp | rv16_fldsp | rv16_li | rv16_lui_addi16sp | rv16_addi | rv16_slli; \n  wire rv16_format_css = rv16_swsp | rv16_fswsp | rv16_fsdsp; \n  wire rv16_format_ciw = rv16_addi4spn; \n  wire rv16_format_cl  = rv16_lw | rv16_flw | rv16_fld; \n  wire rv16_format_cs  = rv16_sw | rv16_fsw | rv16_fsd | rv16_subxororand; \n  wire rv16_format_cb  = rv16_beqz | rv16_bnez | rv16_srli | rv16_srai | rv16_andi; \n  wire rv16_format_cj  = rv16_j | rv16_jal; \n\n\n  // In CR Cases:\n  //   * JR:     rs1= rs1(coded),     rs2= x0 (coded),   rd = x0 (implicit)\n  //   * JALR:   rs1= rs1(coded),     rs2= x0 (coded),   rd = x1 (implicit)\n  //   * MV:     rs1= x0 (implicit),  rs2= rs2(coded),   rd = rd (coded)\n  //   * ADD:    rs1= rs1(coded),     rs2= rs2(coded),   rd = rd (coded)\n  //   * eBreak: rs1= rs1(coded),     rs2= x0 (coded),   rd = x0 (coded)\n  wire rv16_need_cr_rs1   = rv16_format_cr & 1'b1;\n  wire rv16_need_cr_rs2   = rv16_format_cr & 1'b1;\n  wire rv16_need_cr_rd    = rv16_format_cr & 1'b1;\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_cr_rs1 = rv16_mv ? `E203_RFIDX_WIDTH'd0 : rv16_rs1[`E203_RFIDX_WIDTH-1:0];\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_cr_rs2 = rv16_rs2[`E203_RFIDX_WIDTH-1:0];\n     // The JALR and JR difference in encoding is just the rv16_instr[12]\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_cr_rd  = (rv16_jalr | rv16_jr)? \n                 {{`E203_RFIDX_WIDTH-1{1'b0}},rv16_instr[12]} : rv16_rd[`E203_RFIDX_WIDTH-1:0];\n                         \n  // In CI Cases:\n  //   * LWSP:     rs1= x2 (implicit),  rd = rd \n  //   * LI/LUI:   rs1= x0 (implicit),  rd = rd\n  //   * ADDI:     rs1= rs1(implicit),  rd = rd\n  //   * ADDI16SP: rs1= rs1(implicit),  rd = rd\n  //   * SLLI:     rs1= rs1(implicit),  rd = rd\n  wire rv16_need_ci_rs1   = rv16_format_ci & 1'b1;\n  wire rv16_need_ci_rs2   = rv16_format_ci & 1'b0;\n  wire rv16_need_ci_rd    = rv16_format_ci & 1'b1;\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_ci_rs1 = (rv16_lwsp | rv16_flwsp | rv16_fldsp) ? `E203_RFIDX_WIDTH'd2 :\n                                  (rv16_li | rv16_lui) ? `E203_RFIDX_WIDTH'd0 : rv16_rs1[`E203_RFIDX_WIDTH-1:0];\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_ci_rs2 = `E203_RFIDX_WIDTH'd0;\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_ci_rd  = rv16_rd[`E203_RFIDX_WIDTH-1:0];\n                        \n  // In CSS Cases:\n  //   * SWSP:     rs1 = x2 (implicit), rs2= rs2 \n  wire rv16_need_css_rs1  = rv16_format_css & 1'b1;\n  wire rv16_need_css_rs2  = rv16_format_css & 1'b1;\n  wire rv16_need_css_rd   = rv16_format_css & 1'b0;\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_css_rs1 = `E203_RFIDX_WIDTH'd2;\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_css_rs2 = rv16_rs2[`E203_RFIDX_WIDTH-1:0];\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_css_rd  = `E203_RFIDX_WIDTH'd0;\n                       \n  // In CIW cases:\n  //   * ADDI4SPN:   rdd = rdd, rss1= x2 (implicit)\n  wire rv16_need_ciw_rss1 = rv16_format_ciw & 1'b1;\n  wire rv16_need_ciw_rss2 = rv16_format_ciw & 1'b0;\n  wire rv16_need_ciw_rdd  = rv16_format_ciw & 1'b1;\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_ciw_rss1  = `E203_RFIDX_WIDTH'd2;\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_ciw_rss2  = `E203_RFIDX_WIDTH'd0;\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_ciw_rdd  = rv16_rdd[`E203_RFIDX_WIDTH-1:0];\n                      \n  // In CL cases:\n  //   * LW:   rss1 = rss1, rdd= rdd\n  wire rv16_need_cl_rss1  = rv16_format_cl & 1'b1;\n  wire rv16_need_cl_rss2  = rv16_format_cl & 1'b0;\n  wire rv16_need_cl_rdd   = rv16_format_cl & 1'b1;\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_cl_rss1 = rv16_rss1[`E203_RFIDX_WIDTH-1:0];\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_cl_rss2 = `E203_RFIDX_WIDTH'd0;\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_cl_rdd  = rv16_rdd[`E203_RFIDX_WIDTH-1:0];\n                     \n  // In CS cases:\n  //   * SW:            rdd = none(implicit), rss1= rss1       , rss2=rss2\n  //   * SUBXORORAND:   rdd = rss1,           rss1= rss1(coded), rss2=rss2\n  wire rv16_need_cs_rss1  = rv16_format_cs & 1'b1;\n  wire rv16_need_cs_rss2  = rv16_format_cs & 1'b1;\n  wire rv16_need_cs_rdd   = rv16_format_cs & rv16_subxororand;\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_cs_rss1 = rv16_rss1[`E203_RFIDX_WIDTH-1:0];\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_cs_rss2 = rv16_rss2[`E203_RFIDX_WIDTH-1:0];\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_cs_rdd  = rv16_rss1[`E203_RFIDX_WIDTH-1:0];\n                    \n  // In CB cases:\n  //   * BEQ/BNE:            rdd = none(implicit), rss1= rss1, rss2=x0(implicit)\n  //   * SRLI/SRAI/ANDI:     rdd = rss1          , rss1= rss1, rss2=none(implicit)\n  wire rv16_need_cb_rss1  = rv16_format_cb & 1'b1;\n  wire rv16_need_cb_rss2  = rv16_format_cb & (rv16_beqz | rv16_bnez);\n  wire rv16_need_cb_rdd   = rv16_format_cb & (~(rv16_beqz | rv16_bnez));\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_cb_rss1 = rv16_rss1[`E203_RFIDX_WIDTH-1:0];\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_cb_rss2 = `E203_RFIDX_WIDTH'd0;\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_cb_rdd  = rv16_rss1[`E203_RFIDX_WIDTH-1:0];\n  \n  // In CJ cases:\n  //   * J:            rdd = x0(implicit)\n  //   * JAL:          rdd = x1(implicit)\n  wire rv16_need_cj_rss1  = rv16_format_cj & 1'b0;\n  wire rv16_need_cj_rss2  = rv16_format_cj & 1'b0;\n  wire rv16_need_cj_rdd   = rv16_format_cj & 1'b1;\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_cj_rss1 = `E203_RFIDX_WIDTH'd0;\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_cj_rss2 = `E203_RFIDX_WIDTH'd0;\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_cj_rdd  = rv16_j ? `E203_RFIDX_WIDTH'd0 : `E203_RFIDX_WIDTH'd1;\n\n  // rv16_format_cr  \n  // rv16_format_ci  \n  // rv16_format_css \n  // rv16_format_ciw \n  // rv16_format_cl  \n  // rv16_format_cs  \n  // rv16_format_cb  \n  // rv16_format_cj  \n  wire rv16_need_rs1 = rv16_need_cr_rs1 | rv16_need_ci_rs1 | rv16_need_css_rs1;\n  wire rv16_need_rs2 = rv16_need_cr_rs2 | rv16_need_ci_rs2 | rv16_need_css_rs2;\n  wire rv16_need_rd  = rv16_need_cr_rd  | rv16_need_ci_rd  | rv16_need_css_rd;\n\n  wire rv16_need_rss1 = rv16_need_ciw_rss1|rv16_need_cl_rss1|rv16_need_cs_rss1|rv16_need_cb_rss1|rv16_need_cj_rss1;\n  wire rv16_need_rss2 = rv16_need_ciw_rss2|rv16_need_cl_rss2|rv16_need_cs_rss2|rv16_need_cb_rss2|rv16_need_cj_rss2;\n  wire rv16_need_rdd  = rv16_need_ciw_rdd |rv16_need_cl_rdd |rv16_need_cs_rdd |rv16_need_cb_rdd |rv16_need_cj_rdd ;\n\n  wire rv16_rs1en = (rv16_need_rs1 | rv16_need_rss1);\n  wire rv16_rs2en = (rv16_need_rs2 | rv16_need_rss2);\n  wire rv16_rden  = (rv16_need_rd  | rv16_need_rdd );\n\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_rs1idx;\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_rs2idx;\n  wire [`E203_RFIDX_WIDTH-1:0] rv16_rdidx ;\n\n  assign rv16_rs1idx = \n         ({`E203_RFIDX_WIDTH{rv16_need_cr_rs1 }} & rv16_cr_rs1)\n       | ({`E203_RFIDX_WIDTH{rv16_need_ci_rs1 }} & rv16_ci_rs1)\n       | ({`E203_RFIDX_WIDTH{rv16_need_css_rs1}} & rv16_css_rs1)\n       | ({`E203_RFIDX_WIDTH{rv16_need_ciw_rss1}} & rv16_ciw_rss1)\n       | ({`E203_RFIDX_WIDTH{rv16_need_cl_rss1}}  & rv16_cl_rss1)\n       | ({`E203_RFIDX_WIDTH{rv16_need_cs_rss1}}  & rv16_cs_rss1)\n       | ({`E203_RFIDX_WIDTH{rv16_need_cb_rss1}}  & rv16_cb_rss1)\n       | ({`E203_RFIDX_WIDTH{rv16_need_cj_rss1}}  & rv16_cj_rss1)\n       ;\n\n  assign rv16_rs2idx = \n         ({`E203_RFIDX_WIDTH{rv16_need_cr_rs2 }} & rv16_cr_rs2)\n       | ({`E203_RFIDX_WIDTH{rv16_need_ci_rs2 }} & rv16_ci_rs2)\n       | ({`E203_RFIDX_WIDTH{rv16_need_css_rs2}} & rv16_css_rs2)\n       | ({`E203_RFIDX_WIDTH{rv16_need_ciw_rss2}} & rv16_ciw_rss2)\n       | ({`E203_RFIDX_WIDTH{rv16_need_cl_rss2}}  & rv16_cl_rss2)\n       | ({`E203_RFIDX_WIDTH{rv16_need_cs_rss2}}  & rv16_cs_rss2)\n       | ({`E203_RFIDX_WIDTH{rv16_need_cb_rss2}}  & rv16_cb_rss2)\n       | ({`E203_RFIDX_WIDTH{rv16_need_cj_rss2}}  & rv16_cj_rss2)\n       ;\n\n  assign rv16_rdidx = \n         ({`E203_RFIDX_WIDTH{rv16_need_cr_rd }} & rv16_cr_rd)\n       | ({`E203_RFIDX_WIDTH{rv16_need_ci_rd }} & rv16_ci_rd)\n       | ({`E203_RFIDX_WIDTH{rv16_need_css_rd}} & rv16_css_rd)\n       | ({`E203_RFIDX_WIDTH{rv16_need_ciw_rdd}} & rv16_ciw_rdd)\n       | ({`E203_RFIDX_WIDTH{rv16_need_cl_rdd}}  & rv16_cl_rdd)\n       | ({`E203_RFIDX_WIDTH{rv16_need_cs_rdd}}  & rv16_cs_rdd)\n       | ({`E203_RFIDX_WIDTH{rv16_need_cb_rdd}}  & rv16_cb_rdd)\n       | ({`E203_RFIDX_WIDTH{rv16_need_cj_rdd}}  & rv16_cj_rdd)\n       ;\n\n  assign dec_rs1idx = rv32 ? rv32_rs1[`E203_RFIDX_WIDTH-1:0] : rv16_rs1idx;\n  assign dec_rs2idx = rv32 ? rv32_rs2[`E203_RFIDX_WIDTH-1:0] : rv16_rs2idx;\n  assign dec_rdidx  = rv32 ? rv32_rd [`E203_RFIDX_WIDTH-1:0] : rv16_rdidx ;\n\n\n  assign dec_rs1en = rv32 ? rv32_need_rs1 : (rv16_rs1en & (~(rv16_rs1idx == `E203_RFIDX_WIDTH'b0))); \n  assign dec_rs2en = rv32 ? rv32_need_rs2 : (rv16_rs2en & (~(rv16_rs2idx == `E203_RFIDX_WIDTH'b0)));\n  assign dec_rdwen = rv32 ? rv32_need_rd  : (rv16_rden  & (~(rv16_rdidx  == `E203_RFIDX_WIDTH'b0)));\n\n  assign dec_rs1x0 = (dec_rs1idx == `E203_RFIDX_WIDTH'b0);\n  assign dec_rs2x0 = (dec_rs2idx == `E203_RFIDX_WIDTH'b0);\n                     \n  wire rv_index_ilgl;\n  `ifdef E203_RFREG_NUM_IS_4 //{ \n  assign rv_index_ilgl =\n                 (| dec_rs1idx[`E203_RFIDX_WIDTH-1:2])\n                |(| dec_rs2idx[`E203_RFIDX_WIDTH-1:2])\n                |(| dec_rdidx [`E203_RFIDX_WIDTH-1:2])\n                ;\n  `endif//}\n  `ifdef E203_RFREG_NUM_IS_8 //{ \n  assign rv_index_ilgl =\n                 (| dec_rs1idx[`E203_RFIDX_WIDTH-1:3])\n                |(| dec_rs2idx[`E203_RFIDX_WIDTH-1:3])\n                |(| dec_rdidx [`E203_RFIDX_WIDTH-1:3])\n                ;\n  `endif//}\n  `ifdef E203_RFREG_NUM_IS_16 //{ \n  assign rv_index_ilgl =\n                 (| dec_rs1idx[`E203_RFIDX_WIDTH-1:4])\n                |(| dec_rs2idx[`E203_RFIDX_WIDTH-1:4])\n                |(| dec_rdidx [`E203_RFIDX_WIDTH-1:4])\n                ;\n  `endif//}\n  `ifdef E203_RFREG_NUM_IS_32 //{ \n      //Never happen this illegal exception\n  assign rv_index_ilgl = 1'b0;\n  `endif//}\n\n  assign dec_rv32 = rv32;\n\n  assign dec_bjp_imm = \n                     ({32{rv16_jal | rv16_j     }} & rv16_jjal_imm)\n                   | ({32{rv16_jalr_mv_add      }} & rv16_jrjalr_imm)\n                   | ({32{rv16_beqz | rv16_bnez }} & rv16_bxx_imm)\n                   | ({32{rv32_jal              }} & rv32_jal_imm)\n                   | ({32{rv32_jalr             }} & rv32_jalr_imm)\n                   | ({32{rv32_branch           }} & rv32_bxx_imm)\n                   ;\n\n  assign dec_jalr_rs1idx = rv32 ? rv32_rs1[`E203_RFIDX_WIDTH-1:0] : rv16_rs1[`E203_RFIDX_WIDTH-1:0]; \n\n  assign dec_misalgn = i_misalgn;\n  assign dec_buserr  = i_buserr ;\n\n\n  assign dec_ilegl = \n            (rv_all0s1s_ilgl) \n          | (rv_index_ilgl) \n          | (rv16_addi16sp_ilgl)\n          | (rv16_addi4spn_ilgl)\n          | (rv16_li_lui_ilgl)\n          | (rv16_sxxi_shamt_ilgl)\n          | (rv32_sxxi_shamt_ilgl)\n          | (rv32_dret_ilgl)\n          | (rv16_lwsp_ilgl)\n          | (~legl_ops);\n\n\nendmodule                                      \n                                               \n                                               \n                                               \n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The Dispatch module to dispatch instructions to different functional units\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_exu_disp(\n  input  wfi_halt_exu_req,\n  output wfi_halt_exu_ack,\n\n  input  oitf_empty,\n  input  amo_wait,\n  //////////////////////////////////////////////////////////////\n  // The operands and decode info from dispatch\n  input  disp_i_valid, // Handshake valid\n  output disp_i_ready, // Handshake ready \n\n  // The operand 1/2 read-enable signals and indexes\n  input  disp_i_rs1x0,\n  input  disp_i_rs2x0,\n  input  disp_i_rs1en,\n  input  disp_i_rs2en,\n  input  [`E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  [`E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  [`E203_XLEN-1:0] disp_i_rs1,\n  input  [`E203_XLEN-1:0] disp_i_rs2,\n  input  disp_i_rdwen,\n  input  [`E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  [`E203_DECINFO_WIDTH-1:0]  disp_i_info,  \n  input  [`E203_XLEN-1:0] disp_i_imm,\n  input  [`E203_PC_SIZE-1:0] disp_i_pc,\n  input  disp_i_misalgn,\n  input  disp_i_buserr ,\n  input  disp_i_ilegl  ,\n\n\n  //////////////////////////////////////////////////////////////\n  // Dispatch to ALU\n  output disp_o_alu_valid, \n  input  disp_o_alu_ready,\n\n  input  disp_o_alu_longpipe,\n\n  output [`E203_XLEN-1:0] disp_o_alu_rs1,\n  output [`E203_XLEN-1:0] disp_o_alu_rs2,\n  output disp_o_alu_rdwen,\n  output [`E203_RFIDX_WIDTH-1:0] disp_o_alu_rdidx,\n  output [`E203_DECINFO_WIDTH-1:0]  disp_o_alu_info,  \n  output [`E203_XLEN-1:0] disp_o_alu_imm,\n  output [`E203_PC_SIZE-1:0] disp_o_alu_pc,\n  output [`E203_ITAG_WIDTH-1:0] disp_o_alu_itag,\n  output disp_o_alu_misalgn,\n  output disp_o_alu_buserr ,\n  output disp_o_alu_ilegl  ,\n\n  //////////////////////////////////////////////////////////////\n  // Dispatch to OITF\n  input  oitfrd_match_disprs1,\n  input  oitfrd_match_disprs2,\n  input  oitfrd_match_disprs3,\n  input  oitfrd_match_disprd,\n  input  [`E203_ITAG_WIDTH-1:0] disp_oitf_ptr ,\n\n  output disp_oitf_ena,\n  input  disp_oitf_ready,\n\n  output disp_oitf_rs1fpu,\n  output disp_oitf_rs2fpu,\n  output disp_oitf_rs3fpu,\n  output disp_oitf_rdfpu ,\n\n  output disp_oitf_rs1en ,\n  output disp_oitf_rs2en ,\n  output disp_oitf_rs3en ,\n  output disp_oitf_rdwen ,\n\n  output [`E203_RFIDX_WIDTH-1:0] disp_oitf_rs1idx,\n  output [`E203_RFIDX_WIDTH-1:0] disp_oitf_rs2idx,\n  output [`E203_RFIDX_WIDTH-1:0] disp_oitf_rs3idx,\n  output [`E203_RFIDX_WIDTH-1:0] disp_oitf_rdidx ,\n\n  output [`E203_PC_SIZE-1:0] disp_oitf_pc ,\n\n  \n  input  clk,\n  input  rst_n\n  );\n\n\n  wire [`E203_DECINFO_GRP_WIDTH-1:0] disp_i_info_grp  = disp_i_info [`E203_DECINFO_GRP];\n\n  // Based on current 2 pipe stage implementation, the 2nd stage need to have all instruction\n  //   to be commited via ALU interface, so every instruction need to be dispatched to ALU,\n  //   regardless it is long pipe or not, and inside ALU it will issue instructions to different\n  //   other longpipes\n  //wire disp_alu  = (disp_i_info_grp == `E203_DECINFO_GRP_ALU) \n  //               | (disp_i_info_grp == `E203_DECINFO_GRP_BJP) \n  //               | (disp_i_info_grp == `E203_DECINFO_GRP_CSR) \n  //              `ifdef E203_SUPPORT_SHARE_MULDIV //{\n  //               | (disp_i_info_grp == `E203_DECINFO_GRP_MULDIV) \n  //              `endif//E203_SUPPORT_SHARE_MULDIV}\n  //               | (disp_i_info_grp == `E203_DECINFO_GRP_AGU);\n\n  wire disp_csr = (disp_i_info_grp == `E203_DECINFO_GRP_CSR); \n\n  wire disp_alu_longp_prdt = (disp_i_info_grp == `E203_DECINFO_GRP_AGU)  \n                             ;\n\n  wire disp_alu_longp_real = disp_o_alu_longpipe;\n\n  // Both fence and fencei need to make sure all outstanding instruction have been completed\n  wire disp_fence_fencei   = (disp_i_info_grp == `E203_DECINFO_GRP_BJP) & \n                               ( disp_i_info [`E203_DECINFO_BJP_FENCE] | disp_i_info [`E203_DECINFO_BJP_FENCEI]);   \n\n  // Since any instruction will need to be dispatched to ALU, we dont need the gate here\n  //   wire   disp_i_ready_pos = disp_alu & disp_o_alu_ready;\n  //   assign disp_o_alu_valid = disp_alu & disp_i_valid_pos; \n  wire disp_i_valid_pos; \n  wire   disp_i_ready_pos = disp_o_alu_ready;\n  assign disp_o_alu_valid = disp_i_valid_pos; \n  \n  //////////////////////////////////////////////////////////////\n  // The Dispatch Scheme Introduction for two-pipeline stage\n  //  #1: The instruction after dispatched must have already have operand fetched, so\n  //      there is no any WAR dependency happened.\n  //  #2: The ALU-instruction are dispatched and executed in-order inside ALU, so\n  //      there is no any WAW dependency happened among ALU instructions.\n  //      Note: LSU since its AGU is handled inside ALU, so it is treated as a ALU instruction\n  //  #3: The non-ALU-instruction are all tracked by OITF, and must be write-back in-order, so \n  //      it is like ALU in-ordered. So there is no any WAW dependency happened among\n  //      non-ALU instructions.\n  //  Then what dependency will we have?\n  //  * RAW: This is the real dependency\n  //  * WAW: The WAW between ALU an non-ALU instructions\n  //\n  //  So #1, The dispatching ALU instruction can not proceed and must be stalled when\n  //      ** RAW: The ALU reading operands have data dependency with OITF entries\n  //         *** Note: since it is 2 pipeline stage, any last ALU instruction have already\n  //             write-back into the regfile. So there is no chance for ALU instr to depend \n  //             on last ALU instructions as RAW. \n  //             Note: if it is 3 pipeline stages, then we also need to consider the ALU-to-ALU \n  //                   RAW dependency.\n  //      ** WAW: The ALU writing result have no any data dependency with OITF entries\n  //           Note: Since the ALU instruction handled by ALU may surpass non-ALU OITF instructions\n  //                 so we must check this.\n  //  And #2, The dispatching non-ALU instruction can not proceed and must be stalled when\n  //      ** RAW: The non-ALU reading operands have data dependency with OITF entries\n  //         *** Note: since it is 2 pipeline stage, any last ALU instruction have already\n  //             write-back into the regfile. So there is no chance for non-ALU instr to depend \n  //             on last ALU instructions as RAW. \n  //             Note: if it is 3 pipeline stages, then we also need to consider the non-ALU-to-ALU \n  //                   RAW dependency.\n\n  wire raw_dep =  ((oitfrd_match_disprs1) |\n                   (oitfrd_match_disprs2) |\n                   (oitfrd_match_disprs3)); \n               // Only check the longp instructions (non-ALU) for WAW, here if we \n               //   use the precise version (disp_alu_longp_real), it will hurt timing very much, but\n               //   if we use imprecise version of disp_alu_longp_prdt, it is kind of tricky and in \n               //   some corner case. For example, the AGU (treated as longp) will actually not dispatch\n               //   to longp but just directly commited, then it become a normal ALU instruction, and should\n               //   check the WAW dependency, but this only happened when it is AMO or unaligned-uop, so\n               //   ideally we dont need to worry about it, because\n               //     * We dont support AMO in 2 stage CPU here\n               //     * We dont support Unalign load-store in 2 stage CPU here, which \n               //         will be triggered as exception, so will not really write-back\n               //         into regfile\n               //     * But it depends on some assumption, so it is still risky if in the future something changed.\n               // Nevertheless: using this condition only waiver the longpipe WAW case, that is, two\n               //   longp instruction write-back same reg back2back. Is it possible or is it common? \n               //   after we checking the benmark result we found if we remove this complexity here \n               //   it just does not change any benchmark number, so just remove that condition out. Means\n               //   all of the instructions will check waw_dep\n  //wire alu_waw_dep = (~disp_alu_longp_prdt) & (oitfrd_match_disprd & disp_i_rdwen); \n  wire waw_dep = (oitfrd_match_disprd); \n\n  wire dep = raw_dep | waw_dep;\n\n  // The WFI halt exu ack will be asserted when the OITF is empty\n  //    and also there is no AMO oustanding uops \n  assign wfi_halt_exu_ack = oitf_empty & (~amo_wait);\n\n  wire disp_condition = \n                 // To be more conservtive, any accessing CSR instruction need to wait the oitf to be empty.\n                 // Theoretically speaking, it should also flush pipeline after the CSR have been updated\n                 //  to make sure the subsequent instruction get correct CSR values, but in our 2-pipeline stage\n                 //  implementation, CSR is updated after EXU stage, and subsequent are all executed at EXU stage,\n                 //  no chance to got wrong CSR values, so we dont need to worry about this.\n                 (disp_csr ? oitf_empty : 1'b1)\n                 // To handle the Fence: just stall dispatch until the OITF is empty\n               & (disp_fence_fencei ? oitf_empty : 1'b1)\n                 // If it was a WFI instruction commited halt req, then it will stall the disaptch\n               & (~wfi_halt_exu_req)   \n                 // No dependency\n               & (~dep)   \n               ////  // If dispatch to ALU as long pipeline, then must check\n               ////  //   the OITF is ready\n               //// & ((disp_alu & disp_o_alu_longpipe) ? disp_oitf_ready : 1'b1);\n               // To cut the critical timing  path from longpipe signal\n               // we always assume the LSU will need oitf ready\n               & (disp_alu_longp_prdt ? disp_oitf_ready : 1'b1);\n\n  assign disp_i_valid_pos = disp_condition & disp_i_valid; \n  assign disp_i_ready     = disp_condition & disp_i_ready_pos; \n\n\n  wire [`E203_XLEN-1:0] disp_i_rs1_msked = disp_i_rs1 & {`E203_XLEN{~disp_i_rs1x0}};\n  wire [`E203_XLEN-1:0] disp_i_rs2_msked = disp_i_rs2 & {`E203_XLEN{~disp_i_rs2x0}};\n    // Since we always dispatch any instructions into ALU, so we dont need to gate ops here\n  //assign disp_o_alu_rs1   = {`E203_XLEN{disp_alu}} & disp_i_rs1_msked;\n  //assign disp_o_alu_rs2   = {`E203_XLEN{disp_alu}} & disp_i_rs2_msked;\n  //assign disp_o_alu_rdwen = disp_alu & disp_i_rdwen;\n  //assign disp_o_alu_rdidx = {`E203_RFIDX_WIDTH{disp_alu}} & disp_i_rdidx;\n  //assign disp_o_alu_info  = {`E203_DECINFO_WIDTH{disp_alu}} & disp_i_info;  \n  assign disp_o_alu_rs1   = disp_i_rs1_msked;\n  assign disp_o_alu_rs2   = disp_i_rs2_msked;\n  assign disp_o_alu_rdwen = disp_i_rdwen;\n  assign disp_o_alu_rdidx = disp_i_rdidx;\n  assign disp_o_alu_info  = disp_i_info;  \n  \n    // Why we use precise version of disp_longp here, because\n    //   only when it is really dispatched as long pipe then allocate the OITF\n  assign disp_oitf_ena = disp_o_alu_valid & disp_o_alu_ready & disp_alu_longp_real;\n\n  assign disp_o_alu_imm  = disp_i_imm;\n  assign disp_o_alu_pc   = disp_i_pc;\n  assign disp_o_alu_itag = disp_oitf_ptr;\n  assign disp_o_alu_misalgn= disp_i_misalgn;\n  assign disp_o_alu_buserr = disp_i_buserr ;\n  assign disp_o_alu_ilegl  = disp_i_ilegl  ;\n\n\n\n  `ifndef E203_HAS_FPU//{\n  wire disp_i_fpu       = 1'b0;\n  wire disp_i_fpu_rs1en = 1'b0;\n  wire disp_i_fpu_rs2en = 1'b0;\n  wire disp_i_fpu_rs3en = 1'b0;\n  wire disp_i_fpu_rdwen = 1'b0;\n  wire [`E203_RFIDX_WIDTH-1:0] disp_i_fpu_rs1idx = `E203_RFIDX_WIDTH'b0;\n  wire [`E203_RFIDX_WIDTH-1:0] disp_i_fpu_rs2idx = `E203_RFIDX_WIDTH'b0;\n  wire [`E203_RFIDX_WIDTH-1:0] disp_i_fpu_rs3idx = `E203_RFIDX_WIDTH'b0;\n  wire [`E203_RFIDX_WIDTH-1:0] disp_i_fpu_rdidx  = `E203_RFIDX_WIDTH'b0;\n  wire disp_i_fpu_rs1fpu = 1'b0;\n  wire disp_i_fpu_rs2fpu = 1'b0;\n  wire disp_i_fpu_rs3fpu = 1'b0;\n  wire disp_i_fpu_rdfpu  = 1'b0;\n  `endif//}\n  assign disp_oitf_rs1fpu = disp_i_fpu ? (disp_i_fpu_rs1en & disp_i_fpu_rs1fpu) : 1'b0;\n  assign disp_oitf_rs2fpu = disp_i_fpu ? (disp_i_fpu_rs2en & disp_i_fpu_rs2fpu) : 1'b0;\n  assign disp_oitf_rs3fpu = disp_i_fpu ? (disp_i_fpu_rs3en & disp_i_fpu_rs3fpu) : 1'b0;\n  assign disp_oitf_rdfpu  = disp_i_fpu ? (disp_i_fpu_rdwen & disp_i_fpu_rdfpu ) : 1'b0;\n\n  assign disp_oitf_rs1en  = disp_i_fpu ? disp_i_fpu_rs1en : disp_i_rs1en;\n  assign disp_oitf_rs2en  = disp_i_fpu ? disp_i_fpu_rs2en : disp_i_rs2en;\n  assign disp_oitf_rs3en  = disp_i_fpu ? disp_i_fpu_rs3en : 1'b0;\n  assign disp_oitf_rdwen  = disp_i_fpu ? disp_i_fpu_rdwen : disp_i_rdwen;\n\n  assign disp_oitf_rs1idx = disp_i_fpu ? disp_i_fpu_rs1idx : disp_i_rs1idx;\n  assign disp_oitf_rs2idx = disp_i_fpu ? disp_i_fpu_rs2idx : disp_i_rs2idx;\n  assign disp_oitf_rs3idx = disp_i_fpu ? disp_i_fpu_rs3idx : `E203_RFIDX_WIDTH'b0;\n  assign disp_oitf_rdidx  = disp_i_fpu ? disp_i_fpu_rdidx  : disp_i_rdidx;\n\n  assign disp_oitf_pc  = disp_i_pc;\n\nendmodule                                      \n                                               \n                                               \n                                               \n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n// Designer   : Bob Hu\n//\n// Description:\n//  The module to handle the different exceptions\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\n\nmodule e203_exu_excp(\n  output  commit_trap,\n  output  core_wfi,\n  output  wfi_halt_ifu_req,\n  output  wfi_halt_exu_req,\n  input   wfi_halt_ifu_ack,\n  input   wfi_halt_exu_ack,\n\n  input   amo_wait,\n\n  output  alu_excp_i_ready,\n  input   alu_excp_i_valid       ,\n  input   alu_excp_i_ld          ,\n  input   alu_excp_i_stamo       ,\n  input   alu_excp_i_misalgn     ,\n  input   alu_excp_i_buserr ,\n  input   alu_excp_i_ecall ,\n  input   alu_excp_i_ebreak ,\n  input   alu_excp_i_wfi ,\n  input   alu_excp_i_ifu_misalgn ,\n  input   alu_excp_i_ifu_buserr ,\n  input   alu_excp_i_ifu_ilegl ,\n  input   [`E203_ADDR_SIZE-1:0] alu_excp_i_badaddr,\n  input   [`E203_PC_SIZE-1:0] alu_excp_i_pc,\n  input   [`E203_INSTR_SIZE-1:0] alu_excp_i_instr,\n  input   alu_excp_i_pc_vld,\n  \n  output  longp_excp_i_ready,\n  input   longp_excp_i_valid,\n  input   longp_excp_i_ld,\n  input   longp_excp_i_st,// 1: load, 0: store\n  input   longp_excp_i_buserr , // The load/store bus-error exception generated\n  input   longp_excp_i_insterr, \n  input   [`E203_ADDR_SIZE-1:0] longp_excp_i_badaddr,\n  input   [`E203_PC_SIZE-1:0] longp_excp_i_pc,\n\n  input   excpirq_flush_ack,\n  output  excpirq_flush_req,\n  output  nonalu_excpirq_flush_req_raw,\n  output  [`E203_PC_SIZE-1:0] excpirq_flush_add_op1,  \n  output  [`E203_PC_SIZE-1:0] excpirq_flush_add_op2,  \n  `ifdef E203_TIMING_BOOST//}\n  output  [`E203_PC_SIZE-1:0] excpirq_flush_pc,  \n  `endif//}\n\n  input   [`E203_XLEN-1:0] csr_mtvec_r,\n  input   cmt_dret_ena,\n  input   cmt_ena,\n\n  output  [`E203_ADDR_SIZE-1:0] cmt_badaddr,\n  output  [`E203_PC_SIZE-1:0] cmt_epc,\n  output  [`E203_XLEN-1:0] cmt_cause,\n  output  cmt_badaddr_ena,\n  output  cmt_epc_ena,\n  output  cmt_cause_ena,\n  output  cmt_status_ena,\n\n  output  [`E203_PC_SIZE-1:0] cmt_dpc,\n  output  cmt_dpc_ena,\n  output  [3-1:0] cmt_dcause,\n  output  cmt_dcause_ena,\n\n\n  input   dbg_irq_r,\n  input   [`E203_LIRQ_NUM-1:0] lcl_irq_r,\n  input   ext_irq_r,\n  input   sft_irq_r,\n  input   tmr_irq_r,\n\n  input   status_mie_r,\n  input   mtie_r,\n  input   msie_r,\n  input   meie_r,\n\n  input   dbg_mode,\n  input   dbg_halt_r,\n  input   dbg_step_r,\n  input   dbg_ebreakm_r,\n\n\n  input   oitf_empty,\n\n  input   u_mode,\n  input   s_mode,\n  input   h_mode,\n  input   m_mode,\n\n  output  excp_active,\n\n  input   clk,\n  input   rst_n\n  );\n\n  ////////////////////////////////////////////////////////////////////////////\n  // Because the core's clock may be gated when it is idle, we need to check\n  //  if the interrupts is coming, and generate an active indication, and use\n  //  this active signal to turn on core's clock\n  wire irq_req_active;\n  wire nonalu_dbg_entry_req_raw;\n\n  assign excp_active = irq_req_active | nonalu_dbg_entry_req_raw;\n\n\n  ////////////////////////////////////////////////////////////////////////////\n  // WFI flag generation\n  //\n  wire wfi_req_hsked = (wfi_halt_ifu_req & wfi_halt_ifu_ack & wfi_halt_exu_req & wfi_halt_exu_ack)\n                          ;\n     // The wfi_flag will be set if there is a new WFI instruction halt req handshaked\n  wire wfi_flag_set = wfi_req_hsked;\n     // The wfi_flag will be cleared if there is interrupt pending, or debug entry request\n  wire wfi_irq_req;\n  wire dbg_entry_req;\n  wire wfi_flag_r;\n  wire wfi_flag_clr = (wfi_irq_req | dbg_entry_req);// & wfi_flag_r;// Here we cannot use this flag_r\n  wire wfi_flag_ena = wfi_flag_set | wfi_flag_clr;\n     // If meanwhile set and clear, then clear preempt\n  wire wfi_flag_nxt = wfi_flag_set & (~wfi_flag_clr);\n  sirv_gnrl_dfflr #(1) wfi_flag_dfflr (wfi_flag_ena, wfi_flag_nxt, wfi_flag_r, clk, rst_n);\n  assign core_wfi = wfi_flag_r & (~wfi_flag_clr);\n\n     // The wfi_halt_req will be set if there is a new WFI instruction committed\n           // And note in debug mode WFI is treated as nop\n  wire wfi_cmt_ena = alu_excp_i_wfi & cmt_ena;\n  wire wfi_halt_req_set = wfi_cmt_ena & (~dbg_mode);\n     // The wfi_halt_req will be cleared same as wfi_flag_r\n  wire wfi_halt_req_clr = wfi_flag_clr;\n  wire wfi_halt_req_ena = wfi_halt_req_set | wfi_halt_req_clr;\n     // If meanwhile set and clear, then clear preempt\n  wire wfi_halt_req_nxt = wfi_halt_req_set & (~wfi_halt_req_clr);\n  wire wfi_halt_req_r;\n  sirv_gnrl_dfflr #(1) wfi_halt_req_dfflr (wfi_halt_req_ena, wfi_halt_req_nxt, wfi_halt_req_r, clk, rst_n);\n    // In order to make sure the flush to IFU and halt to IFU is not asserte at same cycle\n    //   we use the clr signal here to qualify it\n  assign wfi_halt_ifu_req = (wfi_halt_req_r & (~wfi_halt_req_clr))\n                            ;\n    // To cut the comb loops, we dont use the clr signal here to qualify, \n    //   the outcome is the halt-to-exu will be deasserted 1 cycle later than to-IFU\n    //   but it doesnt matter much.\n  assign wfi_halt_exu_req = wfi_halt_req_r \n                            ;\n\n\n\n\n\n  wire irq_req;\n  wire longp_need_flush;\n  wire alu_need_flush;\n  wire dbg_ebrk_req;\n  wire dbg_trig_req;\n\n  ////////////////////////////////////////////////////////////////////////////\n  // The Exception generate included several cases, priority from top to down\n  //   *** Long-pipe triggered exception\n  //       ---- Must wait the PC vld \n  //   *** DebugMode-entry triggered exception (included ALU ebreakm)\n  //       ---- Must wait the OITF empty and PC vld \n  //   *** IRQ triggered exception\n  //       ---- Must wait the OITF empty and PC vld \n  //   *** ALU triggered exception (excluded the ebreakm into debug-mode)  \n  //       ---- Must wait the OITF empty \n  \n  // Exclude the pc_vld for longp, to just always make sure the longp can always accepted\n  wire longp_excp_flush_req = longp_need_flush ;\n  assign longp_excp_i_ready = excpirq_flush_ack;\n\n  //   ^^^ Below we qualified the pc_vld signal to IRQ and Debug-entry req, why? \n  //       -- The Asyn-precise-excp (include IRQ and Debug-entry exception) \n  //            need to use the next upcoming (not yet commited) instruction's PC\n  //            for the mepc value, so we must wait next valid instruction coming\n  //            and use its PC.\n  //       -- The pc_vld indicate is just used to indicate next instruction's valid\n  //            PC value.\n  //   ^^^ Then the questions are coming, is there a possible that there is no pc_vld\n  //         comes forever? and then this async-precise-exception never\n  //         get served, and then become a deadlock?\n  //       -- It should not be. Becuase:\n  //            The IFU is always actively fetching next instructions, never stop,\n  //            so ideally it will always provide next valid instructions as\n  //            long as the Ifetch-path (bus to external memory or ITCM) is not hang \n  //            (no bus response returned).\n  //            ^^^ Then if there possible the Ifetch-path is hang? For examples:\n  //                  -- The Ifetched external memory does not provide response because of the External IRQ is not\n  //                       accepted by core.\n  //                          ** How could it be? This should not happen, otherwise it is a SoC bug.\n  //\n\n  wire dbg_entry_flush_req  = dbg_entry_req & oitf_empty & alu_excp_i_pc_vld & (~longp_need_flush);\n  wire alu_excp_i_ready4dbg = (excpirq_flush_ack & oitf_empty & alu_excp_i_pc_vld & (~longp_need_flush));\n\n  wire irq_flush_req        = irq_req & oitf_empty & alu_excp_i_pc_vld\n                              & (~dbg_entry_req)\n                              & (~longp_need_flush);\n\n  wire alu_excp_flush_req   = alu_excp_i_valid & alu_need_flush & oitf_empty \n                              & (~irq_req)\n                              & (~dbg_entry_req)\n                              & (~longp_need_flush);\n\n  wire nonalu_dbg_entry_req;\n  wire alu_excp_i_ready4nondbg =  alu_need_flush ? \n                                (excpirq_flush_ack & oitf_empty & (~irq_req) & (~nonalu_dbg_entry_req) & (~longp_need_flush))\n                              : (  // The other higher priorty flush will override ALU commit\n                                     (~irq_req)\n                                   & (~nonalu_dbg_entry_req)\n                                   & (~longp_need_flush)\n                                );\n\n  wire alu_ebreakm_flush_req_novld;\n  wire alu_dbgtrig_flush_req_novld; \n  assign alu_excp_i_ready =  (alu_ebreakm_flush_req_novld | alu_dbgtrig_flush_req_novld) ? alu_excp_i_ready4dbg : alu_excp_i_ready4nondbg;\n\n\n\n\n  assign excpirq_flush_req  = longp_excp_flush_req | dbg_entry_flush_req | irq_flush_req | alu_excp_flush_req;\n  wire   all_excp_flush_req = longp_excp_flush_req | alu_excp_flush_req;\n\n  assign nonalu_excpirq_flush_req_raw = \n             longp_need_flush | \n             nonalu_dbg_entry_req_raw |\n             irq_req          ;\n\n\n  wire excpirq_taken_ena = excpirq_flush_req & excpirq_flush_ack;\n  assign commit_trap     = excpirq_taken_ena;\n\n  wire excp_taken_ena      = all_excp_flush_req  & excpirq_taken_ena;\n  wire irq_taken_ena       = irq_flush_req       & excpirq_taken_ena;\n  wire dbg_entry_taken_ena = dbg_entry_flush_req & excpirq_taken_ena;\n\n  assign excpirq_flush_add_op1 = dbg_entry_flush_req ? `E203_PC_SIZE'h800 : (all_excp_flush_req & dbg_mode) ? `E203_PC_SIZE'h808 : csr_mtvec_r;\n  assign excpirq_flush_add_op2 = dbg_entry_flush_req ? `E203_PC_SIZE'h0   : (all_excp_flush_req & dbg_mode) ? `E203_PC_SIZE'h0   : `E203_PC_SIZE'b0; \n  `ifdef E203_TIMING_BOOST//}\n  assign excpirq_flush_pc = dbg_entry_flush_req ? `E203_PC_SIZE'h800 : (all_excp_flush_req & dbg_mode) ? `E203_PC_SIZE'h808 : csr_mtvec_r;\n  `endif//}\n\n  ////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  // The Long-pipe triggered Exception \n  //                 \n  assign longp_need_flush = longp_excp_i_valid;// The longp come to excp\n                                             //   module always ask for excepiton\n\n  ////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  // The DebugMode-entry triggered Exception \n  //\n\n  wire step_req_r;\n  wire alu_ebreakm_flush_req; \n  wire alu_dbgtrig_flush_req; \n\n  // The priority from top to down\n                              // dbg_trig_req ? 3'd2 : \n                              // dbg_ebrk_req ? 3'd1 : \n                              // dbg_irq_req  ? 3'd3 : \n                              // dbg_step_req ? 3'd4 :\n                              // dbg_halt_req ? 3'd5 : \n        // Since the step_req_r is last cycle generated indicated, means last instruction is single-step\n        //   and it have been commited in non debug-mode, and then this cyclc step_req_r is the of the highest priority\n  wire   dbg_step_req = step_req_r;\n  assign dbg_trig_req = alu_dbgtrig_flush_req & (~step_req_r);\n  assign dbg_ebrk_req = alu_ebreakm_flush_req & (~alu_dbgtrig_flush_req) & (~step_req_r);\n  wire   dbg_irq_req  = dbg_irq_r  & (~alu_ebreakm_flush_req) & (~alu_dbgtrig_flush_req) & (~step_req_r);\n  wire   nonalu_dbg_irq_req  = dbg_irq_r & (~step_req_r);\n        // The step have higher priority, and will preempt the halt\n  wire   dbg_halt_req = dbg_halt_r & (~dbg_irq_r) & (~alu_ebreakm_flush_req) & (~alu_dbgtrig_flush_req) & (~step_req_r) & (~dbg_step_r);\n  wire   nonalu_dbg_halt_req = dbg_halt_r & (~dbg_irq_r) & (~step_req_r) & (~dbg_step_r);\n  \n  // The debug-step request will be set when currently the step_r is high, and one \n  //   instruction (in non debug_mode) have been executed\n  // The step request will be clear when \n  //   core enter into the debug-mode \n  wire step_req_set = (~dbg_mode) & dbg_step_r & cmt_ena & (~dbg_entry_taken_ena);\n  wire step_req_clr = dbg_entry_taken_ena;\n  wire step_req_ena = step_req_set | step_req_clr;\n  wire step_req_nxt = step_req_set | (~step_req_clr);\n  sirv_gnrl_dfflr #(1) step_req_dfflr (step_req_ena, step_req_nxt, step_req_r, clk, rst_n);\n\n      // The debug-mode will mask off the debug-mode-entry\n  wire dbg_entry_mask  = dbg_mode;\n  assign dbg_entry_req = (~dbg_entry_mask) & (\n                  // Why do we put a AMO_wait here, because the AMO instructions \n                  //   is atomic, we must wait it to complete its all atomic operations\n                  //   and during wait cycles irq must be masked, otherwise the irq_req\n                  //   will block ALU commit (including AMO) and cause a deadlock\n                  //   \n                  // Note: Only the async irq and halt and trig need to have this amo_wait to check\n                  //   others are sync event, no need to check with this\n                                              (dbg_irq_req & (~amo_wait))\n                                            | (dbg_halt_req & (~amo_wait))\n                                            | dbg_step_req\n                                            | (dbg_trig_req & (~amo_wait))\n                                            | dbg_ebrk_req\n                                            );\n  assign nonalu_dbg_entry_req = (~dbg_entry_mask) & (\n                                              (nonalu_dbg_irq_req & (~amo_wait))\n                                            | (nonalu_dbg_halt_req & (~amo_wait))\n                                            | dbg_step_req\n                                            //| (dbg_trig_req & (~amo_wait))\n                                            //| dbg_ebrk_req\n                                            );\n  assign nonalu_dbg_entry_req_raw = (~dbg_entry_mask) & (\n                                              dbg_irq_r \n                                            | dbg_halt_r\n                                            | step_req_r\n                                            //| dbg_trig_req\n                                            //| dbg_ebrk_req\n                                            );\n\n  ////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  // The IRQ triggered Exception \n  //\n    // The debug mode will mask off the interrupts\n    // The single-step mode will mask off the interrupts\n  wire irq_mask  = dbg_mode | dbg_step_r | (~status_mie_r) \n                  // Why do we put a AMO_wait here, because the AMO instructions \n                  //   is atomic, we must wait it to complete its all atomic operations\n                  //   and during wait cycles irq must be masked, otherwise the irq_req\n                  //   will block ALU commit (including AMO) and cause a deadlock\n                  // Dont need to worry about the clock gating issue, if amo_wait,\n                  //   then defefinitely the ALU is active, and clock on\n                   | amo_wait;\n  wire wfi_irq_mask  = dbg_mode | dbg_step_r;\n                  // Why dont we put amo_wait here, because this is for IRQ to wake\n                  //   up the core from sleep mode, the core was in sleep mode, then \n                  //   means there is no chance for it to still executing the AMO instructions\n                  //   with oustanding uops, so we dont need to worry about it.\n  wire irq_req_raw   = ( \n                                    //(|lcl_irq_r) // not support this now\n                                    (ext_irq_r & meie_r) \n                                  | (sft_irq_r & msie_r) \n                                  | (tmr_irq_r & mtie_r)\n                                  );\n  assign irq_req     = (~irq_mask) & irq_req_raw;\n  assign wfi_irq_req = (~wfi_irq_mask) & irq_req_raw;\n\n  assign irq_req_active = wfi_flag_r ? wfi_irq_req : irq_req; \n\n  wire [`E203_XLEN-1:0] irq_cause;\n\n  assign irq_cause[31] = 1'b1;\n  assign irq_cause[30:4] = 27'b0;\n  assign irq_cause[3:0]  =  (sft_irq_r & msie_r) ? 4'd3  :  // 3  Machine software interrupt\n                            (tmr_irq_r & mtie_r) ? 4'd7  :  // 7  Machine timer interrupt\n                            (ext_irq_r & meie_r) ? 4'd11 :  // 11 Machine external interrupt\n                                        4'b0;\n\n  ////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  // The ALU triggered Exception \n\n  // The ebreak instruction will generated regular exception when the ebreakm\n  //    bit of DCSR reg is not set\n  wire alu_excp_i_ebreak4excp = (alu_excp_i_ebreak & ((~dbg_ebreakm_r) | dbg_mode))\n                                ;\n  // The ebreak instruction will enter into the debug-mode when the ebreakm\n  //    bit of DCSR reg is set\n  wire alu_excp_i_ebreak4dbg = alu_excp_i_ebreak \n                               & (~alu_need_flush)// override by other alu exceptions\n                               & dbg_ebreakm_r \n                               & (~dbg_mode);//Not in debug mode\n\n  assign alu_ebreakm_flush_req = alu_excp_i_valid & alu_excp_i_ebreak4dbg;\n  assign alu_ebreakm_flush_req_novld = alu_excp_i_ebreak4dbg;\n    `ifndef E203_SUPPORT_TRIGM//{\n    // We dont support the HW Trigger Module yet\n  assign alu_dbgtrig_flush_req_novld = 1'b0;\n  assign alu_dbgtrig_flush_req = 1'b0;\n    `endif\n\n  assign alu_need_flush = \n            ( alu_excp_i_misalgn \n            | alu_excp_i_buserr \n            | alu_excp_i_ebreak4excp\n            | alu_excp_i_ecall\n            | alu_excp_i_ifu_misalgn  \n            | alu_excp_i_ifu_buserr  \n            | alu_excp_i_ifu_ilegl  \n            );\n\n\n  ////////////////////////////////////////////////////////////////////////////\n  ///////"}
{"text": "/////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  ////////////////////////////////////////////////////////////////////////////\n  // Update the CSRs (Mcause, .etc)\n\n  wire longp_excp_flush_req_ld = longp_excp_flush_req & longp_excp_i_ld;\n  wire longp_excp_flush_req_st = longp_excp_flush_req & longp_excp_i_st;\n\n  wire longp_excp_flush_req_insterr = longp_excp_flush_req & longp_excp_i_insterr;\n\n  wire alu_excp_flush_req_ld    = alu_excp_flush_req & alu_excp_i_ld;\n  wire alu_excp_flush_req_stamo = alu_excp_flush_req & alu_excp_i_stamo;\n\n  wire alu_excp_flush_req_ebreak      = (alu_excp_flush_req & alu_excp_i_ebreak4excp);\n  wire alu_excp_flush_req_ecall       = (alu_excp_flush_req & alu_excp_i_ecall);\n  wire alu_excp_flush_req_ifu_misalgn = (alu_excp_flush_req & alu_excp_i_ifu_misalgn);\n  wire alu_excp_flush_req_ifu_buserr  = (alu_excp_flush_req & alu_excp_i_ifu_buserr);\n  wire alu_excp_flush_req_ifu_ilegl   = (alu_excp_flush_req & alu_excp_i_ifu_ilegl);\n\n  wire alu_excp_flush_req_ld_misalgn    = (alu_excp_flush_req_ld    & alu_excp_i_misalgn);// ALU load misalign\n  wire alu_excp_flush_req_ld_buserr     = (alu_excp_flush_req_ld    & alu_excp_i_buserr);// ALU load bus error\n  wire alu_excp_flush_req_stamo_misalgn = (alu_excp_flush_req_stamo & alu_excp_i_misalgn);// ALU store/AMO misalign\n  wire alu_excp_flush_req_stamo_buserr  = (alu_excp_flush_req_stamo & alu_excp_i_buserr);// ALU store/AMO bus error\n  wire longp_excp_flush_req_ld_buserr   = (longp_excp_flush_req_ld  & longp_excp_i_buserr);// Longpipe load bus error\n  wire longp_excp_flush_req_st_buserr   = (longp_excp_flush_req_st  & longp_excp_i_buserr);// Longpipe store bus error\n\n  wire excp_flush_by_alu_agu = \n                     alu_excp_flush_req_ld_misalgn    \n                   | alu_excp_flush_req_ld_buserr     \n                   | alu_excp_flush_req_stamo_misalgn \n                   | alu_excp_flush_req_stamo_buserr;\n\n  wire excp_flush_by_longp_ldst = \n                     longp_excp_flush_req_ld_buserr   \n                   | longp_excp_flush_req_st_buserr;\n\n\n  wire [`E203_XLEN-1:0] excp_cause;\n  assign excp_cause[31:5] = 27'b0;\n  assign excp_cause[4:0]  = \n      alu_excp_flush_req_ifu_misalgn? 5'd0 //Instruction address misaligned\n    : alu_excp_flush_req_ifu_buserr ? 5'd1 //Instruction access fault\n    : alu_excp_flush_req_ifu_ilegl  ? 5'd2 //Illegal instruction\n    : alu_excp_flush_req_ebreak     ? 5'd3 //Breakpoint\n    : alu_excp_flush_req_ld_misalgn ? 5'd4 //load address misalign\n    : (longp_excp_flush_req_ld_buserr | alu_excp_flush_req_ld_buserr) ? 5'd5 //load access fault\n    : alu_excp_flush_req_stamo_misalgn ? 5'd6 //Store/AMO address misalign\n    : (longp_excp_flush_req_st_buserr | alu_excp_flush_req_stamo_buserr) ? 5'd7 //Store/AMO access fault\n    : (alu_excp_flush_req_ecall & u_mode) ? 5'd8 //Environment call from U-mode\n    : (alu_excp_flush_req_ecall & s_mode) ? 5'd9 //Environment call from S-mode\n    : (alu_excp_flush_req_ecall & h_mode) ? 5'd10 //Environment call from H-mode\n    : (alu_excp_flush_req_ecall & m_mode) ? 5'd11 //Environment call from M-mode\n    : longp_excp_flush_req_insterr ? 5'd16// This only happened for the EAI long instructions actually  \n    : 5'h1F;//Otherwise a reserved value\n\n  // mbadaddr is an XLEN-bit read-write register formatted as shown in Figure 3.21. When \n  //    * a hardware breakpoint is triggered,\n  //    * an instruction-fetch address-misaligned or access exception\n  //    * load  address-misaligned or access exception\n  //    * store address-misaligned or access exception\n  //   occurs, mbadaddr is written with the faulting address. \n  // In Priv SPEC v1.10, the mbadaddr have been replaced to mtval, and added following points:\n  //    * On an illegal instruction trap, mtval is written with the first XLEN bits of the faulting \n  //        instruction . \n  //    * For other exceptions, mtval is set to zero, but a future standard may redefine mtval's\n  //        setting for other exceptions.\n  //\n  wire excp_flush_req_ld_misalgn = alu_excp_flush_req_ld_misalgn;\n  wire excp_flush_req_ld_buserr  = alu_excp_flush_req_ld_buserr | longp_excp_flush_req_ld_buserr;\n    \n  //wire cmt_badaddr_update = all_excp_flush_req & \n  //          (  \n  //            alu_excp_flush_req_ebreak      \n  //          | alu_excp_flush_req_ifu_misalgn \n  //          | alu_excp_flush_req_ifu_buserr  \n  //          | excp_flush_by_alu_agu \n  //          | excp_flush_by_longp_ldst);\n            // Per Priv Spec v1.10, all trap need to update this register\n            //  * When a trap is taken into M-mode, mtval is written with exception-specific\n            //     information to assist software in handling the trap.\n  wire cmt_badaddr_update = excpirq_flush_req;\n\n  assign cmt_badaddr = excp_flush_by_longp_ldst ? longp_excp_i_badaddr :\n                       excp_flush_by_alu_agu    ? alu_excp_i_badaddr :\n                       (alu_excp_flush_req_ebreak      \n                        | alu_excp_flush_req_ifu_misalgn \n                        | alu_excp_flush_req_ifu_buserr) ? alu_excp_i_pc :\n                       alu_excp_flush_req_ifu_ilegl ? alu_excp_i_instr :\n                            `E203_ADDR_SIZE'b0;\n\n  // We use the exact PC of long-instruction when exception happened, but \n  //   to note since the later instruction may already commited, so long-pipe\n  //   excpetion is async-imprecise exceptions\n  assign cmt_epc = longp_excp_i_valid ? longp_excp_i_pc : alu_excp_i_pc;\n\n  assign cmt_cause = excp_taken_ena ? excp_cause : irq_cause;\n\n     // Any trap include exception and irq (exclude dbg_irq) will update mstatus register\n            // In the debug mode, epc/cause/status/badaddr will not update badaddr\n  assign cmt_epc_ena     = (~dbg_mode) & (excp_taken_ena | irq_taken_ena);\n  assign cmt_cause_ena   = cmt_epc_ena;\n  assign cmt_status_ena  = cmt_epc_ena;\n  assign cmt_badaddr_ena = cmt_epc_ena & cmt_badaddr_update;\n\n  assign cmt_dpc = alu_excp_i_pc;// The ALU PC is the current next commiting PC (not yet commited)\n  assign cmt_dpc_ena = dbg_entry_taken_ena;\n\n  wire cmt_dcause_set = dbg_entry_taken_ena;\n  wire cmt_dcause_clr = cmt_dret_ena;\n  wire [2:0] set_dcause_nxt = \n                              dbg_trig_req ? 3'd2 : \n                              dbg_ebrk_req ? 3'd1 : \n                              dbg_irq_req  ? 3'd3 : \n                              dbg_step_req ? 3'd4 :\n                              dbg_halt_req ? 3'd5 : \n                                             3'd0;\n\n  assign cmt_dcause_ena = cmt_dcause_set | cmt_dcause_clr;\n  assign cmt_dcause = cmt_dcause_set ? set_dcause_nxt : 3'd0;\n\nendmodule                                      \n                                               \n                                               \n                                               \n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n// Designer   : Bob Hu\n//\n// Description:\n//  The Write-Back module to arbitrate the write-back request from all \n//  long pipe modules\n//\n// ====================================================================\n\n`include \"e203_defines.v\"\n\nmodule e203_exu_longpwbck(\n\n\n\n\n  //////////////////////////////////////////////////////////////\n  // The LSU Write-Back Interface\n  input  lsu_wbck_i_valid, // Handshake valid\n  output lsu_wbck_i_ready, // Handshake ready\n  input  [`E203_XLEN-1:0] lsu_wbck_i_wdat,\n  input  [`E203_ITAG_WIDTH -1:0] lsu_wbck_i_itag,\n  input  lsu_wbck_i_err , // The error exception generated\n  input  lsu_cmt_i_buserr ,\n  input  [`E203_ADDR_SIZE -1:0] lsu_cmt_i_badaddr,\n  input  lsu_cmt_i_ld, \n  input  lsu_cmt_i_st, \n\n  //////////////////////////////////////////////////////////////\n  // The Long pipe instruction Wback interface to final wbck module\n  output longp_wbck_o_valid, // Handshake valid\n  input  longp_wbck_o_ready, // Handshake ready\n  output [`E203_FLEN-1:0] longp_wbck_o_wdat,\n  output [5-1:0] longp_wbck_o_flags,\n  output [`E203_RFIDX_WIDTH -1:0] longp_wbck_o_rdidx,\n  output longp_wbck_o_rdfpu,\n  //\n  // The Long pipe instruction Exception interface to commit stage\n  output  longp_excp_o_valid,\n  input   longp_excp_o_ready,\n  output  longp_excp_o_insterr,\n  output  longp_excp_o_ld,\n  output  longp_excp_o_st,\n  output  longp_excp_o_buserr , // The load/store bus-error exception generated\n  output [`E203_ADDR_SIZE-1:0] longp_excp_o_badaddr,\n  output [`E203_PC_SIZE -1:0] longp_excp_o_pc,\n  //\n  //The itag of toppest entry of OITF\n  input  oitf_empty,\n  input  [`E203_ITAG_WIDTH -1:0] oitf_ret_ptr,\n  input  [`E203_RFIDX_WIDTH-1:0] oitf_ret_rdidx,\n  input  [`E203_PC_SIZE-1:0] oitf_ret_pc,\n  input  oitf_ret_rdwen,   \n  input  oitf_ret_rdfpu,   \n  output oitf_ret_ena,\n  \n  input  clk,\n  input  rst_n\n  );\n\n\n  // The Long-pipe instruction can write-back only when it's itag \n  //   is same as the itag of toppest entry of OITF\n  wire wbck_ready4lsu = (lsu_wbck_i_itag == oitf_ret_ptr) & (~oitf_empty);\n  wire wbck_sel_lsu = lsu_wbck_i_valid & wbck_ready4lsu;\n\n  //assign longp_excp_o_ld   = wbck_sel_lsu & lsu_cmt_i_ld;\n  //assign longp_excp_o_st   = wbck_sel_lsu & lsu_cmt_i_st;\n  //assign longp_excp_o_buserr = wbck_sel_lsu & lsu_cmt_i_buserr;\n  //assign longp_excp_o_badaddr = wbck_sel_lsu ? lsu_cmt_i_badaddr : `E203_ADDR_SIZE'b0;\n\n  assign {\n         longp_excp_o_insterr\n        ,longp_excp_o_ld   \n        ,longp_excp_o_st  \n        ,longp_excp_o_buserr\n        ,longp_excp_o_badaddr } = \n             ({`E203_ADDR_SIZE+4{wbck_sel_lsu}} & \n              {\n                1'b0,\n                lsu_cmt_i_ld,\n                lsu_cmt_i_st,\n                lsu_cmt_i_buserr,\n                lsu_cmt_i_badaddr\n              }) \n              ;\n\n  //////////////////////////////////////////////////////////////\n  // The Final arbitrated Write-Back Interface\n  wire wbck_i_ready;\n  wire wbck_i_valid;\n  wire [`E203_FLEN-1:0] wbck_i_wdat;\n  wire [5-1:0] wbck_i_flags;\n  wire [`E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire [`E203_PC_SIZE-1:0] wbck_i_pc;\n  wire wbck_i_rdwen;\n  wire wbck_i_rdfpu;\n  wire wbck_i_err ;\n\n  assign lsu_wbck_i_ready = wbck_ready4lsu & wbck_i_ready;\n\n  assign wbck_i_valid = ({1{wbck_sel_lsu}} & lsu_wbck_i_valid) \n                         ;\n  `ifdef E203_FLEN_IS_32 //{\n  wire [`E203_FLEN-1:0] lsu_wbck_i_wdat_exd = lsu_wbck_i_wdat;\n  `else//}{\n  wire [`E203_FLEN-1:0] lsu_wbck_i_wdat_exd = {{`E203_FLEN-`E203_XLEN{1'b0}},lsu_wbck_i_wdat};\n  `endif//}\n  assign wbck_i_wdat  = ({`E203_FLEN{wbck_sel_lsu}} & lsu_wbck_i_wdat_exd ) \n                         ;\n  assign wbck_i_flags  = 5'b0\n                         ;\n  assign wbck_i_err   = wbck_sel_lsu & lsu_wbck_i_err \n                         ;\n  assign wbck_i_pc    = oitf_ret_pc;\n  assign wbck_i_rdidx = oitf_ret_rdidx;\n  assign wbck_i_rdwen = oitf_ret_rdwen;\n  assign wbck_i_rdfpu = oitf_ret_rdfpu;\n\n  // If the instruction have no error and it have the rdwen, then it need to \n  //   write back into regfile, otherwise, it does not need to write regfile\n  wire need_wbck = wbck_i_rdwen & (~wbck_i_err);\n\n  // If the long pipe instruction have error result, then it need to handshake\n  //   with the commit module.\n  wire need_excp = wbck_i_err;\n\n  assign wbck_i_ready = \n       (need_wbck ? longp_wbck_o_ready : 1'b1)\n     & (need_excp ? longp_excp_o_ready : 1'b1);\n\n\n  assign longp_wbck_o_valid = need_wbck & wbck_i_valid & (need_excp ? longp_excp_o_ready : 1'b1);\n  assign longp_excp_o_valid = need_excp & wbck_i_valid & (need_wbck ? longp_wbck_o_ready : 1'b1);\n\n  assign longp_wbck_o_wdat  = wbck_i_wdat ;\n  assign longp_wbck_o_flags = wbck_i_flags ;\n  assign longp_wbck_o_rdfpu = wbck_i_rdfpu ;\n  assign longp_wbck_o_rdidx = wbck_i_rdidx;\n\n  assign longp_excp_o_pc    = wbck_i_pc;\n\n  assign oitf_ret_ena = wbck_i_valid & wbck_i_ready;\n\nendmodule                                      \n                                               \n                                               \n                                               \n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n// Designer   : Bob Hu\n//\n// Description:\n//  The OITF (Oustanding Instructions Track FIFO) to hold all the non-ALU long\n//  pipeline instruction's status and information\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_exu_oitf (\n  output dis_ready,\n\n  input  dis_ena,\n  input  ret_ena,\n\n  output [`E203_ITAG_WIDTH-1:0] dis_ptr,\n  output [`E203_ITAG_WIDTH-1:0] ret_ptr,\n\n  output [`E203_RFIDX_WIDTH-1:0] ret_rdidx,\n  output ret_rdwen,\n  output ret_rdfpu,\n  output [`E203_PC_SIZE-1:0] ret_pc,\n\n  input  disp_i_rs1en,\n  input  disp_i_rs2en,\n  input  disp_i_rs3en,\n  input  disp_i_rdwen,\n  input  disp_i_rs1fpu,\n  input  disp_i_rs2fpu,\n  input  disp_i_rs3fpu,\n  input  disp_i_rdfpu,\n  input  [`E203_RFIDX_WIDTH-1:0] disp_i_rs1idx,\n  input  [`E203_RFIDX_WIDTH-1:0] disp_i_rs2idx,\n  input  [`E203_RFIDX_WIDTH-1:0] disp_i_rs3idx,\n  input  [`E203_RFIDX_WIDTH-1:0] disp_i_rdidx,\n  input  [`E203_PC_SIZE    -1:0] disp_i_pc,\n\n  output oitfrd_match_disprs1,\n  output oitfrd_match_disprs2,\n  output oitfrd_match_disprs3,\n  output oitfrd_match_disprd,\n\n  output oitf_empty,\n  input  clk,\n  input  rst_n\n);\n\n  wire [`E203_OITF_DEPTH-1:0] vld_set;\n  wire [`E203_OITF_DEPTH-1:0] vld_clr;\n  wire [`E203_OITF_DEPTH-1:0] vld_ena;\n  wire [`E203_OITF_DEPTH-1:0] vld_nxt;\n  wire [`E203_OITF_DEPTH-1:0] vld_r;\n  wire [`E203_OITF_DEPTH-1:0] rdwen_r;\n  wire [`E203_OITF_DEPTH-1:0] rdfpu_r;\n  wire [`E203_RFIDX_WIDTH-1:0] rdidx_r[`E203_OITF_DEPTH-1:0];\n  // The PC here is to be used at wback stage to track out the\n  //  PC of exception of long-pipe instruction\n  wire [`E203_PC_SIZE-1:0] pc_r[`E203_OITF_DEPTH-1:0];\n\n  wire alc_ptr_ena = dis_ena;\n  wire ret_ptr_ena = ret_ena;\n\n  wire oitf_full ;\n  \n  wire [`E203_ITAG_WIDTH-1:0] alc_ptr_r;\n  wire [`E203_ITAG_WIDTH-1:0] ret_ptr_r;\n\n  generate\n  if(`E203_OITF_DEPTH > 1) begin: depth_gt1//{\n      wire alc_ptr_flg_r;\n      wire alc_ptr_flg_nxt = ~alc_ptr_flg_r;\n      wire alc_ptr_flg_ena = (alc_ptr_r == ($unsigned(`E203_OITF_DEPTH-1))) & alc_ptr_ena;\n      \n      sirv_gnrl_dfflr #(1) alc_ptr_flg_dfflrs(alc_ptr_flg_ena, alc_ptr_flg_nxt, alc_ptr_flg_r, clk, rst_n);\n      \n      wire [`E203_ITAG_WIDTH-1:0] alc_ptr_nxt; \n      \n      assign alc_ptr_nxt = alc_ptr_flg_ena ? `E203_ITAG_WIDTH'b0 : (alc_ptr_r + 1'b1);\n      \n      sirv_gnrl_dfflr #(`E203_ITAG_WIDTH) alc_ptr_dfflrs(alc_ptr_ena, alc_ptr_nxt, alc_ptr_r, clk, rst_n);\n      \n      \n      wire ret_ptr_flg_r;\n      wire ret_ptr_flg_nxt = ~ret_ptr_flg_r;\n      wire ret_ptr_flg_ena = (ret_ptr_r == ($unsigned(`E203_OITF_DEPTH-1))) & ret_ptr_ena;\n      \n      sirv_gnrl_dfflr #(1) ret_ptr_flg_dfflrs(ret_ptr_flg_ena, ret_ptr_flg_nxt, ret_ptr_flg_r, clk, rst_n);\n      \n      wire [`E203_ITAG_WIDTH-1:0] ret_ptr_nxt; \n      \n      assign ret_ptr_nxt = ret_ptr_flg_ena ? `E203_ITAG_WIDTH'b0 : (ret_ptr_r + 1'b1);\n\n      sirv_gnrl_dfflr #(`E203_ITAG_WIDTH) ret_ptr_dfflrs(ret_ptr_ena, ret_ptr_nxt, ret_ptr_r, clk, rst_n);\n\n      assign oitf_empty = (ret_ptr_r == alc_ptr_r) &   (ret_ptr_flg_r == alc_ptr_flg_r);\n      assign oitf_full  = (ret_ptr_r == alc_ptr_r) & (~(ret_ptr_flg_r == alc_ptr_flg_r));\n  end//}\n  else begin: depth_eq1//}{\n      assign alc_ptr_r =1'b0;\n      assign ret_ptr_r =1'b0;\n      assign oitf_empty = ~vld_r[0];\n      assign oitf_full  = vld_r[0];\n  end//}\n  endgenerate//}\n\n  assign ret_ptr = ret_ptr_r;\n  assign dis_ptr = alc_ptr_r;\n\n //// \n //// // If the OITF is not full, or it is under retiring, then it is ready to accept new dispatch\n //// assign dis_ready = (~oitf_full) | ret_ena;\n // To cut down the loop between ALU write-back valid --> oitf_ret_ena --> oitf_ready ---> dispatch_ready --- > alu_i_valid\n //   we exclude the ret_ena from the ready signal\n assign dis_ready = (~oitf_full);\n  \n  wire [`E203_OITF_DEPTH-1:0] rd_match_rs1idx;\n  wire [`E203_OITF_DEPTH-1:0] rd_match_rs2idx;\n  wire [`E203_OITF_DEPTH-1:0] rd_match_rs3idx;\n  wire [`E203_OITF_DEPTH-1:0] rd_match_rdidx;\n\n  genvar i;\n  generate //{\n      for (i=0; i<`E203_OITF_DEPTH; i=i+1) begin:oitf_entries//{\n  \n        assign vld_set[i] = alc_ptr_ena & (alc_ptr_r == i);\n        assign vld_clr[i] = ret_ptr_ena & (ret_ptr_r == i);\n        assign vld_ena[i] = vld_set[i] |   vld_clr[i];\n        assign vld_nxt[i] = vld_set[i] | (~vld_clr[i]);\n  \n        sirv_gnrl_dfflr #(1) vld_dfflrs(vld_ena[i], vld_nxt[i], vld_r[i], clk, rst_n);\n        //Payload only set, no need to clear\n        sirv_gnrl_dffl #(`E203_RFIDX_WIDTH) rdidx_dfflrs(vld_set[i], disp_i_rdidx, rdidx_r[i], clk);\n        sirv_gnrl_dffl #(`E203_PC_SIZE    ) pc_dfflrs   (vld_set[i], disp_i_pc   , pc_r[i]   , clk);\n        sirv_gnrl_dffl #(1)                 rdwen_dfflrs(vld_set[i], disp_i_rdwen, rdwen_r[i], clk);\n        sirv_gnrl_dffl #(1)                 rdfpu_dfflrs(vld_set[i], disp_i_rdfpu, rdfpu_r[i], clk);\n\n        assign rd_match_rs1idx[i] = vld_r[i] & rdwen_r[i] & disp_i_rs1en & (rdfpu_r[i] == disp_i_rs1fpu) & (rdidx_r[i] == disp_i_rs1idx);\n        assign rd_match_rs2idx[i] = vld_r[i] & rdwen_r[i] & disp_i_rs2en & (rdfpu_r[i] == disp_i_rs2fpu) & (rdidx_r[i] == disp_i_rs2idx);\n        assign rd_match_rs3idx[i] = vld_r[i] & rdwen_r[i] & disp_i_rs3en & (rdfpu_r[i] == disp_i_rs3fpu) & (rdidx_r[i] == disp_i_rs3idx);\n        assign rd_match_rdidx [i] = vld_r[i] & rdwen_r[i] & disp_i_rdwen & (rdfpu_r[i] == disp_i_rdfpu ) & (rdidx_r[i] == disp_i_rdidx );\n  \n      end//}\n  endgenerate//}\n\n  assign oitfrd_match_disprs1 = |rd_match_rs1idx;\n  assign oitfrd_match_disprs2 = |rd_match_rs2idx;\n  assign oitfrd_match_disprs3 = |rd_match_rs3idx;\n  assign oitfrd_match_disprd  = |rd_match_rdidx ;\n\n  assign ret_rdidx = rdidx_r[ret_ptr];\n  assign ret_pc    = pc_r [ret_ptr];\n  assign ret_rdwen = rdwen_r[ret_ptr];\n  assign ret_rdfpu = rdfpu_r[ret_ptr];\n\nendmodule\n\n\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n// Designer   : Bob Hu\n//\n// Description:\n//  The Regfile module to implement the core's general purpose registers file\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_exu_regfile(\n  input  [`E203_RFIDX_WIDTH-1:0] read_src1_idx,\n  input  [`E203_RFIDX_WIDTH-1:0] read_src2_idx,\n  output [`E203_XLEN-1:0] read_src1_dat,\n  output [`E203_XLEN-1:0] read_src2_dat,\n\n  input  wbck_dest_wen,\n  input  [`E203_RFIDX_WIDTH-1:0] wbck_dest_idx,\n  input  [`E203_XLEN-1:0] wbck_dest_dat,\n\n  output [`E203_XLEN-1:0] x1_r,\n\n  input  test_mode,\n  input  clk,\n  input  rst_n\n  );\n\n  wire [`E203_XLEN-1:0] rf_r [`E203_RFREG_NUM-1:0];\n  wire [`E203_RFREG_NUM-1:0] rf_wen;\n  \n  `ifdef E203_REGFILE_LATCH_BASED //{\n  // Use DFF to buffer the write-port\n  wire [`E203_XLEN-1:0] wbck_dest_dat_r;\n  sirv_gnrl_dffl #(`E203_XLEN) wbck_dat_dffl (wbck_dest_wen, wbck_dest_dat, wbck_dest_dat_r, clk);\n  wire [`E203_RFREG_NUM-1:0] clk_rf_ltch;\n  `endif//}\n\n  \n  genvar i;\n  generate //{\n  \n      for (i=0; i<`E203_RFREG_NUM; i=i+1) begin:regfile//{\n  \n        if(i==0) begin: rf0\n            // x0 cannot be wrote since it is constant-zeros\n            assign rf_wen[i] = 1'b0;\n            assign rf_r[i] = `E203_XLEN'b0;\n          `ifdef E203_REGFILE_LATCH_BASED //{\n            assign clk_rf_ltch[i] = 1'b0;\n          `endif//}\n        end\n        else begin: rfno0\n            assign rf_wen[i] = wbck_dest_wen & (wbck_dest_idx == i) ;\n          `ifdef E203_REGFILE_LATCH_BASED //{\n            e203_clkgate u_e203_clkgate(\n              .clk_in  (clk  ),\n              .test_mode(test_mode),\n              .clock_en(rf_wen[i]),\n              .clk_out (clk_rf_ltch[i])\n            );\n                //from write-enable to clk_rf_ltch to rf_ltch\n            sirv_gnrl_ltch #(`E203_XLEN) rf_ltch (clk_rf_ltch[i], wbck_dest_dat_r, rf_r[i]);\n          `else//}{\n            sirv_gnrl_dffl #(`E203_XLEN) rf_dffl (rf_wen[i], wbck_dest_dat, rf_r[i], clk);\n          `endif//}\n        end\n  \n      end//}\n  endgenerate//}\n  \n  assign read_src1_dat = rf_r[read_src1_idx];\n  assign read_src2_dat = rf_r[read_src2_idx];\n  \n // wire  [`E203_XLEN-1:0] x0  = rf_r[0];\n // wire  [`E203_XLEN-1:0] x1  = rf_r[1];\n // wire  [`E203_XLEN-1:0] x2  = rf_r[2];\n // wire  [`E203_XLEN-1:0] x3  = rf_r[3];\n // wire  [`E203_XLEN-1:0] x4  = rf_r[4];\n // wire  [`E203_XLEN-1:0] x5  = rf_r[5];\n // wire  [`E203_XLEN-1:0] x6  = rf_r[6];\n // wire  [`E203_XLEN-1:0] x7  = rf_r[7];\n // wire  [`E203_XLEN-1:0] x8  = rf_r[8];\n // wire  [`E203_XLEN-1:0] x9  = rf_r[9];\n // wire  [`E203_XLEN-1:0] x10 = rf_r[10];\n // wire  [`E203_XLEN-1:0] x11 = rf_r[11];\n // wire  [`E203_XLEN-1:0] x12 = rf_r[12];\n // wire  [`E203_XLEN-1:0] x13 = rf_r[13];\n // wire  [`E203_XLEN-1:0] x14 = rf_r[14];\n // wire  [`E203_XLEN-1:0] x15 = rf_r[15];\n // `ifdef E203_RFREG_NUM_IS_32 //{ \n // wire  [`E203_XLEN-1:0] x16 = rf_r[16];\n // wire  [`E203_XLEN-1:0] x17 = rf_r[17];\n // wire  [`E203_XLEN-1:0] x18 = rf_r[18];\n // wire  [`E203_XLEN-1:0] x19 = rf_r[19];\n // wire  [`E203_XLEN-1:0] x20 = rf_r[20];\n // wire  [`E203_XLEN-1:0] x21 = rf_r[21];\n // wire  [`E203_XLEN-1:0] x22 = rf_r[22];\n // wire  [`E203_XLEN-1:0] x23 = rf_r[23];\n // wire  [`E203_XLEN-1:0] x24 = rf_r[24];\n // wire  [`E203_XLEN-1:0] x25 = rf_r[25];\n // wire  [`E203_XLEN-1:0] x26 = rf_r[26];\n // wire  [`E203_XLEN-1:0] x27 = rf_r[27];\n // wire  [`E203_XLEN-1:0] x28 = rf_r[28];\n // wire  [`E203_XLEN-1:0] x29 = rf_r[29];\n // wire  [`E203_XLEN-1:0] x30 = rf_r[30];\n // wire  [`E203_XLEN-1:0] x31 = rf_r[31];\n // `endif//}\n\n  assign x1_r = rf_r[1];\n      \nendmodule\n\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The Write-Back module to arbitrate the write-back request to regfile\n//\n// ====================================================================\n\n`include \"e203_defines.v\"\n\nmodule e203_exu_wbck(\n\n  //////////////////////////////////////////////////////////////\n  // The ALU Write-Back Interface\n  input  alu_wbck_i_valid, // Handshake valid\n  output alu_wbck_i_ready, // Handshake ready\n  input  [`E203_XLEN-1:0] alu_wbck_i_wdat,\n  input  [`E203_RFIDX_WIDTH-1:0] alu_wbck_i_rdidx,\n  // If ALU have error, it will not generate the wback_valid to wback module\n      // so we dont need the alu_wbck_i_err here\n\n  //////////////////////////////////////////////////////////////\n  // The Longp Write-Back Interface\n  input  longp_wbck_i_valid, // Handshake valid\n  output longp_wbck_i_ready, // Handshake ready\n  input  [`E203_FLEN-1:0] longp_wbck_i_wdat,\n  input  [5-1:0] longp_wbck_i_flags,\n  input  [`E203_RFIDX_WIDTH-1:0] longp_wbck_i_rdidx,\n  input  longp_wbck_i_rdfpu,\n\n  //////////////////////////////////////////////////////////////\n  // The Final arbitrated Write-Back Interface to Regfile\n  output  rf_wbck_o_ena,\n  output  [`E203_XLEN-1:0] rf_wbck_o_wdat,\n  output  [`E203_RFIDX_WIDTH-1:0] rf_wbck_o_rdidx,\n\n\n  \n  input  clk,\n  input  rst_n\n  );\n\n\n  // The ALU instruction can write-back only when there is no any \n  //  long pipeline instruction writing-back\n  //    * Since ALU is the 1 cycle instructions, it have lowest \n  //      priority in arbitration\n  wire wbck_ready4alu = (~longp_wbck_i_valid);\n  wire wbck_sel_alu = alu_wbck_i_valid & wbck_ready4alu;\n  // The Long-pipe instruction can always write-back since it have high priority \n  wire wbck_ready4longp = 1'b1;\n  wire wbck_sel_longp = longp_wbck_i_valid & wbck_ready4longp;\n\n\n\n  //////////////////////////////////////////////////////////////\n  // The Final arbitrated Write-Back Interface\n  wire rf_wbck_o_ready = 1'b1; // Regfile is always ready to be write because it just has 1 w-port\n\n  wire wbck_i_ready;\n  wire wbck_i_valid;\n  wire [`E203_FLEN-1:0] wbck_i_wdat;\n  wire [5-1:0] wbck_i_flags;\n  wire [`E203_RFIDX_WIDTH-1:0] wbck_i_rdidx;\n  wire wbck_i_rdfpu;\n\n  assign alu_wbck_i_ready   = wbck_ready4alu   & wbck_i_ready;\n  assign longp_wbck_i_ready = wbck_ready4longp & wbck_i_ready;\n\n  assign wbck_i_valid = wbck_sel_alu ? alu_wbck_i_valid : longp_wbck_i_valid;\n  `ifdef E203_FLEN_IS_32//{\n  assign wbck_i_wdat  = wbck_sel_alu ? alu_wbck_i_wdat  : longp_wbck_i_wdat;\n  `else//}{\n  assign wbck_i_wdat  = wbck_sel_alu ? {{`E203_FLEN-`E203_XLEN{1'b0}},alu_wbck_i_wdat}  : longp_wbck_i_wdat;\n  `endif//}\n  assign wbck_i_flags = wbck_sel_alu ? 5'b0  : longp_wbck_i_flags;\n  assign wbck_i_rdidx = wbck_sel_alu ? alu_wbck_i_rdidx : longp_wbck_i_rdidx;\n  assign wbck_i_rdfpu = wbck_sel_alu ? 1'b0 : longp_wbck_i_rdfpu;\n\n  // If it have error or non-rdwen it will not be send to this module\n  //   instead have been killed at EU level, so it is always need to \n  //   write back into regfile at here\n  assign wbck_i_ready  = rf_wbck_o_ready;\n  wire rf_wbck_o_valid = wbck_i_valid;\n\n  wire wbck_o_ena   = rf_wbck_o_valid & rf_wbck_o_ready;\n\n  assign rf_wbck_o_ena   = wbck_o_ena & (~wbck_i_rdfpu);\n  assign rf_wbck_o_wdat  = wbck_i_wdat[`E203_XLEN-1:0];\n  assign rf_wbck_o_rdidx = wbck_i_rdidx;\n\n\nendmodule                                      \n                                               \n                                               \n                                               \n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The IFU to implement entire instruction fetch unit.\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_ifu(\n  output[`E203_PC_SIZE-1:0] inspect_pc,\n  output ifu_active,\n  input  itcm_nohold,\n\n  input  [`E203_PC_SIZE-1:0] pc_rtvec,  \n  `ifdef E203_HAS_ITCM //{\n  input  ifu2itcm_holdup,\n  //input  ifu2itcm_replay,\n\n  // The ITCM address region indication signal\n  input [`E203_ADDR_SIZE-1:0] itcm_region_indic,\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // Bus Interface to ITCM, internal protocol called ICB (Internal Chip Bus)\n  //    * Bus cmd channel\n  output ifu2itcm_icb_cmd_valid, // Handshake valid\n  input  ifu2itcm_icb_cmd_ready, // Handshake ready\n            // Note: The data on rdata or wdata channel must be naturally\n            //       aligned, this is in line with the AXI definition\n  output [`E203_ITCM_ADDR_WIDTH-1:0]   ifu2itcm_icb_cmd_addr, // Bus transaction start addr \n\n  //    * Bus RSP channel\n  input  ifu2itcm_icb_rsp_valid, // Response valid \n  output ifu2itcm_icb_rsp_ready, // Response ready\n  input  ifu2itcm_icb_rsp_err,   // Response error\n            // Note: the RSP rdata is inline with AXI definition\n  input  [`E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata, \n  `endif//}\n\n  `ifdef E203_HAS_MEM_ITF //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // Bus Interface to System Memory, internal protocol called ICB (Internal Chip Bus)\n  //    * Bus cmd channel\n  output ifu2biu_icb_cmd_valid, // Handshake valid\n  input  ifu2biu_icb_cmd_ready, // Handshake ready\n            // Note: The data on rdata or wdata channel must be naturally\n            //       aligned, this is in line with the AXI definition\n  output [`E203_ADDR_SIZE-1:0]   ifu2biu_icb_cmd_addr, // Bus transaction start addr \n\n  //    * Bus RSP channel\n  input  ifu2biu_icb_rsp_valid, // Response valid \n  output ifu2biu_icb_rsp_ready, // Response ready\n  input  ifu2biu_icb_rsp_err,   // Response error\n            // Note: the RSP rdata is inline with AXI definition\n  input  [`E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata, \n\n  //input  ifu2biu_replay,\n  `endif//}\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The IR stage to EXU interface\n  output [`E203_INSTR_SIZE-1:0] ifu_o_ir,// The instruction register\n  output [`E203_PC_SIZE-1:0] ifu_o_pc,   // The PC register along with\n  output ifu_o_pc_vld,\n  output ifu_o_misalgn,                  // The fetch misalign \n  output ifu_o_buserr,                   // The fetch bus error\n  output [`E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output [`E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output ifu_o_prdt_taken,               // The Bxx is predicted as taken\n  output ifu_o_muldiv_b2b,               \n  output ifu_o_valid, // Handshake signals with EXU stage\n  input  ifu_o_ready,\n\n  output  pipe_flush_ack,\n  input   pipe_flush_req,\n  input   [`E203_PC_SIZE-1:0] pipe_flush_add_op1,  \n  input   [`E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST//}\n  input   [`E203_PC_SIZE-1:0] pipe_flush_pc,  \n  `endif//}\n\n      \n  // The halt request come from other commit stage\n  //   If the ifu_halt_req is asserting, then IFU will stop fetching new \n  //     instructions and after the oustanding transactions are completed,\n  //     asserting the ifu_halt_ack as the response.\n  //   The IFU will resume fetching only after the ifu_halt_req is deasserted\n  input  ifu_halt_req,\n  output ifu_halt_ack,\n\n  input  oitf_empty,\n  input  [`E203_XLEN-1:0] rf2ifu_x1,\n  input  [`E203_XLEN-1:0] rf2ifu_rs1,\n  input  dec2ifu_rden,\n  input  dec2ifu_rs1en,\n  input  [`E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  dec2ifu_mulhsu,\n  input  dec2ifu_div   ,\n  input  dec2ifu_rem   ,\n  input  dec2ifu_divu  ,\n  input  dec2ifu_remu  ,\n\n  input  clk,\n  input  rst_n\n  );\n\n  \n  wire ifu_req_valid; \n  wire ifu_req_ready; \n  wire [`E203_PC_SIZE-1:0]   ifu_req_pc; \n  wire ifu_req_seq;\n  wire ifu_req_seq_rv32;\n  wire [`E203_PC_SIZE-1:0] ifu_req_last_pc;\n  wire ifu_rsp_valid; \n  wire ifu_rsp_ready; \n  wire ifu_rsp_err;   \n  //wire ifu_rsp_replay;   \n  wire [`E203_INSTR_SIZE-1:0] ifu_rsp_instr; \n\n  e203_ifu_ifetch u_e203_ifu_ifetch(\n    .inspect_pc   (inspect_pc),\n    .pc_rtvec      (pc_rtvec),  \n    .ifu_req_valid (ifu_req_valid),\n    .ifu_req_ready (ifu_req_ready),\n    .ifu_req_pc    (ifu_req_pc   ),\n    .ifu_req_seq     (ifu_req_seq     ),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc (ifu_req_last_pc ),\n    .ifu_rsp_valid (ifu_rsp_valid),\n    .ifu_rsp_ready (ifu_rsp_ready),\n    .ifu_rsp_err   (ifu_rsp_err  ),\n    //.ifu_rsp_replay(ifu_rsp_replay),\n    .ifu_rsp_instr (ifu_rsp_instr),\n    .ifu_o_ir      (ifu_o_ir     ),\n    .ifu_o_pc      (ifu_o_pc     ),\n    .ifu_o_pc_vld  (ifu_o_pc_vld ),\n    .ifu_o_misalgn (ifu_o_misalgn),\n    .ifu_o_buserr  (ifu_o_buserr ),\n    .ifu_o_rs1idx  (ifu_o_rs1idx),\n    .ifu_o_rs2idx  (ifu_o_rs2idx),\n    .ifu_o_prdt_taken(ifu_o_prdt_taken),\n    .ifu_o_muldiv_b2b(ifu_o_muldiv_b2b),\n    .ifu_o_valid   (ifu_o_valid  ),\n    .ifu_o_ready   (ifu_o_ready  ),\n    .pipe_flush_ack     (pipe_flush_ack    ), \n    .pipe_flush_req     (pipe_flush_req    ),\n    .pipe_flush_add_op1 (pipe_flush_add_op1),     \n  `ifdef E203_TIMING_BOOST//}\n    .pipe_flush_pc      (pipe_flush_pc),  \n  `endif//}\n    .pipe_flush_add_op2 (pipe_flush_add_op2), \n    .ifu_halt_req  (ifu_halt_req ),\n    .ifu_halt_ack  (ifu_halt_ack ),\n\n    .oitf_empty    (oitf_empty   ),\n    .rf2ifu_x1     (rf2ifu_x1    ),\n    .rf2ifu_rs1    (rf2ifu_rs1   ),\n    .dec2ifu_rden  (dec2ifu_rden ),\n    .dec2ifu_rs1en (dec2ifu_rs1en),\n    .dec2ifu_rdidx (dec2ifu_rdidx),\n    .dec2ifu_mulhsu(dec2ifu_mulhsu),\n    .dec2ifu_div   (dec2ifu_div   ),\n    .dec2ifu_rem   (dec2ifu_rem   ),\n    .dec2ifu_divu  (dec2ifu_divu  ),\n    .dec2ifu_remu  (dec2ifu_remu  ),\n\n    .clk           (clk          ),\n    .rst_n         (rst_n        ) \n  );\n\n\n\n  e203_ifu_ift2icb u_e203_ifu_ift2icb (\n    .ifu_req_valid (ifu_req_valid),\n    .ifu_req_ready (ifu_req_ready),\n    .ifu_req_pc    (ifu_req_pc   ),\n    .ifu_req_seq     (ifu_req_seq     ),\n    .ifu_req_seq_rv32(ifu_req_seq_rv32),\n    .ifu_req_last_pc (ifu_req_last_pc ),\n    .ifu_rsp_valid (ifu_rsp_valid),\n    .ifu_rsp_ready (ifu_rsp_ready),\n    .ifu_rsp_err   (ifu_rsp_err  ),\n    //.ifu_rsp_replay(ifu_rsp_replay),\n    .ifu_rsp_instr (ifu_rsp_instr),\n    .itcm_nohold   (itcm_nohold),\n\n  `ifdef E203_HAS_ITCM //{\n    .itcm_region_indic (itcm_region_indic),\n    .ifu2itcm_icb_cmd_valid(ifu2itcm_icb_cmd_valid),\n    .ifu2itcm_icb_cmd_ready(ifu2itcm_icb_cmd_ready),\n    .ifu2itcm_icb_cmd_addr (ifu2itcm_icb_cmd_addr ),\n    .ifu2itcm_icb_rsp_valid(ifu2itcm_icb_rsp_valid),\n    .ifu2itcm_icb_rsp_ready(ifu2itcm_icb_rsp_ready),\n    .ifu2itcm_icb_rsp_err  (ifu2itcm_icb_rsp_err  ),\n    .ifu2itcm_icb_rsp_rdata(ifu2itcm_icb_rsp_rdata),\n  `endif//}\n\n\n  `ifdef E203_HAS_MEM_ITF //{\n    .ifu2biu_icb_cmd_valid(ifu2biu_icb_cmd_valid),\n    .ifu2biu_icb_cmd_ready(ifu2biu_icb_cmd_ready),\n    .ifu2biu_icb_cmd_addr (ifu2biu_icb_cmd_addr ),\n    .ifu2biu_icb_rsp_valid(ifu2biu_icb_rsp_valid),\n    .ifu2biu_icb_rsp_ready(ifu2biu_icb_rsp_ready),\n    .ifu2biu_icb_rsp_err  (ifu2biu_icb_rsp_err  ),\n    .ifu2biu_icb_rsp_rdata(ifu2biu_icb_rsp_rdata),\n    //.ifu2biu_replay (ifu2biu_replay),\n  `endif//}\n\n  `ifdef E203_HAS_ITCM //{\n    .ifu2itcm_holdup (ifu2itcm_holdup),\n    //.ifu2itcm_replay (ifu2itcm_replay),\n  `endif//}\n\n    .clk           (clk          ),\n    .rst_n         (rst_n        ) \n  );\n\n  assign ifu_active = 1'b1;// Seems the IFU never rest at block level\n  \nendmodule\n\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The ifetch module to generate next PC and bus request\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_ifu_ifetch(\n  output[`E203_PC_SIZE-1:0] inspect_pc,\n\n\n  input  [`E203_PC_SIZE-1:0] pc_rtvec,  \n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // Fetch Interface to memory system, internal protocol\n  //    * IFetch REQ channel\n  output ifu_req_valid, // Handshake valid\n  input  ifu_req_ready, // Handshake ready\n            // Note: the req-addr can be unaligned with the length indicated\n            //       by req_len signal.\n            //       The targetd (ITCM, ICache or Sys-MEM) ctrl modules \n            //       will handle the unalign cases and split-and-merge works\n  output [`E203_PC_SIZE-1:0] ifu_req_pc, // Fetch PC\n  output ifu_req_seq, // This request is a sequential instruction fetch\n  output ifu_req_seq_rv32, // This request is incremented 32bits fetch\n  output [`E203_PC_SIZE-1:0] ifu_req_last_pc, // The last accessed\n                                           // PC address (i.e., pc_r)\n  //    * IFetch RSP channel\n  input  ifu_rsp_valid, // Response valid \n  output ifu_rsp_ready, // Response ready\n  input  ifu_rsp_err,   // Response error\n            // Note: the RSP channel always return a valid instruction\n            //   fetched from the fetching start PC address.\n            //   The targetd (ITCM, ICache or Sys-MEM) ctrl modules \n            //   will handle the unalign cases and split-and-merge works\n  //input  ifu_rsp_replay,\n  input  [`E203_INSTR_SIZE-1:0] ifu_rsp_instr, // Response instruction\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The IR stage to EXU interface\n  output [`E203_INSTR_SIZE-1:0] ifu_o_ir,// The instruction register\n  output [`E203_PC_SIZE-1:0] ifu_o_pc,   // The PC register along with\n  output ifu_o_pc_vld,\n  output [`E203_RFIDX_WIDTH-1:0] ifu_o_rs1idx,\n  output [`E203_RFIDX_WIDTH-1:0] ifu_o_rs2idx,\n  output ifu_o_prdt_taken,               // The Bxx is predicted as taken\n  output ifu_o_misalgn,                  // The fetch misalign \n  output ifu_o_buserr,                   // The fetch bus error\n  output ifu_o_muldiv_b2b,               // The mul/div back2back case\n  output ifu_o_valid, // Handshake signals with EXU stage\n  input  ifu_o_ready,\n\n  output  pipe_flush_ack,\n  input   pipe_flush_req,\n  input   [`E203_PC_SIZE-1:0] pipe_flush_add_op1,  \n  input   [`E203_PC_SIZE-1:0] pipe_flush_add_op2,\n  `ifdef E203_TIMING_BOOST//}\n  input   [`E203_PC_SIZE-1:0] pipe_flush_pc,  \n  `endif//}\n\n      \n  // The halt request come from other commit stage\n  //   If the ifu_halt_req is asserting, then IFU will stop fetching new \n  //     instructions and after the oustanding transactions are completed,\n  //     asserting the ifu_halt_ack as the response.\n  //   The IFU will resume fetching only after the ifu_halt_req is deasserted\n  input  ifu_halt_req,\n  output ifu_halt_ack,\n\n\n  input  oitf_empty,\n  input  [`E203_XLEN-1:0] rf2ifu_x1,\n  input  [`E203_XLEN-1:0] rf2ifu_rs1,\n  input  dec2ifu_rs1en,\n  input  dec2ifu_rden,\n  input  [`E203_RFIDX_WIDTH-1:0] dec2ifu_rdidx,\n  input  dec2ifu_mulhsu,\n  input  dec2ifu_div   ,\n  input  dec2ifu_rem   ,\n  input  dec2ifu_divu  ,\n  input  dec2ifu_remu  ,\n\n  input  clk,\n  input  rst_n\n  );\n\n  wire ifu_req_hsked  = (ifu_req_valid & ifu_req_ready) ;\n  wire ifu_rsp_hsked  = (ifu_rsp_valid & ifu_rsp_ready) ;\n  wire ifu_ir_o_hsked = (ifu_o_valid & ifu_o_ready) ;\n  wire pipe_flush_hsked = pipe_flush_req & pipe_flush_ack;\n\n  \n // The rst_flag is the synced version of rst_n\n //    * rst_n is asserted \n // The rst_flag will be clear when\n //    * rst_n is de-asserted \n  wire reset_flag_r;\n  sirv_gnrl_dffrs #(1) reset_flag_dffrs (1'b0, reset_flag_r, clk, rst_n);\n //\n // The reset_req valid is set when \n //    * Currently reset_flag is asserting\n // The reset_req valid is clear when \n //    * Currently reset_req is asserting\n //    * Currently the flush can be accepted by IFU\n  wire reset_req_r;\n  wire reset_req_set = (~reset_req_r) & reset_flag_r;\n  wire reset_req_clr = reset_req_r & ifu_req_hsked;\n  wire reset_req_ena = reset_req_set | reset_req_clr;\n  wire reset_req_nxt = reset_req_set | (~reset_req_clr);\n\n  sirv_gnrl_dfflr #(1) reset_req_dfflr (reset_req_ena, reset_req_nxt, reset_req_r, clk, rst_n);\n\n  wire ifu_reset_req = reset_req_r;\n\n\n\n\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The halt ack generation\n  wire halt_ack_set;\n  wire halt_ack_clr;\n  wire halt_ack_ena;\n  wire halt_ack_r;\n  wire halt_ack_nxt;\n\n     // The halt_ack will be set when\n     //    * Currently halt_req is asserting\n     //    * Currently halt_ack is not asserting\n     //    * Currently the ifetch REQ channel is ready, means\n     //        there is no oustanding transactions\n  wire ifu_no_outs;\n  assign halt_ack_set = ifu_halt_req & (~halt_ack_r) & ifu_no_outs;\n     // The halt_ack_r valid is cleared when \n     //    * Currently halt_ack is asserting\n     //    * Currently halt_req is de-asserting\n  assign halt_ack_clr = halt_ack_r & (~ifu_halt_req);\n\n  assign halt_ack_ena = halt_ack_set | halt_ack_clr;\n  assign halt_ack_nxt = halt_ack_set | (~halt_ack_clr);\n\n  sirv_gnrl_dfflr #(1) halt_ack_dfflr (halt_ack_ena, halt_ack_nxt, halt_ack_r, clk, rst_n);\n\n  assign ifu_halt_ack = halt_ack_r;\n\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The flush ack signal generation\n   //\n   //   Ideally the flush is acked when the ifetch interface is ready\n   //     or there is rsponse valid \n   //   But to cut the comb loop between EXU and IFU, we always accept\n   //     the flush, when it is not really acknowledged, we use a \n   //     delayed flush indication to remember this flush\n   //   Note: Even if there is a delayed flush pending there, we\n   //     still can accept new flush request\n   assign pipe_flush_ack = 1'b1;\n\n   wire dly_flush_set;\n   wire dly_flush_clr;\n   wire dly_flush_ena;\n   wire dly_flush_nxt;\n\n      // The dly_flush will be set when\n      //    * There is a flush requst is coming, but the ifu\n      //        is not ready to accept new fetch request\n   wire dly_flush_r;\n   assign dly_flush_set = pipe_flush_req & (~ifu_req_hsked);\n      // The dly_flush_r valid is cleared when \n      //    * The delayed flush is issued\n   assign dly_flush_clr = dly_flush_r & ifu_req_hsked;\n   assign dly_flush_ena = dly_flush_set | dly_flush_clr;\n   assign dly_flush_nxt = dly_flush_set | (~dly_flush_clr);\n\n   sirv_gnrl_dfflr #(1) dly_flush_dfflr (dly_flush_ena, dly_flush_nxt, dly_flush_r, clk, rst_n);\n\n   wire dly_pipe_flush_req = dly_flush_r;\n   wire pipe_flush_req_real = pipe_flush_req | dly_pipe_flush_req;\n\n\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The IR register to be used in EXU for decoding\n  wire ir_valid_set;\n  wire ir_valid_clr;\n  wire ir_valid_ena;\n  wire ir_valid_r;\n  wire ir_valid_nxt;\n\n  wire ir_pc_vld_set;\n  wire ir_pc_vld_clr;\n  wire ir_pc_vld_ena;\n  wire ir_pc_vld_r;\n  wire ir_pc_vld_nxt;\n\n\n     // The ir valid is set when there is new instruction fetched *and* \n     //   no flush happening \n  wire ifu_rsp_need_replay;\n  wire pc_newpend_r;\n  wire ifu_ir_i_ready;\n  assign ir_valid_set  = ifu_rsp_hsked & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n  assign ir_pc_vld_set = pc_newpend_r & ifu_ir_i_ready & (~pipe_flush_req_real) & (~ifu_rsp_need_replay);\n     // The ir valid is cleared when it is accepted by EXU stage *or*\n     //   the flush happening \n  assign ir_valid_clr  = ifu_ir_o_hsked | (pipe_flush_hsked & ir_valid_r);\n  assign ir_pc_vld_clr = ir_valid_clr;\n\n  assign ir_valid_ena  = ir_valid_set  | ir_valid_clr;\n  assign ir_valid_nxt  = ir_valid_set  | (~ir_valid_clr);\n  assign ir_pc_vld_ena = ir_pc_vld_set | ir_pc_vld_clr;\n  assign ir_pc_vld_nxt = ir_pc_vld_set | (~ir_pc_vld_clr);\n\n  sirv_gnrl_dfflr #(1) ir_valid_dfflr (ir_valid_ena, ir_valid_nxt, ir_valid_r, clk, rst_n);\n  sirv_gnrl_dfflr #(1) ir_pc_vld_dfflr (ir_pc_vld_ena, ir_pc_vld_nxt, ir_pc_vld_r, clk, rst_n);\n\n     // IFU-IR loaded with the returned instruction from the IFetch RSP channel\n  wire [`E203_INSTR_SIZE-1:0] ifu_ir_nxt = ifu_rsp_instr;\n     // IFU-PC loaded with the current PC\n  wire                     ifu_err_nxt = ifu_rsp_err;\n\n     // IFU-IR and IFU-PC as the datapath register, only loaded and toggle when the valid reg is set\n  wire ifu_err_r;\n  sirv_gnrl_dfflr #(1) ifu_err_dfflr(ir_valid_set, ifu_err_nxt, ifu_err_r, clk, rst_n);\n  wire prdt_taken;  \n  wire ifu_prdt_taken_r;\n  sirv_gnrl_dfflr #(1) ifu_prdt_taken_dfflr (ir_valid_set, prdt_taken, ifu_prdt_taken_r, clk, rst_n);\n  wire ifu_muldiv_b2b_nxt;\n  wire ifu_muldiv_b2b_r;\n  sirv_gnrl_dfflr #(1) ir_muldiv_b2b_dfflr (ir_valid_set, ifu_muldiv_b2b_nxt, ifu_muldiv_b2b_r, clk, rst_n);\n     //To save power the H-16bits only loaded when it is 32bits length instru \n  wire [`E203_INSTR_SIZE-1:0] ifu_ir_r;// The instruction register\n  wire minidec_rv32;\n  wire ir_hi_ena = ir_valid_set & minidec_rv32;\n  wire ir_lo_ena = ir_valid_set;\n  sirv_gnrl_dfflr #(`E203_INSTR_SIZE/2) ifu_hi_ir_dfflr (ir_hi_ena, ifu_ir_nxt[31:16], ifu_ir_r[31:16], clk, rst_n);\n  sirv_gnrl_dfflr #(`E203_INSTR_SIZE/2) ifu_lo_ir_dfflr (ir_lo_ena, ifu_ir_nxt[15: 0], ifu_ir_r[15: 0], clk, rst_n);\n\n  wire minidec_rs1en;\n  wire minidec_rs2en;\n  wire [`E203_RFIDX_WIDTH-1:0] minidec_rs1idx;\n  wire [`E203_RFIDX_WIDTH-1:0] minidec_rs2idx;\n\n  `ifndef E203_HAS_FPU//}\n  wire minidec_fpu        = 1'b0;\n  wire minidec_fpu_rs1en  = 1'b0;\n  wire minidec_fpu_rs2en  = 1'b0;\n  wire minidec_fpu_rs3en  = 1'b0;\n  wire minidec_fpu_rs1fpu = 1'b0;\n  wire minidec_fpu_rs2fpu = 1'b0;\n  wire minidec_fpu_rs3fpu = 1'b0;\n  wire [`E203_RFIDX_WIDTH-1:0] minidec_fpu_rs1idx = `E203_RFIDX_WIDTH'b0;\n  wire [`E203_RFIDX_WIDTH-1:0] minidec_fpu_rs2idx = `E203_RFIDX_WIDTH'b0;\n  `endif//}\n\n  wire [`E203_RFIDX_WIDTH-1:0] ir_rs1idx_r;\n  wire [`E203_RFIDX_WIDTH-1:0] ir_rs2idx_r;\n  wire bpu2rf_rs1_ena;\n  //FPU: if it is FPU instruction. we still need to put it into the IR register, but we need to mask off the non-integer regfile index to save power\n  wire ir_rs1idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs1en & (~minidec_fpu_rs1fpu)) | ((~minidec_fpu) & ir_valid_set & minidec_rs1en) | bpu2rf_rs1_ena;\n  wire ir_rs2idx_ena = (minidec_fpu & ir_valid_set & minidec_fpu_rs2en & (~minidec_fpu_rs2fpu)) | ((~minidec_fpu) & ir_valid_set & minidec_rs2en);\n  wire [`E203_RFIDX_WIDTH-1:0] ir_rs1idx_nxt = minidec_fpu ? minidec_fpu_rs1idx : minidec_rs1idx;\n  wire [`E203_RFIDX_WIDTH-1:0] ir_rs2idx_nxt = minidec_fpu ? minidec_fpu_rs2idx : minidec_rs2idx;\n  sirv_gnrl_dfflr #(`E203_RFIDX_WIDTH) ir_rs1idx_dfflr (ir_rs1idx_ena, ir_rs1idx_nxt, ir_rs1idx_r, clk, rst_n);\n  sirv_gnrl_dfflr #(`E203_RFIDX_WIDTH) ir_rs2idx_dfflr (ir_rs2idx_ena, ir_rs2idx_nxt, ir_rs2idx_r, clk, rst_n);\n\n  wire [`E203_PC_SIZE-1:0] pc_r;\n  wire [`E203_PC_SIZE-1:0] ifu_pc_nxt = pc_r;\n  wire [`E203_PC_SIZE-1:0] ifu_pc_r;\n  sirv_gnrl_dfflr #(`E203_PC_SIZE) ifu_pc_dfflr (ir_pc_vld_set, ifu_pc_nxt,  ifu_pc_r, clk, rst_n);\n\n  assign ifu_o_ir  = ifu_ir_r;\n  assign ifu_o_pc  = ifu_pc_r;\n    // Instruction fetch misaligned exceptions are not possible on machines that support extensions\n    // with 16-bit aligned instructions, such as the compressed instruction set extension, C.\n  assign ifu_o_misalgn = 1'b0;// Never happen in RV32C configuration \n  assign ifu_o_buserr  = ifu_err_r;\n  assign ifu_o_rs1idx = ir_rs1idx_r;\n  assign ifu_o_rs2idx = ir_rs2idx_r;\n  assign ifu_o_prdt_taken = ifu_prdt_taken_r;\n  assign ifu_o_muldiv_b2b = ifu_muldiv_b2b_r;\n\n  assign ifu_o_valid  = ir_valid_r;\n  assign ifu_o_pc_vld = ir_pc_vld_r;\n\n  // The IFU-IR stage will be ready when it is empty or under-clearing\n  assign ifu_ir_i_ready   = (~ir_valid_r) | ir_valid_clr;\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // JALR instruction dependency check\n  wire ir_empty = ~ir_valid_r;\n  wire ir_rs1en = dec2ifu_rs1en;\n  wire ir_rden = dec2ifu_rden;\n  wire [`E203_RFIDX_WIDTH-1:0] ir_rdidx = dec2ifu_rdidx;\n  wire [`E203_RFIDX_WIDTH-1:0] minidec_jalr_rs1idx;\n  wire jalr_rs1idx_cam_irrdidx = ir_rden & (minidec_jalr_rs1idx == ir_rdidx) & ir_valid_r;\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // MULDIV BACK2BACK Fusing\n  // To detect the sequence of MULH[[S]U] rdh, rs1, rs2;    MUL rdl, rs1, rs2\n  // To detect the sequence of     DIV[U] rdq, rs1, rs2; REM[U] rdr, rs1, rs2  \n  wire minidec_mul ;\n  wire minidec_div ;\n  wire minidec_rem ;\n  wire minidec_divu;\n  wire minidec_remu;\n  assign ifu_muldiv_b2b_nxt = \n      (\n          // For multiplicaiton, only the MUL instruction following\n          //    MULH/MULHU/MULSU can be treated as back2back\n          ( minidec_mul & dec2ifu_mulhsu)\n          // For divider and reminder instructions, only the following cases\n          //    can be treated as back2back\n          //      * DIV--REM\n          //      * REM--DIV\n          //      * DIVU--REMU\n          //      * REMU--DIVU\n        | ( minidec_div  & dec2ifu_rem)\n        | ( minidec_rem  & dec2ifu_div)\n        | ( minidec_divu & dec2ifu_remu)\n        | ( minidec_remu & dec2ifu_divu)\n      )\n      // The last rs1 and rs2 indexes are same as this instruction\n      & (ir_rs1idx_r == ir_rs1idx_nxt)\n      & (ir_rs2idx_r == ir_rs2idx_nxt)\n      // The last rs1 and rs2 indexes are not same as last RD index\n      & (~(ir_rs1idx_r == ir_rdidx))\n      & (~(ir_rs2idx_r == ir_rdidx))\n      ;\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // Next PC generation\n  wire minidec_bjp;\n  wire minidec_jal;\n  wire minidec_jalr;\n  wire minidec_bxx;\n  wire [`E203_XLEN-1:0] minidec_bjp_imm;\n\n  // The mini-decoder to check instruciton length and branch type \n  e203_ifu_minidec u_e203_ifu_minidec (\n      .instr       (ifu_ir_nxt         ),\n\n      .dec_rs1en   (minidec_rs1en      ),\n      .dec_rs2en   (minidec_rs2en      ),\n      .dec_rs1idx  (minidec_rs1idx     ),\n      .dec_rs2idx  (minidec_rs2idx     ),\n\n      .dec_rv32    (minidec_rv32       ),\n      .dec_bjp     (minidec_bjp        ),\n      .dec_jal     (minidec_jal        ),\n      .dec_jalr    (minidec_jalr       ),\n      .dec_bxx     (minidec_bxx        ),\n\n      .dec_mulhsu  (),\n      .dec_mul     (minidec_mul ),\n      .dec_div     (minidec_div ),\n      .dec_rem     (minidec_rem ),\n      .dec_divu    (minidec_divu),\n      .dec_remu    (minidec_remu),\n\n\n\n      .dec_jalr_rs1idx (minidec_jalr_rs1idx),\n      .dec_bjp_imm (minidec_bjp_imm    )\n\n  );\n\n  wire bpu_wait;\n  wire [`E203_PC_SIZE-1:0] prdt_pc_add_op1;  \n  wire [`E203_PC_SIZE-1:0] prdt_pc_add_op2;\n\n  e203_ifu_litebpu u_e203_ifu_litebpu(\n\n    .pc                       (pc_r),\n                              \n    .dec_jal                  (minidec_jal  ),\n    .dec_jalr                 (minidec_jalr ),\n    .dec_bxx                  (minidec_bxx  ),\n    .dec_bjp_imm              (minidec_bjp_imm  ),\n    .dec_jalr_rs1idx          (minidec_jalr_rs1idx  ),\n\n    .dec_i_valid              (ifu_rsp_valid),\n    .ir_valid_clr             (ir_valid_clr),\n                \n    .oitf_empty               (oitf_empty),\n    .ir_empty                 (ir_empty  ),\n    .ir_rs1en                 (ir_rs1en  ),\n\n    .jalr_rs1idx_cam_irrdidx  (jalr_rs1idx_cam_irrdidx),\n  \n    .bpu_wait                 (bpu_wait       ),  \n    .prdt_taken               (prdt_taken     ),  \n    .prdt_pc_add_op1          (prdt_pc_add_op1),  \n    .prdt_pc_add_op2          (prdt_pc_add_op2),\n\n    .bpu2rf_rs1_ena           (bpu2rf_rs1_ena),\n    .rf2bpu_x1                (rf2ifu_x1    ),\n    .rf2bpu_rs1               (rf2ifu_rs1   ),\n\n    .clk                      (clk  ) ,\n    .rst_n                    (rst_n )                 \n  );\n  // If the instruciton is 32bits length, increament 4, otherwise 2\n  wire [2:0] pc_incr_ofst = minidec_rv32 ? 3'd4 : 3'd2;\n\n  wire [`E203_PC_SIZE-1:0] pc_nxt_pre;\n  wire [`E203_PC_SIZE-1:0] pc_nxt;\n\n  wire bjp_req = minidec_bjp & prdt_taken;\n\n  wire ifetch_replay_req;\n\n  wire [`E203_PC_SIZE-1:0] pc_add_op1 = \n                            `ifndef E203_TIMING_BOOST//}\n                               pipe_flush_req  ? pipe_flush_add_op1 :\n                               dly_pipe_flush_req  ? pc_r :\n                            `endif//}\n                               ifetch_replay_req  ? pc_r :\n                               bjp_req ? prdt_pc_add_op1    :\n                               ifu_reset_req   ? pc_rtvec :\n                                                 pc_r;\n\n  wire [`E203_PC_SIZE-1:0] pc_add_op2 =  \n                            `ifndef E203_TIMING_BOOST//}\n                               pipe_flush_req  ? pipe_flush_add_op2 :\n                               dly_pipe_flush_req  ? `E203_PC_SIZE'b0 :\n                            `endif//}\n                               ifetch_replay_req  ? `E203_PC_SIZE'b0 :\n                               bjp_req ? prdt_pc_add_op2    :\n                               ifu_reset_req   ? `E203_PC_SIZE'b0 :\n                                                 pc_incr_ofst ;\n\n  assign ifu_req_seq = (~pipe_flush_req_real) & (~ifu_reset_req) & (~ifetch_replay_req) & (~bjp_req);\n  assign ifu_req_seq_rv32 = minidec_rv32;\n  assign ifu_req_last_pc = pc_r;\n\n  assign pc_nxt_pre = pc_add_op1 + pc_add_op2;\n  `ifndef E203_TIMING_BOOST//}\n  assign pc_nxt = {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n  `else//}{\n  assign pc_nxt = \n               pipe_flush_req ? {pipe_flush_pc[`E203_PC_SIZE-1:1],1'b0} :\n               dly_pipe_flush_req ? {pc_r[`E203_PC_SIZE-1:1],1'b0} :\n               {pc_nxt_pre[`E203_PC_SIZE-1:1],1'b0};\n  `endif//}\n\n  // The Ifetch issue new ifetch request when\n  //   * If it is a bjp insturction, and it does not need to wait, and it is not a replay-set cycle\n  //   * and there is no halt_request\n  wire ifu_new_req = (~bpu_wait) & (~ifu_halt_req) & (~reset_flag_r) & (~ifu_rsp_need_replay);\n\n  // The fetch request valid is triggering when\n  //      * New ifetch request\n  //      * or The flush-request is pending\n  wire ifu_req_valid_pre = ifu_new_req | ifu_rese"}
{"text": "t_req | pipe_flush_req_real | ifetch_replay_req;\n  // The new request ready condition is:\n  //   * No outstanding reqeusts\n  //   * Or if there is outstanding, but it is reponse valid back\n  wire out_flag_clr;\n  wire out_flag_r;\n  wire new_req_condi = (~out_flag_r) | out_flag_clr;\n  assign ifu_no_outs   = (~out_flag_r) | ifu_rsp_valid;\n        // Here we use the rsp_valid rather than the out_flag_clr (ifu_rsp_hsked) because\n        //   as long as the rsp_valid is asserting then means last request have returned the\n        //   response back, in WFI case, we cannot expect it to be handshaked (otherwise deadlock)\n\n  assign ifu_req_valid = ifu_req_valid_pre & new_req_condi;\n\n  //wire ifu_rsp2ir_ready = (ifu_rsp_replay | pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & (~bpu_wait));\n  wire ifu_rsp2ir_ready = (pipe_flush_req_real) ? 1'b1 : (ifu_ir_i_ready & ifu_req_ready & (~bpu_wait));\n\n  // Response channel only ready when:\n  //   * IR is ready to accept new instructions\n  assign ifu_rsp_ready = ifu_rsp2ir_ready;\n\n  // The PC will need to be updated when ifu req channel handshaked or a flush is incoming\n  wire pc_ena = ifu_req_hsked | pipe_flush_hsked;\n\n  sirv_gnrl_dfflr #(`E203_PC_SIZE) pc_dfflr (pc_ena, pc_nxt, pc_r, clk, rst_n);\n\n\n assign inspect_pc = pc_r;\n\n\n  assign ifu_req_pc    = pc_nxt;\n\n     // The out_flag will be set if there is a new request handshaked\n  wire out_flag_set = ifu_req_hsked;\n     // The out_flag will be cleared if there is a request response handshaked\n  assign out_flag_clr = ifu_rsp_hsked;\n  wire out_flag_ena = out_flag_set | out_flag_clr;\n     // If meanwhile set and clear, then set preempt\n  wire out_flag_nxt = out_flag_set | (~out_flag_clr);\n\n  sirv_gnrl_dfflr #(1) out_flag_dfflr (out_flag_ena, out_flag_nxt, out_flag_r, clk, rst_n);\n\n       // The pc_newpend will be set if there is a new PC loaded\n  wire pc_newpend_set = pc_ena;\n     // The pc_newpend will be cleared if have already loaded into the IR-PC stage\n  wire pc_newpend_clr = ir_pc_vld_set;\n  wire pc_newpend_ena = pc_newpend_set | pc_newpend_clr;\n     // If meanwhile set and clear, then set preempt\n  wire pc_newpend_nxt = pc_newpend_set | (~pc_newpend_clr);\n\n  sirv_gnrl_dfflr #(1) pc_newpend_dfflr (pc_newpend_ena, pc_newpend_nxt, pc_newpend_r, clk, rst_n);\n\n\n  assign ifu_rsp_need_replay = 1'b0;\n  assign ifetch_replay_req = 1'b0;\n\n  `ifndef FPGA_SOURCE//{\n  `ifndef DISABLE_SV_ASSERTION//{\n//synopsys translate_off\n\nCHECK_IFU_REQ_VALID_NO_X:\n  assert property (@(posedge clk) disable iff (~rst_n)\n                     (ifu_req_valid !== 1'bx)\n                  )\n  else $fatal (\"\\n Error: Oops, detected X value for ifu_req_valid !!! This should never happen. \\n\");\n\n//synopsys translate_on\n`endif//}\n`endif//}\n\nendmodule\n\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The ift2icb module convert the fetch request to ICB (Internal Chip bus) \n//  and dispatch to different targets including ITCM, ICache or Sys-MEM.\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_ifu_ift2icb(\n\n\n  input  itcm_nohold,\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // Fetch Interface to memory system, internal protocol\n  //    * IFetch REQ channel\n  input  ifu_req_valid, // Handshake valid\n  output ifu_req_ready, // Handshake ready\n            // Note: the req-addr can be unaligned with the length indicated\n            //       by req_len signal.\n            //       The targetd (ITCM, ICache or Sys-MEM) ctrl modules \n            //       will handle the unalign cases and split-and-merge works\n  input  [`E203_PC_SIZE-1:0] ifu_req_pc, // Fetch PC\n  input  ifu_req_seq, // This request is a sequential instruction fetch\n  input  ifu_req_seq_rv32, // This request is incremented 32bits fetch\n  input  [`E203_PC_SIZE-1:0] ifu_req_last_pc, // The last accessed\n                                           // PC address (i.e., pc_r)\n                             \n  //    * IFetch RSP channel\n  output ifu_rsp_valid, // Response valid \n  input  ifu_rsp_ready, // Response ready\n  output ifu_rsp_err,   // Response error\n            // Note: the RSP channel always return a valid instruction\n            //   fetched from the fetching start PC address.\n            //   The targetd (ITCM, ICache or Sys-MEM) ctrl modules \n            //   will handle the unalign cases and split-and-merge works\n  //output ifu_rsp_replay,   // Response error\n  output [32-1:0] ifu_rsp_instr, // Response instruction\n\n  `ifdef E203_HAS_ITCM //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ITCM address region indication signal\n  input [`E203_ADDR_SIZE-1:0] itcm_region_indic,\n  // Bus Interface to ITCM, internal protocol called ICB (Internal Chip Bus)\n  //    * Bus cmd channel\n  output ifu2itcm_icb_cmd_valid, // Handshake valid\n  input  ifu2itcm_icb_cmd_ready, // Handshake ready\n            // Note: The data on rdata or wdata channel must be naturally\n            //       aligned, this is in line with the AXI definition\n  output [`E203_ITCM_ADDR_WIDTH-1:0]   ifu2itcm_icb_cmd_addr, // Bus transaction start addr \n\n  //    * Bus RSP channel\n  input  ifu2itcm_icb_rsp_valid, // Response valid \n  output ifu2itcm_icb_rsp_ready, // Response ready\n  input  ifu2itcm_icb_rsp_err,   // Response error\n            // Note: the RSP rdata is inline with AXI definition\n  input  [`E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata, \n\n  `endif//}\n\n\n  `ifdef E203_HAS_MEM_ITF //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // Bus Interface to System Memory, internal protocol called ICB (Internal Chip Bus)\n  //    * Bus cmd channel\n  output ifu2biu_icb_cmd_valid, // Handshake valid\n  input  ifu2biu_icb_cmd_ready, // Handshake ready\n            // Note: The data on rdata or wdata channel must be naturally\n            //       aligned, this is in line with the AXI definition\n  output [`E203_ADDR_SIZE-1:0]   ifu2biu_icb_cmd_addr, // Bus transaction start addr \n\n  //    * Bus RSP channel\n  input  ifu2biu_icb_rsp_valid, // Response valid \n  output ifu2biu_icb_rsp_ready, // Response ready\n  input  ifu2biu_icb_rsp_err,   // Response error\n            // Note: the RSP rdata is inline with AXI definition\n  input  [`E203_SYSMEM_DATA_WIDTH-1:0] ifu2biu_icb_rsp_rdata, \n  \n  //input  ifu2biu_replay,\n  `endif//}\n\n\n  // The holdup indicating the target is not accessed by other agents \n  // since last accessed by IFU, and the output of it is holding up\n  // last value. \n  `ifdef E203_HAS_ITCM //{\n  input  ifu2itcm_holdup,\n  //input  ifu2itcm_replay,\n  `endif//}\n\n  input  clk,\n  input  rst_n\n  );\n\n`ifndef E203_HAS_ITCM\n  `ifndef E203_HAS_MEM_ITF\n    !!! ERROR: There is no ITCM and no System interface, where to fetch the instructions? must be wrong configuration.\n  `endif//}\n`endif//}\n\n\n/////////////////////////////////////////////////////////\n// We need to instante this bypbuf for several reasons:\n//   * The IR stage ready signal is generated from EXU stage which \n//      incoperated several timing critical source (e.g., ECC error check, .etc)\n//      and this ready signal will be back-pressure to ifetch rsponse channel here\n//   * If there is no such bypbuf, the ifetch response channel may stuck waiting\n//      the IR stage to be cleared, and this may end up with a deadlock, becuase \n//      EXU stage may access the BIU or ITCM and they are waiting the IFU to accept\n//      last instruction access to make way of BIU and ITCM for LSU to access\n  wire i_ifu_rsp_valid;\n  wire i_ifu_rsp_ready;\n  wire i_ifu_rsp_err;\n  wire [`E203_INSTR_SIZE-1:0] i_ifu_rsp_instr;\n  wire [`E203_INSTR_SIZE+1-1:0]ifu_rsp_bypbuf_i_data;\n  wire [`E203_INSTR_SIZE+1-1:0]ifu_rsp_bypbuf_o_data;\n\n  assign ifu_rsp_bypbuf_i_data = {\n                          i_ifu_rsp_err,\n                          i_ifu_rsp_instr\n                          };\n\n  assign {\n                          ifu_rsp_err,\n                          ifu_rsp_instr\n                          } = ifu_rsp_bypbuf_o_data;\n\n  sirv_gnrl_bypbuf # (\n    .DP(1),\n    .DW(`E203_INSTR_SIZE+1) \n  ) u_e203_ifetch_rsp_bypbuf(\n      .i_vld   (i_ifu_rsp_valid),\n      .i_rdy   (i_ifu_rsp_ready),\n\n      .o_vld   (ifu_rsp_valid),\n      .o_rdy   (ifu_rsp_ready),\n\n      .i_dat   (ifu_rsp_bypbuf_i_data),\n      .o_dat   (ifu_rsp_bypbuf_o_data),\n  \n      .clk     (clk  ),\n      .rst_n   (rst_n)\n  );\n\n// ===========================================================================\n//////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////////////////\n/////// The itfctrl scheme introduction\n//\n// The instruction fetch is very tricky due to two reasons and purposes:\n//   (1) We want to save area and dynamic power as much as possible\n//   (2) The 32bits-length instructon may be in unaligned address\n//\n// In order to acheive above-mentioned purposes we define the tricky\n//   fetch scheme detailed as below.\n//\n///////\n// Firstly, several phrases are introduced here:\n//   * Fetching target: the target address region including\n//         ITCM,\n//         System Memory Fetch Interface or ICache\n//            (Note: Sys Mem and I cache are Exclusive with each other)\n//   * Fetching target's Lane: The Lane here means the fetching \n//       target can read out one lane of data at one time. \n//       For example: \n//        * ITCM is 64bits wide SRAM, then it can read out one \n//          aligned 64bits one time (as a lane)\n//        * System Memory is 32bits wide bus, then it can read out one \n//          aligned 32bits one time (as a lane)\n//        * ICache line is N-Bytes wide SRAM, then it can read out one \n//          aligned N-Bytes one time (as a lane)\n//   * Lane holding-up: The read-out Lane could be holding up there\n//       For examaple:\n//        * ITCM is impelemented as SRAM, the output of SRAM (readout lane)\n//          will keep holding up and not change until next time the SRAM\n//          is accessed (CS asserted) by new transaction\n//        * ICache data ram is impelemented as SRAM, the output of\n//          SRAM (readout lane) will keep holding up and not change until\n//          next time the SRAM is accessed (CS asserted) by new transaction\n//        * The system memory bus is from outside core peripheral or memory\n//          we dont know if it will hold-up. Hence, we assume it is not\n//          hoding up\n//   * Crossing Lane: Since the 32bits-length instruction maybe unaligned with \n//       word address boundry, then it could be in a cross-lane address\n//       For example: \n//        * If it is crossing 64bits boundry, then it is crossing ITCM Lane\n//        * If it is crossing 32bits boundry, then it is crossing System Memory Lane\n//        * If it is crossing N-Bytes boundry, then it is crossing ICache Lane\n//   * IR register: The fetch instruction will be put into IR register which \n//       is to be used by decoder to decoding it at EXU stage\n//       The Lower 16bits of IR will always be loaded with new coming\n//       instructions, but in order to save dynamic power, the higher \n//       16bits IR will only be loaded when incoming instruction is\n//       32bits-length (checked by mini-decode module upfront IR \n//       register)\n//       Note: The source of IR register Din depends on different\n//         situations described in detailed fetching sheme\n//   * Leftover buffer: The ifetch will always speculatively fetch a 32bits\n//       back since we dont know the instruction to be fetched is 32bits or\n//       16bits length (until after it read-back and decoded by mini-decoder).\n//       When the new fetch is crossing lane-boundry from current lane\n//       to next lane, and if the current lane read-out value is holding up.\n//       Then new 32bits instruction to be fetched can be concatated by \n//       \"current holding-up lane's upper 16bits\" and \"next lane's lower 16bits\".\n//       To make it in one cycle, we push the \"current holding-up lane's \n//       upper 16bits\" into leftover buffer (16bits) and only issue one ifetch\n//       request to memory system, and when it responded with rdata-back, \n//       directly concatate the upper 16bits rdata-back with leftover buffer\n//       to become the full 32bits instruction.\n//\n// The new ifetch request could encounter several cases:\n//   * If the new ifetch address is in the same lane portion as last fetch\n//     address (current PC):\n//     ** If it is crossing the lane boundry, and the current lane rdout is \n//        holding up, then\n//        ---- Push current lane rdout's upper 16bits into leftover buffer\n//        ---- Issue ICB cmd request with next lane address \n//        ---- After the response rdata back:\n//            ---- Put the leftover buffer value into IR lower 16bits\n//            ---- Put rdata lower 16bits into IR upper 16bits if instr is 32bits-long\n//\n//     ** If it is crossing the lane boundry, but the current lane rdout is not \n//        holding up, then\n//        ---- First cycle Issue ICB cmd request with current lane address \n//            ---- Put rdata upper 16bits into leftover buffer\n//        ---- Second cycle Issue ICB cmd request with next lane address \n//            ---- Put the leftover buffer value into IR lower 16bits\n//            ---- Put rdata upper 16bits into IR upper 16bits if instr is 32bits-long\n//\n//     ** If it is not crossing the lane boundry, and the current lane rdout is \n//        holding up, then\n//        ---- Not issue ICB cmd request, just directly use current holding rdata\n//            ---- Put aligned rdata into IR (upper 16bits \n//                    only loaded when instr is 32bits-long)\n//\n//     ** If it is not crossing the lane boundry, but the current lane rdout is \n//        not holding up, then\n//        ---- Issue ICB cmd request with current lane address, just directly use\n//               current holding rdata\n//            ---- Put aligned rdata into IR (upper 16bits \n//                    only loaded when instr is 32bits-long)\n//   \n//\n//   * If the new ifetch address is in the different lane portion as last fetch\n//     address (current PC):\n//     ** If it is crossing the lane boundry, regardless the current lane rdout is \n//        holding up or not, then\n//        ---- First cycle Issue ICB cmd reqeust with current lane address \n//            ---- Put rdata upper 16bits into leftover buffer\n//        ---- Second cycle Issue ICB cmd reqeust with next lane address \n//            ---- Put the leftover buffer value into IR lower 16bits\n//            ---- Put rdata upper 16bits into IR upper 16bits if instr is 32bits-long\n//\n//     ** If it is not crossing the lane boundry, then\n//        ---- Issue ICB cmd request with current lane address, just directly use\n//               current holding rdata\n//            ---- Put aligned rdata into IR (upper 16bits \n//                    only loaded when instr is 32bits-long)\n//\n// ===========================================================================\n\n  `ifdef E203_HAS_ITCM //{\n  wire ifu_req_pc2itcm = (ifu_req_pc[`E203_ITCM_BASE_REGION] == itcm_region_indic[`E203_ITCM_BASE_REGION]); \n  `endif//}\n\n  `ifdef E203_HAS_MEM_ITF //{\n  wire ifu_req_pc2mem = 1'b1\n            `ifdef E203_HAS_ITCM //{\n              & ~(ifu_req_pc2itcm)\n            `endif//}\n              ;\n  `endif//}\n\n  // The current accessing PC is crossing the lane boundry\n  wire ifu_req_lane_cross = 1'b0\n                    `ifdef E203_HAS_ITCM //{\n                         | (\n                            ifu_req_pc2itcm   \n                         `ifdef E203_ITCM_DATA_WIDTH_IS_32 //{\n                            & (ifu_req_pc[1] == 1'b1)\n                         `endif//}\n                         `ifdef E203_ITCM_DATA_WIDTH_IS_64 //{\n                            & (ifu_req_pc[2:1] == 2'b11)\n                         `endif//}\n                           )\n                    `endif//}\n                    `ifdef E203_HAS_MEM_ITF //{\n                         | (\n                            ifu_req_pc2mem   \n                         `ifdef E203_SYSMEM_DATA_WIDTH_IS_32 //{\n                            & (ifu_req_pc[1] == 1'b1)\n                         `endif//}\n                         `ifdef E203_SYSMEM_DATA_WIDTH_IS_64 //{\n                            & (ifu_req_pc[2:1] == 2'b11)\n                         `endif//}\n                           )\n                    `endif//}\n                    ;\n\n  // The current accessing PC is begining of the lane boundry\n  wire ifu_req_lane_begin = 1'b0\n                    `ifdef E203_HAS_ITCM //{\n                         | (\n                            ifu_req_pc2itcm   \n                         `ifdef E203_ITCM_DATA_WIDTH_IS_32 //{\n                            & (ifu_req_pc[1] == 1'b0)\n                         `endif//}\n                         `ifdef E203_ITCM_DATA_WIDTH_IS_64 //{\n                            & (ifu_req_pc[2:1] == 2'b00)\n                         `endif//}\n                           )\n                    `endif//}\n                    `ifdef E203_HAS_MEM_ITF //{\n                         | (\n                            ifu_req_pc2mem   \n                         `ifdef E203_SYSMEM_DATA_WIDTH_IS_32 //{\n                            & (ifu_req_pc[1] == 1'b0)\n                         `endif//}\n                         `ifdef E203_SYSMEM_DATA_WIDTH_IS_64 //{\n                            & (ifu_req_pc[2:1] == 2'b00)\n                         `endif//}\n                           )\n                    `endif//}\n                    ;\n  \n\n  // The scheme to check if the current accessing PC is same as last accessed ICB address\n  //   is as below:\n  //     * We only treat this case as true when it is sequentially instruction-fetch\n  //         reqeust, and it is crossing the boundry as unalgned (1st 16bits and 2nd 16bits\n  //         is crossing the boundry)\n  //         ** If the ifetch request is the begining of lane boundry, and sequential fetch,\n  //            Then:\n  //                 **** If the last time it was prefetched ahead, then this time is accessing\n  //                        the same address as last time. Otherwise not.\n  //         ** If the ifetch request is not the begining of lane boundry, and sequential fetch,\n  //            Then:\n  //                 **** It must be access the same address as last time.\n  //     * Note: All other non-sequential cases (e.g., flush, branch or replay) are not\n  //          treated as this case\n  //  \n  wire req_lane_cross_r;\n  wire ifu_req_lane_same = ifu_req_seq & (ifu_req_lane_begin ? req_lane_cross_r : 1'b1);\n  \n  // The current accessing PC is same as last accessed ICB address\n  wire ifu_req_lane_holdup = 1'b0\n            `ifdef E203_HAS_ITCM //{\n            | (ifu_req_pc2itcm & ifu2itcm_holdup & (~itcm_nohold)) \n            `endif//}\n            ;\n\n  wire ifu_req_hsked = ifu_req_valid & ifu_req_ready;\n  wire i_ifu_rsp_hsked = i_ifu_rsp_valid & i_ifu_rsp_ready;\n  wire ifu_icb_cmd_valid;\n  wire ifu_icb_cmd_ready;\n  wire ifu_icb_cmd_hsked = ifu_icb_cmd_valid & ifu_icb_cmd_ready;\n  wire ifu_icb_rsp_valid;\n  wire ifu_icb_rsp_ready;\n  wire ifu_icb_rsp_hsked = ifu_icb_rsp_valid & ifu_icb_rsp_ready;\n\n\n  /////////////////////////////////////////////////////////////////////////////////\n  // Implement the state machine for the ifetch req interface\n  //\n  wire req_need_2uop_r;\n  wire req_need_0uop_r;\n\n\n  localparam ICB_STATE_WIDTH  = 2;\n  // State 0: The idle state, means there is no any oustanding ifetch request\n  localparam ICB_STATE_IDLE = 2'd0;\n  // State 1: Issued first request and wait response\n  localparam ICB_STATE_1ST  = 2'd1;\n  // State 2: Wait to issue second request \n  localparam ICB_STATE_WAIT2ND  = 2'd2;\n  // State 3: Issued second request and wait response\n  localparam ICB_STATE_2ND  = 2'd3;\n  \n  wire [ICB_STATE_WIDTH-1:0] icb_state_nxt;\n  wire [ICB_STATE_WIDTH-1:0] icb_state_r;\n  wire icb_state_ena;\n  wire [ICB_STATE_WIDTH-1:0] state_idle_nxt   ;\n  wire [ICB_STATE_WIDTH-1:0] state_1st_nxt    ;\n  wire [ICB_STATE_WIDTH-1:0] state_wait2nd_nxt;\n  wire [ICB_STATE_WIDTH-1:0] state_2nd_nxt    ;\n  wire state_idle_exit_ena     ;\n  wire state_1st_exit_ena      ;\n  wire state_wait2nd_exit_ena  ;\n  wire state_2nd_exit_ena      ;\n\n  // Define some common signals and reused later to save gatecounts\n  wire icb_sta_is_idle    = (icb_state_r == ICB_STATE_IDLE   );\n  wire icb_sta_is_1st     = (icb_state_r == ICB_STATE_1ST    );\n  wire icb_sta_is_wait2nd = (icb_state_r == ICB_STATE_WAIT2ND);\n  wire icb_sta_is_2nd     = (icb_state_r == ICB_STATE_2ND    );\n\n      // **** If the current state is idle,\n          // If a new request come, next state is ICB_STATE_1ST\n  assign state_idle_exit_ena = icb_sta_is_idle & ifu_req_hsked;\n  assign state_idle_nxt      = ICB_STATE_1ST;\n\n      // **** If the current state is 1st,\n          // If a response come, exit this state\n  wire ifu_icb_rsp2leftover;\n  assign state_1st_exit_ena  = icb_sta_is_1st & (\n                ifu_icb_rsp2leftover ? ifu_icb_rsp_hsked : i_ifu_rsp_hsked);\n  assign state_1st_nxt     = \n                (\n              // If it need two requests but the ifetch request is not ready to be \n              //   accept"}
{"text": "ed, then next state is ICB_STATE_WAIT2ND\n                  (req_need_2uop_r & (~ifu_icb_cmd_ready)) ?  ICB_STATE_WAIT2ND\n              // If it need two requests and the ifetch request is ready to be \n              //   accepted, then next state is ICB_STATE_2ND\n                  : (req_need_2uop_r & (ifu_icb_cmd_ready)) ?  ICB_STATE_2ND \n              // If it need zero or one requests and new req handshaked, then \n              //   next state is ICB_STATE_1ST\n              // If it need zero or one requests and no new req handshaked, then\n              //   next state is ICB_STATE_IDLE\n                  :  ifu_req_hsked  ?  ICB_STATE_1ST \n                                    : ICB_STATE_IDLE \n                ) ;\n\n      // **** If the current state is wait-2nd,\n              // If the ICB CMD is ready, then next state is ICB_STATE_2ND\n  assign state_wait2nd_exit_ena = icb_sta_is_wait2nd &  ifu_icb_cmd_ready;\n  assign state_wait2nd_nxt      = ICB_STATE_2ND;\n\n      // **** If the current state is 2nd,\n          // If a response come, exit this state\n  assign state_2nd_exit_ena     =  icb_sta_is_2nd &  i_ifu_rsp_hsked;\n  assign state_2nd_nxt          = \n                (\n              // If meanwhile new req handshaked, then next state is ICB_STATE_1ST\n                  ifu_req_hsked  ?  ICB_STATE_1ST : \n                      // otherwise, back to IDLE\n                      ICB_STATE_IDLE\n                );\n\n  // The state will only toggle when each state is meeting the condition to exit:\n  assign icb_state_ena = \n            state_idle_exit_ena | state_1st_exit_ena | state_wait2nd_exit_ena | state_2nd_exit_ena;\n\n  // The next-state is onehot mux to select different entries\n  assign icb_state_nxt = \n              ({ICB_STATE_WIDTH{state_idle_exit_ena   }} & state_idle_nxt   )\n            | ({ICB_STATE_WIDTH{state_1st_exit_ena    }} & state_1st_nxt    )\n            | ({ICB_STATE_WIDTH{state_wait2nd_exit_ena}} & state_wait2nd_nxt)\n            | ({ICB_STATE_WIDTH{state_2nd_exit_ena    }} & state_2nd_nxt    )\n              ;\n\n  sirv_gnrl_dfflr #(ICB_STATE_WIDTH) icb_state_dfflr (icb_state_ena, icb_state_nxt, icb_state_r, clk, rst_n);\n\n  /////////////////////////////////////////////////////////////////////////////////\n  // Save the same_cross_holdup flags for this ifetch request to be used\n  wire req_same_cross_holdup_r;\n\n  wire req_same_cross_holdup = ifu_req_lane_same & ifu_req_lane_cross & ifu_req_lane_holdup;\n  wire req_need_2uop         = (  ifu_req_lane_same  & ifu_req_lane_cross & (~ifu_req_lane_holdup))\n                             | ((~ifu_req_lane_same) & ifu_req_lane_cross);\n  wire req_need_0uop         = ifu_req_lane_same & (~ifu_req_lane_cross) & ifu_req_lane_holdup;\n\n  sirv_gnrl_dfflr #(1) req_same_cross_holdup_dfflr (ifu_req_hsked, req_same_cross_holdup, req_same_cross_holdup_r, clk, rst_n);\n  sirv_gnrl_dfflr #(1) req_need_2uop_dfflr         (ifu_req_hsked, req_need_2uop,         req_need_2uop_r,         clk, rst_n);\n  sirv_gnrl_dfflr #(1) req_need_0uop_dfflr         (ifu_req_hsked, req_need_0uop,         req_need_0uop_r,         clk, rst_n);\n  sirv_gnrl_dfflr #(1) req_lane_cross_dfflr        (ifu_req_hsked, ifu_req_lane_cross,    req_lane_cross_r,        clk, rst_n);\n\n  /////////////////////////////////////////////////////////////////////////////////\n  // Save the indicate flags for this ICB transaction to be used\n  wire [`E203_PC_SIZE-1:0] ifu_icb_cmd_addr;\n  `ifdef E203_HAS_ITCM //{\n  wire ifu_icb_cmd2itcm;\n  wire icb_cmd2itcm_r;\n  sirv_gnrl_dfflr #(1) icb2itcm_dfflr(ifu_icb_cmd_hsked, ifu_icb_cmd2itcm, icb_cmd2itcm_r, clk, rst_n);\n  `endif//}\n  `ifdef E203_HAS_MEM_ITF //{\n  wire ifu_icb_cmd2biu ;\n  wire icb_cmd2biu_r;\n  sirv_gnrl_dfflr #(1) icb2mem_dfflr (ifu_icb_cmd_hsked, ifu_icb_cmd2biu , icb_cmd2biu_r,  clk, rst_n);\n  `endif//}\n  wire icb_cmd_addr_2_1_ena = ifu_icb_cmd_hsked | ifu_req_hsked;\n  wire [1:0] icb_cmd_addr_2_1_r;\n  sirv_gnrl_dffl #(2)icb_addr_2_1_dffl(icb_cmd_addr_2_1_ena, ifu_icb_cmd_addr[2:1], icb_cmd_addr_2_1_r, clk);\n\n  /////////////////////////////////////////////////////////////////////////////////\n  // Implement Leftover Buffer\n  wire leftover_ena; \n  wire [15:0] leftover_nxt; \n  wire [15:0] leftover_r; \n  wire leftover_err_nxt; \n  wire leftover_err_r; \n\n  // The leftover buffer will be loaded into two cases\n  // Please see \"The itfctrl scheme introduction\" for more details \n  //    * Case #1: Loaded when the last holdup upper 16bits put into leftover\n  //    * Case #2: Loaded when the 1st request uop rdata upper 16bits put into leftover \n  wire holdup2leftover_sel = req_same_cross_holdup;\n  wire holdup2leftover_ena = ifu_req_hsked & holdup2leftover_sel;\n  wire [15:0]  put2leftover_data = 16'b0   \n  //wire [15:0]  holdup2leftover_data = 16'b0   \n                     `ifdef E203_HAS_ITCM //{\n                      | ({16{icb_cmd2itcm_r}} & ifu2itcm_icb_rsp_rdata[`E203_ITCM_DATA_WIDTH-1:`E203_ITCM_DATA_WIDTH-16]) \n                     `endif//}\n                     `ifdef E203_HAS_MEM_ITF //{\n                      | ({16{icb_cmd2biu_r}} & ifu2biu_icb_rsp_rdata [`E203_SYSMEM_DATA_WIDTH-1:`E203_SYSMEM_DATA_WIDTH-16]) \n                     `endif//}\n                      ;\n\n  wire uop1st2leftover_sel = ifu_icb_rsp2leftover;\n  wire uop1st2leftover_ena = ifu_icb_rsp_hsked & uop1st2leftover_sel;\n\n  //wire [15:0]  uop1st2leftover_data = 16'b0   \n  //                   `ifdef E203_HAS_ITCM //{\n  //                    | ({16{icb_cmd2itcm_r}} & ifu2itcm_icb_rsp_rdata[`E203_ITCM_DATA_WIDTH-1:`E203_ITCM_DATA_WIDTH-16]) \n  //                   `endif//}\n  //                   `ifdef E203_HAS_MEM_ITF //{\n  //                    | ({16{icb_cmd2biu_r}} & ifu2biu_icb_rsp_rdata [`E203_SYSMEM_DATA_WIDTH-1:`E203_SYSMEM_DATA_WIDTH-16]) \n  //                   `endif//}\n  //                    ;\n\n  wire uop1st2leftover_err = 1'b0   \n                     `ifdef E203_HAS_ITCM //{\n                      | (icb_cmd2itcm_r & ifu2itcm_icb_rsp_err)\n                     `endif//}\n                     `ifdef E203_HAS_MEM_ITF //{\n                      | (icb_cmd2biu_r & ifu2biu_icb_rsp_err)\n                     `endif//}\n                      ;\n\n  assign leftover_ena = holdup2leftover_ena \n                      | uop1st2leftover_ena;\n\n  assign leftover_nxt = \n                      //  ({16{holdup2leftover_sel}} & holdup2leftover_data[15:0]) \n                      //| ({16{uop1st2leftover_sel}} & uop1st2leftover_data[15:0]) \n                        put2leftover_data[15:0] \n                      ;\n\n  assign leftover_err_nxt = \n                        (holdup2leftover_sel & 1'b0)\n                      | (uop1st2leftover_sel & uop1st2leftover_err) \n                      ;\n\n  sirv_gnrl_dffl #(16) leftover_dffl     (leftover_ena, leftover_nxt,     leftover_r,     clk);\n  sirv_gnrl_dfflr #(1) leftover_err_dfflr(leftover_ena, leftover_err_nxt, leftover_err_r, clk, rst_n);\n  \n  /////////////////////////////////////////////////////////////////////////////////\n  // Generate the ifetch response channel\n  // \n  // The ifetch response instr will have 2 sources\n  // Please see \"The itfctrl scheme introduction\" for more details \n  //    * Source #1: The concatenation by {rdata[15:0],leftover}, when\n  //          ** the state is in 2ND uop\n  //          ** the state is in 1ND uop but it is same-cross-holdup case\n  //    * Source #2: The rdata-aligned, when\n  //           ** not selecting leftover\n  wire rsp_instr_sel_leftover = (   icb_sta_is_1st\n                                  & req_same_cross_holdup_r\n                                )\n                              | icb_sta_is_2nd;\n\n  wire rsp_instr_sel_icb_rsp = ~rsp_instr_sel_leftover;\n\n  wire [16-1:0] ifu_icb_rsp_rdata_lsb16 = 16'b0\n                     `ifdef E203_HAS_ITCM //{\n                       | ({16{icb_cmd2itcm_r}} & ifu2itcm_icb_rsp_rdata[15:0])\n                     `endif//}\n                     `ifdef E203_HAS_MEM_ITF //{\n                       | ({16{icb_cmd2biu_r}}  & ifu2biu_icb_rsp_rdata[15:0])\n                     `endif//}\n                        ;\n\n\n  // The fetched instruction from ICB rdata bus need to be aligned by PC LSB bits\n  `ifdef E203_HAS_ITCM //{\n  wire[31:0] ifu2itcm_icb_rsp_instr = \n     `ifdef E203_ITCM_DATA_WIDTH_IS_32 //{\n                    ifu2itcm_icb_rsp_rdata;\n     `else//}{\n        `ifdef E203_ITCM_DATA_WIDTH_IS_64\n                    ({32{icb_cmd_addr_2_1_r == 2'b00}} & ifu2itcm_icb_rsp_rdata[31: 0]) \n                  | ({32{icb_cmd_addr_2_1_r == 2'b01}} & ifu2itcm_icb_rsp_rdata[47:16]) \n                  | ({32{icb_cmd_addr_2_1_r == 2'b10}} & ifu2itcm_icb_rsp_rdata[63:32])\n                     ;\n        `else//}{\n            !!! ERROR: There must be something wrong, we dont support the width \n            other than 32bits and 64bits, leave this message to catch this error by \n            compilation message.\n        `endif//}\n     `endif//}\n  `endif//}\n\n  `ifdef E203_HAS_MEM_ITF //{\n  wire[31:0] ifu2biu_icb_rsp_instr = \n     `ifdef E203_SYSMEM_DATA_WIDTH_IS_32 //{\n                    ifu2biu_icb_rsp_rdata;\n     `else//}{\n        `ifdef E203_SYSMEM_DATA_WIDTH_IS_64//{\n                    ({32{icb_cmd_addr_2_1_r == 2'b00}} & ifu2biu_icb_rsp_rdata[31: 0]) \n                    ({32{icb_cmd_addr_2_1_r == 2'b01}} & ifu2biu_icb_rsp_rdata[47:16]) \n                    ({32{icb_cmd_addr_2_1_r == 2'b10}} & ifu2biu_icb_rsp_rdata[63:32])\n                     ;\n        `else//}{\n            !!! ERROR: There must be something wrong, we dont support the width \n            other than 32bits and 64bits, leave this message to catch this error by \n            compilation message.\n        `endif//}\n     `endif//}\n  `endif//}\n\n  wire [32-1:0] ifu_icb_rsp_instr = 32'b0\n                     `ifdef E203_HAS_ITCM //{\n                       | ({32{icb_cmd2itcm_r}} & ifu2itcm_icb_rsp_instr)\n                     `endif//}\n                     `ifdef E203_HAS_MEM_ITF //{\n                       | ({32{icb_cmd2biu_r}}  & ifu2biu_icb_rsp_instr)\n                     `endif//}\n                        ;\n\n  wire ifu_icb_rsp_err = 1'b0\n                     `ifdef E203_HAS_ITCM //{\n                       | (icb_cmd2itcm_r & ifu2itcm_icb_rsp_err)\n                     `endif//}\n                     `ifdef E203_HAS_MEM_ITF //{\n                       | (icb_cmd2biu_r  & ifu2biu_icb_rsp_err)\n                     `endif//}\n                        ;\n\n  assign i_ifu_rsp_instr = \n              ({32{rsp_instr_sel_leftover}} & {ifu_icb_rsp_rdata_lsb16, leftover_r})\n            | ({32{rsp_instr_sel_icb_rsp }} & ifu_icb_rsp_instr);\n  assign i_ifu_rsp_err = \n              (rsp_instr_sel_leftover & (|{ifu_icb_rsp_err, leftover_err_r}))\n            | (rsp_instr_sel_icb_rsp  & ifu_icb_rsp_err);\n  ////If the response is to leftover, it is always can be accepted,\n  ////  so there is no chance to turn over the value, and no need \n  ////  to replay, but the data from the response channel (from\n  ////  ITCM) may be turned over, so need to be replayed\n  //wire ifu_icb_rsp_replay;\n  //assign ifu_rsp_replay = \n  //            (rsp_instr_sel_leftover & (|{ifu_icb_rsp_replay, 1'b0}))\n  //          | (rsp_instr_sel_icb_rsp  & ifu_icb_rsp_replay);\n            \n  // The ifetch response valid will have 2 sources\n  //    Source #1: Did not issue ICB CMD request, and just use last holdup values, then\n  //               we generate a fake response valid\n  wire holdup_gen_fake_rsp_valid = icb_sta_is_1st & req_need_0uop_r;\n  //    Source #2: Did issue ICB CMD request, use ICB response valid. But not each response\n  //               valid will be sent to ifetch-response. The ICB response data will put \n  //               into the leftover buffer when:\n  //                    It need two uops and itf-state is in 1ST stage (the leftover\n  //                    buffer is always ready to accept this)\n  assign ifu_icb_rsp2leftover = req_need_2uop_r & icb_sta_is_1st;\n  wire ifu_icb_rsp2ir_ready;\n\n  wire ifu_icb_rsp2ir_valid = ifu_icb_rsp2leftover ? 1'b0 : ifu_icb_rsp_valid;\n  assign ifu_icb_rsp_ready  = ifu_icb_rsp2leftover ? 1'b1 : ifu_icb_rsp2ir_ready;\n  //\n\n  assign i_ifu_rsp_valid = holdup_gen_fake_rsp_valid | ifu_icb_rsp2ir_valid;\n  assign ifu_icb_rsp2ir_ready = i_ifu_rsp_ready;\n\n\n  /////////////////////////////////////////////////////////////////////////////////\n  // Generate the ICB response channel\n  //\n  // The ICB response valid to ifetch generated in two cases:\n  //    * Case #1: The itf need two uops, and it is in 2ND state response\n  //    * Case #2: The itf need only one uop, and it is in 1ND state response\n  assign ifu_icb_rsp_valid = 1'b0\n                     `ifdef E203_HAS_ITCM //{\n                       | (icb_cmd2itcm_r & ifu2itcm_icb_rsp_valid)\n                     `endif//}\n                     `ifdef E203_HAS_MEM_ITF //{\n                       | (icb_cmd2biu_r  & ifu2biu_icb_rsp_valid)\n                     `endif//}\n                        ;\n \n   //  //   Explain the performance impacts\n   //  //      because there is a over killing, that the very 1st time ifu to access ITCM it actually\n   //  //      does not need to be replayed, but it just did replay becuase the holdup is not set but we dont care\n   //assign ifu_icb_rsp_replay = 1'b0\n   //                  `ifdef E203_HAS_ITCM //{\n   //                    | (icb_cmd2itcm_r & ifu2itcm_replay)\n   //                  `endif//}\n   //                  `ifdef E203_HAS_MEM_ITF //{\n   //                    | (icb_cmd2biu_r & ifu2biu_replay)\n   //                  `endif//}\n   //                     ;\n\n  /////////////////////////////////////////////////////////////////////////////////\n  // Generate the ICB command channel\n  //\n  // The ICB cmd valid will be generated in two cases:\n  //   * Case #1: When the new ifetch-request is coming, and it is not \"need zero \n  //              uops\"\n  //   * Case #2: When the ongoing ifetch is \"need 2 uops\", and:\n  //                ** itf-state is in 1ST state and its response is handshaking (about\n  //                    to finish the 1ST state)\n  //                ** or it is already in WAIT2ND state\n  wire ifu_req_valid_pos;\n  assign ifu_icb_cmd_valid = \n                   (ifu_req_valid_pos & (~req_need_0uop))\n                 | ( \n                     req_need_2uop_r &\n                     (\n                         ((icb_sta_is_1st & ifu_icb_rsp_hsked)\n                       |  icb_sta_is_wait2nd)\n                     )\n                   ) \n                     ;\n                     \n  // The ICB cmd address will be generated in 3 cases:\n  //   * Case #1: Use next lane-aligned address, when \n  //                 ** It is same-cross-holdup case for 1st uop\n  //                 The next-lane-aligned address can be generated by \n  //                 current request-PC plus 16bits. To optimize the\n  //                 timing, we try to use last-fetched-PC (flop clean)\n  //                 to caculate. So we caculate it by \n  //                 last-fetched-PC (flopped value pc_r) truncated\n  //                 with lane-offset and plus a lane siz\n  wire icb_addr_sel_1stnxtalgn = holdup2leftover_sel;\n  //\n  //   * Case #2: Use next lane-aligned address, when\n  //                 ** It need 2 uops, and it is 1ST or WAIT2ND stage\n  //                 The next-lane-aligned address can be generated by\n  //                 last request-PC plus 16bits. \n  wire icb_addr_sel_2ndnxtalgn = req_need_2uop_r &\n                     (\n                          icb_sta_is_1st \n                       |  icb_sta_is_wait2nd\n                     );\n  //\n  //   * Case #3: Use current ifetch address in 1st uop, when \n  //                 ** It is not above two cases\n  wire icb_addr_sel_cur = (~icb_addr_sel_1stnxtalgn) & (~icb_addr_sel_2ndnxtalgn);\n\n  wire [`E203_PC_SIZE-1:0] nxtalgn_plus_offset = \n               icb_addr_sel_2ndnxtalgn ? `E203_PC_SIZE'd2 :\n               ifu_req_seq_rv32        ? `E203_PC_SIZE'd6 :\n                                         `E203_PC_SIZE'd4;\n  // Since we always fetch 32bits\n  wire [`E203_PC_SIZE-1:0] icb_algn_nxt_lane_addr = ifu_req_last_pc + nxtalgn_plus_offset;\n\n  assign ifu_icb_cmd_addr = \n      ({`E203_PC_SIZE{icb_addr_sel_1stnxtalgn | icb_addr_sel_2ndnxtalgn}} & icb_algn_nxt_lane_addr)\n    | ({`E203_PC_SIZE{icb_addr_sel_cur}} & ifu_req_pc);\n\n  /////////////////////////////////////////////////////////////////////////////////\n  // Generate the ifetch req channel ready signal\n  //\n  // Ifu req channel will be ready when the ICB CMD channel is ready and \n  //    * the itf-state is idle\n  //    * or only need zero or one uop, and in 1ST state response is backing\n  //    * or need two uops, and in 2ND state response is backing\n  wire ifu_req_ready_condi = \n                (\n                    icb_sta_is_idle \n                  | ((~req_need_2uop_r) & icb_sta_is_1st & i_ifu_rsp_hsked)\n                  | (  req_need_2uop_r  & icb_sta_is_2nd & i_ifu_rsp_hsked) \n                );\n  assign ifu_req_ready     = ifu_icb_cmd_ready & ifu_req_ready_condi; \n  assign ifu_req_valid_pos = ifu_req_valid     & ifu_req_ready_condi; // Handshake valid\n\n\n\n\n  ///////////////////////////////////////////////////////\n  // Dispatch the ICB CMD and RSP Channel to ITCM and System Memory\n  //   according to the address range\n  `ifdef E203_HAS_ITCM //{\n  assign ifu_icb_cmd2itcm = (ifu_icb_cmd_addr[`E203_ITCM_BASE_REGION] == itcm_region_indic[`E203_ITCM_BASE_REGION]);\n\n  assign ifu2itcm_icb_cmd_valid = ifu_icb_cmd_valid & ifu_icb_cmd2itcm;\n  assign ifu2itcm_icb_cmd_addr = ifu_icb_cmd_addr[`E203_ITCM_ADDR_WIDTH-1:0];\n\n  assign ifu2itcm_icb_rsp_ready = ifu_icb_rsp_ready;\n  `endif//}\n\n  `ifdef E203_HAS_MEM_ITF //{\n  assign ifu_icb_cmd2biu = 1'b1\n            `ifdef E203_HAS_ITCM //{\n              & ~(ifu_icb_cmd2itcm)\n            `endif//}\n              ;\n  wire ifu2biu_icb_cmd_valid_pre  = ifu_icb_cmd_valid & ifu_icb_cmd2biu;\n  wire [`E203_ADDR_SIZE-1:0]   ifu2biu_icb_cmd_addr_pre = ifu_icb_cmd_addr[`E203_ADDR_SIZE-1:0];\n\n  assign ifu2biu_icb_rsp_ready = ifu_icb_rsp_ready;\n\n  wire ifu2biu_icb_cmd_ready_pre;\n  `endif//}\n\n  assign ifu_icb_cmd_ready = 1'b0\n    `ifdef E203_HAS_ITCM //{\n        | (ifu_icb_cmd2itcm & ifu2itcm_icb_cmd_ready) \n    `endif//}\n    `ifdef E203_HAS_MEM_ITF //{\n        | (ifu_icb_cmd2biu  & ifu2biu_icb_cmd_ready_pre ) \n    `endif//}\n        ;\n\n    `ifdef E203_HAS_MEM_ITF //{\n  //sirv_gnrl_pipe_stage # (\n  //      // We must not cut ready, otherwise it cannot accept ifetch back-to-back,\n  //      //   and then when the external bus is 0 cycle response, it will trigger \n  //      //   the replay scheme time by time, and never end, endup with a deadlock replay\n  //      .CUT_READY (0),\n  //      // We must have this stage and configure DP as 1, otherwise the BIU only \n  //      //   have 1 DP entry stage and with CUT_READY=1, and then when the external bus \n  //      //   is 0 cycle response, it will trigger the replay scheme time by time,\n  //      //   and never end, endup with a deadlock replay\n  //      .DP  (1),\n  //      .DW  (`E203_ADDR_SIZE)\n  //    ) u_e203_ifu2biu_cmd_stage (\n  //      .i_vld(ifu2biu_icb_cmd_valid_pre),\n  //      .i_rdy(ifu2biu_icb_cmd_ready_pre),\n  //      .i_dat(ifu2biu_icb_cmd_addr_pre),\n  //      .o_vld(ifu2biu_icb_cmd_valid),\n  //      .o_rdy(ifu2biu_icb_cmd_ready),  \n  //      .o_dat(ifu2biu_icb_cmd_addr),\n  //    \n  //      .clk  (clk),\n  //      .rst_n(rst_n)\n  //    );\n\n     assign ifu2biu_icb_cmd_addr      = ifu2biu_icb_cmd_addr_pre;\n     assign ifu2biu_icb_cmd_valid     = ifu2biu_icb_cmd_valid_pre;\n     assign ifu2biu_icb_cmd_ready_pre = ifu2biu_icb_cmd_ready;\n    `endif//}\n\n\nendmodule\n\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n// Designer   : Bob Hu\n//\n// Description:\n//  The Lite-BPU module to handle very simple branch predication at IFU\n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_ifu_litebpu(\n\n  // Current PC\n  input  [`E203_PC_SIZE-1:0] pc,\n\n  // The mini-decoded info \n  input  dec_jal,\n  input  dec_jalr,\n  input  dec_bxx,\n  input  [`E203_XLEN-1:0] dec_bjp_imm,\n  input  [`E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n\n  // The IR index and OITF status to be used for checking dependency\n  input  oitf_empty,\n  input  ir_empty,\n  input  ir_rs1en,\n  input  jalr_rs1idx_cam_irrdidx,\n  \n  // The add op to next-pc adder\n  output bpu_wait,  \n  output prdt_taken,  \n  output [`E203_PC_SIZE-1:0] prdt_pc_add_op1,  \n  output [`E203_PC_SIZE-1:0] prdt_pc_add_op2,\n\n  input  dec_i_valid,\n\n  // The RS1 to read regfile\n  output bpu2rf_rs1_ena,\n  input  ir_valid_clr,\n  input  [`E203_XLEN-1:0] rf2bpu_x1,\n  input  [`E203_XLEN-1:0] rf2bpu_rs1,\n\n  input  clk,\n  input  rst_n\n  );\n\n\n  // BPU of E201 utilize very simple static branch prediction logics\n  //   * JAL: The target address of JAL is calculated based on current PC value\n  //          and offset, and JAL is unconditionally always jump\n  //   * JALR with rs1 == x0: The target address of JALR is calculated based on\n  //          x0+offset, and JALR is unconditionally always jump\n  //   * JALR with rs1 = x1: The x1 register value is directly wired from regfile\n  //          when the x1 have no dependency with ongoing instructions by checking\n  //          two conditions:\n  //            ** (1) The OTIF in EXU must be empty \n  //            ** (2) The instruction in IR have no x1 as destination register\n  //          * If there is dependency, then hold up IFU until the dependency is cleared\n  //   * JALR with rs1 != x0 or x1: The target address of JALR need to be resolved\n  //          at EXU stage, hence have to be forced halted, wait the EXU to be\n  //          empty and then read the regfile to grab the value of xN.\n  //          This will exert 1 cycle performance lost for JALR instruction\n  //   * Bxxx: Conditional branch is always predicted as taken if it is backward\n  //          jump, and not-taken if it is forward jump. The target address of JAL\n  //          is calculated based on current PC value and offset\n\n  // The JAL and JALR is always jump, bxxx backward is predicted as taken  \n  assign prdt_taken   = (dec_jal | dec_jalr | (dec_bxx & dec_bjp_imm[`E203_XLEN-1]));  \n  // The JALR with rs1 == x1 have dependency or xN have dependency\n  wire dec_jalr_rs1x0 = (dec_jalr_rs1idx == `E203_RFIDX_WIDTH'd0);\n  wire dec_jalr_rs1x1 = (dec_jalr_rs1idx == `E203_RFIDX_WIDTH'd1);\n  wire dec_jalr_rs1xn = (~dec_jalr_rs1x0) & (~dec_jalr_rs1x1);\n\n  wire jalr_rs1x1_dep = dec_i_valid & dec_jalr & dec_jalr_rs1x1 & ((~oitf_empty) | (jalr_rs1idx_cam_irrdidx));\n  wire jalr_rs1xn_dep = dec_i_valid & dec_jalr & dec_jalr_rs1xn & ((~oitf_empty) | (~ir_empty));\n\n                      // If only depend to IR stage (OITF is empty), then if IR is under clearing, or\n                          // it does not use RS1 index, then we can also treat it as non-dependency\n  wire jalr_rs1xn_dep_ir_clr = (jalr_rs1xn_dep & oitf_empty & (~ir_empty)) & (ir_valid_clr | (~ir_rs1en));\n\n  wire rs1xn_rdrf_r;\n  wire rs1xn_rdrf_set = (~rs1xn_rdrf_r) & dec_i_valid & dec_jalr & dec_jalr_rs1xn & ((~jalr_rs1xn_dep) | jalr_rs1xn_dep_ir_clr);\n  wire rs1xn_rdrf_clr = rs1xn_rdrf_r;\n  wire rs1xn_rdrf_ena = rs1xn_rdrf_set |   rs1xn_rdrf_clr;\n  wire rs1xn_rdrf_nxt = rs1xn_rdrf_set | (~rs1xn_rdrf_clr);\n\n  sirv_gnrl_dfflr #(1) rs1xn_rdrf_dfflrs(rs1xn_rdrf_ena, rs1xn_rdrf_nxt, rs1xn_rdrf_r, clk, rst_n);\n\n  assign bpu2rf_rs1_ena = rs1xn_rdrf_set;\n\n  assign bpu_wait = jalr_rs1x1_dep | jalr_rs1xn_dep | rs1xn_rdrf_set;\n\n  assign prdt_pc_add_op1 = (dec_bxx | dec_jal) ? pc[`E203_PC_SIZE-1:0]\n                         : (dec_jalr & dec_jalr_rs1x0) ? `E203_PC_SIZE'b0\n                         : (dec_jalr & dec_jalr_rs1x1) ? rf2bpu_x1[`E203_PC_SIZE-1:0]\n                         : rf2bpu_rs1[`E203_PC_SIZE-1:0];  \n\n  assign prdt_pc_add_op2 = dec_bjp_imm[`E203_PC_SIZE-1:0];  \n\nendmodule\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n// Designer   : Bob Hu\n//\n// Description:\n//  The mini-decode module to decode the instruction in IFU \n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_ifu_minidec(\n\n  //////////////////////////////////////////////////////////////\n  // The IR stage to Decoder\n  input  [`E203_INSTR_SIZE-1:0] instr,\n  \n  //////////////////////////////////////////////////////////////\n  // The Decoded Info-Bus\n\n\n  output dec_rs1en,\n  output dec_rs2en,\n  output [`E203_RFIDX_WIDTH-1:0] dec_rs1idx,\n  output [`E203_RFIDX_WIDTH-1:0] dec_rs2idx,\n\n  output dec_mulhsu,\n  output dec_mul   ,\n  output dec_div   ,\n  output dec_rem   ,\n  output dec_divu  ,\n  output dec_remu  ,\n\n  output dec_rv32,\n  output dec_bjp,\n  output dec_jal,\n  output dec_jalr,\n  output dec_bxx,\n  output [`E203_RFIDX_WIDTH-1:0] dec_jalr_rs1idx,\n  output [`E203_XLEN-1:0] dec_bjp_imm \n\n  );\n\n  e203_exu_decode u_e203_exu_decode(\n\n  .i_instr(instr),\n  .i_pc(`E203_PC_SIZE'b0),\n  .i_prdt_taken(1'b0), \n  .i_muldiv_b2b(1'b0), \n\n  .i_misalgn (1'b0),\n  .i_buserr  (1'b0),\n\n  .dbg_mode  (1'b0),\n\n  .dec_misalgn(),\n  .dec_buserr(),\n  .dec_ilegl(),\n\n  .dec_rs1x0(),\n  .dec_rs2x0(),\n  .dec_rs1en(dec_rs1en),\n  .dec_rs2en(dec_rs2en),\n  .dec_rdwen(),\n  .dec_rs1idx(dec_rs1idx),\n  .dec_rs2idx(dec_rs2idx),\n  .dec_rdidx(),\n  .dec_info(),  \n  .dec_imm(),\n  .dec_pc(),\n\n  \n  .dec_mulhsu(dec_mulhsu),\n  .dec_mul   (dec_mul   ),\n  .dec_div   (dec_div   ),\n  .dec_rem   (dec_rem   ),\n  .dec_divu  (dec_divu  ),\n  .dec_remu  (dec_remu  ),\n\n  .dec_rv32(dec_rv32),\n  .dec_bjp (dec_bjp ),\n  .dec_jal (dec_jal ),\n  .dec_jalr(dec_jalr),\n  .dec_bxx (dec_bxx ),\n\n  .dec_jalr_rs1idx(dec_jalr_rs1idx),\n  .dec_bjp_imm    (dec_bjp_imm    )  \n  );\n\n\nendmodule\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n// Designer   : Bob Hu\n//\n// Description:\n//  The IRQ and Event Sync module\n//\n// ====================================================================\n\n`include \"e203_defines.v\"\n\nmodule e203_irq_sync #(\n  parameter MASTER = 1 \n) (\n  input  clk,    \n  input  rst_n,   \n\n  input  ext_irq_a,\n  input  sft_irq_a,\n  input  tmr_irq_a,\n  input  dbg_irq_a,\n\n  output ext_irq_r,\n  output sft_irq_r,\n  output tmr_irq_r,\n  output dbg_irq_r \n);\ngenerate \n  if(MASTER == 1) begin:master_gen\n      `ifndef E203_HAS_LOCKSTEP//{\n      `ifdef E203_IRQ_NEED_SYNC//{\n      sirv_gnrl_sync # (\n        .DP(`E203_ASYNC_FF_LEVELS),\n        .DW(1)\n      ) u_dbg_irq_sync(\n          .din_a    (dbg_irq_a),\n          .dout     (dbg_irq_r),\n          .clk      (clk  ),\n          .rst_n    (rst_n) \n      );\n      \n      \n      sirv_gnrl_sync # (\n        .DP(`E203_ASYNC_FF_LEVELS),\n        .DW(1)\n      ) u_ext_irq_sync(\n          .din_a    (ext_irq_a),\n          .dout     (ext_irq_r),\n          .clk      (clk  ),\n          .rst_n    (rst_n) \n      );\n      \n      sirv_gnrl_sync # (\n        .DP(`E203_ASYNC_FF_LEVELS),\n        .DW(1)\n      ) u_sft_irq_sync(\n          .din_a    (sft_irq_a),\n          .dout     (sft_irq_r),\n          .clk      (clk  ),\n          .rst_n    (rst_n) \n      );\n      \n      sirv_gnrl_sync # (\n        .DP(`E203_ASYNC_FF_LEVELS),\n        .DW(1)\n      ) u_tmr_irq_sync(\n          .din_a    (tmr_irq_a),\n          .dout     (tmr_irq_r),\n          .clk      (clk  ),\n          .rst_n    (rst_n) \n      );\n      `else//}{\n        assign ext_irq_r = ext_irq_a;\n        assign sft_irq_r = sft_irq_a;\n        assign tmr_irq_r = tmr_irq_a;\n        assign dbg_irq_r = dbg_irq_a;\n      `endif//}\n      `endif//}\n      \n      \n  end\n  else begin:slave_gen\n         // Just pass through for slave in lockstep mode\n     assign ext_irq_r = ext_irq_a;\n     assign sft_irq_r = sft_irq_a;\n     assign tmr_irq_r = tmr_irq_a;\n     assign dbg_irq_r = dbg_irq_a;\n   \n  end\nendgenerate\n\n\nendmodule\n\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The itcm_ctrl module control the ITCM access requests \n//\n// ====================================================================\n`include \"e203_defines.v\"\n\n  `ifdef E203_HAS_ITCM //{\n\nmodule e203_itcm_ctrl(\n  output itcm_active,\n  // The cgstop is coming from CSR (0xBFE mcgstop)'s filed 1\n  // // This register is our self-defined CSR register to disable the \n      // ITCM SRAM clock gating for debugging purpose\n  input  tcm_cgstop,\n  // Note: the ITCM ICB interface only support the single-transaction\n  \n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // IFU ICB to ITCM\n  //    * Bus cmd channel\n  input  ifu2itcm_icb_cmd_valid, // Handshake valid\n  output ifu2itcm_icb_cmd_ready, // Handshake ready\n            // Note: The data on rdata or wdata channel must be naturally\n            //       aligned, this is in line with the AXI definition\n  input  [`E203_ITCM_ADDR_WIDTH-1:0] ifu2itcm_icb_cmd_addr, // Bus transaction start addr \n  input  ifu2itcm_icb_cmd_read,   // Read or write\n  input  [`E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_cmd_wdata, \n  input  [`E203_ITCM_WMSK_WIDTH-1:0] ifu2itcm_icb_cmd_wmask, \n\n  //    * Bus RSP channel\n  output ifu2itcm_icb_rsp_valid, // Response valid \n  input  ifu2itcm_icb_rsp_ready, // Response ready\n  output ifu2itcm_icb_rsp_err,   // Response error\n            // Note: the RSP rdata is inline with AXI definition\n  output [`E203_ITCM_DATA_WIDTH-1:0] ifu2itcm_icb_rsp_rdata, \n  \n  output ifu2itcm_holdup,\n  //output ifu2itcm_replay,\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // LSU ICB to ITCM\n  //    * Bus cmd channel\n  input  lsu2itcm_icb_cmd_valid, // Handshake valid\n  output lsu2itcm_icb_cmd_ready, // Handshake ready\n            // Note: The data on rdata or wdata channel must be naturally\n            //       aligned, this is in line with the AXI definition\n  input  [`E203_ITCM_ADDR_WIDTH-1:0]   lsu2itcm_icb_cmd_addr, // Bus transaction start addr \n  input  lsu2itcm_icb_cmd_read,   // Read or write\n  input  [32-1:0] lsu2itcm_icb_cmd_wdata, \n  input  [4-1:0] lsu2itcm_icb_cmd_wmask, \n\n  //    * Bus RSP channel\n  output lsu2itcm_icb_rsp_valid, // Response valid \n  input  lsu2itcm_icb_rsp_ready, // Response ready\n  output lsu2itcm_icb_rsp_err,   // Response error\n            // Note: the RSP rdata is inline with AXI definition\n  output [32-1:0] lsu2itcm_icb_rsp_rdata, \n\n\n\n  `ifdef E203_HAS_ITCM_EXTITF //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // External-agent ICB to ITCM\n  //    * Bus cmd channel\n  input  ext2itcm_icb_cmd_valid, // Handshake valid\n  output ext2itcm_icb_cmd_ready, // Handshake ready\n            // Note: The data on rdata or wdata channel must be naturally\n            //       aligned, this is in line with the AXI definition\n  input  [`E203_ITCM_ADDR_WIDTH-1:0]   ext2itcm_icb_cmd_addr, // Bus transaction start addr \n  input  ext2itcm_icb_cmd_read,   // Read or write\n  input  [32-1:0] ext2itcm_icb_cmd_wdata, \n  input  [ 4-1:0] ext2itcm_icb_cmd_wmask, \n\n  //    * Bus RSP channel\n  output ext2itcm_icb_rsp_valid, // Response valid \n  input  ext2itcm_icb_rsp_ready, // Response ready\n  output ext2itcm_icb_rsp_err,   // Response error\n            // Note: the RSP rdata is inline with AXI definition\n  output [32-1:0] ext2itcm_icb_rsp_rdata, \n  `endif//}\n\n  output                         itcm_ram_cs,  \n  output                         itcm_ram_we,  \n  output [`E203_ITCM_RAM_AW-1:0] itcm_ram_addr, \n  output [`E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  output [`E203_ITCM_RAM_DW-1:0] itcm_ram_din,          \n  input  [`E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  output                         clk_itcm_ram,\n\n  input  test_mode,\n  input  clk,\n  input  rst_n\n  );\n\n    // LSU2ITCM converted to ICM data width\n  //    * Bus cmd channel\n  wire lsu_icb_cmd_valid;\n  wire lsu_icb_cmd_ready;\n  wire [`E203_ITCM_ADDR_WIDTH-1:0] lsu_icb_cmd_addr;\n  wire lsu_icb_cmd_read;\n  wire [`E203_ITCM_DATA_WIDTH-1:0] lsu_icb_cmd_wdata;\n  wire [`E203_ITCM_DATA_WIDTH/8-1:0] lsu_icb_cmd_wmask;\n\n  //    * Bus RSP channel\n  wire lsu_icb_rsp_valid;\n  wire lsu_icb_rsp_ready;\n  wire lsu_icb_rsp_err;\n  wire [`E203_ITCM_DATA_WIDTH-1:0] lsu_icb_rsp_rdata; \n\n  sirv_gnrl_icb_n2w # (\n  .FIFO_OUTS_NUM   (`E203_ITCM_OUTS_NUM),\n  .FIFO_CUT_READY  (0),\n  .USR_W      (1),\n  .AW         (`E203_ITCM_ADDR_WIDTH),\n  .X_W        (32),\n  .Y_W        (`E203_ITCM_DATA_WIDTH) \n  ) u_itcm_icb_lsu2itcm_n2w(\n  .i_icb_cmd_valid        (lsu2itcm_icb_cmd_valid ),  \n  .i_icb_cmd_ready        (lsu2itcm_icb_cmd_ready ),\n  .i_icb_cmd_read         (lsu2itcm_icb_cmd_read ) ,\n  .i_icb_cmd_addr         (lsu2itcm_icb_cmd_addr ) ,\n  .i_icb_cmd_wdata        (lsu2itcm_icb_cmd_wdata ),\n  .i_icb_cmd_wmask        (lsu2itcm_icb_cmd_wmask) ,\n  .i_icb_cmd_burst        (2'b0)                   ,\n  .i_icb_cmd_beat         (2'b0)                   ,\n  .i_icb_cmd_lock         (1'b0),\n  .i_icb_cmd_excl         (1'b0),\n  .i_icb_cmd_size         (2'b0),\n  .i_icb_cmd_usr          (1'b0),\n   \n  .i_icb_rsp_valid        (lsu2itcm_icb_rsp_valid ),\n  .i_icb_rsp_ready        (lsu2itcm_icb_rsp_ready ),\n  .i_icb_rsp_err          (lsu2itcm_icb_rsp_err)   ,\n  .i_icb_rsp_excl_ok      ()   ,\n  .i_icb_rsp_rdata        (lsu2itcm_icb_rsp_rdata ),\n  .i_icb_rsp_usr          (),\n                                                \n  .o_icb_cmd_valid        (lsu_icb_cmd_valid ),  \n  .o_icb_cmd_ready        (lsu_icb_cmd_ready ),\n  .o_icb_cmd_read         (lsu_icb_cmd_read ) ,\n  .o_icb_cmd_addr         (lsu_icb_cmd_addr ) ,\n  .o_icb_cmd_wdata        (lsu_icb_cmd_wdata ),\n  .o_icb_cmd_wmask        (lsu_icb_cmd_wmask) ,\n  .o_icb_cmd_burst        ()                   ,\n  .o_icb_cmd_beat         ()                   ,\n  .o_icb_cmd_lock         (),\n  .o_icb_cmd_excl         (),\n  .o_icb_cmd_size         (),\n  .o_icb_cmd_usr          (),\n   \n  .o_icb_rsp_valid        (lsu_icb_rsp_valid ),\n  .o_icb_rsp_ready        (lsu_icb_rsp_ready ),\n  .o_icb_rsp_err          (lsu_icb_rsp_err)   ,\n  .o_icb_rsp_excl_ok      (1'b0)   ,\n  .o_icb_rsp_rdata        (lsu_icb_rsp_rdata ),\n  .o_icb_rsp_usr          (1'b0),\n\n  .clk                    (clk   )                  ,\n  .rst_n                  (rst_n )                 \n  );\n\n  `ifdef E203_HAS_ITCM_EXTITF //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // EXTITF converted to ICM data width\n  //    * Bus cmd channel\n  wire ext_icb_cmd_valid;\n  wire ext_icb_cmd_ready;\n  wire [`E203_ITCM_ADDR_WIDTH-1:0] ext_icb_cmd_addr;\n  wire ext_icb_cmd_read;\n  wire [`E203_ITCM_DATA_WIDTH-1:0] ext_icb_cmd_wdata;\n  wire [`E203_ITCM_WMSK_WIDTH-1:0] ext_icb_cmd_wmask;\n\n  //    * Bus RSP channel\n  wire ext_icb_rsp_valid;\n  wire ext_icb_rsp_ready;\n  wire ext_icb_rsp_err;\n  wire [`E203_ITCM_DATA_WIDTH-1:0] ext_icb_rsp_rdata; \n\n  `ifdef E203_SYSMEM_DATA_WIDTH_IS_32 //{\n  `ifdef E203_ITCM_DATA_WIDTH_IS_64 //{\n  sirv_gnrl_icb_n2w # (\n  .USR_W      (1),\n  .FIFO_OUTS_NUM   (`E203_ITCM_OUTS_NUM),\n  .FIFO_CUT_READY  (0),\n  .AW         (`E203_ITCM_ADDR_WIDTH),\n  .X_W        (`E203_SYSMEM_DATA_WIDTH), \n  .Y_W        (`E203_ITCM_DATA_WIDTH) \n  ) u_itcm_icb_ext2itcm_n2w(\n  .i_icb_cmd_valid        (ext2itcm_icb_cmd_valid ),  \n  .i_icb_cmd_ready        (ext2itcm_icb_cmd_ready ),\n  .i_icb_cmd_read         (ext2itcm_icb_cmd_read ) ,\n  .i_icb_cmd_addr         (ext2itcm_icb_cmd_addr ) ,\n  .i_icb_cmd_wdata        (ext2itcm_icb_cmd_wdata ),\n  .i_icb_cmd_wmask        (ext2itcm_icb_cmd_wmask) ,\n  .i_icb_cmd_burst        (2'b0)                   ,\n  .i_icb_cmd_beat         (2'b0)                   ,\n  .i_icb_cmd_lock         (1'b0),\n  .i_icb_cmd_excl         (1'b0),\n  .i_icb_cmd_size         (2'b0),\n  .i_icb_cmd_usr          (1'b0),\n   \n  .i_icb_rsp_valid        (ext2itcm_icb_rsp_valid ),\n  .i_icb_rsp_ready        (ext2itcm_icb_rsp_ready ),\n  .i_icb_rsp_err          (ext2itcm_icb_rsp_err)   ,\n  .i_icb_rsp_excl_ok      ()   ,\n  .i_icb_rsp_rdata        (ext2itcm_icb_rsp_rdata ),\n  .i_icb_rsp_usr          (),\n                                                \n  .o_icb_cmd_valid        (ext_icb_cmd_valid ),  \n  .o_icb_cmd_ready        (ext_icb_cmd_ready ),\n  .o_icb_cmd_read         (ext_icb_cmd_read ) ,\n  .o_icb_cmd_addr         (ext_icb_cmd_addr ) ,\n  .o_icb_cmd_wdata        (ext_icb_cmd_wdata ),\n  .o_icb_cmd_wmask        (ext_icb_cmd_wmask) ,\n  .o_icb_cmd_burst        ()                   ,\n  .o_icb_cmd_beat         ()                   ,\n  .o_icb_cmd_lock         (),\n  .o_icb_cmd_excl         (),\n  .o_icb_cmd_size         (),\n  .o_icb_cmd_usr          (),\n   \n  .o_icb_rsp_valid        (ext_icb_rsp_valid ),\n  .o_icb_rsp_ready        (ext_icb_rsp_ready ),\n  .o_icb_rsp_err          (ext_icb_rsp_err)   ,\n  .o_icb_rsp_excl_ok      (1'b0),\n  .o_icb_rsp_rdata        (ext_icb_rsp_rdata ),\n  .o_icb_rsp_usr          (1'b0),\n\n  .clk                    (clk  ) ,\n  .rst_n                  (rst_n)                 \n  );\n  `endif//}\n  `else//}{\n      !!! ERROR: There must be something wrong, our System interface\n                must be 32bits and ITCM must be 64bits to save area and powers!!!\n  `endif//}\n  `endif//}\n\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [`E203_ITCM_ADDR_WIDTH-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [`E203_ITCM_DATA_WIDTH-1:0] arbt_icb_cmd_wdata;\n  wire [`E203_ITCM_WMSK_WIDTH-1:0] arbt_icb_cmd_wmask;\n\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire [`E203_ITCM_DATA_WIDTH-1:0] arbt_icb_rsp_rdata;\n\n  `ifdef E203_HAS_ITCM_EXTITF //{\n      localparam ITCM_ARBT_I_NUM = 2;\n      localparam ITCM_ARBT_I_PTR_W = 1;\n  `else//}{\n      localparam ITCM_ARBT_I_NUM = 1;\n      localparam ITCM_ARBT_I_PTR_W = 1;\n  `endif//}\n\n  wire [ITCM_ARBT_I_NUM*1-1:0] arbt_bus_icb_cmd_valid;\n  wire [ITCM_ARBT_I_NUM*1-1:0] arbt_bus_icb_cmd_ready;\n  wire [ITCM_ARBT_I_NUM*`E203_ITCM_ADDR_WIDTH-1:0] arbt_bus_icb_cmd_addr;\n  wire [ITCM_ARBT_I_NUM*1-1:0] arbt_bus_icb_cmd_read;\n  wire [ITCM_ARBT_I_NUM*`E203_ITCM_DATA_WIDTH-1:0] arbt_bus_icb_cmd_wdata;\n  wire [ITCM_ARBT_I_NUM*`E203_ITCM_WMSK_WIDTH-1:0] arbt_bus_icb_cmd_wmask;\n\n  wire [ITCM_ARBT_I_NUM*1-1:0] arbt_bus_icb_rsp_valid;\n  wire [ITCM_ARBT_I_NUM*1-1:0] arbt_bus_icb_rsp_ready;\n  wire [ITCM_ARBT_I_NUM*1-1:0] arbt_bus_icb_rsp_err;\n  wire [ITCM_ARBT_I_NUM*`E203_ITCM_DATA_WIDTH-1:0] arbt_bus_icb_rsp_rdata;\n\n  assign arbt_bus_icb_cmd_valid =\n      // LSU take higher priority\n                           {\n                      `ifdef E203_HAS_ITCM_EXTITF //{\n                             ext_icb_cmd_valid,\n                      `endif//}\n                             lsu_icb_cmd_valid\n                           } ;\n  assign arbt_bus_icb_cmd_addr =\n                           {\n                      `ifdef E203_HAS_ITCM_EXTITF //{\n                             ext_icb_cmd_addr,\n                      `endif//}\n                             lsu_icb_cmd_addr\n                           } ;\n  assign arbt_bus_icb_cmd_read =\n                           {\n                      `ifdef E203_HAS_ITCM_EXTITF //{\n                             ext_icb_cmd_read,\n                      `endif//}\n                             lsu_icb_cmd_read\n                           } ;\n  assign arbt_bus_icb_cmd_wdata =\n                           {\n                      `ifdef E203_HAS_ITCM_EXTITF //{\n                             ext_icb_cmd_wdata,\n                      `endif//}\n                             lsu_icb_cmd_wdata\n                           } ;\n  assign arbt_bus_icb_cmd_wmask =\n                           {\n                      `ifdef E203_HAS_ITCM_EXTITF //{\n                             ext_icb_cmd_wmask,\n                      `endif//}\n                             lsu_icb_cmd_wmask\n                           } ;\n  assign                   {\n                      `ifdef E203_HAS_ITCM_EXTITF //{\n                             ext_icb_cmd_ready,\n                      `endif//}\n                             lsu_icb_cmd_ready\n                           } = arbt_bus_icb_cmd_ready;\n\n\n  assign                   {\n                      `ifdef E203_HAS_ITCM_EXTITF //{\n                             ext_icb_rsp_valid,\n                      `endif//}\n                             lsu_icb_rsp_valid\n                           } = arbt_bus_icb_rsp_valid;\n  assign                   {\n                      `ifdef E203_HAS_ITCM_EXTITF //{\n                             ext_icb_rsp_err,\n                      `endif//}\n                             lsu_icb_rsp_err\n                           } = arbt_bus_icb_rsp_err;\n  assign                   {\n                      `ifdef E203_HAS_ITCM_EXTITF //{\n                             ext_icb_rsp_rdata,\n                      `endif//}\n                             lsu_icb_rsp_rdata\n                           } = arbt_bus_icb_rsp_rdata;\n  assign arbt_bus_icb_rsp_ready = {\n                      `ifdef E203_HAS_ITCM_EXTITF //{\n                             ext_icb_rsp_ready,\n                      `endif//}\n                             lsu_icb_rsp_ready\n                           };\n\n  sirv_gnrl_icb_arbt # (\n  .ARBT_SCHEME (0),// Priority based\n  .ALLOW_0CYCL_RSP (0),// Dont allow the 0 cycle response because for ITCM and DTCM, \n                       //   Dcache, .etc, definitely they cannot reponse as 0 cycle\n  .FIFO_OUTS_NUM   (`E203_ITCM_OUTS_NUM),\n  .FIFO_CUT_READY(0),\n  .USR_W      (1),\n  .ARBT_NUM   (ITCM_ARBT_I_NUM  ),\n  .ARBT_PTR_W (ITCM_ARBT_I_PTR_W),\n  .AW         (`E203_ITCM_ADDR_WIDTH),\n  .DW         (`E203_ITCM_DATA_WIDTH) \n  ) u_itcm_icb_arbt(\n  .o_icb_cmd_valid        (arbt_icb_cmd_valid )     ,\n  .o_icb_cmd_ready        (arbt_icb_cmd_ready )     ,\n  .o_icb_cmd_read         (arbt_icb_cmd_read )      ,\n  .o_icb_cmd_addr         (arbt_icb_cmd_addr )      ,\n  .o_icb_cmd_wdata        (arbt_icb_cmd_wdata )     ,\n  .o_icb_cmd_wmask        (arbt_icb_cmd_wmask)      ,\n  .o_icb_cmd_burst        ()     ,\n  .o_icb_cmd_beat         ()     ,\n  .o_icb_cmd_lock         ()     ,\n  .o_icb_cmd_excl         ()     ,\n  .o_icb_cmd_size         ()     ,\n  .o_icb_cmd_usr          ()     ,\n                                \n  .o_icb_rsp_valid        (arbt_icb_rsp_valid )     ,\n  .o_icb_rsp_ready        (arbt_icb_rsp_ready )     ,\n  .o_icb_rsp_err          (arbt_icb_rsp_err)        ,\n  .o_icb_rsp_rdata        (arbt_icb_rsp_rdata )     ,\n  .o_icb_rsp_usr          (1'b0),\n  .o_icb_rsp_excl_ok      (1'b0),\n                               \n  .i_bus_icb_cmd_ready    (arbt_bus_icb_cmd_ready ) ,\n  .i_bus_icb_cmd_valid    (arbt_bus_icb_cmd_valid ) ,\n  .i_bus_icb_cmd_read     (arbt_bus_icb_cmd_read )  ,\n  .i_bus_icb_cmd_addr     (arbt_bus_icb_cmd_addr )  ,\n  .i_bus_icb_cmd_wdata    (arbt_bus_icb_cmd_wdata ) ,\n  .i_bus_icb_cmd_wmask    (arbt_bus_icb_cmd_wmask)  ,\n  .i_bus_icb_cmd_burst    ({2*ITCM_ARBT_I_NUM{1'b0}}) ,\n  .i_bus_icb_cmd_beat     ({2*ITCM_ARBT_I_NUM{1'b0}}) ,\n  .i_bus_icb_cmd_lock     ({1*ITCM_ARBT_I_NUM{1'b0}}),\n  .i_bus_icb_cmd_excl     ({1*ITCM_ARBT_I_NUM{1'b0}}),\n  .i_bus_icb_cmd_size     ({2*ITCM_ARBT_I_NUM{1'b0}}),\n  .i_bus_icb_cmd_usr      ({1*ITCM_ARBT_I_NUM{1'b0}}),\n\n                                \n  .i_bus_icb_rsp_valid    (arbt_bus_icb_rsp_valid ) ,\n  .i_bus_icb_rsp_ready    (arbt_bus_icb_rsp_ready ) ,\n  .i_bus_icb_rsp_err      (arbt_bus_icb_rsp_err)    ,\n  .i_bus_icb_rsp_rdata    (arbt_bus_icb_rsp_rdata ) ,\n  .i_bus_icb_rsp_usr      (),\n  .i_bus_icb_rsp_excl_ok  (),\n                             \n  .clk                    (clk  )                     ,\n  .rst_n                  (rst_n)\n  );\n\n\n\n\n\n  wire sram_ready2ifu = 1'b1\n                   //The EXT and load/store have higher priotry than the ifetch\n                      & (~arbt_icb_cmd_valid)\n                   ;\n\n  wire sram_ready2arbt = 1'b1\n                  ;\n\n\n  wire sram_sel_ifu  = sram_ready2ifu  & ifu2itcm_icb_cmd_valid;\n  wire sram_sel_arbt = sram_ready2arbt & arbt_icb_cmd_valid;\n\n  wire sram_icb_cmd_ready;\n  wire sram_icb_cmd_valid;\n\n  assign ifu2itcm_icb_cmd_ready = sram_ready2ifu   & sram_icb_cmd_ready;\n  assign arbt_icb_cmd_ready = sram_ready2arbt  & sram_icb_cmd_ready;\n\n\n\n  wire [`E203_ITCM_ADDR_WIDTH-1:0] sram_icb_cmd_addr;\n  wire sram_icb_cmd_read;\n  wire [`E203_ITCM_DATA_WIDTH-1:0] sram_icb_cmd_wdata;\n  wire [`E203_ITCM_WMSK_WIDTH-1:0] sram_icb_cmd_wmask;\n\n  assign sram_icb_cmd_valid = (sram_sel_ifu   & ifu2itcm_icb_cmd_valid)\n                            | (sram_sel_arbt  & arbt_icb_cmd_valid);\n\n  assign sram_icb_cmd_addr  = ({`E203_ITCM_ADDR_WIDTH{sram_sel_ifu  }} & ifu2itcm_icb_cmd_addr)\n                            | ({`E203_ITCM_ADDR_WIDTH{sram_sel_arbt }} & arbt_icb_cmd_addr);\n  assign sram_icb_cmd_read  = (sram_sel_ifu   & ifu2itcm_icb_cmd_read)\n                            | (sram_sel_arbt  & arbt_icb_cmd_read);\n  assign sram_icb_cmd_wdata = ({`E203_ITCM_DATA_WIDTH{sram_sel_ifu  }} & ifu2itcm_icb_cmd_wdata)\n                            | ({`E203_ITCM_DATA_WIDTH{sram_sel_arbt }} & arbt_icb_cmd_wdata);\n  assign sram_icb_cmd_wmask = ({`E203_ITCM_WMSK_WIDTH{sram_sel_ifu  }} & ifu2itcm_icb_cmd_wmask)\n                            | ({`E203_ITCM_WMSK_WIDTH{sram_sel_arbt }} & arbt_icb_cmd_wmask);\n\n                        \n  wire sram_icb_cmd_ifu = sram_sel_ifu;\n\n\n  wire  [1:0] sram_icb_rsp_usr;\n  wire  [1:0] sram_icb_cmd_usr =  {sram_icb_cmd_ifu,sram_icb_cmd_read};\n  wire sram_icb_rsp_ifu ;\n  wire sram_icb_rsp_read; \n  assign {sram_icb_rsp_ifu, sram_icb_rsp_read} = sram_icb_rsp_usr;\n  \n  wire itcm_sram_ctrl_active;\n\n  wire sram_icb_rsp_valid;\n  wire sram_icb_rsp_ready;\n  wire [`E203_ITCM_DATA_WIDTH-1:0] sram_icb_rsp_rdata;\n  wire sram_icb_rsp_err;\n\n  `ifndef E203_HAS_ECC //{\n  sirv_sram_icb_ctrl #(\n      .DW     (`E203_ITCM_DATA_WIDTH),\n      .AW     (`E203_ITCM_ADDR_WIDTH),\n      .MW     (`E203_ITCM_WMSK_WIDTH),\n      .AW_LSB (3),// ITCM is 64bits wide, so the LSB is 3\n      .USR_W  (2) \n  ) u_sram_icb_ctrl(\n     .sram_ctrl_active (itcm_sram_ctrl_active),\n     .tcm_cgstop       (tcm_cgstop),\n     \n     .i_icb_cmd_valid (sram_icb_cmd_valid),\n     .i_icb_cmd_ready (sram_icb_cmd_ready),\n     .i_icb_cmd_read  (sram_icb_cmd_read ),\n     .i_icb_cmd_addr  (sram_icb_cmd_addr ), \n     .i_icb_cmd_wdata (sram_icb_cmd_wdata), \n     .i_icb_cmd_wmask (sram_icb_cmd_wmask), \n     .i_icb_cmd_usr   (sram_icb_cmd_usr  ),\n  \n     .i_icb_rsp_valid (sram_icb_rsp_valid),\n     .i_icb_rsp_ready (sram_icb_rsp_ready),\n     .i_icb_rsp_rdata (sra"}
{"text": "m_icb_rsp_rdata),\n     .i_icb_rsp_usr   (sram_icb_rsp_usr  ),\n  \n     .ram_cs   (itcm_ram_cs  ),  \n     .ram_we   (itcm_ram_we  ),  \n     .ram_addr (itcm_ram_addr), \n     .ram_wem  (itcm_ram_wem ),\n     .ram_din  (itcm_ram_din ),          \n     .ram_dout (itcm_ram_dout),\n     .clk_ram  (clk_itcm_ram ),\n  \n     .test_mode(test_mode  ),\n     .clk  (clk  ),\n     .rst_n(rst_n)  \n    );\n\n    assign sram_icb_rsp_err = 1'b0;\n  `endif//}\n\n  \n\n\n\n  // The E2 pass to IFU RSP channel only when it is IFU access \n  // The E2 pass to ARBT RSP channel only when it is not IFU access\n  assign sram_icb_rsp_ready = sram_icb_rsp_ifu ? \n                    ifu2itcm_icb_rsp_ready : arbt_icb_rsp_ready;\n\n  assign ifu2itcm_icb_rsp_valid = sram_icb_rsp_valid & sram_icb_rsp_ifu;\n  assign ifu2itcm_icb_rsp_err   = sram_icb_rsp_err;\n  assign ifu2itcm_icb_rsp_rdata = sram_icb_rsp_rdata;\n\n  assign arbt_icb_rsp_valid = sram_icb_rsp_valid & (~sram_icb_rsp_ifu);\n  assign arbt_icb_rsp_err   = sram_icb_rsp_err;\n  assign arbt_icb_rsp_rdata = sram_icb_rsp_rdata;\n\n \n\n\n  // The holdup indicating the target is not accessed by other agents \n  // since last accessed by IFU, and the output of it is holding up\n  // last value. Hence,\n  //   * The holdup flag it set when there is a succuess (no-error) ifetch\n  //       accessed this target\n  //   * The holdup flag it clear when when \n  //         ** other agent (non-IFU) accessed this target\n  //         ** other agent (non-IFU) accessed this target\n                //for example:\n                //   *** The external agent accessed the ITCM\n                //   *** I$ updated by cache maintaineice operation\n  wire ifu_holdup_r;\n  // The IFU holdup will be set after last time accessed by a IFU access\n  wire ifu_holdup_set =   sram_icb_cmd_ifu & itcm_ram_cs;\n  // The IFU holdup will be cleared after last time accessed by a non-IFU access\n  wire ifu_holdup_clr = (~sram_icb_cmd_ifu) & itcm_ram_cs;\n  wire ifu_holdup_ena = ifu_holdup_set | ifu_holdup_clr;\n  wire ifu_holdup_nxt = ifu_holdup_set & (~ifu_holdup_clr);\n  sirv_gnrl_dfflr #(1)ifu_holdup_dffl(ifu_holdup_ena, ifu_holdup_nxt, ifu_holdup_r, clk, rst_n);\n  assign ifu2itcm_holdup = ifu_holdup_r \n                            ;\n\n\n  assign itcm_active = ifu2itcm_icb_cmd_valid | lsu2itcm_icb_cmd_valid | itcm_sram_ctrl_active\n                  `ifdef E203_HAS_ITCM_EXTITF //{\n                      | ext2itcm_icb_cmd_valid\n                  `endif//}\n                      ;\n\nendmodule\n\n  `endif//}\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n// Designer   : Bob Hu\n//\n// Description:\n//  The ITCM-SRAM module to implement ITCM SRAM\n//\n// ====================================================================\n\n`include \"e203_defines.v\"\n\n  `ifdef E203_HAS_ITCM //{\nmodule e203_itcm_ram(\n\n  input                              sd,\n  input                              ds,\n  input                              ls,\n\n  input                              cs,  \n  input                              we,  \n  input  [`E203_ITCM_RAM_AW-1:0] addr, \n  input  [`E203_ITCM_RAM_MW-1:0] wem,\n  input  [`E203_ITCM_RAM_DW-1:0] din,          \n  output [`E203_ITCM_RAM_DW-1:0] dout,\n  input                              rst_n,\n  input                              clk\n\n);\n\n \n  sirv_gnrl_ram #(\n      `ifndef E203_HAS_ECC//{\n    .FORCE_X2ZERO(0),\n      `endif//}\n    .DP(`E203_ITCM_RAM_DP),\n    .DW(`E203_ITCM_RAM_DW),\n    .MW(`E203_ITCM_RAM_MW),\n    .AW(`E203_ITCM_RAM_AW) \n  ) u_e203_itcm_gnrl_ram(\n  .sd  (sd  ),\n  .ds  (ds  ),\n  .ls  (ls  ),\n\n  .rst_n (rst_n ),\n  .clk (clk ),\n  .cs  (cs  ),\n  .we  (we  ),\n  .addr(addr),\n  .din (din ),\n  .wem (wem ),\n  .dout(dout)\n  );\n                                                      \nendmodule\n  `endif//}\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n// Designer   : Bob Hu\n//\n// Description:\n//  The lsu_ctrl module control the LSU access requests \n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_lsu(\n  input  commit_mret,\n  input  commit_trap,\n  input  excp_active,\n  output  lsu_active,\n\n  `ifdef E203_HAS_ITCM //{\n  input [`E203_ADDR_SIZE-1:0] itcm_region_indic,\n  `endif//}\n  `ifdef E203_HAS_DTCM //{\n  input [`E203_ADDR_SIZE-1:0] dtcm_region_indic,\n  `endif//}\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The LSU Write-Back Interface\n  output lsu_o_valid, // Handshake valid\n  input  lsu_o_ready, // Handshake ready\n  output [`E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [`E203_ITAG_WIDTH -1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err , \n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  output [`E203_ADDR_SIZE -1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_buserr , // The bus-error exception generated\n  \n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The AGU ICB Interface to LSU-ctrl\n  //    * Bus cmd channel\n  input                          agu_icb_cmd_valid, // Handshake valid\n  output                         agu_icb_cmd_ready, // Handshake ready\n  input  [`E203_ADDR_SIZE-1:0]   agu_icb_cmd_addr, // Bus transaction start addr \n  input                          agu_icb_cmd_read,   // Read or write\n  input  [`E203_XLEN-1:0]        agu_icb_cmd_wdata, \n  input  [`E203_XLEN/8-1:0]      agu_icb_cmd_wmask, \n  input                          agu_icb_cmd_lock,\n  input                          agu_icb_cmd_excl,\n  input  [1:0]                   agu_icb_cmd_size,\n           // Several additional side channel signals\n           //   Indicate LSU-ctrl module to\n           //     return the ICB response channel back to AGU\n           //     this is only used by AMO or unaligned load/store 1st uop\n           //     to return the response\n  input                          agu_icb_cmd_back2agu, \n           //   Sign extension or not\n  input                          agu_icb_cmd_usign,\n  input  [`E203_ITAG_WIDTH -1:0] agu_icb_cmd_itag,\n\n  //    * Bus RSP channel\n  output                         agu_icb_rsp_valid, // Response valid \n  input                          agu_icb_rsp_ready, // Response ready\n  output                         agu_icb_rsp_err  , // Response error\n  output                         agu_icb_rsp_excl_ok, // Response error\n  output [`E203_XLEN-1:0]        agu_icb_rsp_rdata,\n\n\n  \n\n  `ifdef E203_HAS_ITCM //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface to ITCM\n  //\n  //    * Bus cmd channel\n  output                         itcm_icb_cmd_valid,\n  input                          itcm_icb_cmd_ready,\n  output [`E203_ITCM_ADDR_WIDTH-1:0]   itcm_icb_cmd_addr, \n  output                         itcm_icb_cmd_read, \n  output [`E203_XLEN-1:0]        itcm_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      itcm_icb_cmd_wmask,\n  output                         itcm_icb_cmd_lock,\n  output                         itcm_icb_cmd_excl,\n  output [1:0]                   itcm_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          itcm_icb_rsp_valid,\n  output                         itcm_icb_rsp_ready,\n  input                          itcm_icb_rsp_err  ,\n  input                          itcm_icb_rsp_excl_ok  ,\n  input  [`E203_XLEN-1:0]        itcm_icb_rsp_rdata,\n  `endif//}\n\n  \n  `ifdef E203_HAS_DTCM //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface to DTCM\n  //\n  //    * Bus cmd channel\n  output                         dtcm_icb_cmd_valid,\n  input                          dtcm_icb_cmd_ready,\n  output [`E203_DTCM_ADDR_WIDTH-1:0]   dtcm_icb_cmd_addr, \n  output                         dtcm_icb_cmd_read, \n  output [`E203_XLEN-1:0]        dtcm_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      dtcm_icb_cmd_wmask,\n  output                         dtcm_icb_cmd_lock,\n  output                         dtcm_icb_cmd_excl,\n  output [1:0]                   dtcm_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          dtcm_icb_rsp_valid,\n  output                         dtcm_icb_rsp_ready,\n  input                          dtcm_icb_rsp_err  ,\n  input                          dtcm_icb_rsp_excl_ok  ,\n  input  [`E203_XLEN-1:0]        dtcm_icb_rsp_rdata,\n  `endif//}\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface to BIU\n  //\n  //    * Bus cmd channel\n  output                         biu_icb_cmd_valid,\n  input                          biu_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   biu_icb_cmd_addr, \n  output                         biu_icb_cmd_read, \n  output [`E203_XLEN-1:0]        biu_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      biu_icb_cmd_wmask,\n  output                         biu_icb_cmd_lock,\n  output                         biu_icb_cmd_excl,\n  output [1:0]                   biu_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          biu_icb_rsp_valid,\n  output                         biu_icb_rsp_ready,\n  input                          biu_icb_rsp_err  ,\n  input                          biu_icb_rsp_excl_ok  ,\n  input  [`E203_XLEN-1:0]        biu_icb_rsp_rdata,\n\n\n  input  clk,\n  input  rst_n\n  );\n\n    `ifdef E203_HAS_DCACHE //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface to DCache\n  //\n  //    * Bus cmd channel\n  wire                          dcache_icb_cmd_valid;\n  wire                          dcache_icb_cmd_ready;\n  wire  [`E203_ADDR_SIZE-1:0]   dcache_icb_cmd_addr; \n  wire                          dcache_icb_cmd_read; \n  wire  [`E203_XLEN-1:0]        dcache_icb_cmd_wdata;\n  wire  [`E203_XLEN/8-1:0]      dcache_icb_cmd_wmask;\n  wire                          dcache_icb_cmd_lock;\n  wire                          dcache_icb_cmd_excl;\n  wire  [1:0]                   dcache_icb_cmd_size;\n  //\n  //    * Bus RSP channel\n  wire                          dcache_icb_rsp_valid;\n  wire                          dcache_icb_rsp_ready;\n  wire                          dcache_icb_rsp_err  ;\n  wire                          dcache_icb_rsp_excl_ok  ;\n  wire  [`E203_XLEN-1:0]        dcache_icb_rsp_rdata;\n  `endif//}\n\n  wire lsu_ctrl_active;\n\n\n  e203_lsu_ctrl u_e203_lsu_ctrl(\n    .commit_mret           (commit_mret),\n    .commit_trap           (commit_trap),\n    .lsu_ctrl_active       (lsu_ctrl_active),\n  `ifdef E203_HAS_ITCM //{\n    .itcm_region_indic     (itcm_region_indic),\n  `endif//}\n  `ifdef E203_HAS_DTCM //{\n    .dtcm_region_indic     (dtcm_region_indic),\n  `endif//}\n    .lsu_o_valid           (lsu_o_valid ),\n    .lsu_o_ready           (lsu_o_ready ),\n    .lsu_o_wbck_wdat       (lsu_o_wbck_wdat),\n    .lsu_o_wbck_itag       (lsu_o_wbck_itag),\n    .lsu_o_wbck_err        (lsu_o_wbck_err  ),\n    .lsu_o_cmt_buserr      (lsu_o_cmt_buserr  ),\n    .lsu_o_cmt_badaddr     (lsu_o_cmt_badaddr ),\n    .lsu_o_cmt_ld          (lsu_o_cmt_ld ),\n    .lsu_o_cmt_st          (lsu_o_cmt_st ),\n    \n    .agu_icb_cmd_valid     (agu_icb_cmd_valid ),\n    .agu_icb_cmd_ready     (agu_icb_cmd_ready ),\n    .agu_icb_cmd_addr      (agu_icb_cmd_addr ),\n    .agu_icb_cmd_read      (agu_icb_cmd_read   ),\n    .agu_icb_cmd_wdata     (agu_icb_cmd_wdata ),\n    .agu_icb_cmd_wmask     (agu_icb_cmd_wmask ),\n    .agu_icb_cmd_lock      (agu_icb_cmd_lock),\n    .agu_icb_cmd_excl      (agu_icb_cmd_excl),\n    .agu_icb_cmd_size      (agu_icb_cmd_size),\n   \n    .agu_icb_cmd_back2agu  (agu_icb_cmd_back2agu ),\n    .agu_icb_cmd_usign     (agu_icb_cmd_usign),\n    .agu_icb_cmd_itag      (agu_icb_cmd_itag),\n  \n    .agu_icb_rsp_valid     (agu_icb_rsp_valid ),\n    .agu_icb_rsp_ready     (agu_icb_rsp_ready ),\n    .agu_icb_rsp_err       (agu_icb_rsp_err   ),\n    .agu_icb_rsp_excl_ok   (agu_icb_rsp_excl_ok),\n    .agu_icb_rsp_rdata     (agu_icb_rsp_rdata),\n \n      `ifndef E203_HAS_EAI \n    .eai_mem_holdup        (1'b0),\n    .eai_icb_cmd_valid     (1'b0),\n    .eai_icb_cmd_ready     (),\n    .eai_icb_cmd_addr      (`E203_ADDR_SIZE'b0 ),\n    .eai_icb_cmd_read      (1'b0 ),\n    .eai_icb_cmd_wdata     (`E203_XLEN'b0),\n    .eai_icb_cmd_wmask     ({`E203_XLEN/8{1'b0}}),\n    .eai_icb_cmd_lock      (1'b0),\n    .eai_icb_cmd_excl      (1'b0),\n    .eai_icb_cmd_size      (2'b0),\n    \n    .eai_icb_rsp_valid     (),\n    .eai_icb_rsp_ready     (1'b0),\n    .eai_icb_rsp_err       (),\n    .eai_icb_rsp_excl_ok   (),\n    .eai_icb_rsp_rdata     (),\n      `endif           \n\n\n      `ifdef E203_HAS_DCACHE\n    .dcache_icb_cmd_valid  (dcache_icb_cmd_valid),\n    .dcache_icb_cmd_ready  (dcache_icb_cmd_ready),\n    .dcache_icb_cmd_addr   (dcache_icb_cmd_addr ),\n    .dcache_icb_cmd_read   (dcache_icb_cmd_read ),\n    .dcache_icb_cmd_wdata  (dcache_icb_cmd_wdata),\n    .dcache_icb_cmd_wmask  (dcache_icb_cmd_wmask),\n    .dcache_icb_cmd_lock   (dcache_icb_cmd_lock),\n    .dcache_icb_cmd_excl   (dcache_icb_cmd_excl),\n    .dcache_icb_cmd_size   (dcache_icb_cmd_size),\n    \n    .dcache_icb_rsp_valid  (dcache_icb_rsp_valid),\n    .dcache_icb_rsp_ready  (dcache_icb_rsp_ready),\n    .dcache_icb_rsp_err    (dcache_icb_rsp_err  ),\n    .dcache_icb_rsp_excl_ok(dcache_icb_rsp_excl_ok  ),\n    .dcache_icb_rsp_rdata  (dcache_icb_rsp_rdata),\n      `endif \n\n      `ifdef E203_HAS_DTCM\n    .dtcm_icb_cmd_valid    (dtcm_icb_cmd_valid),\n    .dtcm_icb_cmd_ready    (dtcm_icb_cmd_ready),\n    .dtcm_icb_cmd_addr     (dtcm_icb_cmd_addr ),\n    .dtcm_icb_cmd_read     (dtcm_icb_cmd_read ),\n    .dtcm_icb_cmd_wdata    (dtcm_icb_cmd_wdata),\n    .dtcm_icb_cmd_wmask    (dtcm_icb_cmd_wmask),\n    .dtcm_icb_cmd_lock     (dtcm_icb_cmd_lock),\n    .dtcm_icb_cmd_excl     (dtcm_icb_cmd_excl),\n    .dtcm_icb_cmd_size     (dtcm_icb_cmd_size),\n    \n    .dtcm_icb_rsp_valid    (dtcm_icb_rsp_valid),\n    .dtcm_icb_rsp_ready    (dtcm_icb_rsp_ready),\n    .dtcm_icb_rsp_err      (dtcm_icb_rsp_err  ),\n    .dtcm_icb_rsp_excl_ok  (dtcm_icb_rsp_excl_ok  ),\n    .dtcm_icb_rsp_rdata    (dtcm_icb_rsp_rdata),\n     `endif            \n    \n      `ifdef E203_HAS_ITCM\n    .itcm_icb_cmd_valid    (itcm_icb_cmd_valid),\n    .itcm_icb_cmd_ready    (itcm_icb_cmd_ready),\n    .itcm_icb_cmd_addr     (itcm_icb_cmd_addr ),\n    .itcm_icb_cmd_read     (itcm_icb_cmd_read ),\n    .itcm_icb_cmd_wdata    (itcm_icb_cmd_wdata),\n    .itcm_icb_cmd_wmask    (itcm_icb_cmd_wmask),\n    .itcm_icb_cmd_lock     (itcm_icb_cmd_lock),\n    .itcm_icb_cmd_excl     (itcm_icb_cmd_excl),\n    .itcm_icb_cmd_size     (itcm_icb_cmd_size),\n    \n    .itcm_icb_rsp_valid    (itcm_icb_rsp_valid),\n    .itcm_icb_rsp_ready    (itcm_icb_rsp_ready),\n    .itcm_icb_rsp_err      (itcm_icb_rsp_err  ),\n    .itcm_icb_rsp_excl_ok  (itcm_icb_rsp_excl_ok  ),\n    .itcm_icb_rsp_rdata    (itcm_icb_rsp_rdata),\n      `endif \n    \n    .biu_icb_cmd_valid     (biu_icb_cmd_valid),\n    .biu_icb_cmd_ready     (biu_icb_cmd_ready),\n    .biu_icb_cmd_addr      (biu_icb_cmd_addr ),\n    .biu_icb_cmd_read      (biu_icb_cmd_read ),\n    .biu_icb_cmd_wdata     (biu_icb_cmd_wdata),\n    .biu_icb_cmd_wmask     (biu_icb_cmd_wmask),\n    .biu_icb_cmd_lock      (biu_icb_cmd_lock),\n    .biu_icb_cmd_excl      (biu_icb_cmd_excl),\n    .biu_icb_cmd_size      (biu_icb_cmd_size),\n   \n    .biu_icb_rsp_valid     (biu_icb_rsp_valid),\n    .biu_icb_rsp_ready     (biu_icb_rsp_ready),\n    .biu_icb_rsp_err       (biu_icb_rsp_err  ),\n    .biu_icb_rsp_excl_ok   (biu_icb_rsp_excl_ok  ),\n    .biu_icb_rsp_rdata     (biu_icb_rsp_rdata),\n  \n    .clk                   (clk),\n    .rst_n                 (rst_n)\n  );\n\n  assign lsu_active = lsu_ctrl_active \n                    // When interrupts comes, need to update the exclusive monitor\n                    // so also need to turn on the clock\n                    | excp_active;\nendmodule\n\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n// Designer   : Bob Hu\n//\n// Description:\n//  The lsu_ctrl module control the LSU access requests \n//\n// ====================================================================\n`include \"e203_defines.v\"\n\nmodule e203_lsu_ctrl(\n  input  commit_mret,\n  input  commit_trap,\n  output lsu_ctrl_active,\n  `ifdef E203_HAS_ITCM //{\n  input [`E203_ADDR_SIZE-1:0] itcm_region_indic,\n  `endif//}\n  `ifdef E203_HAS_DTCM //{\n  input [`E203_ADDR_SIZE-1:0] dtcm_region_indic,\n  `endif//}\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The LSU Write-Back Interface\n  output lsu_o_valid, // Handshake valid\n  input  lsu_o_ready, // Handshake ready\n  output [`E203_XLEN-1:0] lsu_o_wbck_wdat,\n  output [`E203_ITAG_WIDTH -1:0] lsu_o_wbck_itag,\n  output lsu_o_wbck_err , // The error no need to write back regfile\n  output lsu_o_cmt_buserr, // The bus-error exception generated\n  output [`E203_ADDR_SIZE -1:0] lsu_o_cmt_badaddr,\n  output lsu_o_cmt_ld,\n  output lsu_o_cmt_st,\n  \n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The AGU ICB Interface to LSU-ctrl\n  //    * Bus cmd channel\n  input                          agu_icb_cmd_valid, // Handshake valid\n  output                         agu_icb_cmd_ready, // Handshake ready\n  input  [`E203_ADDR_SIZE-1:0]   agu_icb_cmd_addr, // Bus transaction start addr \n  input                          agu_icb_cmd_read,   // Read or write\n  input  [`E203_XLEN-1:0]        agu_icb_cmd_wdata, \n  input  [`E203_XLEN/8-1:0]      agu_icb_cmd_wmask, \n  input                          agu_icb_cmd_lock,\n  input                          agu_icb_cmd_excl,\n  input  [1:0]                   agu_icb_cmd_size,\n           // Several additional side channel signals\n           //   Indicate LSU-ctrl module to\n           //     return the ICB response channel back to AGU\n           //     this is only used by AMO or unaligned load/store 1st uop\n           //     to return the response\n  input                          agu_icb_cmd_back2agu, \n           //   Sign extension or not\n  input                          agu_icb_cmd_usign,\n           //   RD Regfile index\n  input  [`E203_ITAG_WIDTH -1:0] agu_icb_cmd_itag,\n\n  //    * Bus RSP channel\n  output                         agu_icb_rsp_valid, // Response valid \n  input                          agu_icb_rsp_ready, // Response ready\n  output                         agu_icb_rsp_err  , // Response error\n  output                         agu_icb_rsp_excl_ok,// Response exclusive okay\n  output [`E203_XLEN-1:0]        agu_icb_rsp_rdata,\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The EAI ICB Interface to LSU-ctrl\n  input                          eai_mem_holdup,\n  //    * Bus cmd channel\n  input                          eai_icb_cmd_valid,\n  output                         eai_icb_cmd_ready,\n  input  [`E203_ADDR_SIZE-1:0]   eai_icb_cmd_addr, \n  input                          eai_icb_cmd_read, \n  input  [`E203_XLEN-1:0]        eai_icb_cmd_wdata,\n  input  [`E203_XLEN/8-1:0]      eai_icb_cmd_wmask,\n  input                          eai_icb_cmd_lock,\n  input                          eai_icb_cmd_excl,\n  input  [1:0]                   eai_icb_cmd_size,\n\n  //    * Bus RSP channel\n  output                         eai_icb_rsp_valid,\n  input                          eai_icb_rsp_ready,\n  output                         eai_icb_rsp_err  ,\n  output                         eai_icb_rsp_excl_ok,\n  output [`E203_XLEN-1:0]        eai_icb_rsp_rdata,\n\n\n\n  `ifdef E203_HAS_DCACHE //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface to DCache\n  //\n  //    * Bus cmd channel\n  output                         dcache_icb_cmd_valid,\n  input                          dcache_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   dcache_icb_cmd_addr, \n  output                         dcache_icb_cmd_read, \n  output [`E203_XLEN-1:0]        dcache_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      dcache_icb_cmd_wmask,\n  output                         dcache_icb_cmd_lock,\n  output                         dcache_icb_cmd_excl,\n  output [1:0]                   dcache_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          dcache_icb_rsp_valid,\n  output                         dcache_icb_rsp_ready,\n  input                          dcache_icb_rsp_err  ,\n  output                         dcache_icb_rsp_excl_ok,\n  input  [`E203_XLEN-1:0]        dcache_icb_rsp_rdata,\n  `endif//}\n\n  `ifdef E203_HAS_DTCM //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface to DTCM\n  //\n  //    * Bus cmd channel\n  output                         dtcm_icb_cmd_valid,\n  input                          dtcm_icb_cmd_ready,\n  output [`E203_DTCM_ADDR_WIDTH-1:0]   dtcm_icb_cmd_addr, \n  output                         dtcm_icb_cmd_read, \n  output [`E203_XLEN-1:0]        dtcm_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      dtcm_icb_cmd_wmask,\n  output                         dtcm_icb_cmd_lock,\n  output                         dtcm_icb_cmd_excl,\n  output [1:0]                   dtcm_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          dtcm_icb_rsp_valid,\n  output                         dtcm_icb_rsp_ready,\n  input                          dtcm_icb_rsp_err  ,\n  input                          dtcm_icb_rsp_excl_ok,\n  input  [`E203_XLEN-1:0]        dtcm_icb_rsp_rdata,\n  `endif//}\n\n  `ifdef E203_HAS_ITCM //{\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface to ITCM\n  //\n  //    * Bus cmd channel\n  output                         itcm_icb_cmd_valid,\n  input                          itcm_icb_cmd_ready,\n  output [`E203_ITCM_ADDR_WIDTH-1:0]   itcm_icb_cmd_addr, \n  output                         itcm_icb_cmd_read, \n  output [`E203_XLEN-1:0]        itcm_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      itcm_icb_cmd_wmask,\n  output                         itcm_icb_cmd_lock,\n  output                         itcm_icb_cmd_excl,\n  output [1:0]                   itcm_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          itcm_icb_rsp_valid,\n  output                         itcm_icb_rsp_ready,\n  input                          itcm_icb_rsp_err  ,\n  input                          itcm_icb_rsp_excl_ok  ,\n  input  [`E203_XLEN-1:0]        itcm_icb_rsp_rdata,\n  `endif//}\n\n  //////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////\n  // The ICB Interface to BIU\n  //\n  //    * Bus cmd channel\n  output                         biu_icb_cmd_valid,\n  input                          biu_icb_cmd_ready,\n  output [`E203_ADDR_SIZE-1:0]   biu_icb_cmd_addr, \n  output                         biu_icb_cmd_read, \n  output [`E203_XLEN-1:0]        biu_icb_cmd_wdata,\n  output [`E203_XLEN/8-1:0]      biu_icb_cmd_wmask,\n  output                         biu_icb_cmd_lock,\n  output                         biu_icb_cmd_excl,\n  output [1:0]                   biu_icb_cmd_size,\n  //\n  //    * Bus RSP channel\n  input                          biu_icb_rsp_valid,\n  output                         biu_icb_rsp_ready,\n  input                          biu_icb_rsp_err  ,\n  input                          biu_icb_rsp_excl_ok  ,\n  input  [`E203_XLEN-1:0]        biu_icb_rsp_rdata,\n\n\n  input  clk,\n  input  rst_n\n  );\n\n  // The EAI mem holdup signal will override other request to LSU-Ctrl\n  wire agu_icb_cmd_valid_pos;\n  wire agu_icb_cmd_ready_pos;\n  assign agu_icb_cmd_valid_pos = (~eai_mem_holdup) & agu_icb_cmd_valid;\n  assign agu_icb_cmd_ready     = (~eai_mem_holdup) & agu_icb_cmd_ready_pos;\n\n      `ifndef E203_HAS_FPU\n      localparam LSU_ARBT_I_NUM   = 2;\n      localparam LSU_ARBT_I_PTR_W = 1;\n      `endif\n\n  \n  // NOTE:\n  //   * PPI is a must to have\n  //   * Either DCache, ITCM, DTCM or SystemITF is must to have\n  `ifndef E203_HAS_DTCM //{\n    `ifndef E203_HAS_DCACHE //{\n      `ifndef E203_HAS_MEM_ITF //{\n        `ifndef E203_HAS_ITCM //{\n      !!! ERROR: There must be something wrong, Either DCache, DTCM, ITCM or SystemITF is must to have. \n                 Otherwise where to access the data?\n        `endif//}\n      `endif//}\n    `endif//}\n  `endif//}\n  //\n  //\n  wire                  pre_agu_icb_rsp_valid;\n  wire                  pre_agu_icb_rsp_ready;\n  wire                  pre_agu_icb_rsp_err  ;\n  wire                  pre_agu_icb_rsp_excl_ok;\n  wire [`E203_XLEN-1:0] pre_agu_icb_rsp_rdata;\n\n  wire                         pre_agu_icb_rsp_back2agu; \n  wire                         pre_agu_icb_rsp_usign;\n  wire                         pre_agu_icb_rsp_read;\n  wire                         pre_agu_icb_rsp_excl;\n  wire [2-1:0]                 pre_agu_icb_rsp_size;\n  wire [`E203_ITAG_WIDTH -1:0] pre_agu_icb_rsp_itag;\n  wire [`E203_ADDR_SIZE-1:0]   pre_agu_icb_rsp_addr;\n\n  localparam USR_W = (`E203_ITAG_WIDTH+6+`E203_ADDR_SIZE);\n  localparam USR_PACK_EXCL = 0;// The cmd_excl is in the user 0 bit\n  wire [USR_W-1:0] agu_icb_cmd_usr =\n      {\n         agu_icb_cmd_back2agu  \n        ,agu_icb_cmd_usign\n        ,agu_icb_cmd_read\n        ,agu_icb_cmd_size\n        ,agu_icb_cmd_itag \n        ,agu_icb_cmd_addr \n        ,agu_icb_cmd_excl \n      };\n  wire [USR_W-1:0] eai_icb_cmd_usr = {USR_W-1{1'b0}};\n  wire [USR_W-1:0] fpu_icb_cmd_usr = {USR_W-1{1'b0}};\n\n  wire [USR_W-1:0]      pre_agu_icb_rsp_usr;\n  assign \n      {\n         pre_agu_icb_rsp_back2agu  \n        ,pre_agu_icb_rsp_usign\n        ,pre_agu_icb_rsp_read\n        ,pre_agu_icb_rsp_size\n        ,pre_agu_icb_rsp_itag \n        ,pre_agu_icb_rsp_addr\n        ,pre_agu_icb_rsp_excl \n      } = pre_agu_icb_rsp_usr;\n  wire [USR_W-1:0] eai_icb_rsp_usr;\n  wire [USR_W-1:0] fpu_icb_rsp_usr;\n\n  wire arbt_icb_cmd_valid;\n  wire arbt_icb_cmd_ready;\n  wire [`E203_ADDR_SIZE-1:0] arbt_icb_cmd_addr;\n  wire arbt_icb_cmd_read;\n  wire [`E203_XLEN-1:0] arbt_icb_cmd_wdata;\n  wire [`E203_XLEN/8-1:0] arbt_icb_cmd_wmask;\n  wire arbt_icb_cmd_lock;\n  wire arbt_icb_cmd_excl;\n  wire [1:0] arbt_icb_cmd_size;\n  wire [1:0] arbt_icb_cmd_burst;\n  wire [1:0] arbt_icb_cmd_beat;\n  wire [USR_W-1:0] arbt_icb_cmd_usr;\n\n  wire arbt_icb_rsp_valid;\n  wire arbt_icb_rsp_ready;\n  wire arbt_icb_rsp_err;\n  wire arbt_icb_rsp_excl_ok;\n  wire [`E203_XLEN-1:0] arbt_icb_rsp_rdata;\n  wire [USR_W-1:0] arbt_icb_rsp_usr;\n\n  wire [LSU_ARBT_I_NUM*1-1:0] arbt_bus_icb_cmd_valid;\n  wire [LSU_ARBT_I_NUM*1-1:0] arbt_bus_icb_cmd_ready;\n  wire [LSU_ARBT_I_NUM*`E203_ADDR_SIZE-1:0] arbt_bus_icb_cmd_addr;\n  wire [LSU_ARBT_I_NUM*1-1:0] arbt_bus_icb_cmd_read;\n  wire [LSU_ARBT_I_NUM*`E203_XLEN-1:0] arbt_bus_icb_cmd_wdata;\n  wire [LSU_ARBT_I_NUM*`E203_XLEN/8-1:0] arbt_bus_icb_cmd_wmask;\n  wire [LSU_ARBT_I_NUM*1-1:0] arbt_bus_icb_cmd_lock;\n  wire [LSU_ARBT_I_NUM*1-1:0] arbt_bus_icb_cmd_excl;\n  wire [LSU_ARBT_I_NUM*2-1:0] arbt_bus_icb_cmd_size;\n  wire [LSU_ARBT_I_NUM*USR_W-1:0] arbt_bus_icb_cmd_usr;\n  wire [LSU_ARBT_I_NUM*2-1:0] arbt_bus_icb_cmd_burst;\n  wire [LSU_ARBT_I_NUM*2-1:0] arbt_bus_icb_cmd_beat;\n\n  wire [LSU_ARBT_I_NUM*1-1:0] arbt_bus_icb_rsp_valid;\n  wire [LSU_ARBT_I_NUM*1-1:0] arbt_bus_icb_rsp_ready;\n  wire [LSU_ARBT_I_NUM*1-1:0] arbt_bus_icb_rsp_err;\n  wire [LSU_ARBT_I_NUM*1-1:0] arbt_bus_icb_rsp_excl_ok;\n  wire [LSU_ARBT_I_NUM*`E203_XLEN-1:0] arbt_bus_icb_rsp_rdata;\n  wire [LSU_ARBT_I_NUM*USR_W-1:0] arbt_bus_icb_rsp_usr;\n\n  //CMD Channel\n  wire [LSU_ARBT_I_NUM*1-1:0] arbt_bus_icb_cmd_valid_raw;\n  assign arbt_bus_icb_cmd_valid_raw =\n      // The EAI take higher priority\n                           {\n                             agu_icb_cmd_valid\n                           , eai_icb_cmd_valid\n                           } ;\n\n  assign arbt_bus_icb_cmd_valid =\n      // The EAI take higher priority\n                           {\n                             agu_icb_cmd_valid_pos\n                           , eai_icb_cmd_valid\n                           } ;\n\n  assign arbt_bus_icb_cmd_addr =\n                           {\n                             agu_icb_cmd_addr\n                           , eai_icb_cmd_addr\n                           } ;\n\n  assign arbt_bus_icb_cmd_read =\n                           {\n                             agu_icb_cmd_read\n                           , eai_icb_cmd_read\n                           } ;\n\n  assign arbt_bus_icb_cmd_wdata =\n                           {\n                             agu_icb_cmd_wdata\n                           , eai_icb_cmd_wdata\n                           } ;\n\n  assign arbt_bus_icb_cmd_wmask =\n                           {\n                             agu_icb_cmd_wmask\n                           , eai_icb_cmd_wmask\n                           } ;\n                         \n  assign arbt_bus_icb_cmd_lock =\n                           {\n                             agu_icb_cmd_lock\n                           , eai_icb_cmd_lock\n                           } ;\n\n  assign arbt_bus_icb_cmd_burst =\n                           {\n                             2'b0\n                           , 2'b0\n                           } ;\n\n  assign arbt_bus_icb_cmd_beat =\n                           {\n                             1'b0\n                           , 1'b0\n                           } ;\n\n  assign arbt_bus_icb_cmd_excl =\n                           {\n                             agu_icb_cmd_excl\n                           , eai_icb_cmd_excl\n                           } ;\n                           \n  assign arbt_bus_icb_cmd_size =\n                           {\n                             agu_icb_cmd_size\n                           , eai_icb_cmd_size\n                           } ;\n\n  assign arbt_bus_icb_cmd_usr =\n                           {\n                             agu_icb_cmd_usr\n                           , eai_icb_cmd_usr\n                           } ;\n\n  assign                   {\n                             agu_icb_cmd_ready_pos\n                           , eai_icb_cmd_ready\n                           } = arbt_bus_icb_cmd_ready;\n                           \n\n  //RSP Channel\n  assign                   {\n                             pre_agu_icb_rsp_valid\n                           , eai_icb_rsp_valid\n                           } = arbt_bus_icb_rsp_valid;\n\n  assign                   {\n                             pre_agu_icb_rsp_err\n                           , eai_icb_rsp_err\n                           } = arbt_bus_icb_rsp_err;\n\n  assign                   {\n                             pre_agu_icb_rsp_excl_ok\n                           , eai_icb_rsp_excl_ok\n                           } = arbt_bus_icb_rsp_excl_ok;\n\n\n  assign                   {\n                             pre_agu_icb_rsp_rdata\n                           , eai_icb_rsp_rdata\n                           } = arbt_bus_icb_rsp_rdata;\n\n  assign                   {\n                             pre_agu_icb_rsp_usr\n                           , eai_icb_rsp_usr\n                           } = arbt_bus_icb_rsp_usr;\n\n  assign arbt_bus_icb_rsp_ready = {\n                             pre_agu_icb_rsp_ready\n                           , eai_icb_rsp_ready\n                           };\n\n  sirv_gnrl_icb_arbt # (\n  .ARBT_SCHEME (0),// Priority based\n  .ALLOW_0CYCL_RSP (0),// Dont allow the 0 cycle response because in BIU we always have CMD_DP larger than 0\n                       //   when the response come back from the external bus, it is at least 1 cycle later\n                       //   for ITCM and DTCM, Dcache, .etc, definitely they cannot reponse as 0 cycle\n  .FIFO_OUTS_NUM   (`E203_LSU_OUTS_NUM),\n  .FIFO_CUT_READY  (0),\n  .ARBT_NUM   (LSU_ARBT_I_NUM),\n  .ARBT_PTR_W (LSU_ARBT_I_PTR_W),\n  .USR_W      (USR_W),\n  .AW         (`E203_ADDR_SIZE),\n  .DW         (`E203_XLEN) \n  ) u_lsu_icb_arbt(\n  .o_icb_cmd_valid        (arbt_icb_cmd_valid )     ,\n  .o_icb_cmd_ready        (arbt_icb_cmd_ready )     ,\n  .o_icb_cmd_read         (arbt_icb_cmd_read )      ,\n  .o_icb_cmd_addr         (arbt_icb_cmd_addr )      ,\n  .o_icb_cmd_wdata        (arbt_icb_cmd_wdata )     ,\n  .o_icb_cmd_wmask        (arbt_icb_cmd_wmask)      ,\n  .o_icb_cmd_burst        (arbt_icb_cmd_burst)     ,\n  .o_icb_cmd_beat         (arbt_icb_cmd_beat )     ,\n  .o_icb_cmd_excl         (arbt_icb_cmd_excl )     ,\n  .o_icb_cmd_lock         (arbt_icb_cmd_lock )     ,\n  .o_icb_cmd_size         (arbt_icb_cmd_size )     ,\n  .o_icb_cmd_usr          (arbt_icb_cmd_usr  )     ,\n                                \n  .o_icb_rsp_valid        (arbt_icb_rsp_valid )     ,\n  .o_icb_rsp_ready        (arbt_icb_rsp_ready )     ,\n  .o_icb_rsp_err          (arbt_icb_rsp_err)        ,\n  .o_icb_rsp_excl_ok      (arbt_icb_rsp_excl_ok)    ,\n  .o_icb_rsp_rdata        (arbt_icb_rsp_rdata )     ,\n  .o_icb_rsp_usr          (arbt_icb_rsp_usr   )     ,\n                               \n  .i_bus_icb_cmd_ready    (arbt_bus_icb_cmd_ready ) ,\n  .i_bus_icb_cmd_valid    (arbt_bus_icb_cmd_valid ) ,\n  .i_bus_icb_cmd_read     (arbt_bus_icb_cmd_read )  ,\n  .i_bus_icb_cmd_addr     (arbt_bus_icb_cmd_addr )  ,\n  .i_bus_icb_cmd_wdata    (arbt_bus_icb_cmd_wdata ) ,\n  .i_bus_icb_cmd_wmask    (arbt_bus_icb_cmd_wmask)  ,\n  .i_bus_icb_cmd_burst    (arbt_bus_icb_cmd_burst)  ,\n  .i_bus_icb_cmd_beat     (arbt_bus_icb_cmd_beat )  ,\n  .i_bus_icb_cmd_excl     (arbt_bus_icb_cmd_excl )  ,\n  .i_bus_icb_cmd_lock     (arbt_bus_icb_cmd_lock )  ,\n  .i_bus_icb_cmd_size     (arbt_bus_icb_cmd_size )  ,\n  .i_bus_icb_cmd_usr      (arbt_bus_icb_cmd_usr  )  ,\n                                \n  .i_bus_icb_rsp_valid    (arbt_bus_icb_rsp_valid ) ,\n  .i_bus_icb_rsp_ready    (arbt_bus_icb_rsp_ready ) ,\n  .i_bus_icb_rsp_err      (arbt_bus_icb_rsp_err)    ,\n  .i_bus_icb_rsp_excl_ok  (arbt_bus_icb_rsp_excl_ok),\n  .i_bus_icb_rsp_rdata    (arbt_bus_icb_rsp_rdata ) ,\n  .i_bus_icb_rsp_usr      (arbt_bus_icb_rsp_usr) ,\n                             \n  .clk                    (clk  ),\n  .rst_n                  (rst_n)\n  );\n\n\n\n  /////////////////////////////////////////////////////////////////////////////////\n  // Implement a FIFO to save the outstanding info\n  //\n  //  * The FIFO will be pushed when a ICB CMD handshaked\n  //  * The FIFO will be poped  when a ICB RSP handshaked\n  `ifdef E203_HAS_ITCM //{\n  wire arbt_icb_cmd_itcm = (arbt_icb_cmd_addr[`E203_ITCM_BASE_REGION] ==  itcm_region_indic[`E203_ITCM_BASE_REGION]);\n  `else//}{\n  wire arbt_icb_cmd_itcm = 1'b0;\n  `endif//}\n  `ifdef E20"}
{"text": "3_HAS_DTCM //{\n  wire arbt_icb_cmd_dtcm = (arbt_icb_cmd_addr[`E203_DTCM_BASE_REGION] ==  dtcm_region_indic[`E203_DTCM_BASE_REGION]);\n  `else//}{\n  wire arbt_icb_cmd_dtcm = 1'b0;\n  `endif//}\n  `ifdef E203_HAS_DCACHE //{\n  wire arbt_icb_cmd_dcache = (arbt_icb_cmd_addr[`E203_DCACHE_BASE_REGION] ==  dcache_region_indic[`E203_DCACHE_BASE_REGION]);\n  `else//}{\n  wire arbt_icb_cmd_dcache = 1'b0;\n  `endif//}\n\n  wire arbt_icb_cmd_biu    = (~arbt_icb_cmd_itcm) & (~arbt_icb_cmd_dtcm) & (~arbt_icb_cmd_dcache);\n\n  wire splt_fifo_wen = arbt_icb_cmd_valid & arbt_icb_cmd_ready;\n  wire splt_fifo_ren = arbt_icb_rsp_valid & arbt_icb_rsp_ready;\n\n  `ifdef E203_SUPPORT_AMO//{\n       // In E200 single core config, we always assume the store-condition is checked by the core itself\n       //    because no other core to race\n       \n  wire excl_flg_r;\n  wire [`E203_ADDR_SIZE-1:0] excl_addr_r;\n  wire icb_cmdaddr_eq_excladdr = (arbt_icb_cmd_addr == excl_addr_r);\n  // Set when the Excl-load instruction going\n  wire excl_flg_set = splt_fifo_wen & arbt_icb_cmd_usr[USR_PACK_EXCL] & arbt_icb_cmd_read & arbt_icb_cmd_excl;\n  // Clear when any going store hit the same address\n  //   also clear if there is any trap happened\n  wire excl_flg_clr = (splt_fifo_wen & (~arbt_icb_cmd_read) & icb_cmdaddr_eq_excladdr & excl_flg_r) \n                    | commit_trap | commit_mret;\n  wire excl_flg_ena = excl_flg_set | excl_flg_clr;\n  wire excl_flg_nxt = excl_flg_set | (~excl_flg_clr);\n  sirv_gnrl_dfflr #(1) excl_flg_dffl (excl_flg_ena, excl_flg_nxt, excl_flg_r, clk, rst_n);\n  //\n  // The address is set when excl-load instruction going\n  wire excl_addr_ena = excl_flg_set;\n  wire [`E203_ADDR_SIZE-1:0] excl_addr_nxt = arbt_icb_cmd_addr;\n  sirv_gnrl_dfflr #(`E203_ADDR_SIZE) excl_addr_dffl (excl_addr_ena, excl_addr_nxt, excl_addr_r, clk, rst_n);\n\n  // For excl-store (scond) instruction, it will be true if the flag is true and the address is matching\n  wire arbt_icb_cmd_scond = arbt_icb_cmd_usr[USR_PACK_EXCL] & (~arbt_icb_cmd_read);\n  wire arbt_icb_cmd_scond_true = arbt_icb_cmd_scond & icb_cmdaddr_eq_excladdr & excl_flg_r;\n  `endif//E203_SUPPORT_AMO}\n\n  //\n\n  wire splt_fifo_i_ready;\n  wire splt_fifo_i_valid = splt_fifo_wen;\n  wire splt_fifo_full    = (~splt_fifo_i_ready);\n  wire splt_fifo_o_valid;\n  wire splt_fifo_o_ready = splt_fifo_ren;\n  wire splt_fifo_empty   = (~splt_fifo_o_valid);\n\n  wire arbt_icb_rsp_biu;\n  wire arbt_icb_rsp_dcache;\n  wire arbt_icb_rsp_dtcm;\n  wire arbt_icb_rsp_itcm;\n  wire arbt_icb_rsp_scond_true;\n\n  `ifdef E203_SUPPORT_AMO//{\n  localparam SPLT_FIFO_W = (USR_W+5);\n  wire [`E203_XLEN/8-1:0] arbt_icb_cmd_wmask_pos = \n      (arbt_icb_cmd_scond & (~arbt_icb_cmd_scond_true)) ? {`E203_XLEN/8{1'b0}} : arbt_icb_cmd_wmask;\n  `endif//E203_SUPPORT_AMO}\n\n  `ifndef E203_SUPPORT_AMO//{\n  localparam SPLT_FIFO_W = (USR_W+4);\n  wire [`E203_XLEN/8-1:0] arbt_icb_cmd_wmask_pos = arbt_icb_cmd_wmask;\n  `endif\n\n  wire [SPLT_FIFO_W-1:0] splt_fifo_wdat;\n  wire [SPLT_FIFO_W-1:0] splt_fifo_rdat;\n\n  assign splt_fifo_wdat =  {\n          arbt_icb_cmd_biu,\n          arbt_icb_cmd_dcache,\n          arbt_icb_cmd_dtcm,\n          arbt_icb_cmd_itcm,\n  `ifdef E203_SUPPORT_AMO//{\n          arbt_icb_cmd_scond_true,\n  `endif//E203_SUPPORT_AMO}\n          arbt_icb_cmd_usr \n          };\n\n  assign   \n      {\n          arbt_icb_rsp_biu,\n          arbt_icb_rsp_dcache,\n          arbt_icb_rsp_dtcm,\n          arbt_icb_rsp_itcm,\n  `ifdef E203_SUPPORT_AMO//{\n          arbt_icb_rsp_scond_true, \n  `endif//E203_SUPPORT_AMO}\n          arbt_icb_rsp_usr \n          } = splt_fifo_rdat & {SPLT_FIFO_W{splt_fifo_o_valid}};\n          // The output signals will be used as \n          //   control signals, so need to be masked\n\n  \n  `ifdef E203_LSU_OUTS_NUM_IS_1 //{\n  sirv_gnrl_pipe_stage # (\n    .CUT_READY(0),\n    .DP(1),\n    .DW(SPLT_FIFO_W)\n  ) u_e203_lsu_splt_stage (\n    .i_vld  (splt_fifo_i_valid),\n    .i_rdy  (splt_fifo_i_ready),\n    .i_dat  (splt_fifo_wdat ),\n    .o_vld  (splt_fifo_o_valid),\n    .o_rdy  (splt_fifo_o_ready),  \n    .o_dat  (splt_fifo_rdat ),  \n  \n    .clk  (clk),\n    .rst_n(rst_n)\n  );\n  `else//}{\n  sirv_gnrl_fifo # (\n    .CUT_READY (0),// When entry is clearing, it can also accept new one\n    .MSKO      (0),\n    // The depth of OITF determined how many oustanding can be dispatched to long pipeline\n    .DP  (`E203_LSU_OUTS_NUM),\n    .DW  (SPLT_FIFO_W)//\n  ) u_e203_lsu_splt_fifo (\n    .i_vld  (splt_fifo_i_valid),\n    .i_rdy  (splt_fifo_i_ready),\n    .i_dat  (splt_fifo_wdat ),\n    .o_vld  (splt_fifo_o_valid),\n    .o_rdy  (splt_fifo_o_ready),  \n    .o_dat  (splt_fifo_rdat ),  \n    .clk  (clk),\n    .rst_n(rst_n)\n  );\n  `endif//}\n\n\n\n  /////////////////////////////////////////////////////////////////////////////////\n  // Implement the ICB Splitting\n\n  `ifdef E203_LSU_OUTS_NUM_IS_1 //{\n  wire cmd_diff_branch = 1'b0; // If the LSU outstanding is only 1, there is no chance to \n                               //   happen several outsanding ops, not to mention \n                               //   with different branches\n  `else//}{\n  // The next transaction can only be issued if there is no any outstanding \n  //   transactions to different targets\n  wire cmd_diff_branch = (~splt_fifo_empty) & \n        (~({arbt_icb_cmd_biu, arbt_icb_cmd_dcache, arbt_icb_cmd_dtcm, arbt_icb_cmd_itcm}\n        == {arbt_icb_rsp_biu, arbt_icb_rsp_dcache, arbt_icb_rsp_dtcm, arbt_icb_rsp_itcm}));\n\n  `endif//}\n\n  wire arbt_icb_cmd_addi_condi = (~splt_fifo_full) & (~cmd_diff_branch);\n  wire arbt_icb_cmd_ready_pos;\n\n  wire arbt_icb_cmd_valid_pos = arbt_icb_cmd_addi_condi & arbt_icb_cmd_valid;\n  assign arbt_icb_cmd_ready     = arbt_icb_cmd_addi_condi & arbt_icb_cmd_ready_pos;\n\n  wire all_icb_cmd_ready;\n  wire all_icb_cmd_ready_excp_biu;\n  wire all_icb_cmd_ready_excp_dcach;\n  wire all_icb_cmd_ready_excp_dtcm;\n  wire all_icb_cmd_ready_excp_itcm;\n\n  `ifdef E203_HAS_DCACHE //{\n  assign dcache_icb_cmd_valid = arbt_icb_cmd_valid_pos & arbt_icb_cmd_dcache & all_icb_cmd_ready_excp_dcach;\n  assign dcache_icb_cmd_addr  = arbt_icb_cmd_addr ; \n  assign dcache_icb_cmd_read  = arbt_icb_cmd_read ; \n  assign dcache_icb_cmd_wdata = arbt_icb_cmd_wdata;\n  assign dcache_icb_cmd_wmask = arbt_icb_cmd_wmask_pos;\n  assign dcache_icb_cmd_lock  = arbt_icb_cmd_lock ;\n  assign dcache_icb_cmd_excl  = arbt_icb_cmd_excl ;\n  assign dcache_icb_cmd_size  = arbt_icb_cmd_size ;\n  `endif//}\n\n  `ifdef E203_HAS_DTCM //{\n  assign dtcm_icb_cmd_valid = arbt_icb_cmd_valid_pos & arbt_icb_cmd_dtcm & all_icb_cmd_ready_excp_dtcm;\n  assign dtcm_icb_cmd_addr  = arbt_icb_cmd_addr [`E203_DTCM_ADDR_WIDTH-1:0]; \n  assign dtcm_icb_cmd_read  = arbt_icb_cmd_read ; \n  assign dtcm_icb_cmd_wdata = arbt_icb_cmd_wdata;\n  assign dtcm_icb_cmd_wmask = arbt_icb_cmd_wmask_pos;\n  assign dtcm_icb_cmd_lock  = arbt_icb_cmd_lock ;\n  assign dtcm_icb_cmd_excl  = arbt_icb_cmd_excl ;\n  assign dtcm_icb_cmd_size  = arbt_icb_cmd_size ;\n  `endif//}\n\n  `ifdef E203_HAS_ITCM //{\n  assign itcm_icb_cmd_valid = arbt_icb_cmd_valid_pos & arbt_icb_cmd_itcm & all_icb_cmd_ready_excp_itcm;\n  assign itcm_icb_cmd_addr  = arbt_icb_cmd_addr [`E203_ITCM_ADDR_WIDTH-1:0]; \n  assign itcm_icb_cmd_read  = arbt_icb_cmd_read ; \n  assign itcm_icb_cmd_wdata = arbt_icb_cmd_wdata;\n  assign itcm_icb_cmd_wmask = arbt_icb_cmd_wmask_pos;\n  assign itcm_icb_cmd_lock  = arbt_icb_cmd_lock ;\n  assign itcm_icb_cmd_excl  = arbt_icb_cmd_excl ;\n  assign itcm_icb_cmd_size  = arbt_icb_cmd_size ;\n  `endif//}\n\n  assign biu_icb_cmd_valid = arbt_icb_cmd_valid_pos & arbt_icb_cmd_biu & all_icb_cmd_ready_excp_biu;\n  assign biu_icb_cmd_addr  = arbt_icb_cmd_addr ; \n  assign biu_icb_cmd_read  = arbt_icb_cmd_read ; \n  assign biu_icb_cmd_wdata = arbt_icb_cmd_wdata;\n  assign biu_icb_cmd_wmask = arbt_icb_cmd_wmask_pos;\n  assign biu_icb_cmd_lock  = arbt_icb_cmd_lock ;\n  assign biu_icb_cmd_excl  = arbt_icb_cmd_excl ;\n  assign biu_icb_cmd_size  = arbt_icb_cmd_size ;\n  \n  ////assign arbt_icb_cmd_ready_pos =  \n  ////          (arbt_icb_cmd_biu & biu_icb_cmd_ready ) \n  ////           `ifdef E203_HAS_DCACHE //{\n  ////        | (arbt_icb_cmd_dcache & dcache_icb_cmd_ready) \n  ////           `endif//}\n  ////           `ifdef E203_HAS_DTCM //{\n  ////        | (arbt_icb_cmd_dtcm & dtcm_icb_cmd_ready) \n  ////           `endif//}\n  ////           `ifdef E203_HAS_ITCM //{\n  ////        | (arbt_icb_cmd_itcm & itcm_icb_cmd_ready) \n  ////           `endif//}\n  ////           ;\n  // To cut the in2out path from addr to the cmd_ready signal\n  //   we just always use the simplified logic\n  //   to always ask for all of the downstream components\n  //   to be ready, this may impact performance a little\n  //   bit in corner case, but doesnt really hurt the common \n  //   case\n  //\n  assign all_icb_cmd_ready =  \n            (biu_icb_cmd_ready ) \n             `ifdef E203_HAS_DCACHE //{\n          & (dcache_icb_cmd_ready) \n             `endif//}\n             `ifdef E203_HAS_DTCM //{\n          & (dtcm_icb_cmd_ready) \n             `endif//}\n             `ifdef E203_HAS_ITCM //{\n          & (itcm_icb_cmd_ready) \n             `endif//}\n             ;\n\n  assign all_icb_cmd_ready_excp_biu =  \n            1'b1\n             `ifdef E203_HAS_DCACHE //{\n          & (dcache_icb_cmd_ready) \n             `endif//}\n             `ifdef E203_HAS_DTCM //{\n          & (dtcm_icb_cmd_ready) \n             `endif//}\n             `ifdef E203_HAS_ITCM //{\n          & (itcm_icb_cmd_ready) \n             `endif//}\n             ;\n\n  assign all_icb_cmd_ready_excp_dcach =  \n            (biu_icb_cmd_ready ) \n             `ifdef E203_HAS_DCACHE //{\n          & 1'b1\n             `endif//}\n             `ifdef E203_HAS_DTCM //{\n          & (dtcm_icb_cmd_ready) \n             `endif//}\n             `ifdef E203_HAS_ITCM //{\n          & (itcm_icb_cmd_ready) \n             `endif//}\n             ;\n  assign all_icb_cmd_ready_excp_dtcm =  \n            (biu_icb_cmd_ready ) \n             `ifdef E203_HAS_DCACHE //{\n          & (dcache_icb_cmd_ready) \n             `endif//}\n             `ifdef E203_HAS_DTCM //{\n          & 1'b1\n             `endif//}\n             `ifdef E203_HAS_ITCM //{\n          & (itcm_icb_cmd_ready) \n             `endif//}\n             ;\n\n assign all_icb_cmd_ready_excp_itcm =  \n            (biu_icb_cmd_ready ) \n             `ifdef E203_HAS_DCACHE //{\n          & (dcache_icb_cmd_ready) \n             `endif//}\n             `ifdef E203_HAS_DTCM //{\n          & (dtcm_icb_cmd_ready) \n             `endif//}\n             `ifdef E203_HAS_ITCM //{\n          & 1'b1\n             `endif//}\n             ;\n\n  assign arbt_icb_cmd_ready_pos = all_icb_cmd_ready;  \n\n  assign {\n          arbt_icb_rsp_valid \n        , arbt_icb_rsp_err \n        , arbt_icb_rsp_excl_ok \n        , arbt_icb_rsp_rdata \n         } =\n            ({`E203_XLEN+3{arbt_icb_rsp_biu}} &\n                        { biu_icb_rsp_valid \n                        , biu_icb_rsp_err \n                        , biu_icb_rsp_excl_ok \n                        , biu_icb_rsp_rdata \n                        }\n            ) \n             `ifdef E203_HAS_DCACHE //{\n          | ({`E203_XLEN+3{arbt_icb_rsp_dcache}} &\n                        { dcache_icb_rsp_valid \n                        , dcache_icb_rsp_err \n                        , dcache_icb_rsp_excl_ok \n                        , dcache_icb_rsp_rdata \n                        }\n            ) \n             `endif//}\n             `ifdef E203_HAS_DTCM //{\n          | ({`E203_XLEN+3{arbt_icb_rsp_dtcm}} &\n                        { dtcm_icb_rsp_valid \n                        , dtcm_icb_rsp_err \n                        , dtcm_icb_rsp_excl_ok \n                        , dtcm_icb_rsp_rdata \n                        }\n            ) \n             `endif//}\n             `ifdef E203_HAS_ITCM //{\n          | ({`E203_XLEN+3{arbt_icb_rsp_itcm}} &\n                        { itcm_icb_rsp_valid \n                        , itcm_icb_rsp_err \n                        , itcm_icb_rsp_excl_ok \n                        , itcm_icb_rsp_rdata \n                        }\n            ) \n             `endif//}\n             ;\n\n  assign biu_icb_rsp_ready    = arbt_icb_rsp_biu    & arbt_icb_rsp_ready;\n             `ifdef E203_HAS_DCACHE //{\n  assign dcache_icb_rsp_ready = arbt_icb_rsp_dcache & arbt_icb_rsp_ready;\n             `endif//}\n             `ifdef E203_HAS_DTCM //{\n  assign dtcm_icb_rsp_ready   = arbt_icb_rsp_dtcm   & arbt_icb_rsp_ready;\n             `endif//}\n             `ifdef E203_HAS_ITCM //{\n  assign itcm_icb_rsp_ready   = arbt_icb_rsp_itcm   & arbt_icb_rsp_ready;\n             `endif//}\n\n\n  /////////////////////////////////////////////////////////////////////////////////\n  // Pass the ICB response back to AGU or LSU-Writeback if it need back2agu or not\n  assign lsu_o_valid       = pre_agu_icb_rsp_valid & (~pre_agu_icb_rsp_back2agu);\n  assign agu_icb_rsp_valid = pre_agu_icb_rsp_valid &   pre_agu_icb_rsp_back2agu;\n\n  assign pre_agu_icb_rsp_ready =\n      pre_agu_icb_rsp_back2agu ?  agu_icb_rsp_ready : lsu_o_ready; \n\n  assign agu_icb_rsp_err   = pre_agu_icb_rsp_err  ;\n  assign agu_icb_rsp_excl_ok = pre_agu_icb_rsp_excl_ok  ;\n  assign agu_icb_rsp_rdata = pre_agu_icb_rsp_rdata;\n\n  assign lsu_o_wbck_itag   = pre_agu_icb_rsp_itag;\n\n  wire [`E203_XLEN-1:0] rdata_algn = \n      (pre_agu_icb_rsp_rdata >> {pre_agu_icb_rsp_addr[1:0],3'b0});\n\n  wire rsp_lbu = (pre_agu_icb_rsp_size == 2'b00) & (pre_agu_icb_rsp_usign == 1'b1);\n  wire rsp_lb  = (pre_agu_icb_rsp_size == 2'b00) & (pre_agu_icb_rsp_usign == 1'b0);\n  wire rsp_lhu = (pre_agu_icb_rsp_size == 2'b01) & (pre_agu_icb_rsp_usign == 1'b1);\n  wire rsp_lh  = (pre_agu_icb_rsp_size == 2'b01) & (pre_agu_icb_rsp_usign == 1'b0);\n  wire rsp_lw  = (pre_agu_icb_rsp_size == 2'b10);\n\n  `ifdef E203_SUPPORT_AMO//{\n       // In E200 single core config, we always assume the store-condition is checked by the core itself\n       //    because no other core to race. So we dont use the returned excl-ok, but use the LSU tracked\n       //    scond_true\n  //wire [`E203_XLEN-1:0] sc_excl_wdata = pre_agu_icb_rsp_excl_ok ? `E203_XLEN'd0 : `E203_XLEN'd1; \n  wire [`E203_XLEN-1:0] sc_excl_wdata = arbt_icb_rsp_scond_true ? `E203_XLEN'd0 : `E203_XLEN'd1; \n                // If it is scond (excl-write), then need to update the regfile\n  assign lsu_o_wbck_wdat   = ((~pre_agu_icb_rsp_read) & pre_agu_icb_rsp_excl) ? sc_excl_wdata :\n  `endif//E203_SUPPORT_AMO}\n  `ifndef E203_SUPPORT_AMO//{\n       // If not support the store-condition instructions, then we have no chance to issue excl transaction\n           // no need to consider the store-condition result write-back\n  assign lsu_o_wbck_wdat   = \n  `endif\n          ( ({`E203_XLEN{rsp_lbu}} & {{24{          1'b0}}, rdata_algn[ 7:0]})\n          | ({`E203_XLEN{rsp_lb }} & {{24{rdata_algn[ 7]}}, rdata_algn[ 7:0]})\n          | ({`E203_XLEN{rsp_lhu}} & {{16{          1'b0}}, rdata_algn[15:0]})\n          | ({`E203_XLEN{rsp_lh }} & {{16{rdata_algn[15]}}, rdata_algn[15:0]}) \n          | ({`E203_XLEN{rsp_lw }} & rdata_algn[31:0]));\n          \n  assign lsu_o_wbck_err    = pre_agu_icb_rsp_err;\n  assign lsu_o_cmt_buserr  = pre_agu_icb_rsp_err;// The bus-error exception generated\n  assign lsu_o_cmt_badaddr = pre_agu_icb_rsp_addr;\n  assign lsu_o_cmt_ld=  pre_agu_icb_rsp_read;\n  assign lsu_o_cmt_st= ~pre_agu_icb_rsp_read;\n\n  assign lsu_ctrl_active = (|arbt_bus_icb_cmd_valid_raw) | splt_fifo_o_valid;\n\nendmodule\n\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n// Designer   : Bob Hu\n//\n// Description:\n//  The Reset Ctrl module to implement reset control\n//\n// ====================================================================\n\n`include \"e203_defines.v\"\n\nmodule e203_reset_ctrl #(\n    parameter MASTER = 1\n)(\n  input  clk,        // clock\n  input  rst_n,      // async reset\n  input  test_mode,  // test mode \n\n  \n  // The core's clk and rst\n  output rst_core,\n\n  // The ITCM/DTCM clk and rst\n  `ifdef E203_HAS_ITCM\n  output rst_itcm,\n  `endif\n  `ifdef E203_HAS_DTCM\n  output rst_dtcm,\n  `endif\n\n  // The Top always on clk and rst\n  output rst_aon \n\n);\n\nwire rst_sync_n;\n\n\n      `ifndef E203_HAS_LOCKSTEP//{\nlocalparam RST_SYNC_LEVEL = `E203_ASYNC_FF_LEVELS;\n      `endif//}\n\nreg [RST_SYNC_LEVEL-1:0] rst_sync_r; \n\n\ngenerate \n  if(MASTER == 1) begin:master_gen\n\n     \n     always @(posedge clk or negedge rst_n)\n     begin:rst_sync_PROC\n       if(rst_n == 1'b0)\n         begin\n           rst_sync_r[RST_SYNC_LEVEL-1:0] <= {RST_SYNC_LEVEL{1'b0}};\n         end\n       else\n         begin\n           rst_sync_r[RST_SYNC_LEVEL-1:0] <= {rst_sync_r[RST_SYNC_LEVEL-2:0],1'b1};\n         end\n     end\n     \n     assign rst_sync_n     = test_mode ? rst_n : rst_sync_r[`E203_ASYNC_FF_LEVELS-1];\n     \n\n  end\n  else begin:slave_gen\n         // Just pass through for slave in lockstep mode\n     always @ * \n     begin:rst_sync_PROC\n       rst_sync_r = {RST_SYNC_LEVEL{1'b0}}; \n     end\n     assign rst_sync_n = rst_n;\n  end\nendgenerate\n\n   // The core's clk and rst\n assign rst_core = rst_sync_n;\n \n   // The ITCM/DTCM clk and rst\n   `ifdef E203_HAS_ITCM\n assign rst_itcm = rst_sync_n;\n   `endif\n   `ifdef E203_HAS_DTCM\n assign rst_dtcm = rst_sync_n;\n   `endif\n \n   // The Top always on clk and rst\n assign rst_aon = rst_sync_n;\n\nendmodule\n\n"}
{"text": " /*                                                                      \n Copyright 2018 Nuclei System Technology, Inc.                \n                                                                         \n Licensed under the Apache License, Version 2.0 (the \"License\");         \n you may not use this file except in compliance with the License.        \n You may obtain a copy of the License at                                 \n                                                                         \n     http://www.apache.org/licenses/LICENSE-2.0                          \n                                                                         \n  Unless required by applicable law or agreed to in writing, software    \n distributed under the License is distributed on an \"AS IS\" BASIS,       \n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and     \n limitations under the License.                                          \n */                                                                      \n                                                                         \n                                                                         \n                                                                         \n//=====================================================================\n//\n// Designer   : Bob Hu\n//\n// Description:\n//  The SRAM module to implement all SRAMs\n//\n// ====================================================================\n\n`include \"e203_defines.v\"\n\nmodule e203_srams(\n\n  `ifdef E203_HAS_ITCM //{\n  input  itcm_ram_sd,\n  input  itcm_ram_ds,\n  input  itcm_ram_ls,\n\n  input                          itcm_ram_cs,  \n  input                          itcm_ram_we,  \n  input  [`E203_ITCM_RAM_AW-1:0] itcm_ram_addr, \n  input  [`E203_ITCM_RAM_MW-1:0] itcm_ram_wem,\n  input  [`E203_ITCM_RAM_DW-1:0] itcm_ram_din,          \n  output [`E203_ITCM_RAM_DW-1:0] itcm_ram_dout,\n  input                          clk_itcm_ram,\n  input  rst_itcm,\n  `endif//}\n\n  `ifdef E203_HAS_DTCM //{\n  input  dtcm_ram_sd,\n  input  dtcm_ram_ds,\n  input  dtcm_ram_ls,\n\n  input                          dtcm_ram_cs,  \n  input                          dtcm_ram_we,  \n  input  [`E203_DTCM_RAM_AW-1:0] dtcm_ram_addr, \n  input  [`E203_DTCM_RAM_MW-1:0] dtcm_ram_wem,\n  input  [`E203_DTCM_RAM_DW-1:0] dtcm_ram_din,          \n  output [`E203_DTCM_RAM_DW-1:0] dtcm_ram_dout,\n  input                          clk_dtcm_ram,\n  input  rst_dtcm,\n  `endif//}\n\n  input  test_mode\n\n);\n\n\n                                                      \n  `ifdef E203_HAS_ITCM //{\n  wire [`E203_ITCM_RAM_DW-1:0]  itcm_ram_dout_pre;\n\n  e203_itcm_ram u_e203_itcm_ram (\n    .sd   (itcm_ram_sd),\n    .ds   (itcm_ram_ds),\n    .ls   (itcm_ram_ls),\n  \n    .cs   (itcm_ram_cs   ),\n    .we   (itcm_ram_we   ),\n    .addr (itcm_ram_addr ),\n    .wem  (itcm_ram_wem  ),\n    .din  (itcm_ram_din  ),\n    .dout (itcm_ram_dout_pre ),\n    .rst_n(rst_itcm      ),\n    .clk  (clk_itcm_ram  )\n    );\n    \n  // Bob: we dont need this bypass here, actually the DFT tools will handle this SRAM black box \n  //assign itcm_ram_dout = test_mode ? itcm_ram_din : itcm_ram_dout_pre;\n  assign itcm_ram_dout = itcm_ram_dout_pre;\n  `endif//}\n\n  `ifdef E203_HAS_DTCM //{\n  wire [`E203_DTCM_RAM_DW-1:0]  dtcm_ram_dout_pre;\n\n  e203_dtcm_ram u_e203_dtcm_ram (\n    .sd   (dtcm_ram_sd),\n    .ds   (dtcm_ram_ds),\n    .ls   (dtcm_ram_ls),\n  \n    .cs   (dtcm_ram_cs   ),\n    .we   (dtcm_ram_we   ),\n    .addr (dtcm_ram_addr ),\n    .wem  (dtcm_ram_wem  ),\n    .din  (dtcm_ram_din  ),\n    .dout (dtcm_ram_dout_pre ),\n    .rst_n(rst_dtcm      ),\n    .clk  (clk_dtcm_ram  )\n    );\n    \n  // Bob: we dont need this bypass here, actually the DFT tools will handle this SRAM black box \n  //assign dtcm_ram_dout = test_mode ? dtcm_ram_din : dtcm_ram_dout_pre;\n  assign dtcm_ram_dout = dtcm_ram_dout_pre;\n  `endif//}\n\nendmodule\n"}
