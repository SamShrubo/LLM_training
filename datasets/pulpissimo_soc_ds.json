{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n\nmodule jtag_tap_top #(\n    parameter logic [31:0] IDCODE_VALUE = 32'h10000db3\n)(\n    input  logic              tck_i,\n    input  logic              trst_ni,\n    input  logic              tms_i,\n    input  logic              td_i,\n    output logic              td_o,\n\n    input  logic              test_clk_i,\n    input  logic              test_rstn_i,\n\n    input  logic        [7:0] soc_jtag_reg_i,\n    output logic        [7:0] soc_jtag_reg_o,\n    output logic              sel_fll_clk_o,\n\n   // tap\n   output logic               jtag_shift_dr_o,\n   output logic               jtag_update_dr_o,\n   output logic               jtag_capture_dr_o,\n   output logic               axireg_sel_o,\n\n   output logic               dbg_axi_scan_in_o,\n   input  logic               dbg_axi_scan_out_i\n);\n\n    logic                       s_scan_i;\n    logic [8:0]                 s_confreg;\n    logic                       confscan;\n    logic                       confreg_sel;\n    logic                       td_o_int;\n\n    logic [7:0] r_soc_reg0;\n    logic [7:0] r_soc_reg1;\n\n    logic [7:0] s_soc_jtag_reg_sync;\n\n\n\n    // jtag tap controller\n    tap_top  #(\n        .IDCODE_VALUE      ( IDCODE_VALUE       )\n    ) tap_top_i (\n        .tms_i             ( tms_i              ),\n        .tck_i             ( tck_i              ),\n        .rst_ni            ( trst_ni            ),\n        .td_i              ( td_i               ),\n        .td_o              ( td_o               ),\n\n        .shift_dr_o        ( jtag_shift_dr_o    ),\n        .update_dr_o       ( jtag_update_dr_o   ),\n        .capture_dr_o      ( jtag_capture_dr_o  ),\n\n        .memory_sel_o      ( axireg_sel_o       ),\n        .fifo_sel_o        (                    ),\n        .confreg_sel_o     ( confreg_sel        ),\n        .observ_sel_o      (                    ),\n        .clk_byp_sel_o     (                    ),\n\n        .scan_in_o         ( s_scan_i           ),\n\n        .observ_out_i      ( 1'b0               ),\n        .clk_byp_out_i     ( 1'b0               ),\n        .memory_out_i      ( dbg_axi_scan_out_i ),\n        .fifo_out_i        ( 1'b0               ),\n        .confreg_out_i     ( confscan           )\n    );\n\n    // pulp configuration register\n    jtagreg\n    #(\n        .JTAGREGSIZE(9),\n        .SYNC(0)\n    )\n    confreg\n    (\n        .clk_i                  ( tck_i               ),\n        .rst_ni                 ( trst_ni             ),\n        .enable_i               ( confreg_sel         ),\n        .capture_dr_i           ( jtag_capture_dr_o   ),\n        .shift_dr_i             ( jtag_shift_dr_o     ),\n        .update_dr_i            ( jtag_update_dr_o    ),\n        .jtagreg_in_i           ( {1'b0, s_soc_jtag_reg_sync} ), //at sys rst enable the fll\n        .mode_i                 ( 1'b1                ),\n        .scan_in_i              ( s_scan_i            ),\n        .jtagreg_out_o          ( s_confreg           ),\n        .scan_out_o             ( confscan            )\n    );\n\n    always_ff @(posedge tck_i or negedge trst_ni) begin\n      if(~trst_ni) begin\n        r_soc_reg0 <= 0;\n        r_soc_reg1 <= 0;\n      end else begin\n        r_soc_reg1 <= soc_jtag_reg_i;\n        r_soc_reg0 <= r_soc_reg1;\n      end\n    end\n\n   assign s_soc_jtag_reg_sync =r_soc_reg0;\n\n   assign dbg_axi_scan_in_o           =  s_scan_i;\n\n   assign soc_jtag_reg_o              =  s_confreg[7:0];\n\n   assign sel_fll_clk_o               =  s_confreg[8];\n\nendmodule\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n`define SPI_STD_TX  2'b00\n`define SPI_STD_RX  2'b01\n`define SPI_QUAD_TX 2'b10\n`define SPI_QUAD_RX 2'b11\n\nmodule pad_control #(\n    parameter int unsigned N_UART = 1,\n    parameter int unsigned N_SPI = 1,\n    parameter int unsigned N_I2C = 2\n) (\n\n        //********************************************************************//\n        //*** PERIPHERALS SIGNALS ********************************************//\n        //********************************************************************//\n\n        // PAD CONTROL REGISTER\n        input  logic [63:0][1:0] pad_mux_i            ,\n        input  logic [63:0][5:0] pad_cfg_i            ,\n        output logic [47:0][5:0] pad_cfg_o            ,\n\n        input  logic             sdio_clk_i,\n        input  logic             sdio_cmd_i,\n        output logic             sdio_cmd_o,\n        input  logic             sdio_cmd_oen_i,\n        input  logic [3:0]       sdio_data_i,\n        output logic [3:0]       sdio_data_o,\n        input  logic [3:0]       sdio_data_oen_i,\n\n        // GPIOS\n        input  logic [31:0]      gpio_out_i           ,\n        output logic [31:0]      gpio_in_o            ,\n        input  logic [31:0]      gpio_dir_i           ,\n        input  logic [31:0][5:0] gpio_cfg_i           ,\n\n        // UART\n        input  logic             uart_tx_i            ,\n        output logic             uart_rx_o            ,\n\n        // I2C\n        input  logic [N_I2C-1:0] i2c_scl_out_i,\n        output logic [N_I2C-1:0] i2c_scl_in_o,\n        input  logic [N_I2C-1:0] i2c_scl_oe_i,\n        input  logic [N_I2C-1:0] i2c_sda_out_i,\n        output logic [N_I2C-1:0] i2c_sda_in_o,\n        input  logic [N_I2C-1:0] i2c_sda_oe_i,\n\n        // I2S\n        output logic             i2s_slave_sd0_o      ,\n        output logic             i2s_slave_sd1_o      ,\n        output logic             i2s_slave_ws_o       ,\n        input  logic             i2s_slave_ws_i       ,\n        input  logic             i2s_slave_ws_oe      ,\n        output logic             i2s_slave_sck_o      ,\n        input  logic             i2s_slave_sck_i      ,\n        input  logic             i2s_slave_sck_oe     ,\n\n        // SPI MASTER\n        input  logic [N_SPI-1:0]      spi_clk_i,\n        input  logic [N_SPI-1:0][3:0] spi_csn_i,\n        input  logic [N_SPI-1:0][3:0] spi_oen_i,\n        input  logic [N_SPI-1:0][3:0] spi_sdo_i,\n        output logic [N_SPI-1:0][3:0] spi_sdi_o,\n\n        // CAMERA INTERFACE\n        output logic             cam_pclk_o           ,\n        output logic [7:0]       cam_data_o           ,\n        output logic             cam_hsync_o          ,\n        output logic             cam_vsync_o          ,\n\n        // TIMER\n        input  logic [3:0]       timer0_i             ,\n        input  logic [3:0]       timer1_i             ,\n        input  logic [3:0]       timer2_i             ,\n        input  logic [3:0]       timer3_i             ,\n\n        //********************************************************************//\n        //*** PAD FRAME SIGNALS **********************************************//\n        //********************************************************************//\n\n        // PADS OUTPUTS\n        output logic             out_spim_sdio0_o ,\n        output logic             out_spim_sdio1_o ,\n        output logic             out_spim_sdio2_o ,\n        output logic             out_spim_sdio3_o ,\n        output logic             out_spim_csn0_o  ,\n        output logic             out_spim_csn1_o  ,\n        output logic             out_spim_sck_o   ,\n        output logic             out_sdio_clk_o   ,\n        output logic             out_sdio_cmd_o   ,\n        output logic             out_sdio_data0_o ,\n        output logic             out_sdio_data1_o ,\n        output logic             out_sdio_data2_o ,\n        output logic             out_sdio_data3_o ,\n        output logic             out_uart_rx_o    ,\n        output logic             out_uart_tx_o    ,\n        output logic             out_cam_pclk_o   ,\n        output logic             out_cam_hsync_o  ,\n        output logic             out_cam_data0_o  ,\n        output logic             out_cam_data1_o  ,\n        output logic             out_cam_data2_o  ,\n        output logic             out_cam_data3_o  ,\n        output logic             out_cam_data4_o  ,\n        output logic             out_cam_data5_o  ,\n        output logic             out_cam_data6_o  ,\n        output logic             out_cam_data7_o  ,\n        output logic             out_cam_vsync_o  ,\n        output logic             out_i2c0_sda_o   ,\n        output logic             out_i2c0_scl_o   ,\n        output logic             out_i2s0_sck_o   ,\n        output logic             out_i2s0_ws_o    ,\n        output logic             out_i2s0_sdi_o   ,\n        output logic             out_i2s1_sdi_o   ,\n\n        // PAD INPUTS\n        input logic              in_spim_sdio0_i  ,\n        input logic              in_spim_sdio1_i  ,\n        input logic              in_spim_sdio2_i  ,\n        input logic              in_spim_sdio3_i  ,\n        input logic              in_spim_csn0_i   ,\n        input logic              in_spim_csn1_i   ,\n        input logic              in_spim_sck_i    ,\n        input logic              in_sdio_clk_i        ,\n        input logic              in_sdio_cmd_i        ,\n        input logic              in_sdio_data0_i      ,\n        input logic              in_sdio_data1_i      ,\n        input logic              in_sdio_data2_i      ,\n        input logic              in_sdio_data3_i      ,\n        input logic              in_uart_rx_i     ,\n        input logic              in_uart_tx_i     ,\n        input logic              in_cam_pclk_i    ,\n        input logic              in_cam_hsync_i   ,\n        input logic              in_cam_data0_i   ,\n        input logic              in_cam_data1_i   ,\n        input logic              in_cam_data2_i   ,\n        input logic              in_cam_data3_i   ,\n        input logic              in_cam_data4_i   ,\n        input logic              in_cam_data5_i   ,\n        input logic              in_cam_data6_i   ,\n        input logic              in_cam_data7_i   ,\n        input logic              in_cam_vsync_i   ,\n        input logic              in_i2c0_sda_i    ,\n        input logic              in_i2c0_scl_i    ,\n        input logic              in_i2s0_sck_i    ,\n        input logic              in_i2s0_ws_i     ,\n        input logic              in_i2s0_sdi_i    ,\n        input logic              in_i2s1_sdi_i    ,\n\n        // OUTPUT ENABLE\n        output logic             oe_spim_sdio0_o  ,\n        output logic             oe_spim_sdio1_o  ,\n        output logic             oe_spim_sdio2_o  ,\n        output logic             oe_spim_sdio3_o  ,\n        output logic             oe_spim_csn0_o   ,\n        output logic             oe_spim_csn1_o   ,\n        output logic             oe_spim_sck_o    ,\n        output logic             oe_sdio_clk_o    ,\n        output logic             oe_sdio_cmd_o    ,\n        output logic             oe_sdio_data0_o  ,\n        output logic             oe_sdio_data1_o  ,\n        output logic             oe_sdio_data2_o  ,\n        output logic             oe_sdio_data3_o  ,\n        output logic             oe_uart_rx_o     ,\n        output logic             oe_uart_tx_o     ,\n        output logic             oe_cam_pclk_o    ,\n        output logic             oe_cam_hsync_o   ,\n        output logic             oe_cam_data0_o   ,\n        output logic             oe_cam_data1_o   ,\n        output logic             oe_cam_data2_o   ,\n        output logic             oe_cam_data3_o   ,\n        output logic             oe_cam_data4_o   ,\n        output logic             oe_cam_data5_o   ,\n        output logic             oe_cam_data6_o   ,\n        output logic             oe_cam_data7_o   ,\n        output logic             oe_cam_vsync_o   ,\n        output logic             oe_i2c0_sda_o    ,\n        output logic             oe_i2c0_scl_o    ,\n        output logic             oe_i2s0_sck_o    ,\n        output logic             oe_i2s0_ws_o     ,\n        output logic             oe_i2s0_sdi_o    ,\n        output logic             oe_i2s1_sdi_o\n    );\n\n\n   logic s_alt0,s_alt1,s_alt2,s_alt3;\n\n   // check invariants\n   if (N_SPI  <  1 || N_SPI  >  2) $error(\"The current verion of Pad control supports only 1 or 2 SPI peripherals\");\n   if (N_I2C  != 2) $error(\"The current version of Pad control only supports exactly 2 I2C peripherals\");\n   if (N_UART != 1) $error(\"The current version of Pad control only supports exactly 1 UART peripherals\");\n\n   // DEFINE DEFAULT FOR NOT USED ALTERNATIVES\n   assign s_alt0 = 1'b0;\n   assign s_alt1 = 1'b0;\n   assign s_alt2 = 1'b0;\n   assign s_alt3 = 1'b0;\n\n   /////////////////////////////////////////////////////////////////////////////////////////////\n   // OUTPUT ENABLE\n   /////////////////////////////////////////////////////////////////////////////////////////////\n   assign oe_spim_sdio0_o  = (pad_mux_i[0 ] == 2'b00) ? ~spi_oen_i[0][0]    : ((pad_mux_i[0 ] == 2'b01) ? gpio_dir_i[0 ] : ((pad_mux_i[0 ] == 2'b10) ? s_alt2        : s_alt3 ));\n   assign oe_spim_sdio1_o  = (pad_mux_i[1 ] == 2'b00) ? ~spi_oen_i[0][1]    : ((pad_mux_i[1 ] == 2'b01) ? gpio_dir_i[1 ] : ((pad_mux_i[1 ] == 2'b10) ? s_alt2        : s_alt3 ));\n   assign oe_spim_sdio2_o  = (pad_mux_i[2 ] == 2'b00) ? ~spi_oen_i[0][2]    : ((pad_mux_i[2 ] == 2'b01) ? gpio_dir_i[2 ] : ((pad_mux_i[2 ] == 2'b10) ? i2c_sda_oe_i[1] : s_alt3 ));\n   assign oe_spim_sdio3_o  = (pad_mux_i[3 ] == 2'b00) ? ~spi_oen_i[0][3]    : ((pad_mux_i[3 ] == 2'b01) ? gpio_dir_i[3 ] : ((pad_mux_i[3 ] == 2'b10) ? i2c_scl_oe_i[1] : s_alt3 ));\n   assign oe_spim_csn0_o   = (pad_mux_i[4 ] == 2'b00) ? 1'b1                : ((pad_mux_i[4 ] == 2'b01) ? gpio_dir_i[4 ] : ((pad_mux_i[4 ] == 2'b10) ? s_alt2        : s_alt3 ));\n   assign oe_spim_csn1_o   = (pad_mux_i[5 ] == 2'b00) ? 1'b1                : ((pad_mux_i[5 ] == 2'b01) ? gpio_dir_i[5 ] : ((pad_mux_i[5 ] == 2'b10) ? s_alt2        : s_alt3 ));\n   assign oe_spim_sck_o    = (pad_mux_i[6 ] == 2'b00) ? 1'b1                : ((pad_mux_i[6 ] == 2'b01) ? gpio_dir_i[6 ] : ((pad_mux_i[6 ] == 2'b10) ? s_alt2        : s_alt3 ));\n   assign oe_uart_rx_o     = (pad_mux_i[7 ] == 2'b00) ? 1'b0                : ((pad_mux_i[7 ] == 2'b01) ? gpio_dir_i[7 ] : ((pad_mux_i[7 ] == 2'b10) ? i2c_sda_oe_i[1] : s_alt3 ));\n   assign oe_uart_tx_o     = (pad_mux_i[8 ] == 2'b00) ? 1'b1                : ((pad_mux_i[8 ] == 2'b01) ? gpio_dir_i[8 ] : ((pad_mux_i[8 ] == 2'b10) ? i2c_scl_oe_i[1] : s_alt3 ));\n   assign oe_cam_pclk_o    = (pad_mux_i[9 ] == 2'b00) ? 1'b0                : ((pad_mux_i[9 ] == 2'b01) ? gpio_dir_i[9 ] : ((pad_mux_i[9 ] == 2'b10) ? 1'b1          : s_alt3 ));\n   assign oe_cam_hsync_o   = (pad_mux_i[10] == 2'b00) ? 1'b0                : ((pad_mux_i[10] == 2'b01) ? gpio_dir_i[10] : ((pad_mux_i[10] == 2'b10) ? 1'b1          : s_alt3 ));\n   assign oe_cam_data0_o   = (pad_mux_i[11] == 2'b00) ? 1'b0                : ((pad_mux_i[11] == 2'b01) ? gpio_dir_i[11] : ((pad_mux_i[11] == 2'b10) ? 1'b1          : s_alt3 ));\n   assign oe_cam_data1_o   = (pad_mux_i[12] == 2'b00) ? 1'b0                : ((pad_mux_i[12] == 2'b01) ? gpio_dir_i[12] : ((pad_mux_i[12] == 2'b10) ? 1'b1          : s_alt3 ));\n   assign oe_cam_data2_o   = (pad_mux_i[13] == 2'b00) ? 1'b0                : ((pad_mux_i[13] == 2'b01) ? gpio_dir_i[13] : ((pad_mux_i[13] == 2'b10) ? 1'b1          : s_alt3 ));\n   assign oe_cam_data3_o   = (pad_mux_i[14] == 2'b00) ? 1'b0                : ((pad_mux_i[14] == 2'b01) ? gpio_dir_i[14] : ((pad_mux_i[14] == 2'b10) ? 1'b1          : s_alt3 ));\n   assign oe_cam_data4_o   = (pad_mux_i[15] == 2'b00) ? 1'b0                : ((pad_mux_i[15] == 2'b01) ? gpio_dir_i[15] : ((pad_mux_i[15] == 2'b10) ? 1'b1          : s_alt3 ));\n   assign oe_cam_data5_o   = (pad_mux_i[16] == 2'b00) ? 1'b0                : ((pad_mux_i[16] == 2'b01) ? gpio_dir_i[16] : ((pad_mux_i[16] == 2'b10) ? 1'b1          : s_alt3 ));\n   assign oe_cam_data6_o   = (pad_mux_i[17] == 2'b00) ? 1'b0                : ((pad_mux_i[17] == 2'b01) ? gpio_dir_i[17] : ((pad_mux_i[17] == 2'b10) ? 1'b1          : s_alt3 ));\n   assign oe_cam_data7_o   = (pad_mux_i[18] == 2'b00) ? 1'b0                : ((pad_mux_i[18] == 2'b01) ? gpio_dir_i[18] : ((pad_mux_i[18] == 2'b10) ? 1'b1          : s_alt3 ));\n   assign oe_cam_vsync_o   = (pad_mux_i[19] == 2'b00) ? 1'b0                : ((pad_mux_i[19] == 2'b01) ? gpio_dir_i[19] : ((pad_mux_i[19] == 2'b10) ? 1'b1          : s_alt3 ));\n   assign oe_sdio_clk_o    = (pad_mux_i[20] == 2'b00) ? 1'b1                : ((pad_mux_i[20] == 2'b01) ? gpio_dir_i[20] : ((pad_mux_i[20] == 2'b10) ? 1'b0          : s_alt3 ));\n   assign oe_sdio_cmd_o    = (pad_mux_i[21] == 2'b00) ? ~sdio_cmd_oen_i     : ((pad_mux_i[21] == 2'b01) ? gpio_dir_i[21] : ((pad_mux_i[21] == 2'b10) ? 1'b0          : s_alt3 ));\n   assign oe_sdio_data0_o  = (pad_mux_i[22] == 2'b00) ? ~sdio_data_oen_i[0] : ((pad_mux_i[22] == 2'b01) ? gpio_dir_i[22] : ((pad_mux_i[22] == 2'b10) ? 1'b0          : s_alt3 ));\n   assign oe_sdio_data1_o  = (pad_mux_i[23] == 2'b00) ? ~sdio_data_oen_i[1] : ((pad_mux_i[23] == 2'b01) ? gpio_dir_i[23] : ((pad_mux_i[23] == 2'b10) ? 1'b0          : s_alt3 ));\n   assign oe_sdio_data2_o  = (pad_mux_i[24] == 2'b00) ? ~sdio_data_oen_i[2] : ((pad_mux_i[24] == 2'b01) ? gpio_dir_i[24] : ((pad_mux_i[24] == 2'b10) ? i2c_sda_oe_i[1] : s_alt3 ));\n   assign oe_sdio_data3_o  = (pad_mux_i[25] == 2'b00) ? ~sdio_data_oen_i[3] : ((pad_mux_i[25] == 2'b01) ? gpio_dir_i[25] : ((pad_mux_i[25] == 2'b10) ? i2c_scl_oe_i[1] : s_alt3 ));\n   assign oe_i2c0_sda_o    = (pad_mux_i[33] == 2'b00) ? i2c_sda_oe_i[0]     : ((pad_mux_i[33] == 2'b01) ? gpio_dir_i[26] : ((pad_mux_i[33] == 2'b10) ? s_alt2        : s_alt3 ));\n   assign oe_i2c0_scl_o    = (pad_mux_i[34] == 2'b00) ? i2c_scl_oe_i[0]     : ((pad_mux_i[34] == 2'b01) ? gpio_dir_i[27] : ((pad_mux_i[34] == 2'b10) ? s_alt2        : s_alt3 ));\n   assign oe_i2s0_sck_o    = (pad_mux_i[35] == 2'b00) ? i2s_slave_sck_oe    : ((pad_mux_i[35] == 2'b01) ? gpio_dir_i[28] : ((pad_mux_i[35] == 2'b10) ? s_alt2        : s_alt3 ));\n   assign oe_i2s0_ws_o     = (pad_mux_i[36] == 2'b00) ? i2s_slave_ws_oe     : ((pad_mux_i[36] == 2'b01) ? gpio_dir_i[29] : ((pad_mux_i[36] == 2'b10) ? s_alt2        : s_alt3 ));\n   assign oe_i2s0_sdi_o    = (pad_mux_i[37] == 2'b00) ? 1'b0                : ((pad_mux_i[37] == 2'b01) ? gpio_dir_i[30] : ((pad_mux_i[37] == 2'b10) ? s_alt2        : s_alt3 ));\n   assign oe_i2s1_sdi_o    = (pad_mux_i[38] == 2'b00) ? 1'b0                : ((pad_mux_i[38] == 2'b01) ? gpio_dir_i[31] : ((pad_mux_i[38] == 2'b10) ? s_alt2        : s_alt3 ));\n\n   /////////////////////////////////////////////////////////////////////////////////////////////\n   // DATA OUTPUT\n   /////////////////////////////////////////////////////////////////////////////////////////////\n   assign out_spim_sdio0_o = (pad_mux_i[0 ] == 2'b00) ? spi_sdo_i[0][0]    : ((pad_mux_i[0 ] == 2'b01) ? gpio_out_i[0 ] : ((pad_mux_i[0 ] == 2'b10) ? s_alt2         : s_alt3 ));\n   assign out_spim_sdio1_o = (pad_mux_i[1 ] == 2'b00) ? spi_sdo_i[0][1]    : ((pad_mux_i[1 ] == 2'b01) ? gpio_out_i[1 ] : ((pad_mux_i[1 ] == 2'b10) ? s_alt2         : s_alt3 ));\n   assign out_spim_sdio2_o = (pad_mux_i[2 ] == 2'b00) ? spi_sdo_i[0][2]    : ((pad_mux_i[2 ] == 2'b01) ? gpio_out_i[2 ] : ((pad_mux_i[2 ] == 2'b10) ? i2c_sda_out_i[1] : s_alt3 ));\n   assign out_spim_sdio3_o = (pad_mux_i[3 ] == 2'b00) ? spi_sdo_i[0][3]    : ((pad_mux_i[3 ] == 2'b01) ? gpio_out_i[3 ] : ((pad_mux_i[3 ] == 2'b10) ? i2c_scl_out_i[1] : s_alt3 ));\n   assign out_spim_csn0_o  = (pad_mux_i[4 ] == 2'b00) ? spi_csn_i[0][0]    : ((pad_mux_i[4 ] == 2'b01) ? gpio_out_i[4 ] : ((pad_mux_i[4 ] == 2'b10) ? s_alt2         : s_alt3 ));\n   assign out_spim_csn1_o  = (pad_mux_i[5 ] == 2'b00) ? spi_csn_i[0][1]    : ((pad_mux_i[5 ] == 2'b01) ? gpio_out_i[5 ] : ((pad_mux_i[5 ] == 2'b10) ? s_alt2         : s_alt3 ));\n   assign out_spim_sck_o   = (pad_mux_i[6 ] == 2'b00) ? spi_clk_i[0]       : ((pad_mux_i[6 ] == 2'b01) ? gpio_out_i[6 ] : ((pad_mux_i[6 ] == 2'b10) ? s_alt2         : s_alt3 ));\n   assign out_uart_rx_o    = (pad_mux_i[7 ] == 2'b00) ? 1'b0               : ((pad_mux_i[7 ] == 2'b01) ? gpio_out_i[7 ] : ((pad_mux_i[7 ] == 2'b10) ? i2c_sda_out_i[1] : s_alt3 ));\n   assign out_uart_tx_o    = (pad_mux_i[8 ] == 2'b00) ? uart_tx_i          : ((pad_mux_i[8 ] == 2'b01) ? gpio_out_i[8 ] : ((pad_mux_i[8 ] == 2'b10) ? i2c_scl_out_i[1] : s_alt3 ));\n   assign out_cam_pclk_o   = (pad_mux_i[9 ] == 2'b00) ? 1'b0               : ((pad_mux_i[9 ] == 2'b01) ? gpio_out_i[9 ] : ((pad_mux_i[9 ] == 2'b10) ? timer1_i[0]    : s_alt3 ));\n   assign out_cam_hsync_o  = (pad_mux_i[10] == 2'b00) ? 1'b0               : ((pad_mux_i[10] == 2'b01) ? gpio_out_i[10] : ((pad_mux_i[10] == 2'b10) ? timer1_i[1]    : s_alt3 ));\n   assign out_cam_data0_o  = (pad_mux_i[11] == 2'b00) ? 1'b0               : ((pad_mux_i[11] == 2'b01) ? gpio_out_i[11] : ((pad_mux_i[11] == 2'b10) ? timer1_i[2]    : s_alt3 ));\n   assign out_cam_data1_o  = (pad_mux_i[12] == 2'b00) ? 1'b0               : ((pad_mux_i[12] == 2'b01) ? gpio_out_i[12] : ((pad_mux_i[12] == 2'b10) ? timer1_i[3]    : s_alt3 ));\n   assign out_cam_data2_o  = (pad_mux_i[13] == 2'b00) ? 1'b0               : ((pad_mux_i[13] == 2'b01) ? gpio_out_i[13] : ((pad_mux_i[13] == 2'b10) ? timer2_i[0]    : s_alt3 ));\n   assign out_cam_data3_o  = (pad_mux_i[14] == 2'b00) ? 1'b0               : ((pad_mux_i[14] == 2'b01) ? gpio_out_i[14] : ((pad_mux_i[14] == 2'b10) ? timer2_i[1]    : s_alt3 ));\n   assign out_cam_data4_o  = (pad_mux_i[15] == 2'b00) ? 1'b0               : ((pad_mux_i[15] == 2'b01) ? gpio_out_i[15] : ((pad_mux_i[15] == 2'b10) ? timer2_i[2]    : s_alt3 ));\n   assign out_cam_data5_o  = (pad_mux_i[16] == 2'b00) ? 1'b0               : ((pad_mux_i[16] == 2'b01) ? gpio_out_i[16] : ((pad_mux_i[16] == 2'b10) ? timer2_i[3]    : s_alt3 ));\n   assign out_cam_data6_o  = (pad_mux_i[17] == 2'b00) ? 1'b0               : ((pad_mux_i[17] == 2'b01) ? gpio_out_i[17] : ((pad_mux_i[17] == 2'b10) ? timer3_i[0]    : s_alt3 ));\n   assign out_cam_data7_o  = (pad_mux_i[18] == 2'b00) ? 1'b0               : ((pad_mux_i[18] == 2'b01) ? gpio_out_i[18] : ((pad_mux_i[18] == 2'b10) ? timer3_i[1]    : s_alt3 ));\n   assign out_cam_vsync_o  = (pad_mux_i[19] == 2'b00) ? 1'b0               : ((pad_mux_i[19] == 2'b01) ? gpio_out_i[19] : ((pad_mux_i[19] == 2'b10) ? timer3_i[2]    : s_alt3 ));\n   assign out_sdio_clk_o   = (pad_mux_i[20] == 2'b00) ? sdio_clk_i         : ((pad_mux_i[20] == 2'b01) ? gpio_out_i[20] : ((pad_mux_i[20] == 2'b10) ? s_alt2         : s_alt3 ));\n   assign out_sdio_cmd_o   = (pad_mux_i[21] == 2'b00) ? sdio_cmd_i         : ((pad_mux_i[21] == 2'b01) ? gpio_out_i[21] : ((pad_mux_i[21] == 2'b10) ? s_alt2         : s_alt3 ));\n   assign out_sdio_data0_o = (pad_mux_i[22] == 2'b00) ? sdio_data_i[0]     : ((pad_mux_i[22] == 2'b01) ? gpio_out_i[22] : ((pad_mux_i[22] == 2'b10) ? s_alt2         : s_alt3 ));\n   assign out_sdio_data1_o = (pad_mux_i[23] == 2'b00) ? sdio_data_i[1]     : ((pad_mux_i[23] == 2'b01) ? gpio_out_i[23] : ((pad_mux_i[23] == 2'b10) ? s_alt2         : s_alt3 ));\n   assign out_sdio_data2_o = (pad_mux_i[24] == 2'b00) ? sdio_data_i[2]     : ((pad_mux_i[24] == 2'b01) ? gpio_out_i[24] : ("}
{"text": "(pad_mux_i[24] == 2'b10) ? i2c_sda_out_i[1] : s_alt3 ));\n   assign out_sdio_data3_o = (pad_mux_i[25] == 2'b00) ? sdio_data_i[3]     : ((pad_mux_i[25] == 2'b01) ? gpio_out_i[25] : ((pad_mux_i[25] == 2'b10) ? i2c_scl_out_i[1] : s_alt3 ));\n   assign out_i2c0_sda_o   = (pad_mux_i[33] == 2'b00) ? i2c_sda_out_i[0]   : ((pad_mux_i[33] == 2'b01) ? gpio_out_i[26] : ((pad_mux_i[33] == 2'b10) ? s_alt2         : s_alt3 ));\n   assign out_i2c0_scl_o   = (pad_mux_i[34] == 2'b00) ? i2c_scl_out_i[0]   : ((pad_mux_i[34] == 2'b01) ? gpio_out_i[27] : ((pad_mux_i[34] == 2'b10) ? s_alt2         : s_alt3 ));\n   assign out_i2s0_sck_o   = (pad_mux_i[35] == 2'b00) ? i2s_slave_sck_i    : ((pad_mux_i[35] == 2'b01) ? gpio_out_i[28] : ((pad_mux_i[35] == 2'b10) ? s_alt2         : s_alt3 ));\n   assign out_i2s0_ws_o    = (pad_mux_i[36] == 2'b00) ? i2s_slave_ws_i     : ((pad_mux_i[36] == 2'b01) ? gpio_out_i[29] : ((pad_mux_i[36] == 2'b10) ? s_alt2         : s_alt3 ));\n   assign out_i2s0_sdi_o   = (pad_mux_i[37] == 2'b00) ? 1'b0               : ((pad_mux_i[37] == 2'b01) ? gpio_out_i[30] : ((pad_mux_i[37] == 2'b10) ? s_alt2         : s_alt3 ));\n   assign out_i2s1_sdi_o   = (pad_mux_i[38] == 2'b00) ? 1'b0               : ((pad_mux_i[38] == 2'b01) ? gpio_out_i[31] : ((pad_mux_i[38] == 2'b10) ? s_alt2         : s_alt3 ));\n\n   /////////////////////////////////////////////////////////////////////////////////////////////\n   // DATA INPUT\n   /////////////////////////////////////////////////////////////////////////////////////////////\n   //    SPI MASTER1\n   // assign spi_master1_sdi_o = (pad_mux_i[0]  == 2'b00) ? in_rf_miso_i: (pad_mux_i[40] == 2'b00) ? in_spim1_miso_i : 1'b0;\n   // assign spi_sdi_o[1] = 1'b0;\n\n   assign sdio_cmd_o     = (pad_mux_i[21] == 2'b00) ? in_sdio_cmd_i   : 1'b0;\n   assign sdio_data_o[0] = (pad_mux_i[22] == 2'b00) ? in_sdio_data0_i : 1'b0;\n   assign sdio_data_o[1] = (pad_mux_i[23] == 2'b00) ? in_sdio_data1_i : 1'b0;\n   assign sdio_data_o[2] = (pad_mux_i[24] == 2'b00) ? in_sdio_data2_i : 1'b0;\n   assign sdio_data_o[3] = (pad_mux_i[25] == 2'b00) ? in_sdio_data3_i : 1'b0;\n\n   //    CAMERA\n   assign cam_pclk_o    = (pad_mux_i[ 9] == 2'b00) ? in_cam_pclk_i  : 1'b0;\n   assign cam_hsync_o   = (pad_mux_i[10] == 2'b00) ? in_cam_hsync_i : 1'b0;\n   assign cam_data_o[0] = (pad_mux_i[11] == 2'b00) ? in_cam_data0_i : 1'b0;\n   assign cam_data_o[1] = (pad_mux_i[12] == 2'b00) ? in_cam_data1_i : 1'b0;\n   assign cam_data_o[2] = (pad_mux_i[13] == 2'b00) ? in_cam_data2_i : 1'b0;\n   assign cam_data_o[3] = (pad_mux_i[14] == 2'b00) ? in_cam_data3_i : 1'b0;\n   assign cam_data_o[4] = (pad_mux_i[15] == 2'b00) ? in_cam_data4_i : 1'b0;\n   assign cam_data_o[5] = (pad_mux_i[16] == 2'b00) ? in_cam_data5_i : 1'b0;\n   assign cam_data_o[6] = (pad_mux_i[17] == 2'b00) ? in_cam_data6_i : 1'b0;\n   assign cam_data_o[7] = (pad_mux_i[18] == 2'b00) ? in_cam_data7_i : 1'b0;\n   assign cam_vsync_o   = (pad_mux_i[19] == 2'b00) ? in_cam_vsync_i : 1'b0;\n\n   //    I2C1\n   assign i2c_sda_in_o[1] = (pad_mux_i[2] == 2'b10) ? in_spim_sdio2_i : (pad_mux_i[7] == 2'b10) ? in_uart_rx_i : (pad_mux_i[24] == 2'b10) ? in_sdio_data2_i: 1'b1 ;\n   assign i2c_scl_in_o[1] = (pad_mux_i[3] == 2'b10) ? in_spim_sdio3_i : (pad_mux_i[8] == 2'b10) ? in_uart_tx_i : (pad_mux_i[25] == 2'b10) ? in_sdio_data3_i: 1'b1 ;\n\n   assign i2s_slave_sd1_o  = (pad_mux_i[29] == 2'b00) ? in_i2s1_sdi_i : (pad_mux_i[27] == 2'b11) ? in_i2s1_sdi_i : 1'b0;\n\n   //    UART\n   assign uart_rx_o     = (pad_mux_i[38] == 2'b00) ? in_uart_rx_i : 1'b1;\n\n   assign spi_sdi_o[0][0] = (pad_mux_i[33] == 2'b00) ? in_spim_sdio0_i : 1'b0;\n   assign spi_sdi_o[0][1] = (pad_mux_i[34] == 2'b00) ? in_spim_sdio1_i : 1'b0;\n   assign spi_sdi_o[0][2] = (pad_mux_i[35] == 2'b00) ? in_spim_sdio2_i : 1'b0;\n   assign spi_sdi_o[0][3] = (pad_mux_i[36] == 2'b00) ? in_spim_sdio3_i : 1'b0;\n\n   //    I2C0\n   assign i2c_sda_in_o[0]      = (pad_mux_i[43] == 2'b00) ? in_i2c0_sda_i : 1'b1;\n   assign i2c_scl_in_o[0]      = (pad_mux_i[44] == 2'b00) ? in_i2c0_scl_i : 1'b1;\n\n\n   assign i2s_slave_sck_o       = (pad_mux_i[45] == 2'b00) ? in_i2s0_sck_i : 1'b0;\n   assign i2s_slave_ws_o        = (pad_mux_i[46] == 2'b00) ? in_i2s0_ws_i  : 1'b0;\n   assign i2s_slave_sd0_o       = (pad_mux_i[47] == 2'b00) ? in_i2s0_sdi_i : 1'b0;\n\n   //    GPIO\n   assign gpio_in_o[0]  = (pad_mux_i[0]  == 2'b01) ? in_spim_sdio0_i : 1'b0 ;\n   assign gpio_in_o[1]  = (pad_mux_i[1]  == 2'b01) ? in_spim_sdio1_i : 1'b0 ;\n   assign gpio_in_o[2]  = (pad_mux_i[2]  == 2'b01) ? in_spim_sdio2_i : 1'b0 ;\n   assign gpio_in_o[3]  = (pad_mux_i[3]  == 2'b01) ? in_spim_sdio3_i : 1'b0 ;\n   assign gpio_in_o[4]  = (pad_mux_i[4]  == 2'b01) ? in_spim_csn0_i  : 1'b0 ;\n   assign gpio_in_o[5]  = (pad_mux_i[5]  == 2'b01) ? in_spim_csn1_i  : 1'b0 ;\n   assign gpio_in_o[6]  = (pad_mux_i[6]  == 2'b01) ? in_spim_sck_i   : 1'b0 ;\n   assign gpio_in_o[7]  = (pad_mux_i[7]  == 2'b01) ? in_uart_rx_i    : 1'b0 ;\n   assign gpio_in_o[8]  = (pad_mux_i[8]  == 2'b01) ? in_uart_tx_i    : 1'b0 ;\n   assign gpio_in_o[9]  = (pad_mux_i[9]  == 2'b01) ? in_cam_pclk_i   : 1'b0 ;\n   assign gpio_in_o[10] = (pad_mux_i[10] == 2'b01) ? in_cam_hsync_i  : 1'b0 ;\n   assign gpio_in_o[11] = (pad_mux_i[11] == 2'b01) ? in_cam_data0_i  : 1'b0 ;\n   assign gpio_in_o[12] = (pad_mux_i[12] == 2'b01) ? in_cam_data1_i  : 1'b0 ;\n   assign gpio_in_o[13] = (pad_mux_i[13] == 2'b01) ? in_cam_data2_i  : 1'b0 ;\n   assign gpio_in_o[14] = (pad_mux_i[14] == 2'b01) ? in_cam_data3_i  : 1'b0 ;\n   assign gpio_in_o[15] = (pad_mux_i[15] == 2'b01) ? in_cam_data4_i  : 1'b0 ;\n   assign gpio_in_o[16] = (pad_mux_i[16] == 2'b01) ? in_cam_data5_i  : 1'b0 ;\n   assign gpio_in_o[17] = (pad_mux_i[17] == 2'b01) ? in_cam_data6_i  : 1'b0 ;\n   assign gpio_in_o[18] = (pad_mux_i[18] == 2'b01) ? in_cam_data7_i  : 1'b0 ;\n   assign gpio_in_o[19] = (pad_mux_i[19] == 2'b01) ? in_cam_vsync_i  : 1'b0 ;\n   assign gpio_in_o[20] = (pad_mux_i[20] == 2'b01) ? in_sdio_clk_i   : 1'b0 ;\n   assign gpio_in_o[21] = (pad_mux_i[21] == 2'b01) ? in_sdio_cmd_i   : 1'b0 ;\n   assign gpio_in_o[22] = (pad_mux_i[22] == 2'b01) ? in_sdio_data0_i : 1'b0 ;\n   assign gpio_in_o[23] = (pad_mux_i[23] == 2'b01) ? in_sdio_data1_i : 1'b0 ;\n   assign gpio_in_o[24] = (pad_mux_i[24] == 2'b01) ? in_sdio_data2_i : 1'b0 ;\n   assign gpio_in_o[25] = (pad_mux_i[25] == 2'b01) ? in_sdio_data3_i : 1'b0 ;\n   assign gpio_in_o[26] = (pad_mux_i[33] == 2'b01) ? in_i2c0_sda_i   : 1'b0 ;\n   assign gpio_in_o[27] = (pad_mux_i[34] == 2'b01) ? in_i2c0_scl_i   : 1'b0 ;\n   assign gpio_in_o[28] = (pad_mux_i[35] == 2'b01) ? in_i2s0_sck_i   : 1'b0 ;\n   assign gpio_in_o[29] = (pad_mux_i[36] == 2'b01) ? in_i2s0_ws_i    : 1'b0 ;\n   assign gpio_in_o[30] = (pad_mux_i[37] == 2'b01) ? in_i2s0_sdi_i   : 1'b0 ;\n   assign gpio_in_o[31] = (pad_mux_i[38] == 2'b01) ? in_i2s1_sdi_i   : 1'b0 ;\n\n   // PAD CFG mux between default and GPIO\n   assign pad_cfg_o[0]  = (pad_mux_i[0]  == 2'b01) ? gpio_cfg_i[0]  : pad_cfg_i[0];\n   assign pad_cfg_o[1]  = (pad_mux_i[1]  == 2'b01) ? gpio_cfg_i[1]  : pad_cfg_i[1];\n   assign pad_cfg_o[2]  = (pad_mux_i[2]  == 2'b01) ? gpio_cfg_i[2]  : pad_cfg_i[2];\n   assign pad_cfg_o[3]  = (pad_mux_i[3]  == 2'b01) ? gpio_cfg_i[3]  : pad_cfg_i[3];\n   assign pad_cfg_o[4]  = (pad_mux_i[4]  == 2'b01) ? gpio_cfg_i[4]  : pad_cfg_i[4];\n   assign pad_cfg_o[5]  = (pad_mux_i[5]  == 2'b01) ? gpio_cfg_i[5]  : pad_cfg_i[5];\n   assign pad_cfg_o[6]  = (pad_mux_i[6]  == 2'b01) ? gpio_cfg_i[6]  : pad_cfg_i[6];\n   assign pad_cfg_o[7]  = (pad_mux_i[7]  == 2'b01) ? gpio_cfg_i[7]  : pad_cfg_i[7];\n   assign pad_cfg_o[8]  = (pad_mux_i[8]  == 2'b01) ? gpio_cfg_i[8]  : pad_cfg_i[8];\n   assign pad_cfg_o[9]  = (pad_mux_i[9]  == 2'b01) ? gpio_cfg_i[9]  : pad_cfg_i[9];\n   assign pad_cfg_o[10] = (pad_mux_i[10] == 2'b01) ? gpio_cfg_i[10] : pad_cfg_i[10];\n   assign pad_cfg_o[11] = (pad_mux_i[11] == 2'b01) ? gpio_cfg_i[11] : pad_cfg_i[11];\n   assign pad_cfg_o[12] = (pad_mux_i[12] == 2'b01) ? gpio_cfg_i[12] : pad_cfg_i[12];\n   assign pad_cfg_o[13] = (pad_mux_i[13] == 2'b01) ? gpio_cfg_i[13] : pad_cfg_i[13];\n   assign pad_cfg_o[14] = (pad_mux_i[14] == 2'b01) ? gpio_cfg_i[14] : pad_cfg_i[14];\n   assign pad_cfg_o[15] = (pad_mux_i[15] == 2'b01) ? gpio_cfg_i[15] : pad_cfg_i[15];\n   assign pad_cfg_o[16] = (pad_mux_i[16] == 2'b01) ? gpio_cfg_i[16] : pad_cfg_i[16];\n   assign pad_cfg_o[17] = (pad_mux_i[17] == 2'b01) ? gpio_cfg_i[17] : pad_cfg_i[17];\n   assign pad_cfg_o[18] = (pad_mux_i[18] == 2'b01) ? gpio_cfg_i[18] : pad_cfg_i[18];\n   assign pad_cfg_o[19] = (pad_mux_i[19] == 2'b01) ? gpio_cfg_i[19] : pad_cfg_i[19];\n   assign pad_cfg_o[20] = (pad_mux_i[20] == 2'b01) ? gpio_cfg_i[20] : pad_cfg_i[20];\n   assign pad_cfg_o[21] = (pad_mux_i[21] == 2'b01) ? gpio_cfg_i[21] : pad_cfg_i[21];\n   assign pad_cfg_o[22] = (pad_mux_i[22] == 2'b01) ? gpio_cfg_i[22] : pad_cfg_i[22];\n   assign pad_cfg_o[23] = (pad_mux_i[23] == 2'b01) ? gpio_cfg_i[23] : pad_cfg_i[23];\n   assign pad_cfg_o[24] = (pad_mux_i[24] == 2'b01) ? gpio_cfg_i[24] : pad_cfg_i[24];\n   assign pad_cfg_o[25] = (pad_mux_i[25] == 2'b01) ? gpio_cfg_i[25] : pad_cfg_i[25];\n   assign pad_cfg_o[26] =                                             pad_cfg_i[26];\n   assign pad_cfg_o[27] =                                             pad_cfg_i[27];\n   assign pad_cfg_o[28] =                                             pad_cfg_i[28];\n   assign pad_cfg_o[29] =                                             pad_cfg_i[29];\n   assign pad_cfg_o[30] =                                             pad_cfg_i[30];\n   assign pad_cfg_o[31] =                                             pad_cfg_i[31];\n   assign pad_cfg_o[32] =                                             pad_cfg_i[32];\n   assign pad_cfg_o[33] = (pad_mux_i[33] == 2'b01) ? gpio_cfg_i[26] : pad_cfg_i[33];\n   assign pad_cfg_o[34] = (pad_mux_i[34] == 2'b01) ? gpio_cfg_i[27] : pad_cfg_i[34];\n   assign pad_cfg_o[35] = (pad_mux_i[35] == 2'b01) ? gpio_cfg_i[28] : pad_cfg_i[35];\n   assign pad_cfg_o[36] = (pad_mux_i[36] == 2'b01) ? gpio_cfg_i[29] : pad_cfg_i[36];\n   assign pad_cfg_o[37] = (pad_mux_i[37] == 2'b01) ? gpio_cfg_i[30] : pad_cfg_i[37];\n   assign pad_cfg_o[38] = (pad_mux_i[38] == 2'b01) ? gpio_cfg_i[31] : pad_cfg_i[38];\n\nendmodule\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n\nmodule pad_frame\n    (\n\n        input logic [47:0][5:0] pad_cfg_i ,\n\n        // REF CLOCK\n        output logic            ref_clk_o ,\n\n        // RESET SIGNALS\n        output logic            rstn_o ,\n\n        // JTAG SIGNALS\n        output logic            jtag_tck_o ,\n        output logic            jtag_tdi_o ,\n        input logic             jtag_tdo_i ,\n        output logic            jtag_tms_o ,\n        output logic            jtag_trst_o ,\n\n        input logic             oe_sdio_clk_i ,\n        input logic             oe_sdio_cmd_i ,\n        input logic             oe_sdio_data0_i ,\n        input logic             oe_sdio_data1_i ,\n        input logic             oe_sdio_data2_i ,\n        input logic             oe_sdio_data3_i ,\n        input logic             oe_spim_sdio0_i ,\n        input logic             oe_spim_sdio1_i ,\n        input logic             oe_spim_sdio2_i ,\n        input logic             oe_spim_sdio3_i ,\n        input logic             oe_spim_csn0_i ,\n        input logic             oe_spim_csn1_i ,\n        input logic             oe_spim_sck_i ,\n        input logic             oe_i2s0_sck_i ,\n        input logic             oe_i2s0_ws_i ,\n        input logic             oe_i2s0_sdi_i ,\n        input logic             oe_i2s1_sdi_i ,\n        input logic             oe_cam_pclk_i ,\n        input logic             oe_cam_hsync_i ,\n        input logic             oe_cam_data0_i ,\n        input logic             oe_cam_data1_i ,\n        input logic             oe_cam_data2_i ,\n        input logic             oe_cam_data3_i ,\n        input logic             oe_cam_data4_i ,\n        input logic             oe_cam_data5_i ,\n        input logic             oe_cam_data6_i ,\n        input logic             oe_cam_data7_i ,\n        input logic             oe_cam_vsync_i ,\n        input logic             oe_i2c0_sda_i ,\n        input logic             oe_i2c0_scl_i ,\n        input logic             oe_uart_rx_i ,\n        input logic             oe_uart_tx_i ,\n\n        // INPUTS SIGNALS TO THE PADS\n        input logic             out_sdio_clk_i ,\n        input logic             out_sdio_cmd_i ,\n        input logic             out_sdio_data0_i ,\n        input logic             out_sdio_data1_i ,\n        input logic             out_sdio_data2_i ,\n        input logic             out_sdio_data3_i ,\n        input logic             out_spim_sdio0_i ,\n        input logic             out_spim_sdio1_i ,\n        input logic             out_spim_sdio2_i ,\n        input logic             out_spim_sdio3_i ,\n        input logic             out_spim_csn0_i ,\n        input logic             out_spim_csn1_i ,\n        input logic             out_spim_sck_i ,\n        input logic             out_i2s0_sck_i ,\n        input logic             out_i2s0_ws_i ,\n        input logic             out_i2s0_sdi_i ,\n        input logic             out_i2s1_sdi_i ,\n        input logic             out_cam_pclk_i ,\n        input logic             out_cam_hsync_i ,\n        input logic             out_cam_data0_i ,\n        input logic             out_cam_data1_i ,\n        input logic             out_cam_data2_i ,\n        input logic             out_cam_data3_i ,\n        input logic             out_cam_data4_i ,\n        input logic             out_cam_data5_i ,\n        input logic             out_cam_data6_i ,\n        input logic             out_cam_data7_i ,\n        input logic             out_cam_vsync_i ,\n        input logic             out_i2c0_sda_i ,\n        input logic             out_i2c0_scl_i ,\n        input logic             out_uart_rx_i ,\n        input logic             out_uart_tx_i ,\n\n        // OUTPUT SIGNALS FROM THE PADS\n        output logic            in_sdio_clk_o ,\n        output logic            in_sdio_cmd_o ,\n        output logic            in_sdio_data0_o ,\n        output logic            in_sdio_data1_o ,\n        output logic            in_sdio_data2_o ,\n        output logic            in_sdio_data3_o ,\n        output logic            in_spim_sdio0_o ,\n        output logic            in_spim_sdio1_o ,\n        output logic            in_spim_sdio2_o ,\n        output logic            in_spim_sdio3_o ,\n        output logic            in_spim_csn0_o ,\n        output logic            in_spim_csn1_o ,\n        output logic            in_spim_sck_o ,\n        output logic            in_i2s0_sck_o ,\n        output logic            in_i2s0_ws_o ,\n        output logic            in_i2s0_sdi_o ,\n        output logic            in_i2s1_sdi_o ,\n        output logic            in_cam_pclk_o ,\n        output logic            in_cam_hsync_o ,\n        output logic            in_cam_data0_o ,\n        output logic            in_cam_data1_o ,\n        output logic            in_cam_data2_o ,\n        output logic            in_cam_data3_o ,\n        output logic            in_cam_data4_o ,\n        output logic            in_cam_data5_o ,\n        output logic            in_cam_data6_o ,\n        output logic            in_cam_data7_o ,\n        output logic            in_cam_vsync_o ,\n        output logic            in_i2c0_sda_o ,\n        output logic            in_i2c0_scl_o ,\n        output logic            in_uart_rx_o ,\n        output logic            in_uart_tx_o ,\n\n        output logic [1:0]      bootsel_o ,\n\n        // EXT CHIP TP PADS\n        inout wire              pad_sdio_clk ,\n        inout wire              pad_sdio_cmd ,\n        inout wire              pad_sdio_data0 ,\n        inout wire              pad_sdio_data1 ,\n        inout wire              pad_sdio_data2 ,\n        inout wire              pad_sdio_data3 ,\n        inout wire              pad_spim_sdio0 ,\n        inout wire              pad_spim_sdio1 ,\n        inout wire              pad_spim_sdio2 ,\n        inout wire              pad_spim_sdio3 ,\n        inout wire              pad_spim_csn0 ,\n        inout wire              pad_spim_csn1 ,\n        inout wire              pad_spim_sck ,\n        inout wire              pad_i2s0_sck ,\n        inout wire              pad_i2s0_ws ,\n        inout wire              pad_i2s0_sdi ,\n        inout wire              pad_i2s1_sdi ,\n        inout wire              pad_cam_pclk ,\n        inout wire              pad_cam_hsync ,\n        inout wire              pad_cam_data0 ,\n        inout wire              pad_cam_data1 ,\n        inout wire              pad_cam_data2 ,\n        inout wire              pad_cam_data3 ,\n        inout wire              pad_cam_data4 ,\n        inout wire              pad_cam_data5 ,\n        inout wire              pad_cam_data6 ,\n        inout wire              pad_cam_data7 ,\n        inout wire              pad_cam_vsync ,\n        inout wire              pad_i2c0_sda ,\n        inout wire              pad_i2c0_scl ,\n        inout wire              pad_uart_rx ,\n        inout wire              pad_uart_tx ,\n\n        inout wire              pad_reset_n ,\n        inout wire              pad_bootsel0 ,\n        inout wire              pad_bootsel1 ,\n        inout wire              pad_jtag_tck ,\n        inout wire              pad_jtag_tdi ,\n        inout wire              pad_jtag_tdo ,\n        inout wire              pad_jtag_tms ,\n        inout wire              pad_jtag_trst ,\n        inout wire              pad_xtal_in\n    );\n\n    pad_functional_pd padinst_sdio_data0 (.OEN(~oe_sdio_data0_i ), .I(out_sdio_data0_i ), .O(in_sdio_data0_o ), .PAD(pad_sdio_data0 ), .PEN(~pad_cfg_i[22][0]) );\n    pad_functional_pd padinst_sdio_data1 (.OEN(~oe_sdio_data1_i ), .I(out_sdio_data1_i ), .O(in_sdio_data1_o ), .PAD(pad_sdio_data1 ), .PEN(~pad_cfg_i[23][0]) );\n    pad_functional_pd padinst_sdio_data2 (.OEN(~oe_sdio_data2_i ), .I(out_sdio_data2_i ), .O(in_sdio_data2_o ), .PAD(pad_sdio_data2 ), .PEN(~pad_cfg_i[24][0]) );\n    pad_functional_pd padinst_sdio_data3 (.OEN(~oe_sdio_data3_i ), .I(out_sdio_data3_i ), .O(in_sdio_data3_o ), .PAD(pad_sdio_data3 ), .PEN(~pad_cfg_i[25][0]) );\n    pad_functional_pd padinst_sdio_clk   (.OEN(~oe_sdio_clk_i  ), .I(out_sdio_clk_i  ), .O(in_sdio_clk_o  ), .PAD(pad_sdio_clk  ), .PEN(~pad_cfg_i[20][0]) );\n    pad_functional_pd padinst_sdio_cmd   (.OEN(~oe_sdio_cmd_i  ), .I(out_sdio_cmd_i  ), .O(in_sdio_cmd_o  ), .PAD(pad_sdio_cmd  ), .PEN(~pad_cfg_i[21][0]) );\n    pad_functional_pd padinst_spim_sck   (.OEN(~oe_spim_sck_i  ), .I(out_spim_sck_i  ), .O(in_spim_sck_o  ), .PAD(pad_spim_sck  ), .PEN(~pad_cfg_i[6][0] ) );\n    pad_functional_pd padinst_spim_sdio0 (.OEN(~oe_spim_sdio0_i), .I(out_spim_sdio0_i), .O(in_spim_sdio0_o), .PAD(pad_spim_sdio0), .PEN(~pad_cfg_i[0][0] ) );\n    pad_functional_pd padinst_spim_sdio1 (.OEN(~oe_spim_sdio1_i), .I(out_spim_sdio1_i), .O(in_spim_sdio1_o), .PAD(pad_spim_sdio1), .PEN(~pad_cfg_i[1][0] ) );\n    pad_functional_pd padinst_spim_sdio2 (.OEN(~oe_spim_sdio2_i), .I(out_spim_sdio2_i), .O(in_spim_sdio2_o), .PAD(pad_spim_sdio2), .PEN(~pad_cfg_i[2][0] ) );\n    pad_functional_pd padinst_spim_sdio3 (.OEN(~oe_spim_sdio3_i), .I(out_spim_sdio3_i), .O(in_spim_sdio3_o), .PAD(pad_spim_sdio3), .PEN(~pad_cfg_i[3][0] ) );\n    pad_functional_pd padinst_spim_csn1  (.OEN(~oe_spim_csn1_i ), .I(out_spim_csn1_i ), .O(in_spim_csn1_o ), .PAD(pad_spim_csn1 ), .PEN(~pad_cfg_i[5][0] ) );\n    pad_functional_pd padinst_spim_csn0  (.OEN(~oe_spim_csn0_i ), .I(out_spim_csn0_i ), .O(in_spim_csn0_o ), .PAD(pad_spim_csn0 ), .PEN(~pad_cfg_i[4][0] ) );\n\n    pad_functional_pd padinst_i2s1_sdi   (.OEN(~oe_i2s1_sdi_i  ), .I(out_i2s1_sdi_i  ), .O(in_i2s1_sdi_o  ), .PAD(pad_i2s1_sdi  ), .PEN(~pad_cfg_i[38][0]) );\n    pad_functional_pd padinst_i2s0_ws    (.OEN(~oe_i2s0_ws_i   ), .I(out_i2s0_ws_i   ), .O(in_i2s0_ws_o   ), .PAD(pad_i2s0_ws   ), .PEN(~pad_cfg_i[36][0]) );\n    pad_functional_pd padinst_i2s0_sdi   (.OEN(~oe_i2s0_sdi_i  ), .I(out_i2s0_sdi_i  ), .O(in_i2s0_sdi_o  ), .PAD(pad_i2s0_sdi  ), .PEN(~pad_cfg_i[37][0]) );\n    pad_functional_pd padinst_i2s0_sck   (.OEN(~oe_i2s0_sck_i  ), .I(out_i2s0_sck_i  ), .O(in_i2s0_sck_o  ), .PAD(pad_i2s0_sck  ), .PEN(~pad_cfg_i[35][0]) );\n\n\n    pad_functional_pd padinst_cam_pclk   (.OEN(~oe_cam_pclk_i  ), .I(out_cam_pclk_i  ), .O(in_cam_pclk_o  ), .PAD(pad_cam_pclk  ), .PEN(~pad_cfg_i[9][0] ) );\n    pad_functional_pd padinst_cam_hsync  (.OEN(~oe_cam_hsync_i ), .I(out_cam_hsync_i ), .O(in_cam_hsync_o ), .PAD(pad_cam_hsync ), .PEN(~pad_cfg_i[10][0]) );\n    pad_functional_pd padinst_cam_data0  (.OEN(~oe_cam_data0_i ), .I(out_cam_data0_i ), .O(in_cam_data0_o ), .PAD(pad_cam_data0 ), .PEN(~pad_cfg_i[11][0]) );\n    pad_functional_pd padinst_cam_data1  (.OEN(~oe_cam_data1_i ), .I(out_cam_data1_i ), .O(in_cam_data1_o ), .PAD(pad_cam_data1 ), .PEN(~pad_cfg_i[12][0]) );\n    pad_functional_pd padinst_cam_data2  (.OEN(~oe_cam_data2_i ), .I(out_cam_data2_i ), .O(in_cam_data2_o ), .PAD(pad_cam_data2 ), .PEN(~pad_cfg_i[13][0]) );\n    pad_functional_pd padinst_cam_data3  (.OEN(~oe_cam_data3_i ), .I(out_cam_data3_i ), .O(in_cam_data3_o ), .PAD(pad_cam_data3 ), .PEN(~pad_cfg_i[14][0]) );\n    pad_functional_pd padinst_cam_data4  (.OEN(~oe_cam_data4_i ), .I(out_cam_data4_i ), .O(in_cam_data4_o ), .PAD(pad_cam_data4 ), .PEN(~pad_cfg_i[15][0]) );\n    pad_functional_pd padinst_cam_data5  (.OEN(~oe_cam_data5_i ), .I(out_cam_data5_i ), .O(in_cam_data5_o ), .PAD(pad_cam_data5 ), .PEN(~pad_cfg_i[16][0]) );\n    pad_functional_pd padinst_cam_data6  (.OEN(~oe_cam_data6_i ), .I(out_cam_data6_i ), .O(in_cam_data6_o ), .PAD(pad_cam_data6 ), .PEN(~pad_cfg_i[17][0]) );\n    pad_functional_pd padinst_cam_data7  (.OEN(~oe_cam_data7_i ), .I(out_cam_data7_i ), .O(in_cam_data7_o ), .PAD(pad_cam_data7 ), .PEN(~pad_cfg_i[18][0]) );\n    pad_functional_pd padinst_cam_vsync  (.OEN(~oe_cam_vsync_i ), .I(out_cam_vsync_i ), .O(in_cam_vsync_o ), .PAD(pad_cam_vsync ), .PEN(~pad_cfg_i[19][0]) );\n\n    pad_functional_pu padinst_uart_rx    (.OEN(~oe_uart_rx_i   ), .I(out_uart_rx_i   ), .O(in_uart_rx_o   ), .PAD(pad_uart_rx   ), .PEN(~pad_cfg_i[33][0]) );\n    pad_functional_pu padinst_uart_tx    (.OEN(~oe_uart_tx_i   ), .I(out_uart_tx_i   ), .O(in_uart_tx_o   ), .PAD(pad_uart_tx   ), .PEN(~pad_cfg_i[34][0]) );\n    pad_functional_pu padinst_i2c0_sda   (.OEN(~oe_i2c0_sda_i  ), .I(out_i2c0_sda_i  ), .O(in_i2c0_sda_o  ), .PAD(pad_i2c0_sda  ), .PEN(~pad_cfg_i[7][0] ) );\n    pad_functional_pu padinst_i2c0_scl   (.OEN(~oe_i2c0_scl_i  ), .I(out_i2c0_scl_i  ), .O(in_i2c0_scl_o  ), .PAD(pad_i2c0_scl  ), .PEN(~pad_cfg_i[8][0] ) );\n\n\n    pad_functional_pu padinst_bootsel0    (.OEN(1'b1            ), .I(                ), .O(bootsel_o[0]      ), .PAD(pad_bootsel0   ), .PEN(1'b1             ) );\n    pad_functional_pu padinst_bootsel1    (.OEN(1'b1            ), .I(                ), .O(bootsel_o[1]      ), .PAD(pad_bootsel1   ), .PEN(1'b1             ) );\n\n\n`ifndef PULP_FPGA_EMUL\n  pad_functional_pu padinst_ref_clk    (.OEN(1'b1            ), .I(                ), .O(ref_clk_o      ), .PAD(pad_xtal_in   ), .PEN(1'b1             ) );\n  pad_functional_pu padinst_reset_n    (.OEN(1'b1            ), .I(                ), .O(rstn_o         ), .PAD(pad_reset_n   ), .PEN(1'b1             ) );\n  pad_functional_pu padinst_jtag_tck   (.OEN(1'b1            ), .I(                ), .O(jtag_tck_o     ), .PAD(pad_jtag_tck  ), .PEN(1'b1             ) );\n  pad_functional_pu padinst_jtag_tms   (.OEN(1'b1            ), .I(                ), .O(jtag_tms_o     ), .PAD(pad_jtag_tms  ), .PEN(1'b1             ) );\n  pad_functional_pu padinst_jtag_tdi   (.OEN(1'b1            ), .I(                ), .O(jtag_tdi_o     ), .PAD(pad_jtag_tdi  ), .PEN(1'b1             ) );\n  pad_functional_pu padinst_jtag_trstn (.OEN(1'b1            ), .I(                ), .O(jtag_trst_o    ), .PAD(pad_jtag_trst ), .PEN(1'b1             ) );\n  pad_functional_pd padinst_jtag_tdo   (.OEN(1'b0            ), .I(jtag_tdo_i      ), .O(               ), .PAD(pad_jtag_tdo  ), .PEN(1'b1             ) );\n`else\n  assign ref_clk_o = pad_xtal_in;\n  assign rstn_o = pad_reset_n;\n\n  //JTAG signals\n  assign pad_jtag_tdo = jtag_tdo_i;\n  assign jtag_trst_o = pad_jtag_trst;\n  assign jtag_tms_o = pad_jtag_tms;\n  assign jtag_tck_o = pad_jtag_tck;\n  assign jtag_tdi_o = pad_jtag_tdi;\n`endif\n\nendmodule // pad_frame\n"}
{"text": "/*\n * periph_bus_defines.sv\n *\n * Copyright (C) 2013-2018 ETH Zurich, University of Bologna.\n *\n * Copyright and related rights are licensed under the Solderpad Hardware\n * License, Version 0.51 (the \"License\"); you may not use this file except in\n * compliance with the License.  You may obtain a copy of the License at\n * http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n * or agreed to in writing, software, hardware and materials distributed under\n * this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n */\n`ifndef PERIPH_BUS_DEFINES\n`define PERIPH_BUS_DEFINES\n\n// SOC PERIPHERALS APB BUS PARAMETRES\n`define NB_MASTER  11\n\n// MASTER PORT TO FLL\n`define FLL_START_ADDR           32'h1A10_0000\n`define FLL_END_ADDR             32'h1A10_0FFF\n\n// MASTER PORT TO GPIO\n`define GPIO_START_ADDR          32'h1A10_1000\n`define GPIO_END_ADDR            32'h1A10_1FFF\n\n// MASTER PORT TO SPI MASTER\n`define UDMA_START_ADDR          32'h1A10_2000\n`define UDMA_END_ADDR            32'h1A10_3FFF\n\n// MASTER PORT TO SOC CONTROL\n`define SOC_CTRL_START_ADDR      32'h1A10_4000\n`define SOC_CTRL_END_ADDR        32'h1A10_4FFF\n\n// MASTER PORT TO ADV TIMER\n`define ADV_TIMER_START_ADDR     32'h1A10_5000\n`define ADV_TIMER_END_ADDR       32'h1A10_5FFF\n\n// MASTER PORT TO SOC EVENT GEN\n`define SOC_EVENT_GEN_START_ADDR 32'h1A10_6000\n`define SOC_EVENT_GEN_END_ADDR   32'h1A10_6FFF\n\n`define EU_START_ADDR            32'h1A10_9000\n`define EU_END_ADDR              32'h1A10_AFFF\n\n`define TIMER_START_ADDR         32'h1A10_B000\n`define TIMER_END_ADDR           32'h1A10_BFFF\n\n`define HWPE_START_ADDR          32'h1A10_C000\n`define HWPE_END_ADDR            32'h1A10_CFFF\n\n`define STDOUT_START_ADDR        32'h1A10_F000\n`define STDOUT_END_ADDR          32'h1A10_FFFF\n\n`define DEBUG_START_ADDR         32'h1A11_0000\n`define DEBUG_END_ADDR           32'h1A11_FFFF\n\n`define DUMMY_START_ADDR         32'h1A12_0000\n`define DUMMY_END_ADDR           32'h1A12_0008\n\n\n`define APB_ASSIGN_SLAVE(lhs, rhs)     \\\n    assign lhs.paddr    = rhs.paddr;   \\\n    assign lhs.pwdata   = rhs.pwdata;  \\\n    assign lhs.pwrite   = rhs.pwrite;  \\\n    assign lhs.psel     = rhs.psel;    \\\n    assign lhs.penable  = rhs.penable; \\\n    assign rhs.prdata   = lhs.prdata;  \\\n    assign rhs.pready   = lhs.pready;  \\\n    assign rhs.pslverr  = lhs.pslverr\n\n`define APB_ASSIGN_MASTER(lhs, rhs) `APB_ASSIGN_SLAVE(rhs, lhs)\n\n`endif\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n`include \"pulp_soc_defines.sv\"\n\nmodule pulpissimo #(\n    parameter CORE_TYPE   = 0, // 0 for RISCY, 1 for IBEX RV32IMC (formerly ZERORISCY), 2 for IBEX RV32EC (formerly MICRORISCY)\n    parameter USE_FPU     = 1,\n    parameter USE_ZFINX   = 1,\n    parameter USE_HWPE    = 0,\n    parameter SIM_STDOUT  = 0\n) (\n  inout wire pad_spim_sdio0,\n  inout wire pad_spim_sdio1,\n  inout wire pad_spim_sdio2,\n  inout wire pad_spim_sdio3,\n  inout wire pad_spim_csn0,\n  inout wire pad_spim_csn1,\n  inout wire pad_spim_sck,\n\n  inout wire pad_uart_rx,\n  inout wire pad_uart_tx,\n\n  inout wire pad_cam_pclk,\n  inout wire pad_cam_hsync,\n  inout wire pad_cam_data0,\n  inout wire pad_cam_data1,\n  inout wire pad_cam_data2,\n  inout wire pad_cam_data3,\n  inout wire pad_cam_data4,\n  inout wire pad_cam_data5,\n  inout wire pad_cam_data6,\n  inout wire pad_cam_data7,\n  inout wire pad_cam_vsync,\n\n  inout wire pad_sdio_clk,\n  inout wire pad_sdio_cmd,\n  inout wire pad_sdio_data0,\n  inout wire pad_sdio_data1,\n  inout wire pad_sdio_data2,\n  inout wire pad_sdio_data3,\n\n  inout wire pad_i2c0_sda,\n  inout wire pad_i2c0_scl,\n\n  inout wire pad_i2s0_sck,\n  inout wire pad_i2s0_ws,\n  inout wire pad_i2s0_sdi,\n  inout wire pad_i2s1_sdi,\n\n  inout wire pad_reset_n,\n  inout wire pad_bootsel0,\n  inout wire pad_bootsel1,\n\n  inout wire pad_jtag_tck,\n  inout wire pad_jtag_tdi,\n  inout wire pad_jtag_tdo,\n  inout wire pad_jtag_tms,\n  inout wire pad_jtag_trst,\n\n  inout wire pad_xtal_in\n);\n\n  localparam AXI_ADDR_WIDTH             = 32;\n  localparam AXI_CLUSTER_SOC_DATA_WIDTH = 64;\n  localparam AXI_SOC_CLUSTER_DATA_WIDTH = 32;\n  localparam AXI_CLUSTER_SOC_ID_WIDTH   = 6;\n\n  localparam AXI_USER_WIDTH             = 6;\n  localparam AXI_CLUSTER_SOC_STRB_WIDTH = AXI_CLUSTER_SOC_DATA_WIDTH/8;\n  localparam AXI_SOC_CLUSTER_STRB_WIDTH = AXI_SOC_CLUSTER_DATA_WIDTH/8;\n\n  localparam BUFFER_WIDTH               = 8;\n  localparam EVENT_WIDTH                = 8;\n\n  localparam CVP_ADDR_WIDTH             = 32;\n  localparam CVP_DATA_WIDTH             = 32;\n\n  //\n  // PAD FRAME TO PAD CONTROL SIGNALS\n  //\n\n  logic [47:0][5:0] s_pad_cfg ;\n\n  logic s_out_spim_sdio0;\n  logic s_out_spim_sdio1;\n  logic s_out_spim_sdio2;\n  logic s_out_spim_sdio3;\n  logic s_out_spim_csn0;\n  logic s_out_spim_csn1;\n  logic s_out_spim_sck;\n  logic s_out_uart_rx;\n  logic s_out_uart_tx;\n  logic s_out_cam_pclk;\n  logic s_out_cam_hsync;\n  logic s_out_cam_data0;\n  logic s_out_cam_data1;\n  logic s_out_cam_data2;\n  logic s_out_cam_data3;\n  logic s_out_cam_data4;\n  logic s_out_cam_data5;\n  logic s_out_cam_data6;\n  logic s_out_cam_data7;\n  logic s_out_cam_vsync;\n  logic s_out_sdio_clk;\n  logic s_out_sdio_cmd;\n  logic s_out_sdio_data0;\n  logic s_out_sdio_data1;\n  logic s_out_sdio_data2;\n  logic s_out_sdio_data3;\n  logic s_out_i2c0_sda;\n  logic s_out_i2c0_scl;\n  logic s_out_i2s0_sck;\n  logic s_out_i2s0_ws;\n  logic s_out_i2s0_sdi;\n  logic s_out_i2s1_sdi;\n\n  logic s_in_spim_sdio0;\n  logic s_in_spim_sdio1;\n  logic s_in_spim_sdio2;\n  logic s_in_spim_sdio3;\n  logic s_in_spim_csn0;\n  logic s_in_spim_csn1;\n  logic s_in_spim_sck;\n  logic s_in_uart_rx;\n  logic s_in_uart_tx;\n  logic s_in_cam_pclk;\n  logic s_in_cam_hsync;\n  logic s_in_cam_data0;\n  logic s_in_cam_data1;\n  logic s_in_cam_data2;\n  logic s_in_cam_data3;\n  logic s_in_cam_data4;\n  logic s_in_cam_data5;\n  logic s_in_cam_data6;\n  logic s_in_cam_data7;\n  logic s_in_cam_vsync;\n  logic s_in_sdio_clk;\n  logic s_in_sdio_cmd;\n  logic s_in_sdio_data0;\n  logic s_in_sdio_data1;\n  logic s_in_sdio_data2;\n  logic s_in_sdio_data3;\n  logic s_in_i2c0_sda;\n  logic s_in_i2c0_scl;\n  logic s_in_i2s0_sck;\n  logic s_in_i2s0_ws;\n  logic s_in_i2s0_sdi;\n  logic s_in_i2s1_sdi;\n\n  logic s_oe_spim_sdio0;\n  logic s_oe_spim_sdio1;\n  logic s_oe_spim_sdio2;\n  logic s_oe_spim_sdio3;\n  logic s_oe_spim_csn0;\n  logic s_oe_spim_csn1;\n  logic s_oe_spim_sck;\n  logic s_oe_uart_rx;\n  logic s_oe_uart_tx;\n  logic s_oe_cam_pclk;\n  logic s_oe_cam_hsync;\n  logic s_oe_cam_data0;\n  logic s_oe_cam_data1;\n  logic s_oe_cam_data2;\n  logic s_oe_cam_data3;\n  logic s_oe_cam_data4;\n  logic s_oe_cam_data5;\n  logic s_oe_cam_data6;\n  logic s_oe_cam_data7;\n  logic s_oe_cam_vsync;\n  logic s_oe_sdio_clk;\n  logic s_oe_sdio_cmd;\n  logic s_oe_sdio_data0;\n  logic s_oe_sdio_data1;\n  logic s_oe_sdio_data2;\n  logic s_oe_sdio_data3;\n  logic s_oe_i2c0_sda;\n  logic s_oe_i2c0_scl;\n  logic s_oe_i2s0_sck;\n  logic s_oe_i2s0_ws;\n  logic s_oe_i2s0_sdi;\n  logic s_oe_i2s1_sdi;\n\n  //\n  // OTHER PAD FRAME SIGNALS\n  //\n\n  logic s_ref_clk;\n  logic s_rstn;\n\n  logic s_jtag_tck;\n  logic s_jtag_tdi;\n  logic s_jtag_tdo;\n  logic s_jtag_tms;\n  logic s_jtag_trst;\n\n  //\n  // SOC TO SAFE DOMAINS SIGNALS\n  //\n\n  logic                        s_test_clk;\n  logic                        s_slow_clk;\n  logic                        s_sel_fll_clk;\n\n  logic [11:0]                 s_pm_cfg_data;\n  logic                        s_pm_cfg_req;\n  logic                        s_pm_cfg_ack;\n\n  logic                        s_cluster_busy;\n\n  logic                        s_soc_tck;\n  logic                        s_soc_trstn;\n  logic                        s_soc_tms;\n  logic                        s_soc_tdi;\n\n  logic                        s_test_mode;\n  logic                        s_dft_cg_enable;\n  logic                        s_mode_select;\n\n  logic [31:0]                 s_gpio_out;\n  logic [31:0]                 s_gpio_in;\n  logic [31:0]                 s_gpio_dir;\n  logic [191:0]                s_gpio_cfg;\n\n  logic                        s_rf_tx_clk;\n  logic                        s_rf_tx_oeb;\n  logic                        s_rf_tx_enb;\n  logic                        s_rf_tx_mode;\n  logic                        s_rf_tx_vsel;\n  logic                        s_rf_tx_data;\n  logic                        s_rf_rx_clk;\n  logic                        s_rf_rx_enb;\n  logic                        s_rf_rx_data;\n\n  logic                        s_uart_tx;\n  logic                        s_uart_rx;\n\n  logic                        s_i2c0_scl_out;\n  logic                        s_i2c0_scl_in;\n  logic                        s_i2c0_scl_oe;\n  logic                        s_i2c0_sda_out;\n  logic                        s_i2c0_sda_in;\n  logic                        s_i2c0_sda_oe;\n  logic                        s_i2c1_scl_out;\n  logic                        s_i2c1_scl_in;\n  logic                        s_i2c1_scl_oe;\n  logic                        s_i2c1_sda_out;\n  logic                        s_i2c1_sda_in;\n  logic                        s_i2c1_sda_oe;\n  logic                        s_i2s_sd0_in;\n  logic                        s_i2s_sd1_in;\n  logic                        s_i2s_sck_in;\n  logic                        s_i2s_ws_in;\n  logic                        s_i2s_sck0_out;\n  logic                        s_i2s_ws0_out;\n  logic [1:0]                  s_i2s_mode0_out;\n  logic                        s_i2s_sck1_out;\n  logic                        s_i2s_ws1_out;\n  logic [1:0]                  s_i2s_mode1_out;\n  logic                        s_i2s_slave_sck_oe;\n  logic                        s_i2s_slave_ws_oe;\n  logic                        s_spi_master0_csn0;\n  logic                        s_spi_master0_csn1;\n  logic                        s_spi_master0_sck;\n  logic                        s_spi_master0_sdi0;\n  logic                        s_spi_master0_sdi1;\n  logic                        s_spi_master0_sdi2;\n  logic                        s_spi_master0_sdi3;\n  logic                        s_spi_master0_sdo0;\n  logic                        s_spi_master0_sdo1;\n  logic                        s_spi_master0_sdo2;\n  logic                        s_spi_master0_sdo3;\n  logic                        s_spi_master0_oen0;\n  logic                        s_spi_master0_oen1;\n  logic                        s_spi_master0_oen2;\n  logic                        s_spi_master0_oen3;\n\n  logic                        s_spi_master1_csn0;\n  logic                        s_spi_master1_csn1;\n  logic                        s_spi_master1_sck;\n  logic                        s_spi_master1_sdi;\n  logic                        s_spi_master1_sdo;\n  logic [1:0]                  s_spi_master1_mode;\n\n  logic                        s_sdio_clk;\n  logic                        s_sdio_cmdi;\n  logic                        s_sdio_cmdo;\n  logic                        s_sdio_cmd_oen ;\n  logic [3:0]                  s_sdio_datai;\n  logic [3:0]                  s_sdio_datao;\n  logic [3:0]                  s_sdio_data_oen;\n\n\n  logic                        s_cam_pclk;\n  logic [7:0]                  s_cam_data;\n  logic                        s_cam_hsync;\n  logic                        s_cam_vsync;\n  logic [3:0]                  s_timer0;\n  logic [3:0]                  s_timer1;\n  logic [3:0]                  s_timer2;\n  logic [3:0]                  s_timer3;\n\n  logic                        s_jtag_shift_dr;\n  logic                        s_jtag_update_dr;\n  logic                        s_jtag_capture_dr;\n\n  logic                        s_axireg_sel;\n  logic                        s_axireg_tdi;\n  logic                        s_axireg_tdo;\n\n  logic [7:0]                  s_soc_jtag_regi;\n  logic [7:0]                  s_soc_jtag_rego;\n\n  logic                        s_rstn_por;\n  logic                        s_cluster_pow;\n  logic                        s_cluster_byp;\n\n  logic                        s_dma_pe_irq_ack;\n  logic                        s_dma_pe_irq_valid;\n\n  logic [127:0]                s_pad_mux_soc;\n  logic [383:0]                s_pad_cfg_soc;\n\n  // due to the pad frame these numbers are fixed. Adjust the padframe\n  // accordingly if you change these.\n  localparam int unsigned N_UART = 1;\n  localparam int unsigned N_SPI = 1;\n  localparam int unsigned N_I2C = 2;\n\n  logic [N_SPI-1:0]            s_spi_clk;\n  logic [N_SPI-1:0][3:0]       s_spi_csn;\n  logic [N_SPI-1:0][3:0]       s_spi_oen;\n  logic [N_SPI-1:0][3:0]       s_spi_sdo;\n  logic [N_SPI-1:0][3:0]       s_spi_sdi;\n\n  logic [N_I2C-1:0]            s_i2c_scl_in;\n  logic [N_I2C-1:0]            s_i2c_scl_out;\n  logic [N_I2C-1:0]            s_i2c_scl_oe;\n  logic [N_I2C-1:0]            s_i2c_sda_in;\n  logic [N_I2C-1:0]            s_i2c_sda_out;\n  logic [N_I2C-1:0]            s_i2c_sda_oe;\n\n\n  //\n  // SOC TO CLUSTER DOMAINS SIGNALS\n  //\n  // PULPissimo doens't have a cluster so we ignore them\n\n  logic                        s_dma_pe_evt_ack;\n  logic                        s_dma_pe_evt_valid;\n  logic                        s_dma_pe_int_ack;\n  logic                        s_dma_pe_int_valid;\n  logic                        s_pf_evt_ack;\n  logic                        s_pf_evt_valid;\n\n\n\n  //\n  // OTHER PAD FRAME SIGNALS\n  //\n  logic [1:0]                  s_bootsel;\n  logic                        s_fc_fetch_en_valid;\n  logic                        s_fc_fetch_en;\n\n  //\n  // PAD FRAME\n  //\n  pad_frame pad_frame_i (\n    .pad_cfg_i             ( s_pad_cfg              ),\n    .ref_clk_o             ( s_ref_clk              ),\n    .rstn_o                ( s_rstn                 ),\n    .jtag_tdo_i            ( s_jtag_tdo             ),\n    .jtag_tck_o            ( s_jtag_tck             ),\n    .jtag_tdi_o            ( s_jtag_tdi             ),\n    .jtag_tms_o            ( s_jtag_tms             ),\n    .jtag_trst_o           ( s_jtag_trst            ),\n\n    .oe_spim_sdio0_i       ( s_oe_spim_sdio0        ),\n    .oe_spim_sdio1_i       ( s_oe_spim_sdio1        ),\n    .oe_spim_sdio2_i       ( s_oe_spim_sdio2        ),\n    .oe_spim_sdio3_i       ( s_oe_spim_sdio3        ),\n    .oe_spim_csn0_i        ( s_oe_spim_csn0         ),\n    .oe_spim_csn1_i        ( s_oe_spim_csn1         ),\n    .oe_spim_sck_i         ( s_oe_spim_sck          ),\n    .oe_sdio_clk_i         ( s_oe_sdio_clk          ),\n    .oe_sdio_cmd_i         ( s_oe_sdio_cmd          ),\n    .oe_sdio_data0_i       ( s_oe_sdio_data0        ),\n    .oe_sdio_data1_i       ( s_oe_sdio_data1        ),\n    .oe_sdio_data2_i       ( s_oe_sdio_data2        ),\n    .oe_sdio_data3_i       ( s_oe_sdio_data3        ),\n    .oe_i2s0_sck_i         ( s_oe_i2s0_sck          ),\n    .oe_i2s0_ws_i          ( s_oe_i2s0_ws           ),\n    .oe_i2s0_sdi_i         ( s_oe_i2s0_sdi          ),\n    .oe_i2s1_sdi_i         ( s_oe_i2s1_sdi          ),\n    .oe_cam_pclk_i         ( s_oe_cam_pclk          ),\n    .oe_cam_hsync_i        ( s_oe_cam_hsync         ),\n    .oe_cam_data0_i        ( s_oe_cam_data0         ),\n    .oe_cam_data1_i        ( s_oe_cam_data1         ),\n    .oe_cam_data2_i        ( s_oe_cam_data2         ),\n    .oe_cam_data3_i        ( s_oe_cam_data3         ),\n    .oe_cam_data4_i        ( s_oe_cam_data4         ),\n    .oe_cam_data5_i        ( s_oe_cam_data5         ),\n    .oe_cam_data6_i        ( s_oe_cam_data6         ),\n    .oe_cam_data7_i        ( s_oe_cam_data7         ),\n    .oe_cam_vsync_i        ( s_oe_cam_vsync         ),\n    .oe_i2c0_sda_i         ( s_oe_i2c0_sda          ),\n    .oe_i2c0_scl_i         ( s_oe_i2c0_scl          ),\n    .oe_uart_rx_i          ( s_oe_uart_rx           ),\n    .oe_uart_tx_i          ( s_oe_uart_tx           ),\n\n    .out_spim_sdio0_i      ( s_out_spim_sdio0       ),\n    .out_spim_sdio1_i      ( s_out_spim_sdio1       ),\n    .out_spim_sdio2_i      ( s_out_spim_sdio2       ),\n    .out_spim_sdio3_i      ( s_out_spim_sdio3       ),\n    .out_spim_csn0_i       ( s_out_spim_csn0        ),\n    .out_spim_csn1_i       ( s_out_spim_csn1        ),\n    .out_spim_sck_i        ( s_out_spim_sck         ),\n    .out_sdio_clk_i        ( s_out_sdio_clk         ),\n    .out_sdio_cmd_i        ( s_out_sdio_cmd         ),\n    .out_sdio_data0_i      ( s_out_sdio_data0       ),\n    .out_sdio_data1_i      ( s_out_sdio_data1       ),\n    .out_sdio_data2_i      ( s_out_sdio_data2       ),\n    .out_sdio_data3_i      ( s_out_sdio_data3       ),\n    .out_i2s0_sck_i        ( s_out_i2s0_sck         ),\n    .out_i2s0_ws_i         ( s_out_i2s0_ws          ),\n    .out_i2s0_sdi_i        ( s_out_i2s0_sdi         ),\n    .out_i2s1_sdi_i        ( s_out_i2s1_sdi         ),\n    .out_cam_pclk_i        ( s_out_cam_pclk         ),\n    .out_cam_hsync_i       ( s_out_cam_hsync        ),\n    .out_cam_data0_i       ( s_out_cam_data0        ),\n    .out_cam_data1_i       ( s_out_cam_data1        ),\n    .out_cam_data2_i       ( s_out_cam_data2        ),\n    .out_cam_data3_i       ( s_out_cam_data3        ),\n    .out_cam_data4_i       ( s_out_cam_data4        ),\n    .out_cam_data5_i       ( s_out_cam_data5        ),\n    .out_cam_data6_i       ( s_out_cam_data6        ),\n    .out_cam_data7_i       ( s_out_cam_data7        ),\n    .out_cam_vsync_i       ( s_out_cam_vsync        ),\n    .out_i2c0_sda_i        ( s_out_i2c0_sda         ),\n    .out_i2c0_scl_i        ( s_out_i2c0_scl         ),\n    .out_uart_rx_i         ( s_out_uart_rx          ),\n    .out_uart_tx_i         ( s_out_uart_tx          ),\n\n    .in_spim_sdio0_o       ( s_in_spim_sdio0        ),\n    .in_spim_sdio1_o       ( s_in_spim_sdio1        ),\n    .in_spim_sdio2_o       ( s_in_spim_sdio2        ),\n    .in_spim_sdio3_o       ( s_in_spim_sdio3        ),\n    .in_spim_csn0_o        ( s_in_spim_csn0         ),\n    .in_spim_csn1_o        ( s_in_spim_csn1         ),\n    .in_spim_sck_o         ( s_in_spim_sck          ),\n    .in_sdio_clk_o         ( s_in_sdio_clk          ),\n    .in_sdio_cmd_o         ( s_in_sdio_cmd          ),\n    .in_sdio_data0_o       ( s_in_sdio_data0        ),\n    .in_sdio_data1_o       ( s_in_sdio_data1        ),\n    .in_sdio_data2_o       ( s_in_sdio_data2        ),\n    .in_sdio_data3_o       ( s_in_sdio_data3        ),\n    .in_i2s0_sck_o         ( s_in_i2s0_sck          ),\n    .in_i2s0_ws_o          ( s_in_i2s0_ws           ),\n    .in_i2s0_sdi_o         ( s_in_i2s0_sdi          ),\n    .in_i2s1_sdi_o         ( s_in_i2s1_sdi          ),\n    .in_cam_pclk_o         ( s_in_cam_pclk          ),\n    .in_cam_hsync_o        ( s_in_cam_hsync         ),\n    .in_cam_data0_o        ( s_in_cam_data0         ),\n    .in_cam_data1_o        ( s_in_cam_data1         ),\n    .in_cam_data2_o        ( s_in_cam_data2         ),\n    .in_cam_data3_o        ( s_in_cam_data3         ),\n    .in_cam_data4_o        ( s_in_cam_data4         ),\n    .in_cam_data5_o        ( s_in_cam_data5         ),\n    .in_cam_data6_o        ( s_in_cam_data6         ),\n    .in_cam_data7_o        ( s_in_cam_data7         ),\n    .in_cam_vsync_o        ( s_in_cam_vsync         ),\n    .in_i2c0_sda_o         ( s_in_i2c0_sda          ),\n    .in_i2c0_scl_o         ( s_in_i2c0_scl          ),\n    .in_uart_rx_o          ( s_in_uart_rx           ),\n    .in_uart_tx_o          ( s_in_uart_tx           ),\n    .bootsel_o             ( s_bootsel              ),\n\n    //EXT CHIP to PAD\n    .pad_spim_sdio0        ( pad_spim_sdio0         ),\n    .pad_spim_sdio1        ( pad_spim_sdio1         ),\n    .pad_spim_sdio2        ( pad_spim_sdio2         ),\n    .pad_spim_sdio3        ( pad_spim_sdio3         ),\n    .pad_spim_csn0         ( pad_spim_csn0          ),\n    .pad_spim_csn1         ( pad_spim_csn1          ),\n    .pad_spim_sck          ( pad_spim_sck           ),\n    .pad_sdio_clk          ( pad_sdio_clk           ),\n    .pad_sdio_cmd          ( pad_sdio_cmd           ),\n    .pad_sdio_data0        ( pad_sdio_data0         ),\n    .pad_sdio_data1        ( pad_sdio_data1         ),\n    .pad_sdio_data2        ( pad_sdio_data2         ),\n    .pad_sdio_data3        ( pad_sdio_data3         ),\n    .pad_i2s0_sck          ( pad_i2s0_sck           ),\n    .pad_i2s0_ws           ( pad_i2s0_ws            ),\n    .pad_i2s0_sdi          ( pad_i2s0_sdi           ),\n    .pad_i2s1_sdi          ( pad_i2s1_sdi           ),\n    .pad_cam_pclk          ( pad_cam_pclk           ),\n    .pad_cam_hsync         ( pad_cam_hsync          ),\n    .pad_cam_data0         ( pad_cam_data0          ),\n    .pad_cam_data1         ( pad_cam_data1          ),\n    .pad_cam_data2         ( pad_cam_data2          ),\n    .pad_cam_data3         ( pad_cam_data3          ),\n    .pad_cam_data4         ( pad_cam_data4          ),\n    .pad_cam_data5         ( pad_cam_data5          ),\n    .pad_cam_data6         ( pad_cam_data6          ),\n    .pad_cam_data7         ( pad_cam_data7          ),\n    .pad_cam_vsync         ( pad_cam_vsync          ),\n    .pad_i2c0_sda          ( pad_i2c0_sda           ),\n    .pad_i2c0_scl          ( pad_i2c0_scl           ),\n    .pad_uart_rx           ( pad_uart_rx            ),\n    .pad_uart_tx           ( pad_uart_tx            ),\n\n    .pad_bootsel0          ( pad_bootsel0            ),\n    .pad_bootsel1          ( pad_bootsel1            ),\n    .pad_reset_n           ( pad_reset_n            ),\n    .pad_jtag_tck          ( pad_jtag_tck           ),\n    .pad_jtag_tdi          ( pad_jtag_tdi           ),\n    .pad_jtag_tdo          ( pad_jtag_tdo           ),\n    .pad_jtag_tms          ( pad_jtag_tms           ),\n    .pad_jtag_trst         ( pad_jtag_trst          ),\n    .pad_xtal_in           ( pad_xtal_in            )\n  );\n\n  //\n  // SAFE DOMAIN\n  //\n   safe_domain safe_domain_i (\n\n        .ref_clk_i                  ( s_ref_clk                   ),\n        .slow_clk_o                 ( s_slow_clk                  ),\n        .rst_ni                     ( s_rstn                     ),\n\n        .rst_no                     ( s_rstn_por                  ),\n\n        .test_clk_o                 ( s_test_clk                  ),\n        .test_mode_o                ( s_test_mode     "}
{"text": "            ),\n        .mode_select_o              ( s_mode_select               ),\n        .dft_cg_enable_o            ( s_dft_cg_enable             ),\n\n        .pad_cfg_o                  ( s_pad_cfg                   ),\n\n        .pad_cfg_i                  ( s_pad_cfg_soc               ),\n        .pad_mux_i                  ( s_pad_mux_soc               ),\n\n        .gpio_out_i                 ( s_gpio_out                  ),\n        .gpio_in_o                  ( s_gpio_in                   ),\n        .gpio_dir_i                 ( s_gpio_dir                  ),\n        .gpio_cfg_i                 ( s_gpio_cfg                  ),\n\n        .uart_tx_i                  ( s_uart_tx                   ),\n        .uart_rx_o                  ( s_uart_rx                   ),\n\n        .i2c_scl_out_i              ( s_i2c_scl_out               ),\n        .i2c_scl_in_o               ( s_i2c_scl_in                ),\n        .i2c_scl_oe_i               ( s_i2c_scl_oe                ),\n        .i2c_sda_out_i              ( s_i2c_sda_out               ),\n        .i2c_sda_in_o               ( s_i2c_sda_in                ),\n        .i2c_sda_oe_i               ( s_i2c_sda_oe                ),\n\n        .i2s_slave_sd0_o            ( s_i2s_sd0_in                ),\n        .i2s_slave_sd1_o            ( s_i2s_sd1_in                ),\n        .i2s_slave_ws_o             ( s_i2s_ws_in                 ),\n        .i2s_slave_ws_i             ( s_i2s_ws0_out               ),\n        .i2s_slave_ws_oe            ( s_i2s_slave_ws_oe           ),\n        .i2s_slave_sck_o            ( s_i2s_sck_in                ),\n        .i2s_slave_sck_i            ( s_i2s_sck0_out              ),\n        .i2s_slave_sck_oe           ( s_i2s_slave_sck_oe          ),\n\n        .spi_clk_i                  ( s_spi_clk                   ),\n        .spi_csn_i                  ( s_spi_csn                   ),\n        .spi_oen_i                  ( s_spi_oen                   ),\n        .spi_sdo_i                  ( s_spi_sdo                   ),\n        .spi_sdi_o                  ( s_spi_sdi                   ),\n\n        .sdio_clk_i                 ( s_sdio_clk                  ),\n        .sdio_cmd_i                 ( s_sdio_cmdo                 ),\n        .sdio_cmd_o                 ( s_sdio_cmdi                 ),\n        .sdio_cmd_oen_i             ( s_sdio_cmd_oen              ),\n        .sdio_data_i                ( s_sdio_datao                ),\n        .sdio_data_o                ( s_sdio_datai                ),\n        .sdio_data_oen_i            ( s_sdio_data_oen             ),\n\n        .cam_pclk_o                 ( s_cam_pclk                  ),\n        .cam_data_o                 ( s_cam_data                  ),\n        .cam_hsync_o                ( s_cam_hsync                 ),\n        .cam_vsync_o                ( s_cam_vsync                 ),\n\n        .timer0_i                   ( s_timer0                    ),\n        .timer1_i                   ( s_timer1                    ),\n        .timer2_i                   ( s_timer2                    ),\n        .timer3_i                   ( s_timer3                    ),\n\n        .out_spim_sdio0_o           ( s_out_spim_sdio0            ),\n        .out_spim_sdio1_o           ( s_out_spim_sdio1            ),\n        .out_spim_sdio2_o           ( s_out_spim_sdio2            ),\n        .out_spim_sdio3_o           ( s_out_spim_sdio3            ),\n        .out_spim_csn0_o            ( s_out_spim_csn0             ),\n        .out_spim_csn1_o            ( s_out_spim_csn1             ),\n        .out_spim_sck_o             ( s_out_spim_sck              ),\n\n        .out_sdio_clk_o             ( s_out_sdio_clk              ),\n        .out_sdio_cmd_o             ( s_out_sdio_cmd              ),\n        .out_sdio_data0_o           ( s_out_sdio_data0            ),\n        .out_sdio_data1_o           ( s_out_sdio_data1            ),\n        .out_sdio_data2_o           ( s_out_sdio_data2            ),\n        .out_sdio_data3_o           ( s_out_sdio_data3            ),\n\n        .out_uart_rx_o              ( s_out_uart_rx               ),\n        .out_uart_tx_o              ( s_out_uart_tx               ),\n\n        .out_cam_pclk_o             ( s_out_cam_pclk              ),\n        .out_cam_hsync_o            ( s_out_cam_hsync             ),\n        .out_cam_data0_o            ( s_out_cam_data0             ),\n        .out_cam_data1_o            ( s_out_cam_data1             ),\n        .out_cam_data2_o            ( s_out_cam_data2             ),\n        .out_cam_data3_o            ( s_out_cam_data3             ),\n        .out_cam_data4_o            ( s_out_cam_data4             ),\n        .out_cam_data5_o            ( s_out_cam_data5             ),\n        .out_cam_data6_o            ( s_out_cam_data6             ),\n        .out_cam_data7_o            ( s_out_cam_data7             ),\n        .out_cam_vsync_o            ( s_out_cam_vsync             ),\n\n        .out_i2c0_sda_o             ( s_out_i2c0_sda              ),\n        .out_i2c0_scl_o             ( s_out_i2c0_scl              ),\n        .out_i2s0_sck_o             ( s_out_i2s0_sck              ),\n        .out_i2s0_ws_o              ( s_out_i2s0_ws               ),\n        .out_i2s0_sdi_o             ( s_out_i2s0_sdi              ),\n        .out_i2s1_sdi_o             ( s_out_i2s1_sdi              ),\n\n        .in_spim_sdio0_i            ( s_in_spim_sdio0             ),\n        .in_spim_sdio1_i            ( s_in_spim_sdio1             ),\n        .in_spim_sdio2_i            ( s_in_spim_sdio2             ),\n        .in_spim_sdio3_i            ( s_in_spim_sdio3             ),\n        .in_spim_csn0_i             ( s_in_spim_csn0              ),\n        .in_spim_csn1_i             ( s_in_spim_csn1              ),\n        .in_spim_sck_i              ( s_in_spim_sck               ),\n\n        .in_sdio_clk_i              ( s_in_sdio_clk               ),\n        .in_sdio_cmd_i              ( s_in_sdio_cmd               ),\n        .in_sdio_data0_i            ( s_in_sdio_data0             ),\n        .in_sdio_data1_i            ( s_in_sdio_data1             ),\n        .in_sdio_data2_i            ( s_in_sdio_data2             ),\n        .in_sdio_data3_i            ( s_in_sdio_data3             ),\n\n        .in_uart_rx_i               ( s_in_uart_rx                ),\n        .in_uart_tx_i               ( s_in_uart_tx                ),\n        .in_cam_pclk_i              ( s_in_cam_pclk               ),\n        .in_cam_hsync_i             ( s_in_cam_hsync              ),\n        .in_cam_data0_i             ( s_in_cam_data0              ),\n        .in_cam_data1_i             ( s_in_cam_data1              ),\n        .in_cam_data2_i             ( s_in_cam_data2              ),\n        .in_cam_data3_i             ( s_in_cam_data3              ),\n        .in_cam_data4_i             ( s_in_cam_data4              ),\n        .in_cam_data5_i             ( s_in_cam_data5              ),\n        .in_cam_data6_i             ( s_in_cam_data6              ),\n        .in_cam_data7_i             ( s_in_cam_data7              ),\n        .in_cam_vsync_i             ( s_in_cam_vsync              ),\n\n        .in_i2c0_sda_i              ( s_in_i2c0_sda               ),\n        .in_i2c0_scl_i              ( s_in_i2c0_scl               ),\n        .in_i2s0_sck_i              ( s_in_i2s0_sck               ),\n        .in_i2s0_ws_i               ( s_in_i2s0_ws                ),\n        .in_i2s0_sdi_i              ( s_in_i2s0_sdi               ),\n        .in_i2s1_sdi_i              ( s_in_i2s1_sdi               ),\n\n        .oe_spim_sdio0_o            ( s_oe_spim_sdio0             ),\n        .oe_spim_sdio1_o            ( s_oe_spim_sdio1             ),\n        .oe_spim_sdio2_o            ( s_oe_spim_sdio2             ),\n        .oe_spim_sdio3_o            ( s_oe_spim_sdio3             ),\n        .oe_spim_csn0_o             ( s_oe_spim_csn0              ),\n        .oe_spim_csn1_o             ( s_oe_spim_csn1              ),\n        .oe_spim_sck_o              ( s_oe_spim_sck               ),\n\n        .oe_sdio_clk_o              ( s_oe_sdio_clk               ),\n        .oe_sdio_cmd_o              ( s_oe_sdio_cmd               ),\n        .oe_sdio_data0_o            ( s_oe_sdio_data0             ),\n        .oe_sdio_data1_o            ( s_oe_sdio_data1             ),\n        .oe_sdio_data2_o            ( s_oe_sdio_data2             ),\n        .oe_sdio_data3_o            ( s_oe_sdio_data3             ),\n\n        .oe_uart_rx_o               ( s_oe_uart_rx                ),\n        .oe_uart_tx_o               ( s_oe_uart_tx                ),\n        .oe_cam_pclk_o              ( s_oe_cam_pclk               ),\n        .oe_cam_hsync_o             ( s_oe_cam_hsync              ),\n        .oe_cam_data0_o             ( s_oe_cam_data0              ),\n        .oe_cam_data1_o             ( s_oe_cam_data1              ),\n        .oe_cam_data2_o             ( s_oe_cam_data2              ),\n        .oe_cam_data3_o             ( s_oe_cam_data3              ),\n        .oe_cam_data4_o             ( s_oe_cam_data4              ),\n        .oe_cam_data5_o             ( s_oe_cam_data5              ),\n        .oe_cam_data6_o             ( s_oe_cam_data6              ),\n        .oe_cam_data7_o             ( s_oe_cam_data7              ),\n        .oe_cam_vsync_o             ( s_oe_cam_vsync              ),\n\n        .oe_i2c0_sda_o              ( s_oe_i2c0_sda               ),\n        .oe_i2c0_scl_o              ( s_oe_i2c0_scl               ),\n        .oe_i2s0_sck_o              ( s_oe_i2s0_sck               ),\n        .oe_i2s0_ws_o               ( s_oe_i2s0_ws                ),\n        .oe_i2s0_sdi_o              ( s_oe_i2s0_sdi               ),\n        .oe_i2s1_sdi_o              ( s_oe_i2s1_sdi               ),\n\n        .*);\n\n   //\n   // SOC DOMAIN\n   //\n   soc_domain #(\n      .CORE_TYPE          ( CORE_TYPE                  ),\n      .USE_FPU            ( USE_FPU                    ),\n      .USE_ZFINX          ( USE_ZFINX                  ),\n      .USE_HWPE           ( USE_HWPE                   ),\n      .AXI_ADDR_WIDTH     ( AXI_ADDR_WIDTH             ),\n      .AXI_DATA_IN_WIDTH  ( AXI_CLUSTER_SOC_DATA_WIDTH ),\n      .AXI_DATA_OUT_WIDTH ( AXI_SOC_CLUSTER_DATA_WIDTH ),\n      .AXI_ID_IN_WIDTH    ( AXI_CLUSTER_SOC_ID_WIDTH   ),\n      .AXI_USER_WIDTH     ( AXI_USER_WIDTH             ),\n      .AXI_STRB_WIDTH_IN  ( AXI_CLUSTER_SOC_STRB_WIDTH ),\n      .AXI_STRB_WIDTH_OUT ( AXI_SOC_CLUSTER_STRB_WIDTH ),\n      .EVNT_WIDTH         ( EVENT_WIDTH                ),\n      .CDC_FIFOS_LOG_DEPTH( 3                          ),\n      .NB_CL_CORES        ( 0                          ),\n      .N_UART             ( N_UART                     ),\n      .N_SPI              ( N_SPI                      ),\n      .N_I2C              ( N_I2C                      ),\n      .SIM_STDOUT         ( SIM_STDOUT                 )\n   ) soc_domain_i (\n\n        .ref_clk_i                   ( s_ref_clk          ),\n        .slow_clk_i                  ( s_slow_clk         ),\n        .test_clk_i                  ( s_test_clk         ),\n\n        .rstn_glob_i                 ( s_rstn_por         ),\n\n        .mode_select_i               ( s_mode_select      ),\n        .dft_cg_enable_i             ( s_dft_cg_enable    ),\n        .dft_test_mode_i             ( s_test_mode        ),\n\n        .bootsel_i                   ( s_bootsel          ),\n\n        // we immediately start bootin g in the default setup\n        .fc_fetch_en_valid_i         ( 1'b1               ),\n        .fc_fetch_en_i               ( 1'b1               ),\n\n        .jtag_tck_i                  ( s_jtag_tck         ),\n        .jtag_trst_ni                ( s_jtag_trst        ),\n        .jtag_tms_i                  ( s_jtag_tms         ),\n        .jtag_tdi_i                  ( s_jtag_tdi         ),\n        .jtag_tdo_o                  ( s_jtag_tdo         ),\n\n        .pad_cfg_o                   ( s_pad_cfg_soc      ),\n        .pad_mux_o                   ( s_pad_mux_soc      ),\n\n        .gpio_in_i                   ( s_gpio_in          ),\n        .gpio_out_o                  ( s_gpio_out         ),\n        .gpio_dir_o                  ( s_gpio_dir         ),\n        .gpio_cfg_o                  ( s_gpio_cfg         ),\n\n        .uart_tx_o                   ( s_uart_tx          ),\n        .uart_rx_i                   ( s_uart_rx          ),\n\n        .cam_clk_i                   ( s_cam_pclk         ),\n        .cam_data_i                  ( s_cam_data         ),\n        .cam_hsync_i                 ( s_cam_hsync        ),\n        .cam_vsync_i                 ( s_cam_vsync        ),\n\n        .timer_ch0_o                 ( s_timer0           ),\n        .timer_ch1_o                 ( s_timer1           ),\n        .timer_ch2_o                 ( s_timer2           ),\n        .timer_ch3_o                 ( s_timer3           ),\n\n        .i2c_scl_i                   ( s_i2c_scl_in       ),\n        .i2c_scl_o                   ( s_i2c_scl_out      ),\n        .i2c_scl_oe_o                ( s_i2c_scl_oe       ),\n        .i2c_sda_i                   ( s_i2c_sda_in       ),\n        .i2c_sda_o                   ( s_i2c_sda_out      ),\n        .i2c_sda_oe_o                ( s_i2c_sda_oe       ),\n\n        .i2s_slave_sd0_i             ( s_i2s_sd0_in       ),\n        .i2s_slave_sd1_i             ( s_i2s_sd1_in       ),\n        .i2s_slave_ws_i              ( s_i2s_ws_in        ),\n        .i2s_slave_ws_o              ( s_i2s_ws0_out      ),\n        .i2s_slave_ws_oe             ( s_i2s_slave_ws_oe  ),\n        .i2s_slave_sck_i             ( s_i2s_sck_in       ),\n        .i2s_slave_sck_o             ( s_i2s_sck0_out     ),\n        .i2s_slave_sck_oe            ( s_i2s_slave_sck_oe ),\n\n        .spi_clk_o                   ( s_spi_clk          ),\n        .spi_csn_o                   ( s_spi_csn          ),\n        .spi_oen_o                   ( s_spi_oen          ),\n        .spi_sdo_o                   ( s_spi_sdo          ),\n        .spi_sdi_i                   ( s_spi_sdi          ),\n\n        .sdio_clk_o                  ( s_sdio_clk         ),\n        .sdio_cmd_o                  ( s_sdio_cmdo        ),\n        .sdio_cmd_i                  ( s_sdio_cmdi        ),\n        .sdio_cmd_oen_o              ( s_sdio_cmd_oen     ),\n        .sdio_data_o                 ( s_sdio_datao       ),\n        .sdio_data_i                 ( s_sdio_datai       ),\n        .sdio_data_oen_o             ( s_sdio_data_oen    ),\n\n         // TODO: wire up if needed\n        .hyper_cs_no                 (                    ),\n        .hyper_ck_o                  (                    ),\n        .hyper_ck_no                 (                    ),\n        .hyper_rwds_o                (                    ),\n        .hyper_rwds_i                ( '0                 ),\n        .hyper_rwds_oe_o             (                    ),\n        .hyper_dq_i                  ( '0                 ),\n        .hyper_dq_o                  (                    ),\n        .hyper_dq_oe_o               (                    ),\n        .hyper_reset_no              (                    ),\n\n        .cluster_busy_i              ( s_cluster_busy     ),\n        .cluster_irq_o               (                    ),\n\n        .dma_pe_evt_ack_o            ( s_dma_pe_evt_ack   ),\n        .dma_pe_evt_valid_i          ( s_dma_pe_evt_valid ),\n        .dma_pe_irq_ack_o            ( s_dma_pe_irq_ack   ),\n        .dma_pe_irq_valid_i          ( s_dma_pe_irq_valid ),\n        .pf_evt_ack_o                ( s_pf_evt_ack       ),\n        .pf_evt_valid_i              ( s_pf_evt_valid     ),\n\n        .cluster_pow_o               ( s_cluster_pow      ),\n        .cluster_byp_o               ( s_cluster_byp      ),\n\n\n        .cluster_clk_o               (                    ),\n        .cluster_rstn_o              (                    ),\n\n        .cluster_rtc_o               (                    ),\n        .cluster_fetch_enable_o      (                    ),\n        .cluster_boot_addr_o         (                    ),\n        .cluster_test_en_o           (                    ),\n        .cluster_dbg_irq_valid_o     (                    ), // we dont' have a cluster\n        .async_data_slave_aw_rptr_o  (                    ), // we don't have a cluster\n        .async_data_slave_ar_rptr_o  (                    ), // we don't have a cluster\n        .async_data_slave_w_rptr_o   (                    ), // we don't have a cluster\n        .async_data_slave_r_wptr_o   (                    ), // we don't have a cluster\n        .async_data_slave_r_data_o   (                    ), // we don't have a cluster\n        .async_data_slave_b_wptr_o   (                    ), // we don't have a cluster\n        .async_data_slave_b_data_o   (                    ), // we don't have a cluster\n        .async_data_master_aw_wptr_o (                    ), // we don't have a cluster\n        .async_data_master_aw_data_o (                    ), // we don't have a cluster\n        .async_data_master_ar_wptr_o (                    ), // we don't have a cluster\n        .async_data_master_ar_data_o (                    ), // we don't have a cluster\n        .async_data_master_w_wptr_o  (                    ), // we don't have a cluster\n        .async_data_master_w_data_o  (                    ), // we don't have a cluster\n        .async_data_master_r_rptr_o  (                    ), // we don't have a cluster\n        .async_data_master_b_rptr_o  (                    ), // we don't have a cluster\n        .async_cluster_events_wptr_o (                    ), // we don't have a cluster\n        .async_cluster_events_data_o (                    ), // we don't have a cluster\n        .async_data_slave_aw_wptr_i  ( '0                 ), // We don't have a cluster\n        .async_data_slave_aw_data_i  ( '0                 ), // We don't have a cluster\n        .async_data_slave_ar_wptr_i  ( '0                 ), // We don't have a cluster\n        .async_data_slave_ar_data_i  ( '0                 ), // We don't have a cluster\n        .async_data_slave_w_wptr_i   ( '0                 ), // We don't have a cluster\n        .async_data_slave_w_data_i   ( '0                 ), // We don't have a cluster\n        .async_data_slave_r_rptr_i   ( '0                 ), // We don't have a cluster\n        .async_data_slave_b_rptr_i   ( '0                 ), // We don't have a cluster\n        .async_data_master_aw_rptr_i ( '0                 ), // We don't have a cluster\n        .async_data_master_ar_rptr_i ( '0                 ), // We don't have a cluster\n        .async_data_master_w_rptr_i  ( '0                 ), // We don't have a cluster\n        .async_data_master_r_wptr_i  ( '0                 ), // We don't have a cluster\n        .async_data_master_r_data_i  ( '0                 ), // We don't have a cluster\n        .async_data_master_b_wptr_i  ( '0                 ), // We don't have a cluster\n        .async_data_master_b_data_i  ( '0                 ), // We don't have a cluster\n        .async_cluster_events_rptr_i ( '0                 )  // We don't have a cluster\n        );\n\nassign s_dma_pe_evt_valid               = '0;\nassign s_dma_pe_irq_valid               = '0;\nassign s_pf_evt_valid                   = '0;\nassign s_cluster_busy                   = '0;\n\nendmodule\n"}
{"text": "/*\n * pulp_soc_defines.sv\n *\n * Copyright (C) 2013-2018 ETH Zurich, University of Bologna.\n *\n * Copyright and related rights are licensed under the Solderpad Hardware\n * License, Version 0.51 (the \"License\"); you may not use this file except in\n * compliance with the License.  You may obtain a copy of the License at\n * http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n * or agreed to in writing, software, hardware and materials distributed under\n * this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n */\n\n`ifndef PULP_SOC_DEFINES_SV\n`define PULP_SOC_DEFINES_SV\n\n// define if the 0x0000_0000 to 0x0040_0000 is the alias of the current cluster address space (eg cluster 0 is from  0x1000_0000 to 0x1040_0000)\n`define CLUSTER_ALIAS\n// the same for fabric controller\n`define FC_ALIAS\n\n// To use new icache use this define\n`define MP_ICACHE\n//`define SP_ICACHE\n//`define PRIVATE_ICACHE\n\n// To use The L2 Multibank Feature, please decomment this define\n`define USE_L2_MULTIBANK\n`define NB_L2_CHANNELS 4\n\n// JTAG\n// Part Number\n//   0001/fffe PULPissimo\n//   0002/fffd PULP\n//   cafe/3501 ControlPULP\n\n// LSB                       [0]:     1'h1\n// PULP Platform Manufacturer[11:1]:  11'h6d9\n// Part Number               [27:12]: 16'hcafe\n// Version                   [31:28]: 4'h5\n`define DMI_JTAG_IDCODE 32'h50001db3\n\n// LSB                       [0]:     1'h1\n// PULP Platform Manufacturer[11:1]:  11'h6d9\n// Part Number               [27:12]: 16'hcaff\n// Version                   [31:28]: 4'h5\n`define PULP_JTAG_IDCODE 32'h5fffedb3\n\n// Hardware Accelerator selection\n`define HWCRYPT\n\n// Uncomment if the SCM is not present (it will still be in the memory map)\n//`define NO_SCM\n\n`define APU_CLUSTER\n\n// uncomment if you want to place the DEMUX peripherals (EU, MCHAN) rigth before the Test and set region.\n// This will steal 16KB from the 1MB TCDM reegion.\n// EU is mapped           from 0x10100000 - 0x400\n// MCHAN regs are mapped  from 0x10100000 - 0x800\n// remember to change the defines in the pulp.h as well to be coherent with this approach\n//`define DEM_PER_BEFORE_TCDM_TS\n\n\n// Debugging\n// Trace CV32E40P core execution\n//`define CV32E40P_TRACE_EXECUTION\n// Trace CV32E40P offload interface\n// `define CV32E40P_APU_TRACE\n// Log uart output\n`define LOG_UART_SIM\n// Log sim stdout to files\n//`define LOG_SIM_STDOUT\n\n// uncomment if FPGA emulator\n// `define PULP_FPGA_EMUL 1\n// uncomment if using Vivado for ulpcluster synthesis\n`define VIVADO\n\n\n// Enables memory mapped register and counters to extract statistic on instruction cache\n`define FEATURE_ICACHE_STAT\n\n\n\n\n`ifdef PULP_FPGA_EMUL\n  // `undef  FEATURE_ICACHE_STAT\n  `define SCM_BASED_ICACHE\n`endif\n\n\n\n// PE selection (only for non-FPGA - otherwise selected via PULP_CORE env variable)\n// -> define RISCV for RISC-V processor\n//`define RISCV\n\n//PARAMETRES\n`define NB_CLUSTERS   0\n`define NB_CORES      0\n`define NB_DMAS       0\n`define NB_MPERIPHS   1\n`define NB_SPERIPHS   8\n\n\n// DEFINES\n`define MPER_EXT_ID   0\n\n`define NB_SPERIPH_PLUGS_EU 2\n\n`define SPER_EOC_ID      0\n`define SPER_TIMER_ID    1\n`define SPER_EVENT_U_ID  2\n`define SPER_HWCE_ID     4\n`define SPER_ICACHE_CTRL 5\n`define SPER_DMA_ID      6\n`define SPER_EXT_ID      7\n\n\n`define RVT 0\n`define LVT 1\n\n`ifndef PULP_FPGA_EMUL\n  `define LEVEL_SHIFTER\n`endif\n\n// Comment to use bheavioral memories, uncomment to use stdcell latches. If uncommented, simulations slowdown occuor\n`ifdef SYNTHESIS\n `define SCM_IMPLEMENTED\n `define SCM_BASED_ICACHE\n`endif\n//////////////////////\n// MMU DEFINES\n//\n// switch for including implementation of MMUs\n//`define MMU_IMPLEMENTED\n// number of logical TCDM banks (regarding interleaving)\n`define MMU_TCDM_BANKS 8\n// switch to enable local copy registers of\n// the control signals in every MMU\n//`define MMU_LOCAL_COPY_REGS\n//\n//////////////////////\n\n// Width of byte enable for a given data width\n`define EVAL_BE_WIDTH(DATAWIDTH) (DATAWIDTH/8)\n\n// LOG2()\n`define LOG2(VALUE) ((VALUE) < ( 1 ) ? 0 : (VALUE) < ( 2 ) ? 1 : (VALUE) < ( 4 ) ? 2 : (VALUE)< (8) ? 3:(VALUE) < ( 16 )  ? 4 : (VALUE) < ( 32 )  ? 5 : (VALUE) < ( 64 )  ? 6 : (VALUE) < ( 128 ) ? 7 : (VALUE) < ( 256 ) ? 8 : (VALUE) < ( 512 ) ? 9 : 10)\n\n/* Interfaces have been moved to pulp_interfaces.sv. Sorry :) */\n\n`endif\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n\nmodule\trtc_clock(\n\tinput  logic        clk_i,\n\tinput  logic        rstn_i,\n\n\tinput  logic        clock_update_i,\n\toutput logic [21:0] clock_o,\n\tinput  logic [21:0] clock_i,\n\n\tinput  logic  [9:0] init_sec_cnt_i,\n\n\tinput  logic        timer_update_i,\n\tinput  logic        timer_enable_i,\n\tinput  logic        timer_retrig_i,\n\tinput  logic [16:0] timer_target_i,\n\toutput logic [16:0] timer_value_o,\n\n\tinput  logic        alarm_enable_i,\n\tinput  logic        alarm_update_i,\n\tinput  logic [21:0] alarm_clock_i,\n\toutput logic [21:0] alarm_clock_o,\n\n\toutput logic        event_o,\n\n\toutput logic        update_day_o\n);\n\n\tlogic [7:0] r_seconds;\n\tlogic [7:0] r_minutes;\n\tlogic [6:0] r_hours;\n\n\tlogic [7:0] s_seconds;\n\tlogic [7:0] s_minutes;\n\tlogic [6:0] s_hours;\n\n\tlogic [7:0] r_alarm_seconds;\n\tlogic [7:0] r_alarm_minutes;\n\tlogic [6:0] r_alarm_hours;\n\tlogic       r_alarm_enable;\n\n\tlogic [7:0] s_alarm_seconds;\n\tlogic [7:0] s_alarm_minutes;\n\tlogic [5:0] s_alarm_hours;\n\n\tlogic [14:0] r_sec_counter;\n\n\tlogic s_update_seconds;\n\tlogic s_update_minutes;\n\tlogic s_update_hours;\n\tlogic s_alarm_match;\n\tlogic r_alarm_match;\n\tlogic s_alarm_event;\n\tlogic s_timer_event;\n\tlogic s_timer_match;\n\n\tlogic [16:0] r_timer;\n\tlogic [16:0] r_timer_target;\n\tlogic        r_timer_en;\n\tlogic        r_timer_retrig;\n\n\n\tassign s_seconds = clock_i[7:0];\n\tassign s_minutes = clock_i[15:8];\n\tassign s_hours   = clock_i[21:16];\n\n\tassign s_alarm_seconds = alarm_clock_i[7:0];\n\tassign s_alarm_minutes = alarm_clock_i[15:8];\n\tassign s_alarm_hours   = alarm_clock_i[21:16];\n\n\tassign s_alarm_match = (r_seconds == s_alarm_seconds) & (r_minutes == s_alarm_minutes) & (r_hours == s_alarm_hours);//alarm condition(high for 1 sec)\n\tassign s_alarm_event = r_alarm_enable & s_alarm_match & ~r_alarm_match; //edge detect on alarm event\n\n\tassign s_timer_match = r_timer == r_timer_target;\n\tassign s_timer_event = r_timer_en & s_timer_match;\n\n\tassign s_update_seconds = r_sec_counter == 15'h7FFF;\n\tassign s_update_minutes = s_update_seconds & (r_seconds == 8'h59);\n\tassign s_update_hours   = s_update_minutes & (r_minutes == 8'h59);\n\n\tassign event_o        = s_alarm_event | s_timer_event;\n\tassign update_day_o   = s_update_hours & (r_hours == 6'h23);\n\tassign clock_o        = {r_hours,r_minutes,r_seconds};\n\tassign alarm_clock_o = {r_alarm_hours,r_alarm_minutes,r_alarm_seconds};\n\n\tassign timer_value_o = r_timer;\n\n    always @ (posedge clk_i or negedge rstn_i)\n    begin\n        if(~rstn_i)\n        begin\n            r_alarm_seconds <= 'h0;\n            r_alarm_minutes <= 'h0;\n            r_alarm_hours   <= 'h0;\n            r_alarm_enable  <= 'h0;\n        end\n        else\n        begin\n        \tif (alarm_update_i)\n        \tbegin\n        \t\tr_alarm_enable  <= alarm_enable_i;\n            \tr_alarm_seconds <= s_alarm_seconds;\n            \tr_alarm_minutes <= s_alarm_minutes;\n            \tr_alarm_hours   <= s_alarm_hours  ;\n        \tend\n        \telse if(s_alarm_event) //disable alarm when alarm event is generated(sw must retrigger)\n        \t\tr_alarm_enable <= 'h0;\n        end\n    end\n\n    always @ (posedge clk_i or negedge rstn_i)\n    begin\n        if(~rstn_i)\n            r_alarm_match <= 'h0;\n        else\n       \t\tr_alarm_match <= s_alarm_match;\n    end\n\n    always @ (posedge clk_i or negedge rstn_i)\n    begin\n        if(~rstn_i)\n        begin\n            r_timer_en     <= 'h0;\n            r_timer_target <= 'h0;\n            r_timer        <= 'h0;\n            r_timer_retrig <= 'h0;\n        end\n        else\n        begin\n        \tif (timer_update_i)\n        \tbegin\n        \t\tr_timer_en     <= timer_enable_i;\n            \tr_timer_target <= timer_target_i;\n            \tr_timer_retrig <= timer_retrig_i;\n            \tr_timer        <= 'h0;\n        \tend\n        \telse if(r_timer_en)\n        \tbegin\n        \t\tif(s_timer_match)\n        \t\tbegin\n        \t\t\tif(!r_timer_retrig)\n        \t\t\t\tr_timer_en <= 0;\n        \t\t\tr_timer    <= 'h0;\n        \t\tend\n        \t\telse\n        \t\t\tr_timer <= r_timer + 1;\n        \tend\n        end\n    end\n\n    always @ (posedge clk_i or negedge rstn_i)\n    begin\n        if(~rstn_i)\n            r_sec_counter <= 'h0;\n        else\n        begin\n        \tif (clock_update_i)\n        \t\tr_sec_counter <= {init_sec_cnt_i,5'h0};\n        \telse\n            \tr_sec_counter <= r_sec_counter + 1;\n        end\n    end\n\n\talways @(posedge clk_i or negedge rstn_i)\n\tbegin\n\t\tif(~rstn_i)\n\t\tbegin\n\t\t\tr_seconds <= 0;\n\t\t\tr_minutes <= 0;\n\t\t\tr_hours   <= 0;\n\t\tend\n\t\telse\n\t\tbegin\n\t\t\tif (clock_update_i)\n\t\t\tbegin\n\t\t\t\tr_seconds <= s_seconds;\n\t\t\t\tr_minutes <= s_minutes;\n\t\t\t\tr_hours   <= s_hours;\n\t\t\tend\n\t\t\telse\n\t\t\tbegin\n\t\t\t\tif (s_update_seconds)\n\t\t\t\tbegin // advance the seconds\n\t\t\t\t\tif (r_seconds[3:0] >= 4'h9)\n\t\t\t\t\t\tr_seconds[3:0] <= 4'h0;\n\t\t\t\t\telse\n\t\t\t\t\t\tr_seconds[3:0] <= r_seconds[3:0] + 4'h1;\n\t\t\t\t\tif (r_seconds >= 8'h59)\n\t\t\t\t\t\tr_seconds[7:4] <= 4'h0;\n\t\t\t\t\telse if (r_seconds[3:0] >= 4'h9)\n\t\t\t\t\t\tr_seconds[7:4] <= r_seconds[7:4] + 4'h1;\n\t\t\t\tend\n\n\t\t\t\tif (s_update_minutes)\n\t\t\t\tbegin // advance the minutes\n\t\t\t\t\tif (r_minutes[3:0] >= 4'h9)\n\t\t\t\t\t\tr_minutes[3:0] <= 4'h0;\n\t\t\t\t\telse\n\t\t\t\t\t\tr_minutes[3:0] <= r_minutes[3:0] + 4'h1;\n\t\t\t\t\tif (r_minutes >= 8'h59)\n\t\t\t\t\t\tr_minutes[7:4] <= 4'h0;\n\t\t\t\t\telse if (r_minutes[3:0] >= 4'h9)\n\t\t\t\t\t\tr_minutes[7:4] <= r_minutes[7:4] + 4'h1;\n\t\t\t\tend\n\n\t\t\t\tif (s_update_hours)\n\t\t\t\tbegin // advance the hours\n\t\t\t\t\tif (r_hours >= 6'h23)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tr_hours <= 6'h00;\n\t\t\t\t\tend else if (r_hours[3:0] >= 4'h9)\n\t\t\t\t\tbegin\n\t\t\t\t\t\tr_hours[3:0] <= 4'h0;\n\t\t\t\t\t\tr_hours[5:4] <= r_hours[5:4] + 2'h1;\n\t\t\t\t\tend else begin\n\t\t\t\t\t\tr_hours[3:0] <= r_hours[3:0] + 4'h1;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\n\nendmodule\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n\nmodule rtc_date(\n\tinput  logic clk_i,\n\tinput  logic rstn_i,\n\n\tinput  logic        date_update_i,\n\tinput  logic [31:0] date_i,\n\toutput logic [31:0] date_o,\n\n\tinput logic new_day_i\n);\n\tlogic\t[5:0]\ts_day;\n\tlogic\t[4:0]\ts_month;\n\tlogic\t[13:0]\ts_year;\n\tlogic   [5:0]   r_day;\n\tlogic   [4:0]   r_month;\n\tlogic   [13:0]  r_year;\n\n\tlogic s_end_of_month;\n\tlogic s_end_of_year;\n\tlogic s_year_century;\n\tlogic s_year_400;\n\tlogic s_year_leap;\n\tlogic s_year_div_4;\n\n\tassign s_day  = date_i[5:0];\n\tassign s_month  = date_i[12:8];\n\tassign s_year = date_i[29:16];\n\n\tassign date_o = {2'b00,r_year,3'b000,r_month,2'b00,r_day};\n\n\tassign s_end_of_year = s_end_of_month & (r_month == 5'h12);\n\n\talways_comb\n\tbegin\n\t\tcase(r_month)\n\t\t5'h01: s_end_of_month = (r_day == 6'h31); // Jan\n\t\t5'h02: s_end_of_month = (r_day == 6'h29) || ((~s_year_leap)&&(r_day == 6'h28));\n\t\t5'h03: s_end_of_month = (r_day == 6'h31); // March\n\t\t5'h04: s_end_of_month = (r_day == 6'h30); // April\n\t\t5'h05: s_end_of_month = (r_day == 6'h31); // May\n\t\t5'h06: s_end_of_month = (r_day == 6'h30); // June\n\t\t5'h07: s_end_of_month = (r_day == 6'h31); // July\n\t\t5'h08: s_end_of_month = (r_day == 6'h31); // August\n\t\t5'h09: s_end_of_month = (r_day == 6'h30); // Sept\n\t\t5'h10: s_end_of_month = (r_day == 6'h31); // October\n\t\t5'h11: s_end_of_month = (r_day == 6'h30); // November\n\t\t5'h12: s_end_of_month = (r_day == 6'h31); // December\n\t\tdefault: s_end_of_month = 1'b0;\n\t\tendcase\n\tend\n\n\tassign s_year_div_4   = ((~r_year[0])&&(r_year[4]==r_year[1]));\n\tassign s_year_century = (r_year[7:0] == 8'h00);\n\tassign s_year_400     = ((~r_year[8])&&((r_year[12]==r_year[9])));\n\tassign s_year_leap    = (s_year_div_4) && ( (~s_year_century) || ((s_year_century)&&(s_year_400)) );\n\n\n\t// Adjust the day of month\n\talways_ff @(posedge clk_i or negedge rstn_i) begin : proc_r_day\n\t\tif(~rstn_i) begin\n\t\t\tr_day <= 6'h1;\n\t\tend else begin\n\t\tif (date_update_i)\n\t\t\tr_day <= s_day;\n\t\telse if ((new_day_i)&&(s_end_of_month))\n\t\t\tr_day <= 6'h01;\n\t\telse if ((new_day_i)&&(r_day[3:0] != 4'h9))\n\t\t\tr_day[3:0] <= r_day[3:0] + 4'h1;\n\t\telse if (new_day_i)\n\t\tbegin\n\t\t\tr_day[3:0] <= 4'h0;\n\t\t\tr_day[5:4] <= r_day[5:4] + 2'h1;\n\t\tend\n\n\t\tend\n\tend\n\n\talways_ff @(posedge clk_i or negedge rstn_i) begin : proc_r_month\n\t\tif(~rstn_i) begin\n\t\t\tr_month <= 5'h01;\n\t\tend else begin\n\t\t\tif (date_update_i)\n\t\t\t\tr_month <= s_month;\n\t\t\telse if ((new_day_i)&&(s_end_of_year))\n\t\t\t\tr_month <= 5'h01;\n\t\t\telse if ((new_day_i)&&(s_end_of_month)&&(r_month[3:0] != 4'h9))\n\t\t\t\tr_month[3:0] <= r_month[3:0] + 4'h1;\n\t\t\telse if ((new_day_i)&&(s_end_of_month))\n\t\t\tbegin\n\t\t\t\tr_month[3:0] <= 4'h0;\n\t\t\t\tr_month[4] <= 1;\n\t\t\tend\n\t\tend\n\tend // proc_r_month\n\n\talways_ff @(posedge clk_i or negedge rstn_i) begin : proc_r_year\n\t \tif(~rstn_i) begin\n\t \t\tr_year <= 14'h2000;\n\t \tend else begin\n\t \t\tif (date_update_i)\n\t \t\t\tr_year <= s_year;\n\t \t\telse if ((new_day_i)&&(s_end_of_year))\n\t\t\tbegin\n\t\t\t\tif (r_year[3:0] != 4'h9)\n\t\t\t\t\tr_year[3:0] <= r_year[3:0] + 4'h1;\n\t\t\t\telse begin\n\t\t\t\t\tr_year[3:0] <= 4'h0;\n\t\t\t\t\tif (r_year[7:4] != 4'h9)\n\t\t\t\t\t\tr_year[7:4] <= r_year[7:4] + 4'h1;\n\t\t\t\t\telse begin\n\t\t\t\t\t\tr_year[7:4] <= 4'h0;\n\t\t\t\t\t\tif (r_year[11:8] != 4'h9)\n\t\t\t\t\t\t\tr_year[11:8] <= r_year[11:8]+4'h1;\n\t\t\t\t\t\telse begin\n\t\t\t\t\t\t\tr_year[11:8] <= 4'h0;\n\t\t\t\t\t\t\tr_year[13:12] <= r_year[13:12]+2'h1;\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t \tend\n\tend\n\nendmodule\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n`include \"pulp_soc_defines.sv\"\n\nmodule safe_domain #(\n        parameter int unsigned FLL_DATA_WIDTH = 32,\n        parameter int unsigned FLL_ADDR_WIDTH = 32,\n        parameter int unsigned N_UART = 1,\n        parameter int unsigned N_SPI = 1,\n        parameter int unsigned N_I2C = 2\n) (\n        input  logic             ref_clk_i            ,\n        output logic             slow_clk_o           ,\n        input  logic             rst_ni               ,\n        output logic             rst_no               ,\n\n        output logic             test_clk_o           ,\n        output logic             test_mode_o          ,\n        output logic             mode_select_o        ,\n        output logic             dft_cg_enable_o      ,\n\n        //**********************************************************\n        //*** PERIPHERALS SIGNALS **********************************\n        //**********************************************************\n\n        // PAD CONTROL REGISTER\n        input  logic [127:0]     pad_mux_i            ,\n        input  logic [383:0]     pad_cfg_i            ,\n\n        output logic [47:0][5:0] pad_cfg_o            ,\n\n        // GPIOS\n        input  logic [31:0]      gpio_out_i           ,\n        output logic [31:0]      gpio_in_o            ,\n        input  logic [31:0]      gpio_dir_i           ,\n        input  logic [191:0]     gpio_cfg_i           ,\n\n        // UART\n        input  logic             uart_tx_i            ,\n        output logic             uart_rx_o            ,\n\n        input  logic [N_I2C-1:0] i2c_scl_out_i,\n        output logic [N_I2C-1:0] i2c_scl_in_o,\n        input  logic [N_I2C-1:0] i2c_scl_oe_i,\n        input  logic [N_I2C-1:0] i2c_sda_out_i,\n        output logic [N_I2C-1:0] i2c_sda_in_o,\n        input  logic [N_I2C-1:0] i2c_sda_oe_i,\n\n        // I2S\n        output logic             i2s_slave_sd0_o      ,\n        output logic             i2s_slave_sd1_o      ,\n        output logic             i2s_slave_ws_o       ,\n        input  logic             i2s_slave_ws_i       ,\n        input  logic             i2s_slave_ws_oe      ,\n        output logic             i2s_slave_sck_o      ,\n        input  logic             i2s_slave_sck_i      ,\n        input  logic             i2s_slave_sck_oe     ,\n\n        // SPI MASTER\n        input  logic [N_SPI-1:0]      spi_clk_i,\n        input  logic [N_SPI-1:0][3:0] spi_csn_i,\n        input  logic [N_SPI-1:0][3:0] spi_oen_i,\n        input  logic [N_SPI-1:0][3:0] spi_sdo_i,\n        output logic [N_SPI-1:0][3:0] spi_sdi_o,\n\n        // SDIO\n        input  logic             sdio_clk_i,\n        input  logic             sdio_cmd_i,\n        output logic             sdio_cmd_o,\n        input  logic             sdio_cmd_oen_i,\n        input  logic [3:0]       sdio_data_i,\n        output logic [3:0]       sdio_data_o,\n        input  logic [3:0]       sdio_data_oen_i,\n\n        // CAMERA INTERFACE\n        output logic             cam_pclk_o           ,\n        output logic [7:0]       cam_data_o           ,\n        output logic             cam_hsync_o          ,\n        output logic             cam_vsync_o          ,\n\n        // TIMER\n        input  logic [3:0]       timer0_i             ,\n        input  logic [3:0]       timer1_i             ,\n        input  logic [3:0]       timer2_i             ,\n        input  logic [3:0]       timer3_i             ,\n\n        //**********************************************************\n        //*** PAD FRAME SIGNALS ************************************\n        //**********************************************************\n\n        // PADS OUTPUTS\n        output logic             out_spim_sdio0_o     ,\n        output logic             out_spim_sdio1_o     ,\n        output logic             out_spim_sdio2_o     ,\n        output logic             out_spim_sdio3_o     ,\n        output logic             out_spim_csn0_o      ,\n        output logic             out_spim_csn1_o      ,\n        output logic             out_spim_sck_o       ,\n        output logic             out_sdio_clk_o       ,\n        output logic             out_sdio_cmd_o       ,\n        output logic             out_sdio_data0_o     ,\n        output logic             out_sdio_data1_o     ,\n        output logic             out_sdio_data2_o     ,\n        output logic             out_sdio_data3_o     ,\n        output logic             out_uart_rx_o        ,\n        output logic             out_uart_tx_o        ,\n        output logic             out_cam_pclk_o       ,\n        output logic             out_cam_hsync_o      ,\n        output logic             out_cam_data0_o      ,\n        output logic             out_cam_data1_o      ,\n        output logic             out_cam_data2_o      ,\n        output logic             out_cam_data3_o      ,\n        output logic             out_cam_data4_o      ,\n        output logic             out_cam_data5_o      ,\n        output logic             out_cam_data6_o      ,\n        output logic             out_cam_data7_o      ,\n        output logic             out_cam_vsync_o      ,\n        output logic             out_i2c0_sda_o       ,\n        output logic             out_i2c0_scl_o       ,\n        output logic             out_i2s0_sck_o       ,\n        output logic             out_i2s0_ws_o        ,\n        output logic             out_i2s0_sdi_o       ,\n        output logic             out_i2s1_sdi_o       ,\n\n\n        // PAD INPUTS\n        input logic              in_spim_sdio0_i      ,\n        input logic              in_spim_sdio1_i      ,\n        input logic              in_spim_sdio2_i      ,\n        input logic              in_spim_sdio3_i      ,\n        input logic              in_spim_csn0_i       ,\n        input logic              in_spim_csn1_i       ,\n        input logic              in_spim_sck_i        ,\n        input logic              in_sdio_clk_i        ,\n        input logic              in_sdio_cmd_i        ,\n        input logic              in_sdio_data0_i      ,\n        input logic              in_sdio_data1_i      ,\n        input logic              in_sdio_data2_i      ,\n        input logic              in_sdio_data3_i      ,\n        input logic              in_uart_rx_i         ,\n        input logic              in_uart_tx_i         ,\n        input logic              in_cam_pclk_i        ,\n        input logic              in_cam_hsync_i       ,\n        input logic              in_cam_data0_i       ,\n        input logic              in_cam_data1_i       ,\n        input logic              in_cam_data2_i       ,\n        input logic              in_cam_data3_i       ,\n        input logic              in_cam_data4_i       ,\n        input logic              in_cam_data5_i       ,\n        input logic              in_cam_data6_i       ,\n        input logic              in_cam_data7_i       ,\n        input logic              in_cam_vsync_i       ,\n        input logic              in_i2c0_sda_i        ,\n        input logic              in_i2c0_scl_i        ,\n        input logic              in_i2s0_sck_i        ,\n        input logic              in_i2s0_ws_i         ,\n        input logic              in_i2s0_sdi_i        ,\n        input logic              in_i2s1_sdi_i        ,\n\n        // OUTPUT ENABLE\n        output logic             oe_spim_sdio0_o      ,\n        output logic             oe_spim_sdio1_o      ,\n        output logic             oe_spim_sdio2_o      ,\n        output logic             oe_spim_sdio3_o      ,\n        output logic             oe_spim_csn0_o       ,\n        output logic             oe_spim_csn1_o       ,\n        output logic             oe_spim_sck_o        ,\n        output logic             oe_sdio_clk_o        ,\n        output logic             oe_sdio_cmd_o        ,\n        output logic             oe_sdio_data0_o      ,\n        output logic             oe_sdio_data1_o      ,\n        output logic             oe_sdio_data2_o      ,\n        output logic             oe_sdio_data3_o      ,\n        output logic             oe_uart_rx_o         ,\n        output logic             oe_uart_tx_o         ,\n        output logic             oe_cam_pclk_o        ,\n        output logic             oe_cam_hsync_o       ,\n        output logic             oe_cam_data0_o       ,\n        output logic             oe_cam_data1_o       ,\n        output logic             oe_cam_data2_o       ,\n        output logic             oe_cam_data3_o       ,\n        output logic             oe_cam_data4_o       ,\n        output logic             oe_cam_data5_o       ,\n        output logic             oe_cam_data6_o       ,\n        output logic             oe_cam_data7_o       ,\n        output logic             oe_cam_vsync_o       ,\n        output logic             oe_i2c0_sda_o        ,\n        output logic             oe_i2c0_scl_o        ,\n        output logic             oe_i2s0_sck_o        ,\n        output logic             oe_i2s0_ws_o         ,\n        output logic             oe_i2s0_sdi_o        ,\n        output logic             oe_i2s1_sdi_o\n    );\n\n    logic        s_test_clk;\n\n    logic        s_rtc_int;\n    logic        s_gpio_wake;\n    logic        s_rstn_sync;\n    logic        s_rstn;\n\n\n    //**********************************************************\n    //*** GPIO CONFIGURATIONS **********************************\n    //**********************************************************\n\n   logic [31:0][5:0] s_gpio_cfg;\n\n   genvar i,j;\n\n    pad_control #(\n        .N_UART ( N_UART ),\n        .N_SPI  ( N_SPI  ),\n        .N_I2C  ( N_I2C  )\n    ) pad_control_i (\n\n        //********************************************************************//\n        //*** PERIPHERALS SIGNALS ********************************************//\n        //********************************************************************//\n        .pad_mux_i             ( pad_mux_i             ),\n        .pad_cfg_i             ( pad_cfg_i             ),\n        .pad_cfg_o             ( pad_cfg_o             ),\n\n        .gpio_out_i            ( gpio_out_i            ),\n        .gpio_in_o             ( gpio_in_o             ),\n        .gpio_dir_i            ( gpio_dir_i            ),\n        .gpio_cfg_i            ( s_gpio_cfg            ),\n\n        .uart_tx_i             ( uart_tx_i             ),\n        .uart_rx_o             ( uart_rx_o             ),\n\n        .i2c_scl_out_i         ( i2c_scl_out_i         ),\n        .i2c_scl_in_o          ( i2c_scl_in_o          ),\n        .i2c_scl_oe_i          ( i2c_scl_oe_i          ),\n        .i2c_sda_out_i         ( i2c_sda_out_i         ),\n        .i2c_sda_in_o          ( i2c_sda_in_o          ),\n        .i2c_sda_oe_i          ( i2c_sda_oe_i          ),\n\n        .i2s_slave_sd0_o       ( i2s_slave_sd0_o       ),\n        .i2s_slave_sd1_o       ( i2s_slave_sd1_o       ),\n        .i2s_slave_ws_o        ( i2s_slave_ws_o        ),\n        .i2s_slave_ws_i        ( i2s_slave_ws_i        ),\n        .i2s_slave_ws_oe       ( i2s_slave_ws_oe       ),\n        .i2s_slave_sck_o       ( i2s_slave_sck_o       ),\n        .i2s_slave_sck_i       ( i2s_slave_sck_i       ),\n        .i2s_slave_sck_oe      ( i2s_slave_sck_oe      ),\n\n        .spi_clk_i             ( spi_clk_i             ),\n        .spi_csn_i             ( spi_csn_i             ),\n        .spi_oen_i             ( spi_oen_i             ),\n        .spi_sdo_i             ( spi_sdo_i             ),\n        .spi_sdi_o             ( spi_sdi_o             ),\n\n        .sdio_clk_i            ( sdio_clk_i            ),\n        .sdio_cmd_i            ( sdio_cmd_i            ),\n        .sdio_cmd_o            ( sdio_cmd_o            ),\n        .sdio_cmd_oen_i        ( sdio_cmd_oen_i        ),\n        .sdio_data_i           ( sdio_data_i           ),\n        .sdio_data_o           ( sdio_data_o           ),\n        .sdio_data_oen_i       ( sdio_data_oen_i       ),\n\n        .cam_pclk_o            ( cam_pclk_o            ),\n        .cam_data_o            ( cam_data_o            ),\n        .cam_hsync_o           ( cam_hsync_o           ),\n        .cam_vsync_o           ( cam_vsync_o           ),\n\n        .timer0_i              ( timer0_i              ),\n        .timer1_i              ( timer1_i              ),\n        .timer2_i              ( timer2_i              ),\n        .timer3_i              ( timer3_i              ),\n\n        .out_spim_sdio0_o      ( out_spim_sdio0_o      ),\n        .out_spim_sdio1_o      ( out_spim_sdio1_o      ),\n        .out_spim_sdio2_o      ( out_spim_sdio2_o      ),\n        .out_spim_sdio3_o      ( out_spim_sdio3_o      ),\n        .out_spim_csn0_o       ( out_spim_csn0_o       ),\n        .out_spim_csn1_o       ( out_spim_csn1_o       ),\n        .out_spim_sck_o        ( out_spim_sck_o        ),\n        .out_sdio_clk_o        ( out_sdio_clk_o        ),\n        .out_sdio_cmd_o        ( out_sdio_cmd_o        ),\n        .out_sdio_data0_o      ( out_sdio_data0_o      ),\n        .out_sdio_data1_o      ( out_sdio_data1_o      ),\n        .out_sdio_data2_o      ( out_sdio_data2_o      ),\n        .out_sdio_data3_o      ( out_sdio_data3_o      ),\n        .out_uart_rx_o         ( out_uart_rx_o         ),\n        .out_uart_tx_o         ( out_uart_tx_o         ),\n        .out_cam_pclk_o        ( out_cam_pclk_o        ),\n        .out_cam_hsync_o       ( out_cam_hsync_o       ),\n        .out_cam_data0_o       ( out_cam_data0_o       ),\n        .out_cam_data1_o       ( out_cam_data1_o       ),\n        .out_cam_data2_o       ( out_cam_data2_o       ),\n        .out_cam_data3_o       ( out_cam_data3_o       ),\n        .out_cam_data4_o       ( out_cam_data4_o       ),\n        .out_cam_data5_o       ( out_cam_data5_o       ),\n        .out_cam_data6_o       ( out_cam_data6_o       ),\n        .out_cam_data7_o       ( out_cam_data7_o       ),\n        .out_cam_vsync_o       ( out_cam_vsync_o       ),\n        .out_i2c0_sda_o        ( out_i2c0_sda_o        ),\n        .out_i2c0_scl_o        ( out_i2c0_scl_o        ),\n        .out_i2s0_sck_o        ( out_i2s0_sck_o        ),\n        .out_i2s0_ws_o         ( out_i2s0_ws_o         ),\n        .out_i2s0_sdi_o        ( out_i2s0_sdi_o        ),\n        .out_i2s1_sdi_o        ( out_i2s1_sdi_o        ),\n\n        .in_spim_sdio0_i       ( in_spim_sdio0_i       ),\n        .in_spim_sdio1_i       ( in_spim_sdio1_i       ),\n        .in_spim_sdio2_i       ( in_spim_sdio2_i       ),\n        .in_spim_sdio3_i       ( in_spim_sdio3_i       ),\n        .in_spim_csn0_i        ( in_spim_csn0_i        ),\n        .in_spim_csn1_i        ( in_spim_csn1_i        ),\n        .in_spim_sck_i         ( in_spim_sck_i         ),\n        .in_sdio_clk_i         ( in_sdio_clk_i         ),\n        .in_sdio_cmd_i         ( in_sdio_cmd_i         ),\n        .in_sdio_data0_i       ( in_sdio_data0_i       ),\n        .in_sdio_data1_i       ( in_sdio_data1_i       ),\n        .in_sdio_data2_i       ( in_sdio_data2_i       ),\n        .in_sdio_data3_i       ( in_sdio_data3_i       ),\n        .in_uart_rx_i          ( in_uart_rx_i          ),\n        .in_uart_tx_i          ( in_uart_tx_i          ),\n        .in_cam_pclk_i         ( in_cam_pclk_i         ),\n        .in_cam_hsync_i        ( in_cam_hsync_i        ),\n        .in_cam_data0_i        ( in_cam_data0_i        ),\n        .in_cam_data1_i        ( in_cam_data1_i        ),\n        .in_cam_data2_i        ( in_cam_data2_i        ),\n        .in_cam_data3_i        ( in_cam_data3_i        ),\n        .in_cam_data4_i        ( in_cam_data4_i        ),\n        .in_cam_data5_i        ( in_cam_data5_i        ),\n        .in_cam_data6_i        ( in_cam_data6_i        ),\n        .in_cam_data7_i        ( in_cam_data7_i        ),\n        .in_cam_vsync_i        ( in_cam_vsync_i        ),\n        .in_i2c0_sda_i         ( in_i2c0_sda_i         ),\n        .in_i2c0_scl_i         ( in_i2c0_scl_i         ),\n        .in_i2s0_sck_i         ( in_i2s0_sck_i         ),\n        .in_i2s0_ws_i          ( in_i2s0_ws_i          ),\n        .in_i2s0_sdi_i         ( in_i2s0_sdi_i         ),\n        .in_i2s1_sdi_i         ( in_i2s1_sdi_i         ),\n\n        .oe_spim_sdio0_o       ( oe_spim_sdio0_o       ),\n        .oe_spim_sdio1_o       ( oe_spim_sdio1_o       ),\n        .oe_spim_sdio2_o       ( oe_spim_sdio2_o       ),\n        .oe_spim_sdio3_o       ( oe_spim_sdio3_o       ),\n        .oe_spim_csn0_o        ( oe_spim_csn0_o        ),\n        .oe_spim_csn1_o        ( oe_spim_csn1_o        ),\n        .oe_spim_sck_o         ( oe_spim_sck_o         ),\n        .oe_sdio_clk_o         ( oe_sdio_clk_o         ),\n        .oe_sdio_cmd_o         ( oe_sdio_cmd_o         ),\n        .oe_sdio_data0_o       ( oe_sdio_data0_o       ),\n        .oe_sdio_data1_o       ( oe_sdio_data1_o       ),\n        .oe_sdio_data2_o       ( oe_sdio_data2_o       ),\n        .oe_sdio_data3_o       ( oe_sdio_data3_o       ),\n        .oe_uart_rx_o          ( oe_uart_rx_o          ),\n        .oe_uart_tx_o          ( oe_uart_tx_o          ),\n        .oe_cam_pclk_o         ( oe_cam_pclk_o         ),\n        .oe_cam_hsync_o        ( oe_cam_hsync_o        ),\n        .oe_cam_data0_o        ( oe_cam_data0_o        ),\n        .oe_cam_data1_o        ( oe_cam_data1_o        ),\n        .oe_cam_data2_o        ( oe_cam_data2_o        ),\n        .oe_cam_data3_o        ( oe_cam_data3_o        ),\n        .oe_cam_data4_o        ( oe_cam_data4_o        ),\n        .oe_cam_data5_o        ( oe_cam_data5_o        ),\n        .oe_cam_data6_o        ( oe_cam_data6_o        ),\n        .oe_cam_data7_o        ( oe_cam_data7_o        ),\n        .oe_cam_vsync_o        ( oe_cam_vsync_o        ),\n        .oe_i2c0_sda_o         ( oe_i2c0_sda_o         ),\n        .oe_i2c0_scl_o         ( oe_i2c0_scl_o         ),\n        .oe_i2s0_sck_o         ( oe_i2s0_sck_o         ),\n        .oe_i2s0_ws_o          ( oe_i2s0_ws_o          ),\n        .oe_i2s0_sdi_o         ( oe_i2s0_sdi_o         ),\n        .oe_i2s1_sdi_o         ( oe_i2s1_sdi_o         ),\n\n        .*\n    );\n\n\n`ifndef PULP_FPGA_EMUL\n    rstgen i_rstgen\n    (\n        .clk_i       ( ref_clk_i   ),\n        .rst_ni      ( s_rstn      ),\n        .test_mode_i ( test_mode_o ),\n        .rst_no      ( s_rstn_sync ),  //to be used by logic clocked with ref clock in AO domain\n        .init_no     (             )  //not used\n    );\n\n  assign slow_clk_o = ref_clk_i;\n\n`else\n  assign s_rstn_sync = s_rstn;\n  //Don't use the supplied clock directly for the FPGA target. On some boards\n  //the reference clock is a very fast (e.g. 200MHz) clock that cannot be used\n  //directly as the \"slow_clk\". Therefore we slow it down if a FPGA/board\n  //dependent module fpga_slow_clk_gen. Dividing the fast reference clock\n  //internally instead of doing so in the toplevel prevents unecessary clock\n  //division just to generate a faster clock once again in the SoC and\n  //Peripheral clock PLLs in soc_domain.sv. Instead all PLL use directly the\n  //board reference clock as input.\n\n  fpga_slow_clk_gen i_slow_clk_gen\n    (\n     .rst_ni(s_rstn_sync),\n     .ref_clk_i(ref_clk_i),\n     .slow_clk_o(slow_clk_o)\n     );\n`endif\n\n\n    assign s_rstn          = rst_ni;\n    assign rst_no          = s_rstn;\n\n    assign test_clk_o      = 1'b0;\n    assign dft_cg_enable_o = 1'b0;\n    assign test_mode_o     = 1'b0;\n    assign mode_select_o   = 1'b0;\n\n    //********************************************************\n    //*** PAD AND GPIO CONFIGURATION SIGNALS PACK ************\n    //****"}
{"text": "****************************************************\n\n    generate\n       for (i=0; i<32; i++)\n\t begin : GEN_GPIO_CFG_I\n\t    for (j=0; j<6; j++)\n\t      begin : GEN_GPIO_CFG_J\n\t\t assign s_gpio_cfg[i][j] = gpio_cfg_i[j+6*i];\n\t      end\n\t end\n    endgenerate\n\nendmodule // safe_domain\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n\n// NOTE: Safe regs will be mapped starting from BASEADDR+0x100.\n//       Have a look in apb_soc_ctrl for details (7th address bit is used\n//       to dispatch reg access req between safe_domain_reg_if and\n//       apb_soc_ctrl)\n\n// PMU REGISTERS\n`define REG_RAR         6'b000000 //BASEADDR+0x100\n`define REG_SLEEP_CTRL  6'b000001 //BASEADDR+0x104\n`define REG_NOTUSED     6'b000010 //BASEADDR+0x108\n`define REG_PGCFG       6'b000011 //BASEADDR+0x10C\n\n// PAD MUXING\n\n`define REG_SLEEPPADCFG0 6'b010100 //BASEADDR+0x150 sets the pad sleep mode for pins  0 (bits [1:0]) to 15 (bits [31:30]) BITS 0 = OUTPUT ENABLE, BITS 1 = OUTPUT DATA\n`define REG_SLEEPPADCFG1 6'b010101 //BASEADDR+0x154 sets the pad sleep mode for pins 16 (bits [1:0]) to 31 (bits [31:30]) BITS 0 = OUTPUT ENABLE, BITS 1 = OUTPUT DATA\n`define REG_SLEEPPADCFG2 6'b010110 //BASEADDR+0x158 sets the pad sleep mode for pins 32 (bits [1:0]) to 47 (bits [31:30]) BITS 0 = OUTPUT ENABLE, BITS 1 = OUTPUT DATA\n`define REG_SLEEPPADCFG3 6'b010111 //BASEADDR+0x15C sets the pad sleep mode for pins 48 (bits [1:0]) to 63 (bits [31:30]) BITS 0 = OUTPUT ENABLE, BITS 1 = OUTPUT DATA\n`define REG_PADSLEEP     6'b011000 //BASEADDR+0x160 sets the pad sleep mode on (1= on, 0= off)\n\n`define REG_RTC_CLOCK   6'b110100 //BASEADDR+0x1D0\n`define REG_RTC_ALARM   6'b110101 //BASEADDR+0x1D4\n`define REG_RTC_TIMER   6'b110110 //BASEADDR+0x1D8\n`define REG_RTC_DATE    6'b110111 //BASEADDR+0x1DC\n\n\nmodule safe_domain_reg_if\n  (\n   input  logic             clk_i,\n   input  logic             rstn_i,\n\n   output logic      [11:0] cfg_mem_ret_o,\n   output logic       [1:0] cfg_fll_ret_o,\n\n   output logic       [4:0] cfg_rar_nv_volt_o,\n   output logic       [4:0] cfg_rar_mv_volt_o,\n   output logic       [4:0] cfg_rar_lv_volt_o,\n   output logic       [4:0] cfg_rar_rv_volt_o,\n\n   output logic       [1:0] cfg_wakeup_o,\n\n   input  logic      [31:0] wake_gpio_i,\n   output logic             wake_event_o,\n\n   output logic             boot_l2_o,\n\n   output logic             rtc_event_o,\n\n   output logic             pad_sleep_mode_o,\n   output logic [63:0][1:0] pad_sleep_cfg_o,\n\n   input  logic             reg_if_req_i,\n   input  logic             reg_if_wrn_i,\n   input  logic       [5:0] reg_if_add_i,\n   input  logic      [31:0] reg_if_wdata_i,\n   output logic             reg_if_ack_o,\n   output logic      [31:0] reg_if_rdata_o,\n\n   output logic      [31:0] pmu_sleep_control_o\n   );\n\n   logic  [4:0] r_rar_nv_volt;\n   logic  [4:0] r_rar_mv_volt;\n   logic  [4:0] r_rar_lv_volt;\n   logic  [4:0] r_rar_rv_volt;\n\n   logic  [4:0] r_extwake_sel;\n   logic \t      r_extwake_en;\n   logic  [1:0] r_extwake_type;\n   logic \t      r_extevent;\n   logic  [2:0] r_extevent_sync;\n   logic  [2:0] r_reboot;\n\n   logic        s_extwake_rise;\n   logic        s_extwake_fall;\n   logic        s_extwake_in;\n\n   logic  [1:0] r_wakeup;\n   logic        r_cluster_wake;\n\n   logic [13:0] r_cfg_ret;\n\n   logic    \t\ts_rise;\n   logic \t\t    s_fall;\n\n   logic [63:0] r_sleep_pad_cfg0;\n   logic [63:0] r_sleep_pad_cfg1;\n   logic        r_pad_sleep;\n\n   logic \t\t    s_req_sync;\n\n   logic        r_boot_l2;\n\n   logic [31:0] s_pmu_sleep_control;\n\n   logic [21:0] s_rtc_clock;\n   logic [21:0] s_rtc_alarm;\n   logic [31:0] s_rtc_date;\n   logic [16:0] s_rtc_timer;\n\n   logic        s_rtc_date_select;\n   logic        s_rtc_clock_select;\n   logic        s_rtc_timer_select;\n   logic        s_rtc_alarm_select;\n\n   logic        s_rtc_date_update;\n   logic        s_rtc_clock_update;\n   logic        s_rtc_timer_update;\n   logic        s_rtc_alarm_update;\n\n   logic        s_rtc_update_day;\n\n\n   pulp_sync_wedge i_sync\n     (\n      .clk_i(clk_i),\n      .rstn_i(rstn_i),\n      .en_i(1'b1),\n      .serial_i(reg_if_req_i),\n      .r_edge_o(s_rise),\n      .f_edge_o(s_fall),\n      .serial_o(s_req_sync)\n      );\n\n   assign cfg_rar_nv_volt_o           = r_rar_nv_volt;\n   assign cfg_rar_mv_volt_o           = r_rar_mv_volt;\n   assign cfg_rar_lv_volt_o           = r_rar_lv_volt;\n   assign cfg_rar_rv_volt_o           = r_rar_rv_volt;\n\n   assign cfg_mem_ret_o               = r_cfg_ret[11:0];\n   assign cfg_fll_ret_o               = r_cfg_ret[13:12];\n\n   assign wake_event_o                = r_extevent;\n   assign cfg_wakeup_o                = r_wakeup;\n\n   assign boot_l2_o                   = r_boot_l2;\n\n   always_ff @(posedge clk_i, negedge rstn_i)\n     begin\n\tif(!rstn_i)\n\t     reg_if_ack_o  <= 1'b0;\n\telse if (s_rise)\n\t  \treg_if_ack_o <= 1'b1;\n\telse if (s_fall)\n\t\treg_if_ack_o <= 1'b0;\n   end\n\n   assign s_extwake_in   = wake_gpio_i[r_extwake_sel];\n   assign s_extwake_rise =  r_extevent_sync[1] & ~r_extevent_sync[0];\n   assign s_extwake_fall = ~r_extevent_sync[1] &  r_extevent_sync[0];\n\n   assign s_rtc_date_select  = reg_if_add_i == `REG_RTC_DATE;\n   assign s_rtc_clock_select = reg_if_add_i == `REG_RTC_CLOCK;\n   assign s_rtc_timer_select = reg_if_add_i == `REG_RTC_TIMER;\n   assign s_rtc_alarm_select = reg_if_add_i == `REG_RTC_ALARM;\n\n   assign s_rtc_date_update  = s_rtc_date_select & (s_rise & ~reg_if_wrn_i);\n   assign s_rtc_alarm_update = s_rtc_alarm_select & (s_rise & ~reg_if_wrn_i);\n   assign s_rtc_clock_update = s_rtc_clock_select & (s_rise & ~reg_if_wrn_i);\n   assign s_rtc_timer_update = s_rtc_timer_select & (s_rise & ~reg_if_wrn_i);\n\n\trtc_clock i_rtc_clock (\n\t\t.clk_i           ( clk_i                 ),\n\t\t.rstn_i          ( rstn_i                ),\n\t\t.clock_update_i  ( s_rtc_clock_update    ),\n\t\t.clock_o         ( s_rtc_clock           ),\n\t\t.clock_i         ( reg_if_wdata_i[21:0]  ),\n    .init_sec_cnt_i  ( reg_if_wdata_i[31:22] ),\n\t\t.timer_update_i  ( s_rtc_timer_update    ),\n\t\t.timer_enable_i  ( reg_if_wdata_i[31]    ),\n    .timer_retrig_i  ( reg_if_wdata_i[30]    ),\n\t\t.timer_target_i  ( reg_if_wdata_i[16:0]  ),\n\t\t.timer_value_o   ( s_rtc_timer           ),\n\t\t.alarm_enable_i  ( reg_if_wdata_i[31]    ),\n\t\t.alarm_update_i  ( s_rtc_alarm_update    ),\n\t\t.alarm_clock_i   ( reg_if_wdata_i[21:0]  ),\n\t\t.alarm_clock_o   ( s_rtc_alarm           ),\n\t\t.event_o         ( rtc_event_o           ),\n\t\t.update_day_o    ( s_rtc_update_day      )\n\t);\n\n\trtc_date i_rtc_date (\n\t\t.clk_i          ( clk_i                ),\n\t\t.rstn_i         ( rstn_i               ),\n\t\t.date_update_i  ( s_rtc_date_update    ),\n\t\t.date_i         ( reg_if_wdata_i[31:0] ),\n\t\t.date_o         ( s_rtc_date           ),\n\t\t.new_day_i      ( s_rtc_update_day     )\n\t);\n\n   always_ff @(posedge clk_i, negedge rstn_i)\n     begin\n\tif(!rstn_i)\n\t  begin\n\t     r_cfg_ret              <= 13'h0;\n\t     r_rar_nv_volt          <= 5'h0D; //1.2V\n\t     r_rar_mv_volt          <= 5'h09; //1.0V\n\t     r_rar_lv_volt          <= 5'h09; //1.0V\n\t     r_rar_rv_volt          <= 5'h05; //0.8V\n       r_sleep_pad_cfg0       <= '0;\n       r_sleep_pad_cfg1       <= '0;\n       r_pad_sleep            <= '0;\n\t     r_extwake_sel          <= '0;\n\t     r_extwake_en           <= '0;\n\t     r_extwake_type         <= '0;\n\t     r_extevent             <= 0;\n\t     r_extevent_sync        <= 0;\n\t     r_wakeup               <= 0;\n\t     r_cluster_wake         <= 1'b0;\n\t     r_boot_l2              <= 0;\n\t     r_reboot               <= 2'b00;\n\t  end\n\telse if (s_rise & ~reg_if_wrn_i)\n\t  begin\n\t     case(reg_if_add_i)\n\t       `REG_RAR:\n\t  \t begin\n\t\t    r_rar_nv_volt <= reg_if_wdata_i[4:0];\n\t\t    r_rar_mv_volt <= reg_if_wdata_i[12:8];\n\t\t    r_rar_lv_volt <= reg_if_wdata_i[20:16];\n\t\t    r_rar_rv_volt <= reg_if_wdata_i[28:24];\n\t  \t end\n\t       `REG_SLEEP_CTRL:\n\t  \t begin\n        r_cfg_ret[13:12] <= reg_if_wdata_i[1:0];\n        r_cfg_ret[11]    <= reg_if_wdata_i[2];\n\t\t    r_extwake_sel    <= reg_if_wdata_i[10:6];\n\t\t    r_extwake_type   <= reg_if_wdata_i[12:11];\n\t\t    r_extwake_en     <= reg_if_wdata_i[13];\n\t\t    r_wakeup         <= reg_if_wdata_i[15:14];\n\t\t    r_boot_l2        <= reg_if_wdata_i[16];\n\t\t    // pmu extint readonly [17]\n\t\t    r_reboot         <= reg_if_wdata_i[19:18];\n\t\t    r_cluster_wake   <= reg_if_wdata_i[20];\n        r_cfg_ret[10:0] <= reg_if_wdata_i[31:21];\n\t  \t end\n\n           `REG_SLEEPPADCFG0:\n         for (int i=0;i<16;i++)\n           begin\n              r_sleep_pad_cfg0[i] <= reg_if_wdata_i[i*2];\n              r_sleep_pad_cfg1[i] <= reg_if_wdata_i[i*2+1];\n           end\n           `REG_SLEEPPADCFG1:\n         for (int i=0;i<16;i++)\n           begin\n              r_sleep_pad_cfg0[16+i] <= reg_if_wdata_i[i*2];\n              r_sleep_pad_cfg1[16+i] <= reg_if_wdata_i[i*2+1];\n           end\n           `REG_SLEEPPADCFG2:\n         for (int i=0;i<16;i++)\n           begin\n              r_sleep_pad_cfg0[32+i] <= reg_if_wdata_i[i*2];\n              r_sleep_pad_cfg1[32+i] <= reg_if_wdata_i[i*2+1];\n           end\n           `REG_SLEEPPADCFG3:\n         for (int i=0;i<16;i++)\n           begin\n              r_sleep_pad_cfg0[48+i] <= reg_if_wdata_i[i*2];\n              r_sleep_pad_cfg1[48+i] <= reg_if_wdata_i[i*2+1];\n           end\n\n           `REG_PADSLEEP:\n         begin\n            r_pad_sleep          <= reg_if_wdata_i[0];\n         end\n\n\t     endcase\n\t  end\n\t  else if (s_rise & reg_if_wrn_i)\n\t  begin\n\t     case(reg_if_add_i)\n\t       `REG_SLEEP_CTRL:\n\t  \t begin\n\t  \t \tif (r_extevent)\n\t  \t \t\tr_extevent <= 1'b0;\n\t  \t end\n\t  \t endcase // reg_if_add_i\n\t  end\n\t  else\n\t  begin\n\t  \tif (r_extwake_en)\n\t  \tbegin\n\t  \t\tr_extevent_sync <= {s_extwake_in,r_extevent_sync[2:1]};\n\t  \t\tcase(r_extwake_type)\n\t  \t\t\t2'b00:\n\t  \t\t\t\tif(s_extwake_rise)      r_extevent <= 1'b1;\n\t  \t\t\t2'b01:\n\t  \t\t\t\tif(s_extwake_fall)      r_extevent <= 1'b1;\n\t  \t\t\t2'b10:\n\t  \t\t\t\tif(r_extevent_sync[0])  r_extevent <= 1'b1;\n\t  \t\t\t2'b11:\n\t  \t\t\t\tif(!r_extevent_sync[0]) r_extevent <= 1'b1;\n\t  \t\tendcase // r_extwake_sel\n\t  \tend\n\t  end\n     end\n\n   always_comb begin\n      case(reg_if_add_i)\n        `REG_RAR:\n          reg_if_rdata_o = {3'h0,r_rar_rv_volt,3'h0,r_rar_lv_volt,3'h0,r_rar_mv_volt,3'h0,r_rar_nv_volt};\n        `REG_SLEEP_CTRL:\n          reg_if_rdata_o = s_pmu_sleep_control;\n        `REG_SLEEPPADCFG0:\n                for (int i=0;i<16;i++)\n                  begin\n                     reg_if_rdata_o[i*2]   = r_sleep_pad_cfg0[i];\n                     reg_if_rdata_o[i*2+1] = r_sleep_pad_cfg1[i];\n                  end\n        `REG_SLEEPPADCFG1:\n                for (int i=0;i<16;i++)\n                  begin\n                     reg_if_rdata_o[i*2]   = r_sleep_pad_cfg0[16+i];\n                     reg_if_rdata_o[i*2+1] = r_sleep_pad_cfg1[16+i];\n                  end\n        `REG_SLEEPPADCFG2:\n                for (int i=0;i<16;i++)\n                  begin\n                     reg_if_rdata_o[i*2]   = r_sleep_pad_cfg0[32+i];\n                     reg_if_rdata_o[i*2+1] = r_sleep_pad_cfg1[32+i];\n                  end\n        `REG_SLEEPPADCFG3:\n                for (int i=0;i<16;i++)\n                  begin\n                     reg_if_rdata_o[i*2]   = r_sleep_pad_cfg0[48+i];\n                     reg_if_rdata_o[i*2+1] = r_sleep_pad_cfg1[48+i];\n                  end\n        `REG_PADSLEEP:\n          reg_if_rdata_o = {31'h0,r_pad_sleep};\n\t\t`REG_RTC_DATE:\n\t\t  reg_if_rdata_o = s_rtc_date;\n\t\t`REG_RTC_CLOCK:\n\t\t  reg_if_rdata_o = s_rtc_clock;\n\t\t`REG_RTC_TIMER:\n\t\t  reg_if_rdata_o = s_rtc_timer;\n\t\t`REG_RTC_ALARM:\n\t\t  reg_if_rdata_o = s_rtc_alarm;\n\t\tdefault:\n\t\t  reg_if_rdata_o = 'h0;\n\t  endcase\n   end\n\n   always_comb begin\n      for (int i=0;i<64;i++)\n        begin\n           pad_sleep_cfg_o[i][0]  = r_sleep_pad_cfg0[i];\n           pad_sleep_cfg_o[i][1]  = r_sleep_pad_cfg1[i];\n        end\n   end\n\n   assign pad_sleep_mode_o = r_pad_sleep;\n\n   assign s_pmu_sleep_control = {r_cfg_ret[10:0],r_cluster_wake,r_reboot,r_extevent,r_boot_l2,r_wakeup,r_extwake_en,r_extwake_type,r_extwake_sel,3'h0,r_cfg_ret[11],r_cfg_ret[13:12]};\n\n   assign pmu_sleep_control_o = s_pmu_sleep_control;\n\nendmodule // safe_domain_reg_if\n"}
{"text": "// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n`include \"pulp_soc_defines.sv\"\n\nmodule soc_domain #(\n    parameter CORE_TYPE            = 0,\n    parameter USE_FPU              = 1,\n    parameter USE_ZFINX            = 1,\n    parameter USE_HWPE             = 1,\n    parameter USE_CLUSTER_EVENT    = 1,\n    parameter SIM_STDOUT           = 1,\n    parameter NB_CL_CORES          = 8,\n    parameter AXI_ADDR_WIDTH       = 32,\n    parameter AXI_DATA_IN_WIDTH    = 64,\n    parameter AXI_DATA_OUT_WIDTH   = 32,\n    parameter AXI_ID_IN_WIDTH      = 4,\n    localparam AXI_ID_OUT_WIDTH    = pkg_soc_interconnect::AXI_ID_OUT_WIDTH, //Must be large enough to accomodate the additional\n                                                                  //bits for the axi XBAR ($clog2(nr_master), rightnow\n                                                                  //we have 9 masters 5 for fc_data, fc_instr, udma_rx,\n                                                                  //udma_tx, debug_access and 4 for the 64-bit\n                                                                  //cluster2soc axi plug\n    parameter AXI_USER_WIDTH       = 6,\n    parameter AXI_STRB_WIDTH_IN   = AXI_DATA_IN_WIDTH/8,\n    parameter AXI_STRB_WIDTH_OUT  = AXI_DATA_OUT_WIDTH/8,\n\n    parameter EVNT_WIDTH           = 8,\n    parameter CDC_FIFOS_LOG_DEPTH  = 3,\n\n    parameter int unsigned N_UART = 1,\n    parameter int unsigned N_SPI  = 1,\n    parameter int unsigned N_I2C  = 2,\n    localparam C2S_AW_WIDTH       = AXI_ID_IN_WIDTH+AXI_ADDR_WIDTH+AXI_USER_WIDTH+$bits(axi_pkg::len_t)+$bits(axi_pkg::size_t)+$bits(axi_pkg::burst_t)+$bits(axi_pkg::cache_t)+$bits(axi_pkg::prot_t)+$bits(axi_pkg::qos_t)+$bits(axi_pkg::region_t)+$bits(axi_pkg::atop_t)+1,\n    localparam C2S_W_WIDTH        = AXI_USER_WIDTH+AXI_STRB_WIDTH_IN+AXI_DATA_IN_WIDTH+1,\n    localparam C2S_R_WIDTH        = AXI_ID_IN_WIDTH+AXI_DATA_IN_WIDTH+AXI_USER_WIDTH+$bits(axi_pkg::resp_t)+1,\n    localparam C2S_B_WIDTH        = AXI_USER_WIDTH+AXI_ID_IN_WIDTH+$bits(axi_pkg::resp_t),\n    localparam C2S_AR_WIDTH       = AXI_ID_IN_WIDTH+AXI_ADDR_WIDTH+AXI_USER_WIDTH+$bits(axi_pkg::len_t)+$bits(axi_pkg::size_t)+$bits(axi_pkg::burst_t)+$bits(axi_pkg::cache_t)+$bits(axi_pkg::prot_t)+$bits(axi_pkg::qos_t)+$bits(axi_pkg::region_t)+1,\n    localparam S2C_AW_WIDTH       = AXI_ID_OUT_WIDTH+AXI_ADDR_WIDTH+AXI_USER_WIDTH+$bits(axi_pkg::len_t)+$bits(axi_pkg::size_t)+$bits(axi_pkg::burst_t)+$bits(axi_pkg::cache_t)+$bits(axi_pkg::prot_t)+$bits(axi_pkg::qos_t)+$bits(axi_pkg::region_t)+$bits(axi_pkg::atop_t)+1,\n    localparam S2C_W_WIDTH        = AXI_USER_WIDTH+AXI_STRB_WIDTH_OUT+AXI_DATA_OUT_WIDTH+1,\n    localparam S2C_R_WIDTH        = AXI_ID_OUT_WIDTH+AXI_DATA_OUT_WIDTH+AXI_USER_WIDTH+$bits(axi_pkg::resp_t)+1,\n    localparam S2C_B_WIDTH        = AXI_USER_WIDTH+AXI_ID_OUT_WIDTH+$bits(axi_pkg::resp_t),\n    localparam S2C_AR_WIDTH       = AXI_ID_OUT_WIDTH+AXI_ADDR_WIDTH+AXI_USER_WIDTH+$bits(axi_pkg::len_t)+$bits(axi_pkg::size_t)+$bits(axi_pkg::burst_t)+$bits(axi_pkg::cache_t)+$bits(axi_pkg::prot_t)+$bits(axi_pkg::qos_t)+$bits(axi_pkg::region_t)+1\n)(\n\n    input logic                           ref_clk_i,\n    input logic                           slow_clk_i,\n    input logic                           test_clk_i,\n\n    input logic                           rstn_glob_i,\n\n    input logic                           dft_test_mode_i,\n    input logic                           dft_cg_enable_i,\n\n    input logic                           mode_select_i,\n\n    input logic [1:0]                     bootsel_i,\n\n    input logic                           fc_fetch_en_valid_i,\n    input logic                           fc_fetch_en_i,\n\n    input logic                           jtag_tck_i,\n    input logic                           jtag_trst_ni,\n    input logic                           jtag_tms_i,\n    input logic                           jtag_tdi_i,\n    output logic                          jtag_tdo_o,\n\n    output logic [NB_CL_CORES-1:0]        cluster_dbg_irq_valid_o,\n\n    input logic [31:0]                    gpio_in_i,\n    output logic [31:0]                   gpio_out_o,\n    output logic [31:0]                   gpio_dir_o,\n    output logic [191:0]                  gpio_cfg_o,\n\n    output logic [127:0]                  pad_mux_o,\n    output logic [383:0]                  pad_cfg_o,\n\n    output logic                          uart_tx_o,\n    input logic                           uart_rx_i,\n\n    input logic                           cam_clk_i,\n    input logic [7:0]                     cam_data_i,\n    input logic                           cam_hsync_i,\n    input logic                           cam_vsync_i,\n\n    output logic [3:0]                    timer_ch0_o,\n    output logic [3:0]                    timer_ch1_o,\n    output logic [3:0]                    timer_ch2_o,\n    output logic [3:0]                    timer_ch3_o,\n\n    input logic [N_I2C-1:0]               i2c_scl_i,\n    output logic [N_I2C-1:0]              i2c_scl_o,\n    output logic [N_I2C-1:0]              i2c_scl_oe_o,\n    input logic [N_I2C-1:0]               i2c_sda_i,\n    output logic [N_I2C-1:0]              i2c_sda_o,\n    output logic [N_I2C-1:0]              i2c_sda_oe_o,\n\n    input logic                           i2s_slave_sd0_i,\n    input logic                           i2s_slave_sd1_i,\n    input logic                           i2s_slave_ws_i,\n    output logic                          i2s_slave_ws_o,\n    output logic                          i2s_slave_ws_oe,\n    input logic                           i2s_slave_sck_i,\n    output logic                          i2s_slave_sck_o,\n    output logic                          i2s_slave_sck_oe,\n\n    output logic [N_SPI-1:0]              spi_clk_o,\n    output logic [N_SPI-1:0][3:0]         spi_csn_o,\n    output logic [N_SPI-1:0][3:0]         spi_oen_o,\n    output logic [N_SPI-1:0][3:0]         spi_sdo_o,\n    input logic [N_SPI-1:0][3:0]          spi_sdi_i,\n\n    output logic                          sdio_clk_o,\n    output logic                          sdio_cmd_o,\n    input logic                           sdio_cmd_i,\n    output logic                          sdio_cmd_oen_o,\n    output logic [3:0]                    sdio_data_o,\n    input logic [3:0]                     sdio_data_i,\n    output logic [3:0]                    sdio_data_oen_o,\n\n    output logic [1:0]                    hyper_cs_no,\n    output logic                          hyper_ck_o,\n    output logic                          hyper_ck_no,\n    output logic [1:0]                    hyper_rwds_o,\n    input logic                           hyper_rwds_i,\n    output logic [1:0]                    hyper_rwds_oe_o,\n    input logic [15:0]                    hyper_dq_i,\n    output logic [15:0]                   hyper_dq_o,\n    output logic [1:0]                    hyper_dq_oe_o,\n    output logic                          hyper_reset_no,\n\n    // CLUSTER\n    output logic                          cluster_clk_o,\n    output logic                          cluster_rstn_o,\n    input logic                           cluster_busy_i,\n    output logic                          cluster_irq_o,\n\n    output logic                          cluster_rtc_o,\n    output logic                          cluster_fetch_enable_o,\n    output logic [63:0]                   cluster_boot_addr_o,\n    output logic                          cluster_test_en_o,\n    output logic                          cluster_pow_o,\n    output logic                          cluster_byp_o,\n      // AXI4 SLAVE\n    input logic [CDC_FIFOS_LOG_DEPTH:0]                        async_data_slave_aw_wptr_i,\n    input logic [2**CDC_FIFOS_LOG_DEPTH-1:0][C2S_AW_WIDTH-1:0] async_data_slave_aw_data_i,\n    output logic  [CDC_FIFOS_LOG_DEPTH:0]                      async_data_slave_aw_rptr_o,\n\n    // READ ADDRESS CHANNEL\n    input logic [CDC_FIFOS_LOG_DEPTH:0]                        async_data_slave_ar_wptr_i,\n    input logic [2**CDC_FIFOS_LOG_DEPTH-1:0][C2S_AR_WIDTH-1:0] async_data_slave_ar_data_i,\n    output logic [CDC_FIFOS_LOG_DEPTH:0]                       async_data_slave_ar_rptr_o,\n\n    // WRITE DATA CHANNEL\n    input logic [CDC_FIFOS_LOG_DEPTH:0]                        async_data_slave_w_wptr_i,\n    input logic [2**CDC_FIFOS_LOG_DEPTH-1:0][C2S_W_WIDTH-1:0]  async_data_slave_w_data_i,\n    output logic [CDC_FIFOS_LOG_DEPTH:0]                       async_data_slave_w_rptr_o,\n\n    // READ DATA CHANNEL\n    output logic [CDC_FIFOS_LOG_DEPTH:0]                        async_data_slave_r_wptr_o,\n    output logic [2**CDC_FIFOS_LOG_DEPTH-1:0][C2S_R_WIDTH-1:0]  async_data_slave_r_data_o,\n    input logic [CDC_FIFOS_LOG_DEPTH:0]                         async_data_slave_r_rptr_i,\n\n    // WRITE RESPONSE CHANNEL\n    output logic [CDC_FIFOS_LOG_DEPTH:0]                        async_data_slave_b_wptr_o,\n    output logic [2**CDC_FIFOS_LOG_DEPTH-1:0][C2S_B_WIDTH-1:0]  async_data_slave_b_data_o,\n    input logic [CDC_FIFOS_LOG_DEPTH:0]                         async_data_slave_b_rptr_i,\n\n    // AXI4 MASTER\n    output logic [CDC_FIFOS_LOG_DEPTH:0]                        async_data_master_aw_wptr_o,\n    output logic [2**CDC_FIFOS_LOG_DEPTH-1:0][S2C_AW_WIDTH-1:0] async_data_master_aw_data_o,\n    input logic  [CDC_FIFOS_LOG_DEPTH:0]                        async_data_master_aw_rptr_i,\n\n    // READ ADDRESS CHANNEL\n    output logic [CDC_FIFOS_LOG_DEPTH:0]                        async_data_master_ar_wptr_o,\n    output logic [2**CDC_FIFOS_LOG_DEPTH-1:0][S2C_AR_WIDTH-1:0] async_data_master_ar_data_o,\n    input logic [CDC_FIFOS_LOG_DEPTH:0]                         async_data_master_ar_rptr_i,\n\n    // WRITE DATA CHANNEL\n    output logic [CDC_FIFOS_LOG_DEPTH:0]                        async_data_master_w_wptr_o,\n    output logic [2**CDC_FIFOS_LOG_DEPTH-1:0][S2C_W_WIDTH-1:0]  async_data_master_w_data_o,\n    input logic [CDC_FIFOS_LOG_DEPTH:0]                         async_data_master_w_rptr_i,\n\n    // READ DATA CHANNEL\n    input logic [CDC_FIFOS_LOG_DEPTH:0]                        async_data_master_r_wptr_i,\n    input logic [2**CDC_FIFOS_LOG_DEPTH-1:0][S2C_R_WIDTH-1:0]  async_data_master_r_data_i,\n    output logic [CDC_FIFOS_LOG_DEPTH:0]                       async_data_master_r_rptr_o,\n\n    // WRITE RESPONSE CHANNEL\n    input logic [CDC_FIFOS_LOG_DEPTH:0]                        async_data_master_b_wptr_i,\n    input logic [2**CDC_FIFOS_LOG_DEPTH-1:0][S2C_B_WIDTH-1:0]  async_data_master_b_data_i,\n    output logic [CDC_FIFOS_LOG_DEPTH:0]                       async_data_master_b_rptr_o,\n\n    // EVENT BUS\n    output logic [CDC_FIFOS_LOG_DEPTH:0]                       async_cluster_events_wptr_o,\n    input logic [CDC_FIFOS_LOG_DEPTH:0]                        async_cluster_events_rptr_i,\n    output logic [EVNT_WIDTH-1:0][2**CDC_FIFOS_LOG_DEPTH-1:0]  async_cluster_events_data_o,\n\n    output logic                          dma_pe_evt_ack_o,\n    input logic                           dma_pe_evt_valid_i,\n\n    output logic                          dma_pe_irq_ack_o,\n    input logic                           dma_pe_irq_valid_i,\n\n    output logic                          pf_evt_ack_o,\n    input logic                           pf_evt_valid_i\n\n    /*AUTOINOUT*/\n);\n\n\n    pulp_soc #(\n      .CORE_TYPE           ( CORE_TYPE           ),\n      .USE_FPU             ( USE_FPU             ),\n      .USE_HWPE            ( USE_HWPE            ),\n      .USE_CLUSTER_EVENT   ( USE_CLUSTER_EVENT   ),\n      .SIM_STDOUT          ( SIM_STDOUT          ),\n      .AXI_ADDR_WIDTH      ( AXI_ADDR_WIDTH      ),\n      .AXI_DATA_IN_WIDTH   ( AXI_DATA_IN_WIDTH   ),\n      .AXI_DATA_OUT_WIDTH  ( AXI_DATA_OUT_WIDTH  ),\n      .AXI_ID_IN_WIDTH     ( AXI_ID_IN_WIDTH     ),\n      .AXI_USER_WIDTH      ( AXI_USER_WIDTH      ),\n      .AXI_STRB_WIDTH_IN   ( AXI_STRB_WIDTH_IN   ),\n      .AXI_STRB_WIDTH_OUT  ( AXI_STRB_WIDTH_OUT  ),\n      .CDC_FIFOS_LOG_DEPTH ( CDC_FIFOS_LOG_DEPTH ),\n      .EVNT_WIDTH          ( EVNT_WIDTH          ),\n      .NB_CORES            ( NB_CL_CORES         ),\n      .NGPIO               ( 32                  ),\n      .NPAD                ( 64                  ),\n      .NBIT_PADCFG         ( 6                   ),\n      .NBIT_PADMUX         ( 2                   ),\n      .N_UART              ( N_UART              ),\n      .N_SPI               ( N_SPI               ),\n      .N_I2C               ( N_I2C               ),\n      .USE_ZFINX           ( USE_ZFINX           )\n    ) pulp_soc_i (\n      .ref_clk_i,\n      .slow_clk_i,\n      .test_clk_i,\n      .rstn_glob_i,\n      .dft_test_mode_i,\n      .dft_cg_enable_i,\n      .mode_select_i,\n      .boot_l2_i(1'b0),\n      .bootsel_i,\n      .fc_fetch_en_valid_i,\n      .fc_fetch_en_i,\n      .cluster_rtc_o,\n      .cluster_fetch_enable_o,\n      .cluster_boot_addr_o,\n      .cluster_test_en_o,\n      .cluster_pow_o,\n      .cluster_byp_o,\n      .cluster_rstn_o,\n      .cluster_irq_o,\n      .async_data_slave_aw_wptr_i,\n      .async_data_slave_aw_data_i,\n      .async_data_slave_aw_rptr_o,\n      .async_data_slave_ar_wptr_i,\n      .async_data_slave_ar_data_i,\n      .async_data_slave_ar_rptr_o,\n      .async_data_slave_w_wptr_i,\n      .async_data_slave_w_data_i,\n      .async_data_slave_w_rptr_o,\n      .async_data_slave_r_wptr_o,\n      .async_data_slave_r_data_o,\n      .async_data_slave_r_rptr_i,\n      .async_data_slave_b_wptr_o,\n      .async_data_slave_b_data_o,\n      .async_data_slave_b_rptr_i,\n      .async_data_master_aw_wptr_o,\n      .async_data_master_aw_data_o,\n      .async_data_master_aw_rptr_i,\n      .async_data_master_ar_wptr_o,\n      .async_data_master_ar_data_o,\n      .async_data_master_ar_rptr_i,\n      .async_data_master_w_wptr_o,\n      .async_data_master_w_data_o,\n      .async_data_master_w_rptr_i,\n      .async_data_master_r_wptr_i,\n      .async_data_master_r_data_i,\n      .async_data_master_r_rptr_o,\n      .async_data_master_b_wptr_i,\n      .async_data_master_b_data_i,\n      .async_data_master_b_rptr_o,\n      .async_cluster_events_wptr_o,\n      .async_cluster_events_rptr_i,\n      .async_cluster_events_data_o,\n      .cluster_clk_o,\n      .cluster_busy_i,\n      .dma_pe_evt_ack_o,\n      .dma_pe_evt_valid_i,\n      .dma_pe_irq_ack_o,\n      .dma_pe_irq_valid_i,\n      .pf_evt_ack_o,\n      .pf_evt_valid_i,\n      .pad_mux_o,\n      .pad_cfg_o,\n      .gpio_in_i,\n      .gpio_out_o,\n      .gpio_dir_o,\n      .gpio_cfg_o,\n      .uart_tx_o,\n      .uart_rx_i,\n      .cam_clk_i,\n      .cam_data_i,\n      .cam_hsync_i,\n      .cam_vsync_i,\n      .timer_ch0_o,\n      .timer_ch1_o,\n      .timer_ch2_o,\n      .timer_ch3_o,\n\n      .i2c_scl_i,\n      .i2c_scl_o,\n      .i2c_scl_oe_o,\n      .i2c_sda_i,\n      .i2c_sda_o,\n      .i2c_sda_oe_o,\n\n      .i2s_slave_sd0_i,\n      .i2s_slave_sd1_i,\n      .i2s_slave_ws_i,\n      .i2s_slave_ws_o,\n      .i2s_slave_ws_oe,\n      .i2s_slave_sck_i,\n      .i2s_slave_sck_o,\n      .i2s_slave_sck_oe,\n\n      .spi_clk_o,\n      .spi_csn_o,\n      .spi_oen_o,\n      .spi_sdo_o,\n      .spi_sdi_i,\n\n      .sdio_clk_o,\n      .sdio_cmd_o,\n      .sdio_cmd_i,\n      .sdio_cmd_oen_o,\n      .sdio_data_o,\n      .sdio_data_i,\n      .sdio_data_oen_o,\n\n      .hyper_cs_no,\n      .hyper_ck_o,\n      .hyper_ck_no,\n      .hyper_rwds_o,\n      .hyper_rwds_i,\n      .hyper_rwds_oe_o,\n      .hyper_dq_i,\n      .hyper_dq_o,\n      .hyper_dq_oe_o,\n      .hyper_reset_no,\n\n      .jtag_tck_i,\n      .jtag_trst_ni,\n      .jtag_tms_i,\n      .jtag_tdi_i,\n      .jtag_tdo_o,\n      .cluster_dbg_irq_valid_o\n    );\n\nendmodule\n"}
{"text": "//-----------------------------------------------------------------------------\n// Title         : SoC Memory Region Definitions\n//-----------------------------------------------------------------------------\n// File          : soc_mem_map.svh\n// Author        : Manuel Eggimann  <meggimann@iis.ee.ethz.ch>\n// Created       : 30.10.2020\n//-----------------------------------------------------------------------------\n// Description :\n// This file contains start and end address definitions for the soc_interconnect.\n//-----------------------------------------------------------------------------\n// Copyright (C) 2013-2020 ETH Zurich, University of Bologna\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License. You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n//-----------------------------------------------------------------------------\n\n`define SOC_MEM_MAP_TCDM_START_ADDR          32'h1C01_0000\n`define SOC_MEM_MAP_TCDM_END_ADDR            32'h1C09_0000\n\n`define SOC_MEM_MAP_PRIVATE_BANK0_START_ADDR 32'h1C00_0000\n`define SOC_MEM_MAP_PRIVATE_BANK0_END_ADDR   32'h1C00_8000\n\n`define SOC_MEM_MAP_PRIVATE_BANK1_START_ADDR 32'h1C00_8000\n`define SOC_MEM_MAP_PRIVATE_BANK1_END_ADDR   32'h1C01_0000\n\n`define SOC_MEM_MAP_BOOT_ROM_START_ADDR      32'h1A00_0000\n`define SOC_MEM_MAP_BOOT_ROM_END_ADDR        32'h1A04_0000\n\n`define SOC_MEM_MAP_AXI_PLUG_START_ADDR      32'h1000_0000\n`define SOC_MEM_MAP_AXI_PLUG_END_ADDR        32'h1040_0000\n\n`define SOC_MEM_MAP_PERIPHERALS_START_ADDR   32'h1A10_0000\n`define SOC_MEM_MAP_PERIPHERALS_END_ADDR     32'h1A40_0000\n\n\n"}
{"text": "/* \n * spi_master_padframe.sv\n * Antonio Pullini <pullinia@iis.ee.ethz.ch>\n * Igor Loi <igor.loi@unibo.it>\n *\n * Copyright (C) 2013-2018 ETH Zurich, University of Bologna.\n *\n * Copyright and related rights are licensed under the Solderpad Hardware\n * License, Version 0.51 (the \"License\"); you may not use this file except in\n * compliance with the License.  You may obtain a copy of the License at\n * http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n * or agreed to in writing, software, hardware and materials distributed under\n * this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n */\n\n`define SPI_STD     2'b00\n`define SPI_QUAD_TX 2'b01\n`define SPI_QUAD_RX 2'b10\n\nmodule generic_pad\n  (\n    input  logic in_i,\n    output logic out_o,\n    inout  logic pad,\n    input  logic en_i\n  );\n\n  assign out_o = pad;\n  assign pad = en_i ? in_i : 1'bZ;\n\nendmodule\n\nmodule spi_master_padframe\n  (\n    //PAD TO CORE\n\n    // PAD MODES FROM CORE\n    input  logic [1:0] padmode_spi_master,\n\n    // TO SPI MASTER\n    input  logic spi_master_csn,\n    input  logic spi_master_sck,\n    output logic spi_master_sdi0,\n    output logic spi_master_sdi1,\n    output logic spi_master_sdi2,\n    output logic spi_master_sdi3,\n    input  logic spi_master_sdo0,\n    input  logic spi_master_sdo1,\n    input  logic spi_master_sdo2,\n    input  logic spi_master_sdo3,\n\n    inout  logic MSPI_SIO0_PAD,\n    inout  logic MSPI_SIO1_PAD,\n    inout  logic MSPI_SIO2_PAD,\n    inout  logic MSPI_SIO3_PAD,\n    inout  logic MSPI_CSN_PAD,\n    inout  logic MSPI_SCK_PAD\n  );\n\n\n  logic master_dio0_en;\n  logic master_dio1_en;\n  logic master_dio2_en;\n  logic master_dio3_en;\n  logic master_output;\n  logic master_cs_in;\n  logic master_sck_in;\n  logic master_dio0_in;\n  logic master_dio1_in;\n  logic master_dio2_in;\n  logic master_dio3_in;\n  logic master_cs_out;\n  logic master_sck_out;\n  logic master_dio0_out;\n  logic master_dio1_out;\n  logic master_dio2_out;\n  logic master_dio3_out;\n\n  logic always_input;\n  logic always_output;\n\n\n  // DIGITAL PAD CELLS\n\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n  ////                                                                                         ////\n  ////  SPI MASTER                                                                             ////\n  ////                                                                                         ////\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n  //MASTER SDIO0\n  generic_pad I_spi_master_sdio0_IO\n  (\n    .out_o ( master_dio0_in  ),\n    .in_i  ( master_dio0_out ),\n    .en_i  ( master_dio0_en  ),\n    .pad   ( MSPI_SIO0_PAD   )\n  );\n\n  //MASTER SDIO1\n  generic_pad I_spi_master_sdio1_IO\n  (\n    .out_o ( master_dio1_in  ),\n    .in_i  ( master_dio1_out ),\n    .en_i  ( master_dio1_en  ),\n    .pad   ( MSPI_SIO1_PAD   )\n  );\n\n  //MASTER SDIO2\n  generic_pad I_spi_master_sdio2_IO\n  (\n    .out_o ( master_dio2_in  ),\n    .in_i  ( master_dio2_out ),\n    .en_i  ( master_dio2_en  ),\n    .pad   ( MSPI_SIO2_PAD   )\n  );\n\n  //MASTER SDIO3\n  generic_pad I_spi_master_sdio3_IO\n  (\n    .out_o ( master_dio3_in  ),\n    .in_i  ( master_dio3_out ),\n    .en_i  ( master_dio3_en  ),\n    .pad   ( MSPI_SIO3_PAD   )\n  );\n\n  //MASTER CSN\n  generic_pad I_spi_master_csn_IO\n  (\n    .out_o ( master_cs_in  ),\n    .in_i  ( master_cs_out ),\n    .en_i  ( master_output ),\n    .pad   ( MSPI_CSN_PAD  )\n  );\n\n  //MASTER SCK\n  generic_pad I_spi_master_sck_IO\n  (\n    .out_o ( master_sck_in  ),\n    .in_i  ( master_sck_out ),\n    .en_i  ( master_output  ),\n    .pad   ( MSPI_SCK_PAD   )\n    );\n  /////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n  assign always_input  = 1'b0;\n  assign always_output = ~always_input;\n\n  always_comb\n  begin\n    master_cs_out   = spi_master_csn;\n    master_sck_out  = spi_master_sck;\n\n      case (padmode_spi_master)\n        `SPI_STD:\n        begin\n          master_dio0_en  = always_output;  // dio0 -> SDO output\n          master_dio1_en  = always_input;   // dio1 -> SDI input\n          master_dio2_en  = always_input;  // not used\n          master_dio3_en  = always_input;  // not used\n          master_output   = always_output; // csn and sck are output\n          spi_master_sdi0 = master_dio1_in;\n          spi_master_sdi1 = 1'b0;\n          spi_master_sdi2 = 1'b0;\n          spi_master_sdi3 = 1'b0;\n          master_dio0_out = spi_master_sdo0;\n          master_dio1_out = 1'b0;\n          master_dio2_out = 1'b0;\n          master_dio3_out = 1'b0;\n        end\n        `SPI_QUAD_TX:\n        begin\n          master_dio0_en = always_output;  // dio0 -> SDO0 output\n          master_dio1_en = always_output;  // dio1 -> SDO1 output\n          master_dio2_en = always_output;  // dio2 -> SDO2 output\n          master_dio3_en = always_output;  // dio3 -> SDO3 output\n          master_output   = always_output; // csn and sck are output\n          spi_master_sdi0 = 1'b0;\n          spi_master_sdi1 = 1'b0;\n          spi_master_sdi2 = 1'b0;\n          spi_master_sdi3 = 1'b0;\n          master_dio0_out = spi_master_sdo0;\n          master_dio1_out = spi_master_sdo1;\n          master_dio2_out = spi_master_sdo2;\n          master_dio3_out = spi_master_sdo3;\n        end\n        `SPI_QUAD_RX:\n        begin\n          master_dio0_en = always_input;  // dio0 -> SDI0 input\n          master_dio1_en = always_input;  // dio1 -> SDI1 input\n          master_dio2_en = always_input;  // dio2 -> SDI2 input\n          master_dio3_en = always_input;  // dio3 -> SDI3 input\n          master_output   = always_output; // csn and sck are output\n          spi_master_sdi0 = master_dio0_in;\n          spi_master_sdi1 = master_dio1_in;\n          spi_master_sdi2 = master_dio2_in;\n          spi_master_sdi3 = master_dio3_in;\n          master_dio0_out = 1'b0;\n          master_dio1_out = 1'b0;\n          master_dio2_out = 1'b0;\n          master_dio3_out = 1'b0;\n        end\n        default:\n        begin\n          master_dio0_en = always_input;  // dio0 -> SDI0 input\n          master_dio1_en = always_input;  // dio1 -> SDI1 input\n          master_dio2_en = always_input;  // dio2 -> SDI2 input\n          master_dio3_en = always_input;  // dio3 -> SDI3 input\n          master_output   = always_output; // csn and sck are output\n          spi_master_sdi0 = 1'b0;\n          spi_master_sdi1 = 1'b0;\n          spi_master_sdi2 = 1'b0;\n          spi_master_sdi3 = 1'b0;\n          master_dio0_out = 1'b0;\n          master_dio1_out = 1'b0;\n          master_dio2_out = 1'b0;\n          master_dio3_out = 1'b0;\n        end\n      endcase\n  end\nendmodule\n"}
{"text": "// Copyright 2022 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n//\n// Author:\n//  * Antonio Pullini <pullinia@iis.ee.ethz.ch>\n//  * Igor Loi <igor.loi@unibo.it>\n//  * Florian Zaruba <zarubaf@iis.ee.ethz.cht>\n//  * Robert Balas <balasr@iis.ee.ethz.cht>\n//\n// Date: Unknown\n// Description: This module takes data over UART and prints them to the console\n//              A string is printed to the console as soon as a '\\n' character is found\n\nmodule uart_sim #(\n    parameter int unsigned BAUD_RATE = 115200,\n    parameter int unsigned PARITY_EN = 0\n)(\n    input  logic rx,\n    output logic tx,\n    input  logic rx_en\n);\n\n/* pragma translate_off */\n`ifndef VERILATOR\n  localparam time BIT_PERIOD = (1000000000 / BAUD_RATE) * 1ns;\n\n  bit               newline;\n  logic [7:0]       character;\n  logic [256*8-1:0] stringa;\n  logic             parity;\n  integer           charnum;\n  integer           file;\n\n  initial begin\n    // uart should idle with 1'b1, since that means no transmission\n    tx      = 1'b1;\n    newline = 1;\n`ifdef LOG_UART_SIM\n    file = $fopen(\"uart.log\", \"w\");\n`endif\n  end\n\n  always begin\n    if (rx_en) begin\n      @(negedge rx);\n      #(BIT_PERIOD/2);\n      for (int i = 0; i <= 7; i++) begin\n        #BIT_PERIOD character[i] = rx;\n      end\n\n      if (PARITY_EN == 1) begin\n        // check parity\n        #BIT_PERIOD parity = rx;\n\n        for (int i=7;i>=0;i--) begin\n          parity = character[i] ^ parity;\n        end\n\n        if (parity == 1'b1) begin\n          $display(\"Parity error detected\");\n        end\n      end\n\n      // STOP BIT\n      #BIT_PERIOD;\n\n`ifdef LOG_UART_SIM\n      $fwrite(file, \"%c\", character);\n`endif\n      $fflush();\n\n      if (character == 8'h0A) begin\n        $write(\"\\n\");\n        newline = 1;\n      end else begin\n        if (newline) begin\n          $write(\"[UART]: \");\n          newline = 0;\n        end\n        $write(\"%c\", character);\n      end\n\n    end else begin\n      charnum = 0;\n      stringa = \"\";\n      #10;\n    end\n  end\n\n  task send_char(input logic [7:0] c);\n    int i;\n\n    // start bit\n    tx = 1'b0;\n\n    for (i = 0; i < 8; i++) begin\n      #(BIT_PERIOD);\n      tx = c[i];\n    end\n\n    // stop bit\n    #(BIT_PERIOD);\n    tx = 1'b1;\n    #(BIT_PERIOD);\n  endtask\n`endif\n\n  task wait_symbol();\n    #(BIT_PERIOD * 10);\n  endtask // wait_symbol\n\n/* pragma translate_on */\nendmodule\n"}
