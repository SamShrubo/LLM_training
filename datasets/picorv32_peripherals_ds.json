{"text": "['/*\\n', ' *  PicoSoC - A simple example SoC using PicoRV32\\n', ' *\\n', ' *  Copyright (C) 2017  Claire Xenia Wolf <claire@yosyshq.com>\\n', ' *\\n', ' *  Permission to use, copy, modify, and/or distribute this software for any\\n', ' *  purpose with or without fee is hereby granted, provided that the above\\n', ' *  copyright notice and this permission notice appear in all copies.\\n', ' *\\n', ' *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\\n', ' *  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\\n', ' *  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\\n', ' *  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\\n', ' *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\\n', ' *  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\\n', ' *  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\\n', ' *\\n', ' */\\n', '\\n', 'module hx8kdemo (\\n', '\\tinput clk,\\n', '\\n', '\\toutput ser_tx,\\n', '\\tinput ser_rx,\\n', '\\n', '\\toutput [7:0] leds,\\n', '\\n', '\\toutput flash_csb,\\n', '\\toutput flash_clk,\\n', '\\tinout  flash_io0,\\n', '\\tinout  flash_io1,\\n', '\\tinout  flash_io2,\\n', '\\tinout  flash_io3,\\n', '\\n', '\\toutput debug_ser_tx,\\n', '\\toutput debug_ser_rx,\\n', '\\n', '\\toutput debug_flash_csb,\\n', '\\toutput debug_flash_clk,\\n', '\\toutput debug_flash_io0,\\n', '\\toutput debug_flash_io1,\\n', '\\toutput debug_flash_io2,\\n', '\\toutput debug_flash_io3\\n', ');\\n', '\\treg [5:0] reset_cnt = 0;\\n', '\\twire resetn = &reset_cnt;\\n', '\\n', '\\talways @(posedge clk) begin\\n', '\\t\\treset_cnt <= reset_cnt + !resetn;\\n', '\\tend\\n', '\\n', '\\twire flash_io0_oe, flash_io0_do, flash_io0_di;\\n', '\\twire flash_io1_oe, flash_io1_do, flash_io1_di;\\n', '\\twire flash_io2_oe, flash_io2_do, flash_io2_di;\\n', '\\twire flash_io3_oe, flash_io3_do, flash_io3_di;\\n', '\\n', '\\tSB_IO #(\\n', \"\\t\\t.PIN_TYPE(6'b 1010_01),\\n\", \"\\t\\t.PULLUP(1'b 0)\\n\", '\\t) flash_io_buf [3:0] (\\n', '\\t\\t.PACKAGE_PIN({flash_io3, flash_io2, flash_io1, flash_io0}),\\n', '\\t\\t.OUTPUT_ENABLE({flash_io3_oe, flash_io2_oe, flash_io1_oe, flash_io0_oe}),\\n', '\\t\\t.D_OUT_0({flash_io3_do, flash_io2_do, flash_io1_do, flash_io0_do}),\\n', '\\t\\t.D_IN_0({flash_io3_di, flash_io2_di, flash_io1_di, flash_io0_di})\\n', '\\t);\\n', '\\n', '\\twire        iomem_valid;\\n', '\\treg         iomem_ready;\\n', '\\twire [3:0]  iomem_wstrb;\\n', '\\twire [31:0] iomem_addr;\\n', '\\twire [31:0] iomem_wdata;\\n', '\\treg  [31:0] iomem_rdata;\\n', '\\n', '\\treg [31:0] gpio;\\n', '\\tassign leds = gpio;\\n', '\\n', '\\talways @(posedge clk) begin\\n', '\\t\\tif (!resetn) begin\\n', '\\t\\t\\tgpio <= 0;\\n', '\\t\\tend else begin\\n', '\\t\\t\\tiomem_ready <= 0;\\n', \"\\t\\t\\tif (iomem_valid && !iomem_ready && iomem_addr[31:24] == 8'h 03) begin\\n\", '\\t\\t\\t\\tiomem_ready <= 1;\\n', '\\t\\t\\t\\tiomem_rdata <= gpio;\\n', '\\t\\t\\t\\tif (iomem_wstrb[0]) gpio[ 7: 0] <= iomem_wdata[ 7: 0];\\n', '\\t\\t\\t\\tif (iomem_wstrb[1]) gpio[15: 8] <= iomem_wdata[15: 8];\\n', '\\t\\t\\t\\tif (iomem_wstrb[2]) gpio[23:16] <= iomem_wdata[23:16];\\n', '\\t\\t\\t\\tif (iomem_wstrb[3]) gpio[31:24] <= iomem_wdata[31:24];\\n', '\\t\\t\\tend\\n', '\\t\\tend\\n', '\\tend\\n', '\\n', '\\tpicosoc soc (\\n', '\\t\\t.clk          (clk         ),\\n', '\\t\\t.resetn       (resetn      ),\\n', '\\n', '\\t\\t.ser_tx       (ser_tx      ),\\n', '\\t\\t.ser_rx       (ser_rx      ),\\n', '\\n', '\\t\\t.flash_csb    (flash_csb   ),\\n', '\\t\\t.flash_clk    (flash_clk   ),\\n', '\\n', '\\t\\t.flash_io0_oe (flash_io0_oe),\\n', '\\t\\t.flash_io1_oe (flash_io1_oe),\\n', '\\t\\t.flash_io2_oe (flash_io2_oe),\\n', '\\t\\t.flash_io3_oe (flash_io3_oe),\\n', '\\n', '\\t\\t.flash_io0_do (flash_io0_do),\\n', '\\t\\t.flash_io1_do (flash_io1_do),\\n', '\\t\\t.flash_io2_do (flash_io2_do),\\n', '\\t\\t.flash_io3_do (flash_io3_do),\\n', '\\n', '\\t\\t.flash_io0_di (flash_io0_di),\\n', '\\t\\t.flash_io1_di (flash_io1_di),\\n', '\\t\\t.flash_io2_di (flash_io2_di),\\n', '\\t\\t.flash_io3_di (flash_io3_di),\\n', '\\n', \"\\t\\t.irq_5        (1'b0        ),\\n\", \"\\t\\t.irq_6        (1'b0        ),\\n\", \"\\t\\t.irq_7        (1'b0        ),\\n\", '\\n', '\\t\\t.iomem_valid  (iomem_valid ),\\n', '\\t\\t.iomem_ready  (iomem_ready ),\\n', '\\t\\t.iomem_wstrb  (iomem_wstrb ),\\n', '\\t\\t.iomem_addr   (iomem_addr  ),\\n', '\\t\\t.iomem_wdata  (iomem_wdata ),\\n', '\\t\\t.iomem_rdata  (iomem_rdata )\\n', '\\t);\\n', '\\n', '\\tassign debug_ser_tx = ser_tx;\\n', '\\tassign debug_ser_rx = ser_rx;\\n', '\\n', '\\tassign debug_flash_csb = flash_csb;\\n', '\\tassign debug_flash_clk = flash_clk;\\n', '\\tassign debug_flash_io0 = flash_io0_di;\\n', '\\tassign debug_flash_io1 = flash_io1_di;\\n', '\\tassign debug_flash_io2 = flash_io2_di;\\n', '\\tassign debug_flash_io3 = flash_io3_di;\\n', 'endmodule\\n']"}
{"text": "['/*\\n', ' *  PicoSoC - A simple example SoC using PicoRV32\\n', ' *\\n', ' *  Copyright (C) 2017  Claire Xenia Wolf <claire@yosyshq.com>\\n', ' *\\n', ' *  Permission to use, copy, modify, and/or distribute this software for any\\n', ' *  purpose with or without fee is hereby granted, provided that the above\\n', ' *  copyright notice and this permission notice appear in all copies.\\n', ' *\\n', ' *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\\n', ' *  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\\n', ' *  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\\n', ' *  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\\n', ' *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\\n', ' *  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\\n', ' *  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\\n', ' *\\n', ' */\\n', '\\n', '`timescale 1 ns / 1 ps\\n', '\\n', 'module testbench;\\n', '\\treg clk;\\n', \"\\talways #5 clk = (clk === 1'b0);\\n\", '\\n', '\\tlocalparam ser_half_period = 53;\\n', '\\tevent ser_sample;\\n', '\\n', '\\tinitial begin\\n', '\\t\\t$dumpfile(\"testbench.vcd\");\\n', '\\t\\t$dumpvars(0, testbench);\\n', '\\n', '\\t\\trepeat (6) begin\\n', '\\t\\t\\trepeat (50000) @(posedge clk);\\n', '\\t\\t\\t$display(\"+50000 cycles\");\\n', '\\t\\tend\\n', '\\t\\t$finish;\\n', '\\tend\\n', '\\n', '\\tinteger cycle_cnt = 0;\\n', '\\n', '\\talways @(posedge clk) begin\\n', '\\t\\tcycle_cnt <= cycle_cnt + 1;\\n', '\\tend\\n', '\\n', '\\twire [7:0] leds;\\n', '\\n', '\\twire ser_rx;\\n', '\\twire ser_tx;\\n', '\\n', '\\twire flash_csb;\\n', '\\twire flash_clk;\\n', '\\twire flash_io0;\\n', '\\twire flash_io1;\\n', '\\twire flash_io2;\\n', '\\twire flash_io3;\\n', '\\n', '\\talways @(leds) begin\\n', '\\t\\t#1 $display(\"%b\", leds);\\n', '\\tend\\n', '\\n', '\\thx8kdemo uut (\\n', '\\t\\t.clk      (clk      ),\\n', '\\t\\t.leds     (leds     ),\\n', '\\t\\t.ser_rx   (ser_rx   ),\\n', '\\t\\t.ser_tx   (ser_tx   ),\\n', '\\t\\t.flash_csb(flash_csb),\\n', '\\t\\t.flash_clk(flash_clk),\\n', '\\t\\t.flash_io0(flash_io0),\\n', '\\t\\t.flash_io1(flash_io1),\\n', '\\t\\t.flash_io2(flash_io2),\\n', '\\t\\t.flash_io3(flash_io3)\\n', '\\t);\\n', '\\n', '\\tspiflash spiflash (\\n', '\\t\\t.csb(flash_csb),\\n', '\\t\\t.clk(flash_clk),\\n', '\\t\\t.io0(flash_io0),\\n', '\\t\\t.io1(flash_io1),\\n', '\\t\\t.io2(flash_io2),\\n', '\\t\\t.io3(flash_io3)\\n', '\\t);\\n', '\\n', '\\treg [7:0] buffer;\\n', '\\n', '\\talways begin\\n', '\\t\\t@(negedge ser_tx);\\n', '\\n', '\\t\\trepeat (ser_half_period) @(posedge clk);\\n', '\\t\\t-> ser_sample; // start bit\\n', '\\n', '\\t\\trepeat (8) begin\\n', '\\t\\t\\trepeat (ser_half_period) @(posedge clk);\\n', '\\t\\t\\trepeat (ser_half_period) @(posedge clk);\\n', '\\t\\t\\tbuffer = {ser_tx, buffer[7:1]};\\n', '\\t\\t\\t-> ser_sample; // data bit\\n', '\\t\\tend\\n', '\\n', '\\t\\trepeat (ser_half_period) @(posedge clk);\\n', '\\t\\trepeat (ser_half_period) @(posedge clk);\\n', '\\t\\t-> ser_sample; // stop bit\\n', '\\n', '\\t\\tif (buffer < 32 || buffer >= 127)\\n', '\\t\\t\\t$display(\"Serial data: %d\", buffer);\\n', '\\t\\telse\\n', '\\t\\t\\t$display(\"Serial data: \\'%c\\'\", buffer);\\n', '\\tend\\n', 'endmodule\\n']"}
{"text": "['/*\\n', ' *  PicoSoC - A simple example SoC using PicoRV32\\n', ' *\\n', ' *  Copyright (C) 2017  Claire Xenia Wolf <claire@yosyshq.com>\\n', ' *\\n', ' *  Permission to use, copy, modify, and/or distribute this software for any\\n', ' *  purpose with or without fee is hereby granted, provided that the above\\n', ' *  copyright notice and this permission notice appear in all copies.\\n', ' *\\n', ' *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\\n', ' *  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\\n', ' *  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\\n', ' *  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\\n', ' *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\\n', ' *  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\\n', ' *  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\\n', ' *\\n', ' */\\n', '\\n', '`ifdef PICOSOC_V\\n', '`error \"icebreaker.v must be read before picosoc.v!\"\\n', '`endif\\n', '\\n', '`define PICOSOC_MEM ice40up5k_spram\\n', '\\n', 'module icebreaker (\\n', '\\tinput clk,\\n', '\\n', '\\toutput ser_tx,\\n', '\\tinput ser_rx,\\n', '\\n', '\\toutput led1,\\n', '\\toutput led2,\\n', '\\toutput led3,\\n', '\\toutput led4,\\n', '\\toutput led5,\\n', '\\n', '\\toutput ledr_n,\\n', '\\toutput ledg_n,\\n', '\\n', '\\toutput flash_csb,\\n', '\\toutput flash_clk,\\n', '\\tinout  flash_io0,\\n', '\\tinout  flash_io1,\\n', '\\tinout  flash_io2,\\n', '\\tinout  flash_io3\\n', ');\\n', '\\tparameter integer MEM_WORDS = 32768;\\n', '\\n', '\\treg [5:0] reset_cnt = 0;\\n', '\\twire resetn = &reset_cnt;\\n', '\\n', '\\talways @(posedge clk) begin\\n', '\\t\\treset_cnt <= reset_cnt + !resetn;\\n', '\\tend\\n', '\\n', '\\twire [7:0] leds;\\n', '\\n', '\\tassign led1 = leds[1];\\n', '\\tassign led2 = leds[2];\\n', '\\tassign led3 = leds[3];\\n', '\\tassign led4 = leds[4];\\n', '\\tassign led5 = leds[5];\\n', '\\n', '\\tassign ledr_n = !leds[6];\\n', '\\tassign ledg_n = !leds[7];\\n', '\\n', '\\twire flash_io0_oe, flash_io0_do, flash_io0_di;\\n', '\\twire flash_io1_oe, flash_io1_do, flash_io1_di;\\n', '\\twire flash_io2_oe, flash_io2_do, flash_io2_di;\\n', '\\twire flash_io3_oe, flash_io3_do, flash_io3_di;\\n', '\\n', '\\tSB_IO #(\\n', \"\\t\\t.PIN_TYPE(6'b 1010_01),\\n\", \"\\t\\t.PULLUP(1'b 0)\\n\", '\\t) flash_io_buf [3:0] (\\n', '\\t\\t.PACKAGE_PIN({flash_io3, flash_io2, flash_io1, flash_io0}),\\n', '\\t\\t.OUTPUT_ENABLE({flash_io3_oe, flash_io2_oe, flash_io1_oe, flash_io0_oe}),\\n', '\\t\\t.D_OUT_0({flash_io3_do, flash_io2_do, flash_io1_do, flash_io0_do}),\\n', '\\t\\t.D_IN_0({flash_io3_di, flash_io2_di, flash_io1_di, flash_io0_di})\\n', '\\t);\\n', '\\n', '\\twire        iomem_valid;\\n', '\\treg         iomem_ready;\\n', '\\twire [3:0]  iomem_wstrb;\\n', '\\twire [31:0] iomem_addr;\\n', '\\twire [31:0] iomem_wdata;\\n', '\\treg  [31:0] iomem_rdata;\\n', '\\n', '\\treg [31:0] gpio;\\n', '\\tassign leds = gpio;\\n', '\\n', '\\talways @(posedge clk) begin\\n', '\\t\\tif (!resetn) begin\\n', '\\t\\t\\tgpio <= 0;\\n', '\\t\\tend else begin\\n', '\\t\\t\\tiomem_ready <= 0;\\n', \"\\t\\t\\tif (iomem_valid && !iomem_ready && iomem_addr[31:24] == 8'h 03) begin\\n\", '\\t\\t\\t\\tiomem_ready <= 1;\\n', '\\t\\t\\t\\tiomem_rdata <= gpio;\\n', '\\t\\t\\t\\tif (iomem_wstrb[0]) gpio[ 7: 0] <= iomem_wdata[ 7: 0];\\n', '\\t\\t\\t\\tif (iomem_wstrb[1]) gpio[15: 8] <= iomem_wdata[15: 8];\\n', '\\t\\t\\t\\tif (iomem_wstrb[2]) gpio[23:16] <= iomem_wdata[23:16];\\n', '\\t\\t\\t\\tif (iomem_wstrb[3]) gpio[31:24] <= iomem_wdata[31:24];\\n', '\\t\\t\\tend\\n', '\\t\\tend\\n', '\\tend\\n', '\\n', '\\tpicosoc #(\\n', '\\t\\t.BARREL_SHIFTER(0),\\n', '\\t\\t.ENABLE_MUL(0),\\n', '\\t\\t.ENABLE_DIV(0),\\n', '\\t\\t.ENABLE_FAST_MUL(1),\\n', '\\t\\t.MEM_WORDS(MEM_WORDS)\\n', '\\t) soc (\\n', '\\t\\t.clk          (clk         ),\\n', '\\t\\t.resetn       (resetn      ),\\n', '\\n', '\\t\\t.ser_tx       (ser_tx      ),\\n', '\\t\\t.ser_rx       (ser_rx      ),\\n', '\\n', '\\t\\t.flash_csb    (flash_csb   ),\\n', '\\t\\t.flash_clk    (flash_clk   ),\\n', '\\n', '\\t\\t.flash_io0_oe (flash_io0_oe),\\n', '\\t\\t.flash_io1_oe (flash_io1_oe),\\n', '\\t\\t.flash_io2_oe (flash_io2_oe),\\n', '\\t\\t.flash_io3_oe (flash_io3_oe),\\n', '\\n', '\\t\\t.flash_io0_do (flash_io0_do),\\n', '\\t\\t.flash_io1_do (flash_io1_do),\\n', '\\t\\t.flash_io2_do (flash_io2_do),\\n', '\\t\\t.flash_io3_do (flash_io3_do),\\n', '\\n', '\\t\\t.flash_io0_di (flash_io0_di),\\n', '\\t\\t.flash_io1_di (flash_io1_di),\\n', '\\t\\t.flash_io2_di (flash_io2_di),\\n', '\\t\\t.flash_io3_di (flash_io3_di),\\n', '\\n', \"\\t\\t.irq_5        (1'b0        ),\\n\", \"\\t\\t.irq_6        (1'b0        ),\\n\", \"\\t\\t.irq_7        (1'b0        ),\\n\", '\\n', '\\t\\t.iomem_valid  (iomem_valid ),\\n', '\\t\\t.iomem_ready  (iomem_ready ),\\n', '\\t\\t.iomem_wstrb  (iomem_wstrb ),\\n', '\\t\\t.iomem_addr   (iomem_addr  ),\\n', '\\t\\t.iomem_wdata  (iomem_wdata ),\\n', '\\t\\t.iomem_rdata  (iomem_rdata )\\n', '\\t);\\n', 'endmodule\\n']"}
{"text": "['/*\\n', ' *  PicoSoC - A simple example SoC using PicoRV32\\n', ' *\\n', ' *  Copyright (C) 2017  Claire Xenia Wolf <claire@yosyshq.com>\\n', ' *\\n', ' *  Permission to use, copy, modify, and/or distribute this software for any\\n', ' *  purpose with or without fee is hereby granted, provided that the above\\n', ' *  copyright notice and this permission notice appear in all copies.\\n', ' *\\n', ' *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\\n', ' *  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\\n', ' *  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\\n', ' *  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\\n', ' *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\\n', ' *  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\\n', ' *  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\\n', ' *\\n', ' */\\n', '\\n', '`timescale 1 ns / 1 ps\\n', '\\n', 'module testbench;\\n', '\\treg clk;\\n', \"\\talways #5 clk = (clk === 1'b0);\\n\", '\\n', '\\tlocalparam ser_half_period = 53;\\n', '\\tevent ser_sample;\\n', '\\n', '\\tinitial begin\\n', '\\t\\t$dumpfile(\"testbench.vcd\");\\n', '\\t\\t$dumpvars(0, testbench);\\n', '\\n', '\\t\\trepeat (6) begin\\n', '\\t\\t\\trepeat (50000) @(posedge clk);\\n', '\\t\\t\\t$display(\"+50000 cycles\");\\n', '\\t\\tend\\n', '\\t\\t$finish;\\n', '\\tend\\n', '\\n', '\\tinteger cycle_cnt = 0;\\n', '\\n', '\\talways @(posedge clk) begin\\n', '\\t\\tcycle_cnt <= cycle_cnt + 1;\\n', '\\tend\\n', '\\n', '\\twire led1, led2, led3, led4, led5;\\n', '\\twire ledr_n, ledg_n;\\n', '\\n', '\\twire [6:0] leds = {!ledg_n, !ledr_n, led5, led4, led3, led2, led1};\\n', '\\n', '\\twire ser_rx;\\n', '\\twire ser_tx;\\n', '\\n', '\\twire flash_csb;\\n', '\\twire flash_clk;\\n', '\\twire flash_io0;\\n', '\\twire flash_io1;\\n', '\\twire flash_io2;\\n', '\\twire flash_io3;\\n', '\\n', '\\talways @(leds) begin\\n', '\\t\\t#1 $display(\"%b\", leds);\\n', '\\tend\\n', '\\n', '\\ticebreaker #(\\n', '\\t\\t// We limit the amount of memory in simulation\\n', '\\t\\t// in order to avoid reduce simulation time\\n', '\\t\\t// required for intialization of RAM\\n', '\\t\\t.MEM_WORDS(256)\\n', '\\t) uut (\\n', '\\t\\t.clk      (clk      ),\\n', '\\t\\t.led1     (led1     ),\\n', '\\t\\t.led2     (led2     ),\\n', '\\t\\t.led3     (led3     ),\\n', '\\t\\t.led4     (led4     ),\\n', '\\t\\t.led5     (led5     ),\\n', '\\t\\t.ledr_n   (ledr_n   ),\\n', '\\t\\t.ledg_n   (ledg_n   ),\\n', '\\t\\t.ser_rx   (ser_rx   ),\\n', '\\t\\t.ser_tx   (ser_tx   ),\\n', '\\t\\t.flash_csb(flash_csb),\\n', '\\t\\t.flash_clk(flash_clk),\\n', '\\t\\t.flash_io0(flash_io0),\\n', '\\t\\t.flash_io1(flash_io1),\\n', '\\t\\t.flash_io2(flash_io2),\\n', '\\t\\t.flash_io3(flash_io3)\\n', '\\t);\\n', '\\n', '\\tspiflash spiflash (\\n', '\\t\\t.csb(flash_csb),\\n', '\\t\\t.clk(flash_clk),\\n', '\\t\\t.io0(flash_io0),\\n', '\\t\\t.io1(flash_io1),\\n', '\\t\\t.io2(flash_io2),\\n', '\\t\\t.io3(flash_io3)\\n', '\\t);\\n', '\\n', '\\treg [7:0] buffer;\\n', '\\n', '\\talways begin\\n', '\\t\\t@(negedge ser_tx);\\n', '\\n', '\\t\\trepeat (ser_half_period) @(posedge clk);\\n', '\\t\\t-> ser_sample; // start bit\\n', '\\n', '\\t\\trepeat (8) begin\\n', '\\t\\t\\trepeat (ser_half_period) @(posedge clk);\\n', '\\t\\t\\trepeat (ser_half_period) @(posedge clk);\\n', '\\t\\t\\tbuffer = {ser_tx, buffer[7:1]};\\n', '\\t\\t\\t-> ser_sample; // data bit\\n', '\\t\\tend\\n', '\\n', '\\t\\trepeat (ser_half_period) @(posedge clk);\\n', '\\t\\trepeat (ser_half_period) @(posedge clk);\\n', '\\t\\t-> ser_sample; // stop bit\\n', '\\n', '\\t\\tif (buffer < 32 || buffer >= 127)\\n', '\\t\\t\\t$display(\"Serial data: %d\", buffer);\\n', '\\t\\telse\\n', '\\t\\t\\t$display(\"Serial data: \\'%c\\'\", buffer);\\n', '\\tend\\n', 'endmodule\\n']"}
{"text": "['/*\\n', ' *  PicoSoC - A simple example SoC using PicoRV32\\n', ' *\\n', ' *  Copyright (C) 2017  Claire Xenia Wolf <claire@yosyshq.com>\\n', ' *\\n', ' *  Permission to use, copy, modify, and/or distribute this software for any\\n', ' *  purpose with or without fee is hereby granted, provided that the above\\n', ' *  copyright notice and this permission notice appear in all copies.\\n', ' *\\n', ' *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\\n', ' *  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\\n', ' *  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\\n', ' *  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\\n', ' *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\\n', ' *  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\\n', ' *  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\\n', ' *\\n', ' */\\n', '\\n', '`ifndef PICORV32_REGS\\n', '`ifdef PICORV32_V\\n', '`error \"picosoc.v must be read before picorv32.v!\"\\n', '`endif\\n', '\\n', '`define PICORV32_REGS picosoc_regs\\n', '`endif\\n', '\\n', '`ifndef PICOSOC_MEM\\n', '`define PICOSOC_MEM picosoc_mem\\n', '`endif\\n', '\\n', '// this macro can be used to check if the verilog files in your\\n', '// design are read in the correct order.\\n', '`define PICOSOC_V\\n', '\\n', 'module picosoc (\\n', '\\tinput clk,\\n', '\\tinput resetn,\\n', '\\n', '\\toutput        iomem_valid,\\n', '\\tinput         iomem_ready,\\n', '\\toutput [ 3:0] iomem_wstrb,\\n', '\\toutput [31:0] iomem_addr,\\n', '\\toutput [31:0] iomem_wdata,\\n', '\\tinput  [31:0] iomem_rdata,\\n', '\\n', '\\tinput  irq_5,\\n', '\\tinput  irq_6,\\n', '\\tinput  irq_7,\\n', '\\n', '\\toutput ser_tx,\\n', '\\tinput  ser_rx,\\n', '\\n', '\\toutput flash_csb,\\n', '\\toutput flash_clk,\\n', '\\n', '\\toutput flash_io0_oe,\\n', '\\toutput flash_io1_oe,\\n', '\\toutput flash_io2_oe,\\n', '\\toutput flash_io3_oe,\\n', '\\n', '\\toutput flash_io0_do,\\n', '\\toutput flash_io1_do,\\n', '\\toutput flash_io2_do,\\n', '\\toutput flash_io3_do,\\n', '\\n', '\\tinput  flash_io0_di,\\n', '\\tinput  flash_io1_di,\\n', '\\tinput  flash_io2_di,\\n', '\\tinput  flash_io3_di\\n', ');\\n', '\\tparameter [0:0] BARREL_SHIFTER = 1;\\n', '\\tparameter [0:0] ENABLE_MUL = 1;\\n', '\\tparameter [0:0] ENABLE_DIV = 1;\\n', '\\tparameter [0:0] ENABLE_FAST_MUL = 0;\\n', '\\tparameter [0:0] ENABLE_COMPRESSED = 1;\\n', '\\tparameter [0:0] ENABLE_COUNTERS = 1;\\n', '\\tparameter [0:0] ENABLE_IRQ_QREGS = 0;\\n', '\\n', '\\tparameter integer MEM_WORDS = 256;\\n', '\\tparameter [31:0] STACKADDR = (4*MEM_WORDS);       // end of memory\\n', \"\\tparameter [31:0] PROGADDR_RESET = 32'h 0010_0000; // 1 MB into flash\\n\", \"\\tparameter [31:0] PROGADDR_IRQ = 32'h 0000_0000;\\n\", '\\n', '\\treg [31:0] irq;\\n', '\\twire irq_stall = 0;\\n', '\\twire irq_uart = 0;\\n', '\\n', '\\talways @* begin\\n', '\\t\\tirq = 0;\\n', '\\t\\tirq[3] = irq_stall;\\n', '\\t\\tirq[4] = irq_uart;\\n', '\\t\\tirq[5] = irq_5;\\n', '\\t\\tirq[6] = irq_6;\\n', '\\t\\tirq[7] = irq_7;\\n', '\\tend\\n', '\\n', '\\twire mem_valid;\\n', '\\twire mem_instr;\\n', '\\twire mem_ready;\\n', '\\twire [31:0] mem_addr;\\n', '\\twire [31:0] mem_wdata;\\n', '\\twire [3:0] mem_wstrb;\\n', '\\twire [31:0] mem_rdata;\\n', '\\n', '\\twire spimem_ready;\\n', '\\twire [31:0] spimem_rdata;\\n', '\\n', '\\treg ram_ready;\\n', '\\twire [31:0] ram_rdata;\\n', '\\n', \"\\tassign iomem_valid = mem_valid && (mem_addr[31:24] > 8'h 01);\\n\", '\\tassign iomem_wstrb = mem_wstrb;\\n', '\\tassign iomem_addr = mem_addr;\\n', '\\tassign iomem_wdata = mem_wdata;\\n', '\\n', \"\\twire spimemio_cfgreg_sel = mem_valid && (mem_addr == 32'h 0200_0000);\\n\", '\\twire [31:0] spimemio_cfgreg_do;\\n', '\\n', \"\\twire        simpleuart_reg_div_sel = mem_valid && (mem_addr == 32'h 0200_0004);\\n\", '\\twire [31:0] simpleuart_reg_div_do;\\n', '\\n', \"\\twire        simpleuart_reg_dat_sel = mem_valid && (mem_addr == 32'h 0200_0008);\\n\", '\\twire [31:0] simpleuart_reg_dat_do;\\n', '\\twire        simpleuart_reg_dat_wait;\\n', '\\n', '\\tassign mem_ready = (iomem_valid && iomem_ready) || spimem_ready || ram_ready || spimemio_cfgreg_sel ||\\n', '\\t\\t\\tsimpleuart_reg_div_sel || (simpleuart_reg_dat_sel && !simpleuart_reg_dat_wait);\\n', '\\n', '\\tassign mem_rdata = (iomem_valid && iomem_ready) ? iomem_rdata : spimem_ready ? spimem_rdata : ram_ready ? ram_rdata :\\n', '\\t\\t\\tspimemio_cfgreg_sel ? spimemio_cfgreg_do : simpleuart_reg_div_sel ? simpleuart_reg_div_do :\\n', \"\\t\\t\\tsimpleuart_reg_dat_sel ? simpleuart_reg_dat_do : 32'h 0000_0000;\\n\", '\\n', '\\tpicorv32 #(\\n', '\\t\\t.STACKADDR(STACKADDR),\\n', '\\t\\t.PROGADDR_RESET(PROGADDR_RESET),\\n', '\\t\\t.PROGADDR_IRQ(PROGADDR_IRQ),\\n', '\\t\\t.BARREL_SHIFTER(BARREL_SHIFTER),\\n', '\\t\\t.COMPRESSED_ISA(ENABLE_COMPRESSED),\\n', '\\t\\t.ENABLE_COUNTERS(ENABLE_COUNTERS),\\n', '\\t\\t.ENABLE_MUL(ENABLE_MUL),\\n', '\\t\\t.ENABLE_DIV(ENABLE_DIV),\\n', '\\t\\t.ENABLE_FAST_MUL(ENABLE_FAST_MUL),\\n', '\\t\\t.ENABLE_IRQ(1),\\n', '\\t\\t.ENABLE_IRQ_QREGS(ENABLE_IRQ_QREGS)\\n', '\\t) cpu (\\n', '\\t\\t.clk         (clk        ),\\n', '\\t\\t.resetn      (resetn     ),\\n', '\\t\\t.mem_valid   (mem_valid  ),\\n', '\\t\\t.mem_instr   (mem_instr  ),\\n', '\\t\\t.mem_ready   (mem_ready  ),\\n', '\\t\\t.mem_addr    (mem_addr   ),\\n', '\\t\\t.mem_wdata   (mem_wdata  ),\\n', '\\t\\t.mem_wstrb   (mem_wstrb  ),\\n', '\\t\\t.mem_rdata   (mem_rdata  ),\\n', '\\t\\t.irq         (irq        )\\n', '\\t);\\n', '\\n', '\\tspimemio spimemio (\\n', '\\t\\t.clk    (clk),\\n', '\\t\\t.resetn (resetn),\\n', \"\\t\\t.valid  (mem_valid && mem_addr >= 4*MEM_WORDS && mem_addr < 32'h 0200_0000),\\n\", '\\t\\t.ready  (spimem_ready),\\n', '\\t\\t.addr   (mem_addr[23:0]),\\n', '\\t\\t.rdata  (spimem_rdata),\\n', '\\n', '\\t\\t.flash_csb    (flash_csb   ),\\n', '\\t\\t.flash_clk    (flash_clk   ),\\n', '\\n', '\\t\\t.flash_io0_oe (flash_io0_oe),\\n', '\\t\\t.flash_io1_oe (flash_io1_oe),\\n', '\\t\\t.flash_io2_oe (flash_io2_oe),\\n', '\\t\\t.flash_io3_oe (flash_io3_oe),\\n', '\\n', '\\t\\t.flash_io0_do (flash_io0_do),\\n', '\\t\\t.flash_io1_do (flash_io1_do),\\n', '\\t\\t.flash_io2_do (flash_io2_do),\\n', '\\t\\t.flash_io3_do (flash_io3_do),\\n', '\\n', '\\t\\t.flash_io0_di (flash_io0_di),\\n', '\\t\\t.flash_io1_di (flash_io1_di),\\n', '\\t\\t.flash_io2_di (flash_io2_di),\\n', '\\t\\t.flash_io3_di (flash_io3_di),\\n', '\\n', \"\\t\\t.cfgreg_we(spimemio_cfgreg_sel ? mem_wstrb : 4'b 0000),\\n\", '\\t\\t.cfgreg_di(mem_wdata),\\n', '\\t\\t.cfgreg_do(spimemio_cfgreg_do)\\n', '\\t);\\n', '\\n', '\\tsimpleuart simpleuart (\\n', '\\t\\t.clk         (clk         ),\\n', '\\t\\t.resetn      (resetn      ),\\n', '\\n', '\\t\\t.ser_tx      (ser_tx      ),\\n', '\\t\\t.ser_rx      (ser_rx      ),\\n', '\\n', \"\\t\\t.reg_div_we  (simpleuart_reg_div_sel ? mem_wstrb : 4'b 0000),\\n\", '\\t\\t.reg_div_di  (mem_wdata),\\n', '\\t\\t.reg_div_do  (simpleuart_reg_div_do),\\n', '\\n', \"\\t\\t.reg_dat_we  (simpleuart_reg_dat_sel ? mem_wstrb[0] : 1'b 0),\\n\", '\\t\\t.reg_dat_re  (simpleuart_reg_dat_sel && !mem_wstrb),\\n', '\\t\\t.reg_dat_di  (mem_wdata),\\n', '\\t\\t.reg_dat_do  (simpleuart_reg_dat_do),\\n', '\\t\\t.reg_dat_wait(simpleuart_reg_dat_wait)\\n', '\\t);\\n', '\\n', '\\talways @(posedge clk)\\n', '\\t\\tram_ready <= mem_valid && !mem_ready && mem_addr < 4*MEM_WORDS;\\n', '\\n', '\\t`PICOSOC_MEM #(\\n', '\\t\\t.WORDS(MEM_WORDS)\\n', '\\t) memory (\\n', '\\t\\t.clk(clk),\\n', \"\\t\\t.wen((mem_valid && !mem_ready && mem_addr < 4*MEM_WORDS) ? mem_wstrb : 4'b0),\\n\", '\\t\\t.addr(mem_addr[23:2]),\\n', '\\t\\t.wdata(mem_wdata),\\n', '\\t\\t.rdata(ram_rdata)\\n', '\\t);\\n', 'endmodule\\n', '\\n', '// Implementation note:\\n', '// Replace the following two modules with wrappers for your SRAM cells.\\n', '\\n', 'module picosoc_regs (\\n', '\\tinput clk, wen,\\n', '\\tinput [5:0] waddr,\\n', '\\tinput [5:0] raddr1,\\n', '\\tinput [5:0] raddr2,\\n', '\\tinput [31:0] wdata,\\n', '\\toutput [31:0] rdata1,\\n', '\\toutput [31:0] rdata2\\n', ');\\n', '\\treg [31:0] regs [0:31];\\n', '\\n', '\\talways @(posedge clk)\\n', '\\t\\tif (wen) regs[waddr[4:0]] <= wdata;\\n', '\\n', '\\tassign rdata1 = regs[raddr1[4:0]];\\n', '\\tassign rdata2 = regs[raddr2[4:0]];\\n', 'endmodule\\n', '\\n', 'module picosoc_mem #(\\n', '\\tparameter integer WORDS = 256\\n', ') (\\n', '\\tinput clk,\\n', '\\tinput [3:0] wen,\\n', '\\tinput [21:0] addr,\\n', '\\tinput [31:0] wdata,\\n', '\\toutput reg [31:0] rdata\\n', ');\\n', '\\treg [31:0] mem [0:WORDS-1];\\n', '\\n', '\\talways @(posedge clk) begin\\n', '\\t\\trdata <= mem[addr];\\n', '\\t\\tif (wen[0]) mem[addr][ 7: 0] <= wdata[ 7: 0];\\n', '\\t\\tif (wen[1]) mem[addr][15: 8] <= wdata[15: 8];\\n', '\\t\\tif (wen[2]) mem[addr][23:16] <= wdata[23:16];\\n', '\\t\\tif (wen[3]) mem[addr][31:24] <= wdata[31:24];\\n', '\\tend\\n', 'endmodule\\n', '\\n']"}
{"text": "['/*\\n', ' *  PicoSoC - A simple example SoC using PicoRV32\\n', ' *\\n', ' *  Copyright (C) 2017  Claire Xenia Wolf <claire@yosyshq.com>\\n', ' *\\n', ' *  Permission to use, copy, modify, and/or distribute this software for any\\n', ' *  purpose with or without fee is hereby granted, provided that the above\\n', ' *  copyright notice and this permission notice appear in all copies.\\n', ' *\\n', ' *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\\n', ' *  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\\n', ' *  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\\n', ' *  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\\n', ' *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\\n', ' *  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\\n', ' *  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\\n', ' *\\n', ' */\\n', '\\n', 'module simpleuart #(parameter integer DEFAULT_DIV = 1) (\\n', '\\tinput clk,\\n', '\\tinput resetn,\\n', '\\n', '\\toutput ser_tx,\\n', '\\tinput  ser_rx,\\n', '\\n', '\\tinput   [3:0] reg_div_we,\\n', '\\tinput  [31:0] reg_div_di,\\n', '\\toutput [31:0] reg_div_do,\\n', '\\n', '\\tinput         reg_dat_we,\\n', '\\tinput         reg_dat_re,\\n', '\\tinput  [31:0] reg_dat_di,\\n', '\\toutput [31:0] reg_dat_do,\\n', '\\toutput        reg_dat_wait\\n', ');\\n', '\\treg [31:0] cfg_divider;\\n', '\\n', '\\treg [3:0] recv_state;\\n', '\\treg [31:0] recv_divcnt;\\n', '\\treg [7:0] recv_pattern;\\n', '\\treg [7:0] recv_buf_data;\\n', '\\treg recv_buf_valid;\\n', '\\n', '\\treg [9:0] send_pattern;\\n', '\\treg [3:0] send_bitcnt;\\n', '\\treg [31:0] send_divcnt;\\n', '\\treg send_dummy;\\n', '\\n', '\\tassign reg_div_do = cfg_divider;\\n', '\\n', '\\tassign reg_dat_wait = reg_dat_we && (send_bitcnt || send_dummy);\\n', '\\tassign reg_dat_do = recv_buf_valid ? recv_buf_data : ~0;\\n', '\\n', '\\talways @(posedge clk) begin\\n', '\\t\\tif (!resetn) begin\\n', '\\t\\t\\tcfg_divider <= DEFAULT_DIV;\\n', '\\t\\tend else begin\\n', '\\t\\t\\tif (reg_div_we[0]) cfg_divider[ 7: 0] <= reg_div_di[ 7: 0];\\n', '\\t\\t\\tif (reg_div_we[1]) cfg_divider[15: 8] <= reg_div_di[15: 8];\\n', '\\t\\t\\tif (reg_div_we[2]) cfg_divider[23:16] <= reg_div_di[23:16];\\n', '\\t\\t\\tif (reg_div_we[3]) cfg_divider[31:24] <= reg_div_di[31:24];\\n', '\\t\\tend\\n', '\\tend\\n', '\\n', '\\talways @(posedge clk) begin\\n', '\\t\\tif (!resetn) begin\\n', '\\t\\t\\trecv_state <= 0;\\n', '\\t\\t\\trecv_divcnt <= 0;\\n', '\\t\\t\\trecv_pattern <= 0;\\n', '\\t\\t\\trecv_buf_data <= 0;\\n', '\\t\\t\\trecv_buf_valid <= 0;\\n', '\\t\\tend else begin\\n', '\\t\\t\\trecv_divcnt <= recv_divcnt + 1;\\n', '\\t\\t\\tif (reg_dat_re)\\n', '\\t\\t\\t\\trecv_buf_valid <= 0;\\n', '\\t\\t\\tcase (recv_state)\\n', '\\t\\t\\t\\t0: begin\\n', '\\t\\t\\t\\t\\tif (!ser_rx)\\n', '\\t\\t\\t\\t\\t\\trecv_state <= 1;\\n', '\\t\\t\\t\\t\\trecv_divcnt <= 0;\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\t1: begin\\n', '\\t\\t\\t\\t\\tif (2*recv_divcnt > cfg_divider) begin\\n', '\\t\\t\\t\\t\\t\\trecv_state <= 2;\\n', '\\t\\t\\t\\t\\t\\trecv_divcnt <= 0;\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\t10: begin\\n', '\\t\\t\\t\\t\\tif (recv_divcnt > cfg_divider) begin\\n', '\\t\\t\\t\\t\\t\\trecv_buf_data <= recv_pattern;\\n', '\\t\\t\\t\\t\\t\\trecv_buf_valid <= 1;\\n', '\\t\\t\\t\\t\\t\\trecv_state <= 0;\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tdefault: begin\\n', '\\t\\t\\t\\t\\tif (recv_divcnt > cfg_divider) begin\\n', '\\t\\t\\t\\t\\t\\trecv_pattern <= {ser_rx, recv_pattern[7:1]};\\n', '\\t\\t\\t\\t\\t\\trecv_state <= recv_state + 1;\\n', '\\t\\t\\t\\t\\t\\trecv_divcnt <= 0;\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\tendcase\\n', '\\t\\tend\\n', '\\tend\\n', '\\n', '\\tassign ser_tx = send_pattern[0];\\n', '\\n', '\\talways @(posedge clk) begin\\n', '\\t\\tif (reg_div_we)\\n', '\\t\\t\\tsend_dummy <= 1;\\n', '\\t\\tsend_divcnt <= send_divcnt + 1;\\n', '\\t\\tif (!resetn) begin\\n', '\\t\\t\\tsend_pattern <= ~0;\\n', '\\t\\t\\tsend_bitcnt <= 0;\\n', '\\t\\t\\tsend_divcnt <= 0;\\n', '\\t\\t\\tsend_dummy <= 1;\\n', '\\t\\tend else begin\\n', '\\t\\t\\tif (send_dummy && !send_bitcnt) begin\\n', '\\t\\t\\t\\tsend_pattern <= ~0;\\n', '\\t\\t\\t\\tsend_bitcnt <= 15;\\n', '\\t\\t\\t\\tsend_divcnt <= 0;\\n', '\\t\\t\\t\\tsend_dummy <= 0;\\n', '\\t\\t\\tend else\\n', '\\t\\t\\tif (reg_dat_we && !send_bitcnt) begin\\n', \"\\t\\t\\t\\tsend_pattern <= {1'b1, reg_dat_di[7:0], 1'b0};\\n\", '\\t\\t\\t\\tsend_bitcnt <= 10;\\n', '\\t\\t\\t\\tsend_divcnt <= 0;\\n', '\\t\\t\\tend else\\n', '\\t\\t\\tif (send_divcnt > cfg_divider && send_bitcnt) begin\\n', \"\\t\\t\\t\\tsend_pattern <= {1'b1, send_pattern[9:1]};\\n\", '\\t\\t\\t\\tsend_bitcnt <= send_bitcnt - 1;\\n', '\\t\\t\\t\\tsend_divcnt <= 0;\\n', '\\t\\t\\tend\\n', '\\t\\tend\\n', '\\tend\\n', 'endmodule\\n']"}
{"text": "['/*\\n', ' *  PicoSoC - A simple example SoC using PicoRV32\\n', ' *\\n', ' *  Copyright (C) 2017  Claire Xenia Wolf <claire@yosyshq.com>\\n', ' *\\n', ' *  Permission to use, copy, modify, and/or distribute this software for any\\n', ' *  purpose with or without fee is hereby granted, provided that the above\\n', ' *  copyright notice and this permission notice appear in all copies.\\n', ' *\\n', ' *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\\n', ' *  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\\n', ' *  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\\n', ' *  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\\n', ' *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\\n', ' *  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\\n', ' *  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\\n', ' *\\n', ' */\\n', '\\n', '`timescale 1 ns / 1 ps\\n', '\\n', '//\\n', '// Simple SPI flash simulation model\\n', '//\\n', '// This model samples io input signals 1ns before the SPI clock edge and\\n', '// updates output signals 1ns after the SPI clock edge.\\n', '//\\n', '// Supported commands:\\n', '//    AB, B9, FF, 03, BB, EB, ED\\n', '//\\n', '// Well written SPI flash data sheets:\\n', '//    Cypress S25FL064L http://www.cypress.com/file/316661/download\\n', '//    Cypress S25FL128L http://www.cypress.com/file/316171/download\\n', '//\\n', '// SPI flash used on iCEBreaker board:\\n', '//    https://www.winbond.com/resource-files/w25q128jv%20dtr%20revb%2011042016.pdf\\n', '//\\n', '\\n', 'module spiflash (\\n', '\\tinput csb,\\n', '\\tinput clk,\\n', '\\tinout io0, // MOSI\\n', '\\tinout io1, // MISO\\n', '\\tinout io2,\\n', '\\tinout io3\\n', ');\\n', '\\tlocalparam verbose = 0;\\n', '\\tlocalparam integer latency = 8;\\n', '\\n', '\\treg [7:0] buffer;\\n', '\\tinteger bitcount = 0;\\n', '\\tinteger bytecount = 0;\\n', '\\tinteger dummycount = 0;\\n', '\\n', '\\treg [7:0] spi_cmd;\\n', '\\treg [7:0] xip_cmd = 0;\\n', '\\treg [23:0] spi_addr;\\n', '\\n', '\\treg [7:0] spi_in;\\n', '\\treg [7:0] spi_out;\\n', '\\treg spi_io_vld;\\n', '\\n', '\\treg powered_up = 0;\\n', '\\n', '\\tlocalparam [3:0] mode_spi         = 1;\\n', '\\tlocalparam [3:0] mode_dspi_rd     = 2;\\n', '\\tlocalparam [3:0] mode_dspi_wr     = 3;\\n', '\\tlocalparam [3:0] mode_qspi_rd     = 4;\\n', '\\tlocalparam [3:0] mode_qspi_wr     = 5;\\n', '\\tlocalparam [3:0] mode_qspi_ddr_rd = 6;\\n', '\\tlocalparam [3:0] mode_qspi_ddr_wr = 7;\\n', '\\n', '\\treg [3:0] mode = 0;\\n', '\\treg [3:0] next_mode = 0;\\n', '\\n', '\\treg io0_oe = 0;\\n', '\\treg io1_oe = 0;\\n', '\\treg io2_oe = 0;\\n', '\\treg io3_oe = 0;\\n', '\\n', '\\treg io0_dout = 0;\\n', '\\treg io1_dout = 0;\\n', '\\treg io2_dout = 0;\\n', '\\treg io3_dout = 0;\\n', '\\n', \"\\tassign #1 io0 = io0_oe ? io0_dout : 1'bz;\\n\", \"\\tassign #1 io1 = io1_oe ? io1_dout : 1'bz;\\n\", \"\\tassign #1 io2 = io2_oe ? io2_dout : 1'bz;\\n\", \"\\tassign #1 io3 = io3_oe ? io3_dout : 1'bz;\\n\", '\\n', '\\twire io0_delayed;\\n', '\\twire io1_delayed;\\n', '\\twire io2_delayed;\\n', '\\twire io3_delayed;\\n', '\\n', '\\tassign #1 io0_delayed = io0;\\n', '\\tassign #1 io1_delayed = io1;\\n', '\\tassign #1 io2_delayed = io2;\\n', '\\tassign #1 io3_delayed = io3;\\n', '\\n', '\\t// 16 MB (128Mb) Flash\\n', '\\treg [7:0] memory [0:16*1024*1024-1];\\n', '\\n', '\\treg [1023:0] firmware_file;\\n', '\\tinitial begin\\n', '\\t\\tif (!$value$plusargs(\"firmware=%s\", firmware_file))\\n', '\\t\\t\\tfirmware_file = \"firmware.hex\";\\n', '\\t\\t$readmemh(firmware_file, memory);\\n', '\\tend\\n', '\\n', '\\ttask spi_action;\\n', '\\t\\tbegin\\n', '\\t\\t\\tspi_in = buffer;\\n', '\\n', '\\t\\t\\tif (bytecount == 1) begin\\n', '\\t\\t\\t\\tspi_cmd = buffer;\\n', '\\n', \"\\t\\t\\t\\tif (spi_cmd == 8'h ab)\\n\", '\\t\\t\\t\\t\\tpowered_up = 1;\\n', '\\n', \"\\t\\t\\t\\tif (spi_cmd == 8'h b9)\\n\", '\\t\\t\\t\\t\\tpowered_up = 0;\\n', '\\n', \"\\t\\t\\t\\tif (spi_cmd == 8'h ff)\\n\", '\\t\\t\\t\\t\\txip_cmd = 0;\\n', '\\t\\t\\tend\\n', '\\n', \"\\t\\t\\tif (powered_up && spi_cmd == 'h 03) begin\\n\", '\\t\\t\\t\\tif (bytecount == 2)\\n', '\\t\\t\\t\\t\\tspi_addr[23:16] = buffer;\\n', '\\n', '\\t\\t\\t\\tif (bytecount == 3)\\n', '\\t\\t\\t\\t\\tspi_addr[15:8] = buffer;\\n', '\\n', '\\t\\t\\t\\tif (bytecount == 4)\\n', '\\t\\t\\t\\t\\tspi_addr[7:0] = buffer;\\n', '\\n', '\\t\\t\\t\\tif (bytecount >= 4) begin\\n', '\\t\\t\\t\\t\\tbuffer = memory[spi_addr];\\n', '\\t\\t\\t\\t\\tspi_addr = spi_addr + 1;\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\tend\\n', '\\n', \"\\t\\t\\tif (powered_up && spi_cmd == 'h bb) begin\\n\", '\\t\\t\\t\\tif (bytecount == 1)\\n', '\\t\\t\\t\\t\\tmode = mode_dspi_rd;\\n', '\\n', '\\t\\t\\t\\tif (bytecount == 2)\\n', '\\t\\t\\t\\t\\tspi_addr[23:16] = buffer;\\n', '\\n', '\\t\\t\\t\\tif (bytecount == 3)\\n', '\\t\\t\\t\\t\\tspi_addr[15:8] = buffer;\\n', '\\n', '\\t\\t\\t\\tif (bytecount == 4)\\n', '\\t\\t\\t\\t\\tspi_addr[7:0] = buffer;\\n', '\\n', '\\t\\t\\t\\tif (bytecount == 5) begin\\n', \"\\t\\t\\t\\t\\txip_cmd = (buffer == 8'h a5) ? spi_cmd : 8'h 00;\\n\", '\\t\\t\\t\\t\\tmode = mode_dspi_wr;\\n', '\\t\\t\\t\\t\\tdummycount = latency;\\n', '\\t\\t\\t\\tend\\n', '\\n', '\\t\\t\\t\\tif (bytecount >= 5) begin\\n', '\\t\\t\\t\\t\\tbuffer = memory[spi_addr];\\n', '\\t\\t\\t\\t\\tspi_addr = spi_addr + 1;\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\tend\\n', '\\n', \"\\t\\t\\tif (powered_up && spi_cmd == 'h eb) begin\\n\", '\\t\\t\\t\\tif (bytecount == 1)\\n', '\\t\\t\\t\\t\\tmode = mode_qspi_rd;\\n', '\\n', '\\t\\t\\t\\tif (bytecount == 2)\\n', '\\t\\t\\t\\t\\tspi_addr[23:16] = buffer;\\n', '\\n', '\\t\\t\\t\\tif (bytecount == 3)\\n', '\\t\\t\\t\\t\\tspi_addr[15:8] = buffer;\\n', '\\n', '\\t\\t\\t\\tif (bytecount == 4)\\n', '\\t\\t\\t\\t\\tspi_addr[7:0] = buffer;\\n', '\\n', '\\t\\t\\t\\tif (bytecount == 5) begin\\n', \"\\t\\t\\t\\t\\txip_cmd = (buffer == 8'h a5) ? spi_cmd : 8'h 00;\\n\", '\\t\\t\\t\\t\\tmode = mode_qspi_wr;\\n', '\\t\\t\\t\\t\\tdummycount = latency;\\n', '\\t\\t\\t\\tend\\n', '\\n', '\\t\\t\\t\\tif (bytecount >= 5) begin\\n', '\\t\\t\\t\\t\\tbuffer = memory[spi_addr];\\n', '\\t\\t\\t\\t\\tspi_addr = spi_addr + 1;\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\tend\\n', '\\n', \"\\t\\t\\tif (powered_up && spi_cmd == 'h ed) begin\\n\", '\\t\\t\\t\\tif (bytecount == 1)\\n', '\\t\\t\\t\\t\\tnext_mode = mode_qspi_ddr_rd;\\n', '\\n', '\\t\\t\\t\\tif (bytecount == 2)\\n', '\\t\\t\\t\\t\\tspi_addr[23:16] = buffer;\\n', '\\n', '\\t\\t\\t\\tif (bytecount == 3)\\n', '\\t\\t\\t\\t\\tspi_addr[15:8] = buffer;\\n', '\\n', '\\t\\t\\t\\tif (bytecount == 4)\\n', '\\t\\t\\t\\t\\tspi_addr[7:0] = buffer;\\n', '\\n', '\\t\\t\\t\\tif (bytecount == 5) begin\\n', \"\\t\\t\\t\\t\\txip_cmd = (buffer == 8'h a5) ? spi_cmd : 8'h 00;\\n\", '\\t\\t\\t\\t\\tmode = mode_qspi_ddr_wr;\\n', '\\t\\t\\t\\t\\tdummycount = latency;\\n', '\\t\\t\\t\\tend\\n', '\\n', '\\t\\t\\t\\tif (bytecount >= 5) begin\\n', '\\t\\t\\t\\t\\tbuffer = memory[spi_addr];\\n', '\\t\\t\\t\\t\\tspi_addr = spi_addr + 1;\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\tend\\n', '\\n', '\\t\\t\\tspi_out = buffer;\\n', '\\t\\t\\tspi_io_vld = 1;\\n', '\\n', '\\t\\t\\tif (verbose) begin\\n', '\\t\\t\\t\\tif (bytecount == 1)\\n', '\\t\\t\\t\\t\\t$write(\"<SPI-START>\");\\n', '\\t\\t\\t\\t$write(\"<SPI:%02x:%02x>\", spi_in, spi_out);\\n', '\\t\\t\\tend\\n', '\\n', '\\t\\tend\\n', '\\tendtask\\n', '\\n', '\\ttask ddr_rd_edge;\\n', '\\t\\tbegin\\n', '\\t\\t\\tbuffer = {buffer, io3_delayed, io2_delayed, io1_delayed, io0_delayed};\\n', '\\t\\t\\tbitcount = bitcount + 4;\\n', '\\t\\t\\tif (bitcount == 8) begin\\n', '\\t\\t\\t\\tbitcount = 0;\\n', '\\t\\t\\t\\tbytecount = bytecount + 1;\\n', '\\t\\t\\t\\tspi_action;\\n', '\\t\\t\\tend\\n', '\\t\\tend\\n', '\\tendtask\\n', '\\n', '\\ttask ddr_wr_edge;\\n', '\\t\\tbegin\\n', '\\t\\t\\tio0_oe = 1;\\n', '\\t\\t\\tio1_oe = 1;\\n', '\\t\\t\\tio2_oe = 1;\\n', '\\t\\t\\tio3_oe = 1;\\n', '\\n', '\\t\\t\\tio0_dout = buffer[4];\\n', '\\t\\t\\tio1_dout = buffer[5];\\n', '\\t\\t\\tio2_dout = buffer[6];\\n', '\\t\\t\\tio3_dout = buffer[7];\\n', '\\n', \"\\t\\t\\tbuffer = {buffer, 4'h 0};\\n\", '\\t\\t\\tbitcount = bitcount + 4;\\n', '\\t\\t\\tif (bitcount == 8) begin\\n', '\\t\\t\\t\\tbitcount = 0;\\n', '\\t\\t\\t\\tbytecount = bytecount + 1;\\n', '\\t\\t\\t\\tspi_action;\\n', '\\t\\t\\tend\\n', '\\t\\tend\\n', '\\tendtask\\n', '\\n', '\\talways @(csb) begin\\n', '\\t\\tif (csb) begin\\n', '\\t\\t\\tif (verbose) begin\\n', '\\t\\t\\t\\t$display(\"\");\\n', '\\t\\t\\t\\t$fflush;\\n', '\\t\\t\\tend\\n', '\\t\\t\\tbuffer = 0;\\n', '\\t\\t\\tbitcount = 0;\\n', '\\t\\t\\tbytecount = 0;\\n', '\\t\\t\\tmode = mode_spi;\\n', '\\t\\t\\tio0_oe = 0;\\n', '\\t\\t\\tio1_oe = 0;\\n', '\\t\\t\\tio2_oe = 0;\\n', '\\t\\t\\tio3_oe = 0;\\n', '\\t\\tend else\\n', '\\t\\tif (xip_cmd) begin\\n', '\\t\\t\\tbuffer = xip_cmd;\\n', '\\t\\t\\tbitcount = 0;\\n', '\\t\\t\\tbytecount = 1;\\n', '\\t\\t\\tspi_action;\\n', '\\t\\tend\\n', '\\tend\\n', '\\n', '\\talways @(csb, clk) begin\\n', '\\t\\tspi_io_vld = 0;\\n', '\\t\\tif (!csb && !clk) begin\\n', '\\t\\t\\tif (dummycount > 0) begin\\n', '\\t\\t\\t\\tio0_oe = 0;\\n', '\\t\\t\\t\\tio1_oe = 0;\\n', '\\t\\t\\t\\tio2_oe = 0;\\n', '\\t\\t\\t\\tio3_oe = 0;\\n', '\\t\\t\\tend else\\n', '\\t\\t\\tcase (mode)\\n', '\\t\\t\\t\\tmode_spi: begin\\n', '\\t\\t\\t\\t\\tio0_oe = 0;\\n', '\\t\\t\\t\\t\\tio1_oe = 1;\\n', '\\t\\t\\t\\t\\tio2_oe = 0;\\n', '\\t\\t\\t\\t\\tio3_oe = 0;\\n', '\\t\\t\\t\\t\\tio1_dout = buffer[7];\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tmode_dspi_rd: begin\\n', '\\t\\t\\t\\t\\tio0_oe = 0;\\n', '\\t\\t\\t\\t\\tio1_oe = 0;\\n', '\\t\\t\\t\\t\\tio2_oe = 0;\\n', '\\t\\t\\t\\t\\tio3_oe = 0;\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tmode_dspi_wr: begin\\n', '\\t\\t\\t\\t\\tio0_oe = 1;\\n', '\\t\\t\\t\\t\\tio1_oe = 1;\\n', '\\t\\t\\t\\t\\tio2_oe = 0;\\n', '\\t\\t\\t\\t\\tio3_oe = 0;\\n', '\\t\\t\\t\\t\\tio0_dout = buffer[6];\\n', '\\t\\t\\t\\t\\tio1_dout = buffer[7];\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tmode_qspi_rd: begin\\n', '\\t\\t\\t\\t\\tio0_oe = 0;\\n', '\\t\\t\\t\\t\\tio1_oe = 0;\\n', '\\t\\t\\t\\t\\tio2_oe = 0;\\n', '\\t\\t\\t\\t\\tio3_oe = 0;\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tmode_qspi_wr: begin\\n', '\\t\\t\\t\\t\\tio0_oe = 1;\\n', '\\t\\t\\t\\t\\tio1_oe = 1;\\n', '\\t\\t\\t\\t\\tio2_oe = 1;\\n', '\\t\\t\\t\\t\\tio3_oe = 1;\\n', '\\t\\t\\t\\t\\tio0_dout = buffer[4];\\n', '\\t\\t\\t\\t\\tio1_dout = buffer[5];\\n', '\\t\\t\\t\\t\\tio2_dout = buffer[6];\\n', '\\t\\t\\t\\t\\tio3_dout = buffer[7];\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tmode_qspi_ddr_rd: begin\\n', '\\t\\t\\t\\t\\tddr_rd_edge;\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tmode_qspi_ddr_wr: begin\\n', '\\t\\t\\t\\t\\tddr_wr_edge;\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\tendcase\\n', '\\t\\t\\tif (next_mode) begin\\n', '\\t\\t\\t\\tcase (next_mode)\\n', '\\t\\t\\t\\t\\tmode_qspi_ddr_rd: begin\\n', '\\t\\t\\t\\t\\t\\tio0_oe = 0;\\n', '\\t\\t\\t\\t\\t\\tio1_oe = 0;\\n', '\\t\\t\\t\\t\\t\\tio2_oe = 0;\\n', '\\t\\t\\t\\t\\t\\tio3_oe = 0;\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\t\\tmode_qspi_ddr_wr: begin\\n', '\\t\\t\\t\\t\\t\\tio0_oe = 1;\\n', '\\t\\t\\t\\t\\t\\tio1_oe = 1;\\n', '\\t\\t\\t\\t\\t\\tio2_oe = 1;\\n', '\\t\\t\\t\\t\\t\\tio3_oe = 1;\\n', '\\t\\t\\t\\t\\t\\tio0_dout = buffer[4];\\n', '\\t\\t\\t\\t\\t\\tio1_dout = buffer[5];\\n', '\\t\\t\\t\\t\\t\\tio2_dout = buffer[6];\\n', '\\t\\t\\t\\t\\t\\tio3_dout = buffer[7];\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tendcase\\n', '\\t\\t\\t\\tmode = next_mode;\\n', '\\t\\t\\t\\tnext_mode = 0;\\n', '\\t\\t\\tend\\n', '\\t\\tend\\n', '\\tend\\n', '\\n', '\\talways @(posedge clk) begin\\n', '\\t\\tif (!csb) begin\\n', '\\t\\t\\tif (dummycount > 0) begin\\n', '\\t\\t\\t\\tdummycount = dummycount - 1;\\n', '\\t\\t\\tend else\\n', '\\t\\t\\tcase (mode)\\n', '\\t\\t\\t\\tmode_spi: begin\\n', '\\t\\t\\t\\t\\tbuffer = {buffer, io0};\\n', '\\t\\t\\t\\t\\tbitcount = bitcount + 1;\\n', '\\t\\t\\t\\t\\tif (bitcount == 8) begin\\n', '\\t\\t\\t\\t\\t\\tbitcount = 0;\\n', '\\t\\t\\t\\t\\t\\tbytecount = bytecount + 1;\\n', '\\t\\t\\t\\t\\t\\tspi_action;\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tmode_dspi_rd, mode_dspi_wr: begin\\n', '\\t\\t\\t\\t\\tbuffer = {buffer, io1, io0};\\n', '\\t\\t\\t\\t\\tbitcount = bitcount + 2;\\n', '\\t\\t\\t\\t\\tif (bitcount == 8) begin\\n', '\\t\\t\\t\\t\\t\\tbitcount = 0;\\n', '\\t\\t\\t\\t\\t\\tbytecount = bytecount + 1;\\n', '\\t\\t\\t\\t\\t\\tspi_action;\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tmode_qspi_rd, mode_qspi_wr: begin\\n', '\\t\\t\\t\\t\\tbuffer = {buffer, io3, io2, io1, io0};\\n', '\\t\\t\\t\\t\\tbitcount = bitcount + 4;\\n', '\\t\\t\\t\\t\\tif (bitcount == 8) begin\\n', '\\t\\t\\t\\t\\t\\tbitcount = 0;\\n', '\\t\\t\\t\\t\\t\\tbytecount = bytecount + 1;\\n', '\\t\\t\\t\\t\\t\\tspi_action;\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tmode_qspi_ddr_rd: begin\\n', '\\t\\t\\t\\t\\tddr_rd_edge;\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tmode_qspi_ddr_wr: begin\\n', '\\t\\t\\t\\t\\tddr_wr_edge;\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\tendcase\\n', '\\t\\tend\\n', '\\tend\\n', 'endmodule\\n']"}
{"text": "['/*\\n', ' *  PicoSoC - A simple example SoC using PicoRV32\\n', ' *\\n', ' *  Copyright (C) 2017  Claire Xenia Wolf <claire@yosyshq.com>\\n', ' *\\n', ' *  Permission to use, copy, modify, and/or distribute this software for any\\n', ' *  purpose with or without fee is hereby granted, provided that the above\\n', ' *  copyright notice and this permission notice appear in all copies.\\n', ' *\\n', ' *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\\n', ' *  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\\n', ' *  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\\n', ' *  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\\n', ' *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\\n', ' *  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\\n', ' *  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\\n', ' *\\n', ' */\\n', '\\n', '`timescale 1 ns / 1 ps\\n', '\\n', 'module testbench;\\n', '\\treg flash_csb = 1;\\n', '\\treg flash_clk = 0;\\n', '\\n', '\\twire flash_io0;\\n', '\\twire flash_io1;\\n', '\\twire flash_io2;\\n', '\\twire flash_io3;\\n', '\\n', '\\treg flash_io0_oe = 0;\\n', '\\treg flash_io1_oe = 0;\\n', '\\treg flash_io2_oe = 0;\\n', '\\treg flash_io3_oe = 0;\\n', '\\n', '\\treg flash_io0_dout = 0;\\n', '\\treg flash_io1_dout = 0;\\n', '\\treg flash_io2_dout = 0;\\n', '\\treg flash_io3_dout = 0;\\n', '\\n', \"\\tassign flash_io0 = flash_io0_oe ? flash_io0_dout : 1'bz;\\n\", \"\\tassign flash_io1 = flash_io1_oe ? flash_io1_dout : 1'bz;\\n\", \"\\tassign flash_io2 = flash_io2_oe ? flash_io2_dout : 1'bz;\\n\", \"\\tassign flash_io3 = flash_io3_oe ? flash_io3_dout : 1'bz;\\n\", '\\n', '\\tspiflash uut (\\n', '\\t\\t.csb(flash_csb),\\n', '\\t\\t.clk(flash_clk),\\n', '\\t\\t.io0(flash_io0),\\n', '\\t\\t.io1(flash_io1),\\n', '\\t\\t.io2(flash_io2),\\n', '\\t\\t.io3(flash_io3)\\n', '\\t);\\n', '\\n', \"\\tlocalparam [23:0] offset = 24'h100000;\\n\", \"\\tlocalparam [31:0] word0 = 32'h 00000093;\\n\", \"\\tlocalparam [31:0] word1 = 32'h 00000193;\\n\", '\\n', '\\treg [7:0] rdata;\\n', '\\tinteger errcount = 0;\\n', '\\n', '\\ttask expect;\\n', '\\t\\tinput [7:0] data;\\n', '\\t\\tbegin\\n', '\\t\\t\\tif (data !== rdata) begin\\n', '\\t\\t\\t\\t$display(\"ERROR: Got %x (%b) but expected %x (%b).\", rdata, rdata, data, data);\\n', '\\t\\t\\t\\terrcount = errcount + 1;\\n', '\\t\\t\\tend\\n', '\\t\\tend\\n', '\\tendtask\\n', '\\n', '\\ttask xfer_begin;\\n', '\\t\\tbegin\\n', '\\t\\t\\t#5;\\n', '\\t\\t\\tflash_csb = 0;\\n', '\\t\\t\\t$display(\"-- BEGIN\");\\n', '\\t\\t\\t#5;\\n', '\\t\\tend\\n', '\\tendtask\\n', '\\n', '\\ttask xfer_dummy;\\n', '\\t\\tbegin\\n', '\\t\\t\\tflash_io0_oe = 0;\\n', '\\t\\t\\tflash_io1_oe = 0;\\n', '\\t\\t\\tflash_io2_oe = 0;\\n', '\\t\\t\\tflash_io3_oe = 0;\\n', '\\n', '\\t\\t\\t#5;\\n', '\\t\\t\\tflash_clk = 1;\\n', '\\t\\t\\t#5;\\n', '\\t\\t\\tflash_clk = 0;\\n', '\\t\\t\\t#5;\\n', '\\t\\tend\\n', '\\tendtask\\n', '\\n', '\\ttask xfer_end;\\n', '\\t\\tbegin\\n', '\\t\\t\\t#5;\\n', '\\t\\t\\tflash_csb = 1;\\n', '\\t\\t\\tflash_io0_oe = 0;\\n', '\\t\\t\\tflash_io1_oe = 0;\\n', '\\t\\t\\tflash_io2_oe = 0;\\n', '\\t\\t\\tflash_io3_oe = 0;\\n', '\\t\\t\\t$display(\"-- END\");\\n', '\\t\\t\\t$display(\"\");\\n', '\\t\\t\\t#5;\\n', '\\t\\tend\\n', '\\tendtask\\n', '\\n', '\\ttask xfer_spi;\\n', '\\t\\tinput [7:0] data;\\n', '\\t\\tinteger i;\\n', '\\t\\tbegin\\n', '\\t\\t\\tflash_io0_oe = 1;\\n', '\\t\\t\\tflash_io1_oe = 0;\\n', '\\t\\t\\tflash_io2_oe = 0;\\n', '\\t\\t\\tflash_io3_oe = 0;\\n', '\\n', '\\t\\t\\tfor (i = 0; i < 8; i=i+1) begin\\n', '\\t\\t\\t\\tflash_io0_dout = data[7-i];\\n', '\\t\\t\\t\\t#5;\\n', '\\t\\t\\t\\tflash_clk = 1;\\n', '\\t\\t\\t\\trdata[7-i] = flash_io1;\\n', '\\t\\t\\t\\t#5;\\n', '\\t\\t\\t\\tflash_clk = 0;\\n', '\\t\\t\\tend\\n', '\\n', '\\t\\t\\t$display(\"--  SPI SDR  %02x %02x\", data, rdata);\\n', '\\t\\t\\t#5;\\n', '\\t\\tend\\n', '\\tendtask\\n', '\\n', '\\ttask xfer_qspi_wr;\\n', '\\t\\tinput [7:0] data;\\n', '\\t\\tinteger i;\\n', '\\t\\tbegin\\n', '\\t\\t\\tflash_io0_oe = 1;\\n', '\\t\\t\\tflash_io1_oe = 1;\\n', '\\t\\t\\tflash_io2_oe = 1;\\n', '\\t\\t\\tflash_io3_oe = 1;\\n', '\\n', '\\t\\t\\tflash_io0_dout = data[4];\\n', '\\t\\t\\tflash_io1_dout = data[5];\\n', '\\t\\t\\tflash_io2_dout = data[6];\\n', '\\t\\t\\tflash_io3_dout = data[7];\\n', '\\n', '\\t\\t\\t#5;\\n', '\\t\\t\\tflash_clk = 1;\\n', '\\n', '\\t\\t\\t#5;\\n', '\\t\\t\\tflash_clk = 0;\\n', '\\t\\t\\tflash_io0_dout = data[0];\\n', '\\t\\t\\tflash_io1_dout = data[1];\\n', '\\t\\t\\tflash_io2_dout = data[2];\\n', '\\t\\t\\tflash_io3_dout = data[3];\\n', '\\n', '\\t\\t\\t#5;\\n', '\\t\\t\\tflash_clk = 1;\\n', '\\t\\t\\t#5;\\n', '\\t\\t\\tflash_clk = 0;\\n', '\\n', '\\t\\t\\t$display(\"-- QSPI SDR  %02x --\", data);\\n', '\\t\\t\\t#5;\\n', '\\t\\tend\\n', '\\tendtask\\n', '\\n', '\\ttask xfer_qspi_rd;\\n', '\\t\\tinteger i;\\n', '\\t\\tbegin\\n', '\\t\\t\\tflash_io0_oe = 0;\\n', '\\t\\t\\tflash_io1_oe = 0;\\n', '\\t\\t\\tflash_io2_oe = 0;\\n', '\\t\\t\\tflash_io3_oe = 0;\\n', '\\n', '\\t\\t\\t#5;\\n', '\\t\\t\\tflash_clk = 1;\\n', '\\t\\t\\trdata[4] = flash_io0;\\n', '\\t\\t\\trdata[5] = flash_io1;\\n', '\\t\\t\\trdata[6] = flash_io2;\\n', '\\t\\t\\trdata[7] = flash_io3;\\n', '\\n', '\\t\\t\\t#5;\\n', '\\t\\t\\tflash_clk = 0;\\n', '\\n', '\\t\\t\\t#5;\\n', '\\t\\t\\tflash_clk = 1;\\n', '\\t\\t\\trdata[0] = flash_io0;\\n', '\\t\\t\\trdata[1] = flash_io1;\\n', '\\t\\t\\trdata[2] = flash_io2;\\n', '\\t\\t\\trdata[3] = flash_io3;\\n', '\\n', '\\t\\t\\t#5;\\n', '\\t\\t\\tflash_clk = 0;\\n', '\\n', '\\t\\t\\t$display(\"-- QSPI SDR  -- %02x\", rdata);\\n', '\\t\\t\\t#5;\\n', '\\t\\tend\\n', '\\tendtask\\n', '\\n', '\\ttask xfer_qspi_ddr_wr;\\n', '\\t\\tinput [7:0] data;\\n', '\\t\\tinteger i;\\n', '\\t\\tbegin\\n', '\\t\\t\\tflash_io0_oe = 1;\\n', '\\t\\t\\tflash_io1_oe = 1;\\n', '\\t\\t\\tflash_io2_oe = 1;\\n', '\\t\\t\\tflash_io3_oe = 1;\\n', '\\n', '\\t\\t\\tflash_io0_dout = data[4];\\n', '\\t\\t\\tflash_io1_dout = data[5];\\n', '\\t\\t\\tflash_io2_dout = data[6];\\n', '\\t\\t\\tflash_io3_dout = data[7];\\n', '\\n', '\\t\\t\\t#5;\\n', '\\t\\t\\tflash_clk = 1;\\n', '\\t\\t\\tflash_io0_dout = data[0];\\n', '\\t\\t\\tflash_io1_dout = data[1];\\n', '\\t\\t\\tflash_io2_dout = data[2];\\n', '\\t\\t\\tflash_io3_dout = data[3];\\n', '\\n', '\\t\\t\\t#5;\\n', '\\t\\t\\tflash_clk = 0;\\n', '\\n', '\\t\\t\\t$display(\"-- QSPI DDR  %02x --\", data);\\n', '\\t\\t\\t#5;\\n', '\\t\\tend\\n', '\\tendtask\\n', '\\n', '\\ttask xfer_qspi_ddr_rd;\\n', '\\t\\tinteger i;\\n', '\\t\\tbegin\\n', '\\t\\t\\tflash_io0_oe = 0;\\n', '\\t\\t\\tflash_io1_oe = 0;\\n', '\\t\\t\\tflash_io2_oe = 0;\\n', '\\t\\t\\tflash_io3_oe = 0;\\n', '\\n', '\\t\\t\\t#5;\\n', '\\t\\t\\tflash_clk = 1;\\n', '\\t\\t\\trdata[4] = flash_io0;\\n', '\\t\\t\\trdata[5] = flash_io1;\\n', '\\t\\t\\trdata[6] = flash_io2;\\n', '\\t\\t\\trdata[7] = flash_io3;\\n', '\\n', '\\t\\t\\t#5;\\n', '\\t\\t\\tflash_clk = 0;\\n', '\\t\\t\\trdata[0] = flash_io0;\\n', '\\t\\t\\trdata[1] = flash_io1;\\n', '\\t\\t\\trdata[2] = flash_io2;\\n', '\\t\\t\\trdata[3] = flash_io3;\\n', '\\n', '\\t\\t\\t$display(\"-- QSPI DDR  -- %02x\", rdata);\\n', '\\t\\t\\t#5;\\n', '\\t\\tend\\n', '\\tendtask\\n', '\\n', '\\tinitial begin\\n', '\\t\\t$dumpfile(\"spiflash_tb.vcd\");\\n', '\\t\\t$dumpvars(0, testbench);\\n', '\\t\\t$display(\"\");\\n', '\\n', '\\t\\t$display(\"Reset (FFh)\");\\n', '\\t\\txfer_begin;\\n', \"\\t\\txfer_spi(8'h ff);\\n\", '\\t\\txfer_end;\\n', '\\n', '\\t\\t$display(\"Power Up (ABh)\");\\n', '\\t\\txfer_begin;\\n', \"\\t\\txfer_spi(8'h ab);\\n\", '\\t\\txfer_end;\\n', '\\n', '\\t\\t$display(\"Read Data (03h)\");\\n', '\\t\\txfer_begin;\\n', \"\\t\\txfer_spi(8'h 03);\\n\", '\\t\\txfer_spi(offset[23:16]);\\n', '\\t\\txfer_spi(offset[15:8]);\\n', '\\t\\txfer_spi(offset[7:0]);\\n', \"\\t\\txfer_spi(8'h 00); expect(word0[7:0]);\\n\", \"\\t\\txfer_spi(8'h 00); expect(word0[15:8]);\\n\", \"\\t\\txfer_spi(8'h 00); expect(word0[23:16]);\\n\", \"\\t\\txfer_spi(8'h 00); expect(word0[31:24]);\\n\", \"\\t\\txfer_spi(8'h 00); expect(word1[7:0]);\\n\", \"\\t\\txfer_spi(8'h 00); expect(word1[15:8]);\\n\", \"\\t\\txfer_spi(8'h 00); expect(word1[23:16]);\\n\", \"\\t\\txfer_spi(8'h 00); expect(word1[31:24]);\\n\", '\\t\\txfer_end;\\n', '\\n', '\\t\\t$display(\"Quad I/O Read (EBh)\");\\n', '\\t\\txfer_begin;\\n', \"\\t\\txfer_spi(8'h eb);\\n\", '\\t\\txfer_qspi_wr(offset[23:16]);\\n', '\\t\\txfer_qspi_wr(offset[15:8]);\\n', '\\t\\txfer_qspi_wr(offset[7:0]);\\n', \"\\t\\txfer_qspi_wr(8'h a5);\\n\", '\\t\\trepeat (8) xfer_dummy;\\n', '\\t\\txfer_qspi_rd; expect(word0[7:0]);\\n', '\\t\\txfer_qspi_rd; expect(word0[15:8]);\\n', '\\t\\txfer_qspi_rd; expect(word0[23:16]);\\n', '\\t\\txfer_qspi_rd; expect(word0[31:24]);\\n', '\\t\\txfer_qspi_rd; expect(word1[7:0]);\\n', '\\t\\txfer_qspi_rd; expect(word1[15:8]);\\n', '\\t\\txfer_qspi_rd; expect(word1[23:16]);\\n', '\\t\\txfer_qspi_rd; expect(word1[31:24]);\\n', '\\t\\txfer_end;\\n', '\\n', '\\t\\t$display(\"Continous Quad I/O Read\");\\n', '\\t\\txfer_begin;\\n', '\\t\\txfer_qspi_wr(offset[23:16]);\\n', '\\t\\txfer_qspi_wr(offset[15:8]);\\n', '\\t\\txfer_qspi_wr(offset[7:0]);\\n', \"\\t\\txfer_qspi_wr(8'h ff);\\n\", '\\t\\trepeat (8) xfer_dummy;\\n', '\\t\\txfer_qspi_rd; expect(word0[7:0]);\\n', '\\t\\txfer_qspi_rd; expect(word0[15:8]);\\n', '\\t\\txfer_qspi_rd; expect(word0[23:16]);\\n', '\\t\\txfer_qspi_rd; expect(word0[31:24]);\\n', '\\t\\txfer_qspi_rd; expect(word1[7:0]);\\n', '\\t\\txfer_qspi_rd; expect(word1[15:8]);\\n', '\\t\\txfer_qspi_rd; expect(word1[23:16]);\\n', '\\t\\txfer_qspi_rd; expect(word1[31:24]);\\n', '\\t\\txfer_end;\\n', '\\n', '\\t\\t$display(\"DDR Quad I/O Read (EDh)\");\\n', '\\t\\txfer_begin;\\n', \"\\t\\txfer_spi(8'h ed);\\n\", '\\t\\txfer_qspi_ddr_wr(offset[23:16]);\\n', '\\t\\txfer_qspi_ddr_wr(offset[15:8]);\\n', '\\t\\txfer_qspi_ddr_wr(offset[7:0]);\\n', \"\\t\\txfer_qspi_ddr_wr(8'h a5);\\n\", '\\t\\trepeat (8) xfer_dummy;\\n', '\\t\\txfer_qspi_ddr_rd; expect(word0[7:0]);\\n', '\\t\\txfer_qspi_ddr_rd; expect(word0[15:8]);\\n', '\\t\\txfer_qspi_ddr_rd; expect(word0[23:16]);\\n', '\\t\\txfer_qspi_ddr_rd; expect(word0[31:24]);\\n', '\\t\\txfer_qspi_ddr_rd; expect(word1[7:0]);\\n', '\\t\\txfer_qspi_ddr_rd; expect(word1[15:8]);\\n', '\\t\\txfer_qspi_ddr_rd; expect(word1[23:16]);\\n', '\\t\\txfer_qspi_ddr_rd; expect(word1[31:24]);\\n', '\\t\\txfer_end;\\n', '\\n', '\\t\\t$display(\"Continous DDR Quad I/O Read\");\\n', '\\t\\txfer_begin;\\n', '\\t\\txfer_qspi_ddr_wr(offset[23:16]);\\n', '\\t\\txfer_qspi_ddr_wr(offset[15:8]);\\n', '\\t\\txfer_qspi_ddr_wr(offset[7:0]);\\n', \"\\t\\txfer_qspi_ddr_wr(8'h ff);\\n\", '\\t\\trepeat (8) xfer_dummy;\\n', '\\t\\txfer_qspi_ddr_rd; expect(word0[7:0]);\\n', '\\t\\txfer_qspi_ddr_rd; expect(word0[15:8]);\\n', '\\t\\txfer_qspi_ddr_rd; expect(word0[23:16]);\\n', '\\t\\txfer_qspi_ddr_rd; expect(word0[31:24]);\\n', '\\t\\txfer_qspi_ddr_rd; expect(word1[7:0]);\\n', '\\t\\txfer_qspi_ddr_rd; expect(word1[15:8]);\\n', '\\t\\txfer_qspi_ddr_rd; expect(word1[23:16]);\\n', '\\t\\txfer_qspi_ddr_rd; expect(word1[31:24]);\\n', '\\t\\txfer_end;\\n', '\\n', '\\t\\t#5;\\n', '\\n', '\\t\\tif (errcount) begin\\n', '\\t\\t\\t$display(\"FAIL\");\\n', '\\t\\t\\t$stop;\\n', '\\t\\tend else begin\\n', '\\t\\t\\t$display(\"PASS\");\\n', '\\t\\tend\\n', '\\tend\\n', 'endmodule\\n']"}
{"text": "['/*\\n', ' *  PicoSoC - A simple example SoC using PicoRV32\\n', ' *\\n', ' *  Copyright (C) 2017  Claire Xenia Wolf <claire@yosyshq.com>\\n', ' *\\n', ' *  Permission to use, copy, modify, and/or distribute this software for any\\n', ' *  purpose with or without fee is hereby granted, provided that the above\\n', ' *  copyright notice and this permission notice appear in all copies.\\n', ' *\\n', ' *  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\\n', ' *  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\\n', ' *  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\\n', ' *  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\\n', ' *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\\n', ' *  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\\n', ' *  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\\n', ' *\\n', ' */\\n', '\\n', 'module spimemio (\\n', '\\tinput clk, resetn,\\n', '\\n', '\\tinput valid,\\n', '\\toutput ready,\\n', '\\tinput [23:0] addr,\\n', '\\toutput reg [31:0] rdata,\\n', '\\n', '\\toutput flash_csb,\\n', '\\toutput flash_clk,\\n', '\\n', '\\toutput flash_io0_oe,\\n', '\\toutput flash_io1_oe,\\n', '\\toutput flash_io2_oe,\\n', '\\toutput flash_io3_oe,\\n', '\\n', '\\toutput flash_io0_do,\\n', '\\toutput flash_io1_do,\\n', '\\toutput flash_io2_do,\\n', '\\toutput flash_io3_do,\\n', '\\n', '\\tinput  flash_io0_di,\\n', '\\tinput  flash_io1_di,\\n', '\\tinput  flash_io2_di,\\n', '\\tinput  flash_io3_di,\\n', '\\n', '\\tinput   [3:0] cfgreg_we,\\n', '\\tinput  [31:0] cfgreg_di,\\n', '\\toutput [31:0] cfgreg_do\\n', ');\\n', '\\treg        xfer_resetn;\\n', '\\treg        din_valid;\\n', '\\twire       din_ready;\\n', '\\treg  [7:0] din_data;\\n', '\\treg  [3:0] din_tag;\\n', '\\treg        din_cont;\\n', '\\treg        din_qspi;\\n', '\\treg        din_ddr;\\n', '\\treg        din_rd;\\n', '\\n', '\\twire       dout_valid;\\n', '\\twire [7:0] dout_data;\\n', '\\twire [3:0] dout_tag;\\n', '\\n', '\\treg [23:0] buffer;\\n', '\\n', '\\treg [23:0] rd_addr;\\n', '\\treg rd_valid;\\n', '\\treg rd_wait;\\n', '\\treg rd_inc;\\n', '\\n', '\\tassign ready = valid && (addr == rd_addr) && rd_valid;\\n', '\\twire jump = valid && !ready && (addr != rd_addr+4) && rd_valid;\\n', '\\n', '\\treg softreset;\\n', '\\n', '\\treg       config_en;      // cfgreg[31]\\n', '\\treg       config_ddr;     // cfgreg[22]\\n', '\\treg       config_qspi;    // cfgreg[21]\\n', '\\treg       config_cont;    // cfgreg[20]\\n', '\\treg [3:0] config_dummy;   // cfgreg[19:16]\\n', '\\treg [3:0] config_oe;      // cfgreg[11:8]\\n', '\\treg       config_csb;     // cfgreg[5]\\n', '\\treg       config_clk;     // cfgref[4]\\n', '\\treg [3:0] config_do;      // cfgreg[3:0]\\n', '\\n', '\\tassign cfgreg_do[31] = config_en;\\n', '\\tassign cfgreg_do[30:23] = 0;\\n', '\\tassign cfgreg_do[22] = config_ddr;\\n', '\\tassign cfgreg_do[21] = config_qspi;\\n', '\\tassign cfgreg_do[20] = config_cont;\\n', '\\tassign cfgreg_do[19:16] = config_dummy;\\n', '\\tassign cfgreg_do[15:12] = 0;\\n', '\\tassign cfgreg_do[11:8] = {flash_io3_oe, flash_io2_oe, flash_io1_oe, flash_io0_oe};\\n', '\\tassign cfgreg_do[7:6] = 0;\\n', '\\tassign cfgreg_do[5] = flash_csb;\\n', '\\tassign cfgreg_do[4] = flash_clk;\\n', '\\tassign cfgreg_do[3:0] = {flash_io3_di, flash_io2_di, flash_io1_di, flash_io0_di};\\n', '\\n', '\\talways @(posedge clk) begin\\n', '\\t\\tsoftreset <= !config_en || cfgreg_we;\\n', '\\t\\tif (!resetn) begin\\n', '\\t\\t\\tsoftreset <= 1;\\n', '\\t\\t\\tconfig_en <= 1;\\n', '\\t\\t\\tconfig_csb <= 0;\\n', '\\t\\t\\tconfig_clk <= 0;\\n', '\\t\\t\\tconfig_oe <= 0;\\n', '\\t\\t\\tconfig_do <= 0;\\n', '\\t\\t\\tconfig_ddr <= 0;\\n', '\\t\\t\\tconfig_qspi <= 0;\\n', '\\t\\t\\tconfig_cont <= 0;\\n', '\\t\\t\\tconfig_dummy <= 8;\\n', '\\t\\tend else begin\\n', '\\t\\t\\tif (cfgreg_we[0]) begin\\n', '\\t\\t\\t\\tconfig_csb <= cfgreg_di[5];\\n', '\\t\\t\\t\\tconfig_clk <= cfgreg_di[4];\\n', '\\t\\t\\t\\tconfig_do <= cfgreg_di[3:0];\\n', '\\t\\t\\tend\\n', '\\t\\t\\tif (cfgreg_we[1]) begin\\n', '\\t\\t\\t\\tconfig_oe <= cfgreg_di[11:8];\\n', '\\t\\t\\tend\\n', '\\t\\t\\tif (cfgreg_we[2]) begin\\n', '\\t\\t\\t\\tconfig_ddr <= cfgreg_di[22];\\n', '\\t\\t\\t\\tconfig_qspi <= cfgreg_di[21];\\n', '\\t\\t\\t\\tconfig_cont <= cfgreg_di[20];\\n', '\\t\\t\\t\\tconfig_dummy <= cfgreg_di[19:16];\\n', '\\t\\t\\tend\\n', '\\t\\t\\tif (cfgreg_we[3]) begin\\n', '\\t\\t\\t\\tconfig_en <= cfgreg_di[31];\\n', '\\t\\t\\tend\\n', '\\t\\tend\\n', '\\tend\\n', '\\n', '\\twire xfer_csb;\\n', '\\twire xfer_clk;\\n', '\\n', '\\twire xfer_io0_oe;\\n', '\\twire xfer_io1_oe;\\n', '\\twire xfer_io2_oe;\\n', '\\twire xfer_io3_oe;\\n', '\\n', '\\twire xfer_io0_do;\\n', '\\twire xfer_io1_do;\\n', '\\twire xfer_io2_do;\\n', '\\twire xfer_io3_do;\\n', '\\n', '\\treg xfer_io0_90;\\n', '\\treg xfer_io1_90;\\n', '\\treg xfer_io2_90;\\n', '\\treg xfer_io3_90;\\n', '\\n', '\\talways @(negedge clk) begin\\n', '\\t\\txfer_io0_90 <= xfer_io0_do;\\n', '\\t\\txfer_io1_90 <= xfer_io1_do;\\n', '\\t\\txfer_io2_90 <= xfer_io2_do;\\n', '\\t\\txfer_io3_90 <= xfer_io3_do;\\n', '\\tend\\n', '\\n', '\\tassign flash_csb = config_en ? xfer_csb : config_csb;\\n', '\\tassign flash_clk = config_en ? xfer_clk : config_clk;\\n', '\\n', '\\tassign flash_io0_oe = config_en ? xfer_io0_oe : config_oe[0];\\n', '\\tassign flash_io1_oe = config_en ? xfer_io1_oe : config_oe[1];\\n', '\\tassign flash_io2_oe = config_en ? xfer_io2_oe : config_oe[2];\\n', '\\tassign flash_io3_oe = config_en ? xfer_io3_oe : config_oe[3];\\n', '\\n', '\\tassign flash_io0_do = config_en ? (config_ddr ? xfer_io0_90 : xfer_io0_do) : config_do[0];\\n', '\\tassign flash_io1_do = config_en ? (config_ddr ? xfer_io1_90 : xfer_io1_do) : config_do[1];\\n', '\\tassign flash_io2_do = config_en ? (config_ddr ? xfer_io2_90 : xfer_io2_do) : config_do[2];\\n', '\\tassign flash_io3_do = config_en ? (config_ddr ? xfer_io3_90 : xfer_io3_do) : config_do[3];\\n', '\\n', '\\twire xfer_dspi = din_ddr && !din_qspi;\\n', '\\twire xfer_ddr = din_ddr && din_qspi;\\n', '\\n', '\\tspimemio_xfer xfer (\\n', '\\t\\t.clk          (clk         ),\\n', '\\t\\t.resetn       (xfer_resetn ),\\n', '\\t\\t.din_valid    (din_valid   ),\\n', '\\t\\t.din_ready    (din_ready   ),\\n', '\\t\\t.din_data     (din_data    ),\\n', '\\t\\t.din_tag      (din_tag     ),\\n', '\\t\\t.din_cont     (din_cont    ),\\n', '\\t\\t.din_dspi     (xfer_dspi   ),\\n', '\\t\\t.din_qspi     (din_qspi    ),\\n', '\\t\\t.din_ddr      (xfer_ddr    ),\\n', '\\t\\t.din_rd       (din_rd      ),\\n', '\\t\\t.dout_valid   (dout_valid  ),\\n', '\\t\\t.dout_data    (dout_data   ),\\n', '\\t\\t.dout_tag     (dout_tag    ),\\n', '\\t\\t.flash_csb    (xfer_csb    ),\\n', '\\t\\t.flash_clk    (xfer_clk    ),\\n', '\\t\\t.flash_io0_oe (xfer_io0_oe ),\\n', '\\t\\t.flash_io1_oe (xfer_io1_oe ),\\n', '\\t\\t.flash_io2_oe (xfer_io2_oe ),\\n', '\\t\\t.flash_io3_oe (xfer_io3_oe ),\\n', '\\t\\t.flash_io0_do (xfer_io0_do ),\\n', '\\t\\t.flash_io1_do (xfer_io1_do ),\\n', '\\t\\t.flash_io2_do (xfer_io2_do ),\\n', '\\t\\t.flash_io3_do (xfer_io3_do ),\\n', '\\t\\t.flash_io0_di (flash_io0_di),\\n', '\\t\\t.flash_io1_di (flash_io1_di),\\n', '\\t\\t.flash_io2_di (flash_io2_di),\\n', '\\t\\t.flash_io3_di (flash_io3_di)\\n', '\\t);\\n', '\\n', '\\treg [3:0] state;\\n', '\\n', '\\talways @(posedge clk) begin\\n', '\\t\\txfer_resetn <= 1;\\n', '\\t\\tdin_valid <= 0;\\n', '\\n', '\\t\\tif (!resetn || softreset) begin\\n', '\\t\\t\\tstate <= 0;\\n', '\\t\\t\\txfer_resetn <= 0;\\n', '\\t\\t\\trd_valid <= 0;\\n', '\\t\\t\\tdin_tag <= 0;\\n', '\\t\\t\\tdin_cont <= 0;\\n', '\\t\\t\\tdin_qspi <= 0;\\n', '\\t\\t\\tdin_ddr <= 0;\\n', '\\t\\t\\tdin_rd <= 0;\\n', '\\t\\tend else begin\\n', '\\t\\t\\tif (dout_valid && dout_tag == 1) buffer[ 7: 0] <= dout_data;\\n', '\\t\\t\\tif (dout_valid && dout_tag == 2) buffer[15: 8] <= dout_data;\\n', '\\t\\t\\tif (dout_valid && dout_tag == 3) buffer[23:16] <= dout_data;\\n', '\\t\\t\\tif (dout_valid && dout_tag == 4) begin\\n', '\\t\\t\\t\\trdata <= {dout_data, buffer};\\n', '\\t\\t\\t\\trd_addr <= rd_inc ? rd_addr + 4 : addr;\\n', '\\t\\t\\t\\trd_valid <= 1;\\n', '\\t\\t\\t\\trd_wait <= rd_inc;\\n', '\\t\\t\\t\\trd_inc <= 1;\\n', '\\t\\t\\tend\\n', '\\n', '\\t\\t\\tif (valid)\\n', '\\t\\t\\t\\trd_wait <= 0;\\n', '\\n', '\\t\\t\\tcase (state)\\n', '\\t\\t\\t\\t0: begin\\n', '\\t\\t\\t\\t\\tdin_valid <= 1;\\n', \"\\t\\t\\t\\t\\tdin_data <= 8'h ff;\\n\", '\\t\\t\\t\\t\\tdin_tag <= 0;\\n', '\\t\\t\\t\\t\\tif (din_ready) begin\\n', '\\t\\t\\t\\t\\t\\tdin_valid <= 0;\\n', '\\t\\t\\t\\t\\t\\tstate <= 1;\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\t1: begin\\n', '\\t\\t\\t\\t\\tif (dout_valid) begin\\n', '\\t\\t\\t\\t\\t\\txfer_resetn <= 0;\\n', '\\t\\t\\t\\t\\t\\tstate <= 2;\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\t2: begin\\n', '\\t\\t\\t\\t\\tdin_valid <= 1;\\n', \"\\t\\t\\t\\t\\tdin_data <= 8'h ab;\\n\", '\\t\\t\\t\\t\\tdin_tag <= 0;\\n', '\\t\\t\\t\\t\\tif (din_ready) begin\\n', '\\t\\t\\t\\t\\t\\tdin_valid <= 0;\\n', '\\t\\t\\t\\t\\t\\tstate <= 3;\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\t3: begin\\n', '\\t\\t\\t\\t\\tif (dout_valid) begin\\n', '\\t\\t\\t\\t\\t\\txfer_resetn <= 0;\\n', '\\t\\t\\t\\t\\t\\tstate <= 4;\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\t4: begin\\n', '\\t\\t\\t\\t\\trd_inc <= 0;\\n', '\\t\\t\\t\\t\\tdin_valid <= 1;\\n', '\\t\\t\\t\\t\\tdin_tag <= 0;\\n', '\\t\\t\\t\\t\\tcase ({config_ddr, config_qspi})\\n', \"\\t\\t\\t\\t\\t\\t2'b11: din_data <= 8'h ED;\\n\", \"\\t\\t\\t\\t\\t\\t2'b01: din_data <= 8'h EB;\\n\", \"\\t\\t\\t\\t\\t\\t2'b10: din_data <= 8'h BB;\\n\", \"\\t\\t\\t\\t\\t\\t2'b00: din_data <= 8'h 03;\\n\", '\\t\\t\\t\\t\\tendcase\\n', '\\t\\t\\t\\t\\tif (din_ready) begin\\n', '\\t\\t\\t\\t\\t\\tdin_valid <= 0;\\n', '\\t\\t\\t\\t\\t\\tstate <= 5;\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\t5: begin\\n', '\\t\\t\\t\\t\\tif (valid && !ready) begin\\n', '\\t\\t\\t\\t\\t\\tdin_valid <= 1;\\n', '\\t\\t\\t\\t\\t\\tdin_tag <= 0;\\n', '\\t\\t\\t\\t\\t\\tdin_data <= addr[23:16];\\n', '\\t\\t\\t\\t\\t\\tdin_qspi <= config_qspi;\\n', '\\t\\t\\t\\t\\t\\tdin_ddr <= config_ddr;\\n', '\\t\\t\\t\\t\\t\\tif (din_ready) begin\\n', '\\t\\t\\t\\t\\t\\t\\tdin_valid <= 0;\\n', '\\t\\t\\t\\t\\t\\t\\tstate <= 6;\\n', '\\t\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\t6: begin\\n', '\\t\\t\\t\\t\\tdin_valid <= 1;\\n', '\\t\\t\\t\\t\\tdin_tag <= 0;\\n', '\\t\\t\\t\\t\\tdin_data <= addr[15:8];\\n', '\\t\\t\\t\\t\\tif (din_ready) begin\\n', '\\t\\t\\t\\t\\t\\tdin_valid <= 0;\\n', '\\t\\t\\t\\t\\t\\tstate <= 7;\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\t7: begin\\n', '\\t\\t\\t\\t\\tdin_valid <= 1;\\n', '\\t\\t\\t\\t\\tdin_tag <= 0;\\n', '\\t\\t\\t\\t\\tdin_data <= addr[7:0];\\n', '\\t\\t\\t\\t\\tif (din_ready) begin\\n', '\\t\\t\\t\\t\\t\\tdin_valid <= 0;\\n', '\\t\\t\\t\\t\\t\\tdin_data <= 0;\\n', '\\t\\t\\t\\t\\t\\tstate <= config_qspi || config_ddr ? 8 : 9;\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\t8: begin\\n', '\\t\\t\\t\\t\\tdin_valid <= 1;\\n', '\\t\\t\\t\\t\\tdin_tag <= 0;\\n', \"\\t\\t\\t\\t\\tdin_data <= config_cont ? 8'h A5 : 8'h FF;\\n\", '\\t\\t\\t\\t\\tif (din_ready) begin\\n', '\\t\\t\\t\\t\\t\\tdin_rd <= 1;\\n', '\\t\\t\\t\\t\\t\\tdin_data <= config_dummy;\\n', '\\t\\t\\t\\t\\t\\tdin_valid <= 0;\\n', '\\t\\t\\t\\t\\t\\tstate <= 9;\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\t9: begin\\n', '\\t\\t\\t\\t\\tdin_valid <= 1;\\n', '\\t\\t\\t\\t\\tdin_tag <= 1;\\n', '\\t\\t\\t\\t\\tif (din_ready) begin\\n', '\\t\\t\\t\\t\\t\\tdin_valid <= 0;\\n', '\\t\\t\\t\\t\\t\\tstate <= 10;\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\t10: begin\\n', '\\t\\t\\t\\t\\tdin_valid <= 1;\\n', \"\\t\\t\\t\\t\\tdin_data <= 8'h 00;\\n\", '\\t\\t\\t\\t\\tdin_tag <= 2;\\n', '\\t\\t\\t\\t\\tif (din_ready) begin\\n', '\\t\\t\\t\\t\\t\\tdin_valid <= 0;\\n', '\\t\\t\\t\\t\\t\\tstate <= 11;\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\t11: begin\\n', '\\t\\t\\t\\t\\tdin_valid <= 1;\\n', '\\t\\t\\t\\t\\tdin_tag <= 3;\\n', '\\t\\t\\t\\t\\tif (din_ready) begin\\n', '\\t\\t\\t\\t\\t\\tdin_valid <= 0;\\n', '\\t\\t\\t\\t\\t\\tstate <= 12;\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\t12: begin\\n', '\\t\\t\\t\\t\\tif (!rd_wait || valid) begin\\n', '\\t\\t\\t\\t\\t\\tdin_valid <= 1;\\n', '\\t\\t\\t\\t\\t\\tdin_tag <= 4;\\n', '\\t\\t\\t\\t\\t\\tif (din_ready) begin\\n', '\\t\\t\\t\\t\\t\\t\\tdin_valid <= 0;\\n', '\\t\\t\\t\\t\\t\\t\\tstate <= 9;\\n', '\\t\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\tendcase\\n', '\\n', '\\t\\t\\tif (jump) begin\\n', '\\t\\t\\t\\trd_inc <= 0;\\n', '\\t\\t\\t\\trd_valid <= 0;\\n', '\\t\\t\\t\\txfer_resetn <= 0;\\n', '\\t\\t\\t\\tif (config_cont) begin\\n', '\\t\\t\\t\\t\\tstate <= 5;\\n', '\\t\\t\\t\\tend else begin\\n', '\\t\\t\\t\\t\\tstate <= 4;\\n', '\\t\\t\\t\\t\\tdin_qspi <= 0;\\n', '\\t\\t\\t\\t\\tdin_ddr <= 0;\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\t\\tdin_rd <= 0;\\n', '\\t\\t\\tend\\n', '\\t\\tend\\n', '\\tend\\n', 'endmodule\\n', '\\n', 'module spimemio_xfer (\\n', '\\tinput clk, resetn,\\n', '\\n', '\\tinput            din_valid,\\n', '\\toutput           din_ready,\\n', '\\tinput      [7:0] din_data,\\n', '\\tinput      [3:0] din_tag,\\n', '\\tinput            din_cont,\\n', '\\tinput            din_dspi,\\n', '\\tinput            din_qspi,\\n', '\\tinput            din_ddr,\\n', '\\tinput            din_rd,\\n', '\\n', '\\toutput           dout_valid,\\n', '\\toutput     [7:0] dout_data,\\n', '\\toutput     [3:0] dout_tag,\\n', '\\n', '\\toutput reg flash_csb,\\n', '\\toutput reg flash_clk,\\n', '\\n', '\\toutput reg flash_io0_oe,\\n', '\\toutput reg flash_io1_oe,\\n', '\\toutput reg flash_io2_oe,\\n', '\\toutput reg flash_io3_oe,\\n', '\\n', '\\toutput reg flash_io0_do,\\n', '\\toutput reg flash_io1_do,\\n', '\\toutput reg flash_io2_do,\\n', '\\toutput reg flash_io3_do,\\n', '\\n', '\\tinput      flash_io0_di,\\n', '\\tinput      flash_io1_di,\\n', '\\tinput      flash_io2_di,\\n', '\\tinput      flash_io3_di\\n', ');\\n', '\\treg [7:0] obuffer;\\n', '\\treg [7:0] ibuffer;\\n', '\\n', '\\treg [3:0] count;\\n', '\\treg [3:0] dummy_count;\\n', '\\n', '\\treg xfer_cont;\\n', '\\treg xfer_dspi;\\n', '\\treg xfer_qspi;\\n', '\\treg xfer_ddr;\\n', '\\treg xfer_ddr_q;\\n', '\\treg xfer_rd;\\n', '\\treg [3:0] xfer_tag;\\n', '\\treg [3:0] xfer_tag_q;\\n', '\\n', '\\treg [7:0] next_obuffer;\\n', '\\treg [7:0] next_ibuffer;\\n', '\\treg [3:0] next_count;\\n', '\\n', '\\treg fetch;\\n', '\\treg next_fetch;\\n', '\\treg last_fetch;\\n', '\\n', '\\talways @(posedge clk) begin\\n', '\\t\\txfer_ddr_q <= xfer_ddr;\\n', '\\t\\txfer_tag_q <= xfer_tag;\\n', '\\tend\\n', '\\n', '\\tassign din_ready = din_valid && resetn && next_fetch;\\n', '\\n', '\\tassign dout_valid = (xfer_ddr_q ? fetch && !last_fetch : next_fetch && !fetch) && resetn;\\n', '\\tassign dout_data = ibuffer;\\n', '\\tassign dout_tag = xfer_tag_q;\\n', '\\n', '\\talways @* begin\\n', '\\t\\tflash_io0_oe = 0;\\n', '\\t\\tflash_io1_oe = 0;\\n', '\\t\\tflash_io2_oe = 0;\\n', '\\t\\tflash_io3_oe = 0;\\n', '\\n', '\\t\\tflash_io0_do = 0;\\n', '\\t\\tflash_io1_do = 0;\\n', '\\t\\tflash_io2_do = 0;\\n', '\\t\\tflash_io3_do = 0;\\n', '\\n', '\\t\\tnext_obuffer = obuffer;\\n', '\\t\\tnext_ibuffer = ibuffer;\\n', '\\t\\tnext_count = count;\\n', '\\t\\tnext_fetch = 0;\\n', '\\n', '\\t\\tif (dummy_count == 0) begin\\n', '\\t\\t\\tcasez ({xfer_ddr, xfer_qspi, xfer_dspi})\\n', \"\\t\\t\\t\\t3'b 000: begin\\n\", '\\t\\t\\t\\t\\tflash_io0_oe = 1;\\n', '\\t\\t\\t\\t\\tflash_io0_do = obuffer[7];\\n', '\\n', '\\t\\t\\t\\t\\tif (flash_clk) begin\\n', \"\\t\\t\\t\\t\\t\\tnext_obuffer = {obuffer[6:0], 1'b 0};\\n\", '\\t\\t\\t\\t\\t\\tnext_count = count - |count;\\n', '\\t\\t\\t\\t\\tend else begin\\n', '\\t\\t\\t\\t\\t\\tnext_ibuffer = {ibuffer[6:0], flash_io1_di};\\n', '\\t\\t\\t\\t\\tend\\n', '\\n', '\\t\\t\\t\\t\\tnext_fetch = (next_count == 0);\\n', '\\t\\t\\t\\tend\\n', \"\\t\\t\\t\\t3'b 01?: begin\\n\", '\\t\\t\\t\\t\\tflash_io0_oe = !xfer_rd;\\n', '\\t\\t\\t\\t\\tflash_io1_oe = !xfer_rd;\\n', '\\t\\t\\t\\t\\tflash_io2_oe = !xfer_rd;\\n', '\\t\\t\\t\\t\\tflash_io3_oe = !xfer_rd;\\n', '\\n', '\\t\\t\\t\\t\\tflash_io0_do = obuffer[4];\\n', '\\t\\t\\t\\t\\tflash_io1_do = obuffer[5];\\n', '\\t\\t\\t\\t\\tflash_io2_do = obuffer[6];\\n', '\\t\\t\\t\\t\\tflash_io3_do = obuffer[7];\\n', '\\n', '\\t\\t\\t\\t\\tif (flash_clk) begin\\n', \"\\t\\t\\t\\t\\t\\tnext_obuffer = {obuffer[3:0], 4'b 0000};\\n\", \"\\t\\t\\t\\t\\t\\tnext_count = count - {|count, 2'b00};\\n\", '\\t\\t\\t\\t\\tend else begin\\n', '\\t\\t\\t\\t\\t\\tnext_ibuffer = {ibuffer[3:0], flash_io3_di, flash_io2_di, flash_io1_di, flash_io0_di};\\n', '\\t\\t\\t\\t\\tend\\n', '\\n', '\\t\\t\\t\\t\\tnext_fetch = (next_count == 0);\\n', '\\t\\t\\t\\tend\\n', \"\\t\\t\\t\\t3'b 11?: begin\\n\", '\\t\\t\\t\\t\\tflash_io0_oe = !xfer_rd;\\n', '\\t\\t\\t\\t\\tflash_io1_oe = !xfer_rd;\\n', '\\t\\t\\t\\t\\tflash_io2_oe = !xfer_rd;\\n', '\\t\\t\\t\\t\\tflash_io3_oe = !xfer_rd;\\n', '\\n', '\\t\\t\\t\\t\\tflash_io0_do = obuffer[4];\\n', '\\t\\t\\t\\t\\tflash_io1_do = obuffer[5];\\n', '\\t\\t\\t\\t\\tflash_io2_do = obuffer[6];\\n', '\\t\\t\\t\\t\\tflash_io3_do = obuffer[7];\\n', '\\n', \"\\t\\t\\t\\t\\tnext_obuffer = {obuffer[3:0], 4'b 0000};\\n\", '\\t\\t\\t\\t\\tnext_ibuffer = {ibuffer[3:0], flash_io3_di, flash_io2_di, flash_io1_di, flash_io0_di};\\n', \"\\t\\t\\t\\t\\tnext_count = count - {|count, 2'b00};\\n\", '\\n', '\\t\\t\\t\\t\\tnext_fetch = (next_count == 0);\\n', '\\t\\t\\t\\tend\\n', \"\\t\\t\\t\\t3'b ??1: begin\\n\", '\\t\\t\\t\\t\\tflash_io0_oe = !xfer_rd;\\n', '\\t\\t\\t\\t\\tflash_io1_oe = !xfer_rd;\\n', '\\n', '\\t\\t\\t\\t\\tflash_io0_do = obuffer[6];\\n', '\\t\\t\\t\\t\\tflash_io1_do = obuffer[7];\\n', '\\n', '\\t\\t\\t\\t\\tif (flash_clk) begin\\n', \"\\t\\t\\t\\t\\t\\tnext_obuffer = {obuffer[5:0], 2'b 00};\\n\", \"\\t\\t\\t\\t\\t\\tnext_count = count - {|count, 1'b0};\\n\", '\\t\\t\\t\\t\\tend else begin\\n', '\\t\\t\\t\\t\\t\\tnext_ibuffer = {ibuffer[5:0], flash_io1_di, flash_io0_di};\\n', '\\t\\t\\t\\t\\tend\\n', '\\n', '\\t\\t\\t\\t\\tnext_fetch = (next_count == 0);\\n', '\\t\\t\\t\\tend\\n', '\\t\\t\\tendcase\\n', '\\t\\tend\\n', '\\tend\\n', '\\n', '\\talways @(posedge clk) begin\\n', '\\t\\tif (!resetn) begin\\n', '\\t\\t\\tfetch <= 1;\\n', '\\t\\t\\tlast_fetch <= 1;\\n', '\\t\\t\\tflash_csb <= 1;\\n', '\\t\\t\\tflash_clk <= 0;\\n', '\\t\\t\\tcount <= 0;\\n', '\\t\\t\\tdummy_count <= 0;\\n', '\\t\\t\\txfer_tag <= 0;\\n', '\\t\\t\\txfer_cont <= 0;\\n', '\\t\\t\\txfer_dspi <= 0;\\n', '\\t\\t\\txfer_qspi <= 0;\\n', '\\t\\t\\txfer_ddr <= 0;\\n', '\\t\\t\\txfer_rd <= 0;\\n', '\\t\\tend else begin\\n', '\\t\\t\\tfetch <= next_fetch;\\n', '\\t\\t\\tlast_fetch <= xfer_ddr ? fetch : 1;\\n', '\\t\\t\\tif (dummy_count) begin\\n', '\\t\\t\\t\\tflash_clk <= !flash_clk && !flash_csb;\\n', '\\t\\t\\t\\tdummy_count <= dummy_count - flash_clk;\\n', '\\t\\t\\tend else\\n', '\\t\\t\\tif (count) begin\\n', '\\t\\t\\t\\tflash_clk <= !flash_clk && !flash_csb;\\n', '\\t\\t\\t\\tobuffer <= next_obuffer;\\n', '\\t\\t\\t\\tibuffer <= next_ibuffer;\\n', '\\t\\t\\t\\tcount <= next_count;\\n', '\\t\\t\\tend\\n', '\\t\\t\\tif (din_valid && din_ready) begin\\n', '\\t\\t\\t\\tflash_csb <= 0;\\n', '\\t\\t\\t\\tflash_clk <= 0;\\n', '\\n', '\\t\\t\\t\\tcount <= 8;\\n', '\\t\\t\\t\\tdummy_count <= din_rd ? din_data : 0;\\n', '\\t\\t\\t\\tobuffer <= din_data;\\n', '\\n', '\\t\\t\\t\\txfer_tag <= din_tag;\\n', '\\t\\t\\t\\txfer_cont <= din_cont;\\n', '\\t\\t\\t\\txfer_dspi <= din_dspi;\\n', '\\t\\t\\t\\txfer_qspi <= din_qspi;\\n', '\\t\\t\\t\\txfer_ddr <= din_ddr;\\n', '\\t\\t\\t\\txfer_rd <= din_rd;\\n', '\\t\\t\\tend\\n', '\\t\\tend\\n', '\\tend\\n', 'endmodule\\n']"}
